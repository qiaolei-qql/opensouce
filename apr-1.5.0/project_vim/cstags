cscope 15 $HOME/virtualboxshare/dpan/git_workspace/opensouce/apr-1.5.0 -q 0000007460 0001624907
	@atomic/netware/apr_atomic.c

17 
	~"≠r.h
"

18 
	~"≠r_©omic.h
"

20 
	~<°dlib.h
>

22 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
poﬁ
)

24  
APR_SUCCESS
;

25 
	}
}

27 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

29  
	`©omic_xchgadd
((*)
mem
,()
vÆ
);

30 
	}
}

32 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

34 
	`©omic_sub
((*)
mem
,()
vÆ
);

35 
	}
}

37 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

39  
	`©omic_xchgadd
((*)
mem
, 1);

40 
	}
}

42 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

44 *
mem
 = 
vÆ
;

45 
	}
}

47 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

49  *
mem
;

50 
	}
}

52 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,≠r_uöt32_à
cmp
)

54  
	`©omic_cmpxchg
((*)
mem
,()
cmp
,()
wôh
);

55 
	}
}

57 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

59  
	`©omic_xchg
((*)
mem
,()
vÆ
);

60 
	}
}

62 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

64  (
	`©omic_xchgadd
((*)
mem
, 0xFFFFFFFF) - 1);

65 
	}
}

67 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

69  (*)
	`©omic_cmpxchg
((*)
mem
,()
cmp
,()
wôh
);

70 
	}
}

72 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

74  (*)
	`©omic_xchg
((*)
mem
,()
wôh
);

75 
	}
}

	@atomic/os390/atomic.c

18 
	~"≠r.h
"

19 
	~"≠r_©omic.h
"

21 
	~<°dlib.h
>

23 
≠r_°©us_t
 
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

25  
APR_SUCCESS
;

26 
	}
}

28 
≠r_uöt32_t
 
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

30 
≠r_uöt32_t
 
ﬁd
, 
√w_vÆ
;

32 
ﬁd
 = *
mem
;

34 
√w_vÆ
 = 
ﬁd
 + 
vÆ
;

35 } 
	`__cs
(&
ﬁd
, (
cs_t
 *)
mem
, 
√w_vÆ
));

36  
ﬁd
;

37 
	}
}

39 
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

41 
≠r_uöt32_t
 
ﬁd
, 
√w_vÆ
;

43 
ﬁd
 = *
mem
;

45 
√w_vÆ
 = 
ﬁd
 - 
vÆ
;

46 } 
	`__cs
(&
ﬁd
, (
cs_t
 *)
mem
, 
√w_vÆ
));

47 
	}
}

49 
≠r_uöt32_t
 
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

51  
	`≠r_©omic_add32
(
mem
, 1);

52 
	}
}

54 
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

56 
≠r_uöt32_t
 
ﬁd
, 
√w_vÆ
;

58 
ﬁd
 = *
mem
;

60 
√w_vÆ
 = 
ﬁd
 - 1;

61 } 
	`__cs
(&
ﬁd
, (
cs_t
 *)
mem
, 
√w_vÆ
));

63  
√w_vÆ
 != 0;

64 
	}
}

66 
≠r_uöt32_t
 
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

68  *
mem
;

69 
	}
}

71 
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

73 *
mem
 = 
vÆ
;

74 
	}
}

76 
≠r_uöt32_t
 
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
sw≠
,

77 
≠r_uöt32_t
 
cmp
)

79 
≠r_uöt32_t
 
ﬁd
 = 
cmp
;

81 
	`__cs
(&
ﬁd
, (
cs_t
 *)
mem
, 
sw≠
);

82  
ﬁd
;

83 
	}
}

85 #i‡
APR_SIZEOF_VOIDP
 == 4

86 *
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem_±r
,

87 *
sw≠_±r
,

88 c⁄° *
cmp_±r
)

90 
	`__cs1
(&
cmp_±r
,

91 
mem_±r
,

92 &
sw≠_±r
);

93  (*)
cmp_±r
;

94 
	}
}

95 #ñi‡
APR_SIZEOF_VOIDP
 == 8

96 *
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem_±r
,

97 *
sw≠_±r
,

98 c⁄° *
cmp_±r
)

100 
	`__csg
(&
cmp_±r
,

101 
mem_±r
,

102 &
sw≠_±r
);

103  (*)
cmp_±r
;

104 
	}
}

106 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


109 
≠r_uöt32_t
 
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

111 
≠r_uöt32_t
 
ﬁd
, 
√w_vÆ
;

113 
ﬁd
 = *
mem
;

115 
√w_vÆ
 = 
vÆ
;

116 } 
	`__cs
(&
ﬁd
, (
cs_t
 *)
mem
, 
√w_vÆ
));

118  
ﬁd
;

119 
	}
}

121 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem_±r
, *
√w_±r
)

123 *
ﬁd_±r
;

125 
ﬁd_±r
 = *(**)
mem_±r
;

126 #i‡
APR_SIZEOF_VOIDP
 == 4

128 } 
	`__cs1
(&
ﬁd_±r
, 
mem_±r
, &
√w_±r
));

129 #ñi‡
APR_SIZEOF_VOIDP
 == 8

131 } 
	`__csg
(&
ﬁd_±r
, 
mem_±r
, &
√w_±r
));

133 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


136  
ﬁd_±r
;

137 
	}
}

	@atomic/unix/builtins.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_BUILTINS


21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

23  
APR_SUCCESS
;

24 
	}
}

26 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

28  *
mem
;

29 
	}
}

31 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

33 *
mem
 = 
vÆ
;

34 
	}
}

36 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

38  
	`__sync_„tch_™d_add
(
mem
, 
vÆ
);

39 
	}
}

41 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

43 
	`__sync_„tch_™d_sub
(
mem
, 
vÆ
);

44 
	}
}

46 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

48  
	`__sync_„tch_™d_add
(
mem
, 1);

49 
	}
}

51 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

53  
	`__sync_sub_™d_„tch
(
mem
, 1);

54 
	}
}

56 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

57 
≠r_uöt32_t
 
cmp
)

59  
	`__sync_vÆ_com∑ª_™d_sw≠
(
mem
, 
cmp
, 
wôh
);

60 
	}
}

62 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

64 
	`__sync_synchr⁄ize
();

66  
	`__sync_lock_ã°_™d_£t
(
mem
, 
vÆ
);

67 
	}
}

69 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

71  (*Ë
	`__sync_vÆ_com∑ª_™d_sw≠
(
mem
, 
cmp
, 
wôh
);

72 
	}
}

74 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

76 
	`__sync_synchr⁄ize
();

78  (*Ë
	`__sync_lock_ã°_™d_£t
(
mem
, 
wôh
);

79 
	}
}

	@atomic/unix/ia32.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_IA32


21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

23  
APR_SUCCESS
;

24 
	}
}

26 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

28  *
mem
;

29 
	}
}

31 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

33 *
mem
 = 
vÆ
;

34 
	}
}

36 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

38 
asm
 volatile ("lock; xaddl %0,%1"

39 : "Ù" (
vÆ
), "=m" (*
mem
)

40 : "0" (
vÆ
), "m" (*
mem
)

42  
vÆ
;

43 
	}
}

45 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

47 
asm
 volatile ("lock; subl %1, %0"

49 : "m" (*(
mem
)), "r" (
vÆ
)

51 
	}
}

53 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

55  
	`≠r_©omic_add32
(
mem
, 1);

56 
	}
}

58 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

60 
¥ev
;

62 
asm
 volatile ("lock; decl %0; setnz %1"

63 : "=m" (*
mem
), "=qm" (
¥ev
)

64 : "m" (*
mem
)

67  
¥ev
;

68 
	}
}

70 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

71 
≠r_uöt32_t
 
cmp
)

73 
≠r_uöt32_t
 
¥ev
;

75 
asm
 volatile ("lock; cmpxchgl %1, %2"

76 : "˜" (
¥ev
)

77 : "r" (
wôh
), "m" (*(
mem
)), "0"(
cmp
)

79  
¥ev
;

80 
	}
}

82 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

84 
≠r_uöt32_t
 
¥ev
 = 
vÆ
;

86 
asm
 volatile ("xchgl %0, %1"

87 : "Ù" (
¥ev
), "+m" (*
mem
)

88 : "0" (
¥ev
));

89  
¥ev
;

90 
	}
}

92 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

94 *
¥ev
;

95 #i‡
APR_SIZEOF_VOIDP
 == 4

96 
asm
 volatile ("lock; cmpxchgl %2, %1"

97 : "˜" (
¥ev
), "=m" (*
mem
)

98 : "r" (
wôh
), "m" (*
mem
), "0" (
cmp
));

99 #ñi‡
APR_SIZEOF_VOIDP
 == 8

100 
asm
 volatile ("lock; cmpxchgq %q2, %1"

101 : "˜" (
¥ev
), "=m" (*
mem
)

102 : "r" (()
wôh
), "m" (*
mem
),

103 "0" (()
cmp
));

105 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


107  
¥ev
;

108 
	}
}

110 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

112 *
¥ev
;

113 #i‡
APR_SIZEOF_VOIDP
 == 4

114 
asm
 volatile ("xchgl %2, %1"

115 : "˜" (
¥ev
), "+m" (*
mem
)

116 : "0" (
wôh
));

117 #ñi‡
APR_SIZEOF_VOIDP
 == 8

118 
asm
 volatile ("xchgq %q2, %1"

119 : "˜" (
¥ev
), "+m" (*
mem
)

120 : "0" (
wôh
));

122 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


124  
¥ev
;

125 
	}
}

	@atomic/unix/mutex.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_GENERIC


21 
	~<°dlib.h
>

23 #i‡
APR_HAS_THREADS


24 
	#DECLARE_MUTEX_LOCKED
(
«me
, 
mem
) \

25 
≠r_thªad_muãx_t
 *
«me
 = 
	`muãx_hash
(
mem
)

	)

26 
	#MUTEX_UNLOCK
(
«me
) \

28 i‡(
	`≠r_thªad_muãx_u∆ock
(
«me
Ë!
APR_SUCCESS
) \

29 
	`ab‹t
(); \

30 } 0)

	)

32 
	#DECLARE_MUTEX_LOCKED
(
«me
, 
mem
)

	)

33 
	#MUTEX_UNLOCK
(
«me
)

	)

34 #w¨nög 
Be
 
w¨√d
: 
usög
 
°ubs
 
Æl
 
©omic
 
›î©i⁄s


37 #i‡
APR_HAS_THREADS


39 
≠r_thªad_muãx_t
 **
	ghash_muãx
;

41 
	#NUM_ATOMIC_HASH
 7

	)

43 
	#ATOMIC_HASH
(
x
Ë()((()(x)>>2)%()
NUM_ATOMIC_HASH
)

	)

45 
≠r_°©us_t
 
	$©omic_˛ónup
(*
d©a
)

47 i‡(
hash_muãx
 =
d©a
)

48 
hash_muãx
 = 
NULL
;

50  
APR_SUCCESS
;

51 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

55 
i
;

56 
≠r_°©us_t
 
rv
;

58 i‡(
hash_muãx
 !
NULL
)

59  
APR_SUCCESS
;

61 
hash_muãx
 = 
	`≠r_∑Œoc
(
p
, (
≠r_thªad_muãx_t
*Ë* 
NUM_ATOMIC_HASH
);

62 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
hash_muãx
, 
©omic_˛ónup
,

63 
≠r_poﬁ_˛ónup_nuŒ
);

65 
i
 = 0; i < 
NUM_ATOMIC_HASH
; i++) {

66 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&(
hash_muãx
[
i
]),

67 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

68 i‡(
rv
 !
APR_SUCCESS
) {

69  
rv
;

73  
APR_SUCCESS
;

74 
	}
}

76 
APR_INLINE
 
≠r_thªad_muãx_t
 *
	$muãx_hash
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

78 
≠r_thªad_muãx_t
 *
muãx
 = 
hash_muãx
[
	`ATOMIC_HASH
(
mem
)];

80 i‡(
	`≠r_thªad_muãx_lock
(
muãx
Ë!
APR_SUCCESS
) {

81 
	`ab‹t
();

84  
muãx
;

85 
	}
}

89 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

91  
APR_SUCCESS
;

92 
	}
}

96 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

98  *
mem
;

99 
	}
}

101 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

103 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

105 *
mem
 = 
vÆ
;

107 
	`MUTEX_UNLOCK
(
muãx
);

108 
	}
}

110 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

112 
≠r_uöt32_t
 
ﬁd_vÆue
;

113 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

115 
ﬁd_vÆue
 = *
mem
;

116 *
mem
 +
vÆ
;

118 
	`MUTEX_UNLOCK
(
muãx
);

120  
ﬁd_vÆue
;

121 
	}
}

123 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

125 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

126 *
mem
 -
vÆ
;

127 
	`MUTEX_UNLOCK
(
muãx
);

128 
	}
}

130 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

132  
	`≠r_©omic_add32
(
mem
, 1);

133 
	}
}

135 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

137 
≠r_uöt32_t
 
√w
;

138 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

140 (*
mem
)--;

141 
√w
 = *
mem
;

143 
	`MUTEX_UNLOCK
(
muãx
);

145  
√w
;

146 
	}
}

148 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

149 
≠r_uöt32_t
 
cmp
)

151 
≠r_uöt32_t
 
¥ev
;

152 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

154 
¥ev
 = *
mem
;

155 i‡(
¥ev
 =
cmp
) {

156 *
mem
 = 
wôh
;

159 
	`MUTEX_UNLOCK
(
muãx
);

161  
¥ev
;

162 
	}
}

164 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

166 
≠r_uöt32_t
 
¥ev
;

167 
	`DECLARE_MUTEX_LOCKED
(
muãx
, 
mem
);

169 
¥ev
 = *
mem
;

170 *
mem
 = 
vÆ
;

172 
	`MUTEX_UNLOCK
(
muãx
);

174  
¥ev
;

175 
	}
}

177 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

179 *
¥ev
;

180 
	`DECLARE_MUTEX_LOCKED
(
muãx
, *
mem
);

182 
¥ev
 = *(**)
mem
;

183 i‡(
¥ev
 =
cmp
) {

184 *
mem
 = 
wôh
;

187 
	`MUTEX_UNLOCK
(
muãx
);

189  
¥ev
;

190 
	}
}

192 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

194 *
¥ev
;

195 
	`DECLARE_MUTEX_LOCKED
(
muãx
, *
mem
);

197 
¥ev
 = *(**)
mem
;

198 *
mem
 = 
wôh
;

200 
	`MUTEX_UNLOCK
(
muãx
);

202  
¥ev
;

203 
	}
}

	@atomic/unix/ppc.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_PPC


21 #ifde‡
PPC405_ERRATA


22 
	#PPC405_ERR77_SYNC
 " sync\n"

	)

24 
	#PPC405_ERR77_SYNC


	)

27 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

29  
APR_SUCCESS
;

30 
	}
}

32 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

34  *
mem
;

35 
	}
}

37 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

39 *
mem
 = 
vÆ
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

44 
≠r_uöt32_t
 
¥ev
, 
ãmp
;

46 
asm
 volatile ("1:\n"

49 
PPC405_ERR77_SYNC


52 : "=&r" (
¥ev
), "=&r" (
ãmp
), "=m" (*
mem
)

53 : "b" (
mem
), "r" (
vÆ
)

56  
¥ev
;

57 
	}
}

59 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

61 
≠r_uöt32_t
 
ãmp
;

63 
asm
 volatile ("1:\n"

66 
PPC405_ERR77_SYNC


69 : "=&r" (
ãmp
), "=m" (*
mem
)

70 : "b" (
mem
), "r" (
vÆ
)

72 
	}
}

74 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

76 
≠r_uöt32_t
 
¥ev
;

78 
asm
 volatile ("1:\n"

81 
PPC405_ERR77_SYNC


85 : "=&b" (
¥ev
), "=m" (*
mem
)

86 : "b" (
mem
), "m" (*mem)

89  
¥ev
;

90 
	}
}

92 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

94 
≠r_uöt32_t
 
¥ev
;

96 
asm
 volatile ("1:\n"

99 
PPC405_ERR77_SYNC


102 : "=&b" (
¥ev
), "=m" (*
mem
)

103 : "b" (
mem
), "m" (*mem)

106  
¥ev
;

107 
	}
}

109 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

110 
≠r_uöt32_t
 
cmp
)

112 
≠r_uöt32_t
 
¥ev
;

114 
asm
 volatile ("1:\n"

118 
PPC405_ERR77_SYNC


122 : "=&r" (
¥ev
)

123 : "b" (
mem
), "r" (
wôh
), "r" (
cmp
)

126  
¥ev
;

127 
	}
}

129 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

131 
≠r_uöt32_t
 
¥ev
;

133 
asm
 volatile ("1:\n"

135 
PPC405_ERR77_SYNC


138 : "=&r" (
¥ev
)

139 : "b" (
mem
), "r" (
vÆ
)

142  
¥ev
;

143 
	}
}

145 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

147 *
¥ev
;

148 #i‡
APR_SIZEOF_VOIDP
 == 4

149 
asm
 volatile ("1:\n"

153 
PPC405_ERR77_SYNC


157 : "=&r" (
¥ev
)

158 : "b" (
mem
), "r" (
wôh
), "r" (
cmp
)

160 #ñi‡
APR_SIZEOF_VOIDP
 == 8

161 
asm
 volatile ("1:\n"

165 
PPC405_ERR77_SYNC


169 : "=&r" (
¥ev
)

170 : "b" (
mem
), "r" (
wôh
), "r" (
cmp
)

173 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


175  
¥ev
;

176 
	}
}

178 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

180 *
¥ev
;

181 #i‡
APR_SIZEOF_VOIDP
 == 4

182 
asm
 volatile ("1:\n"

184 
PPC405_ERR77_SYNC


188 : "=&r" (
¥ev
)

189 : "b" (
mem
), "r" (
wôh
)

191 #ñi‡
APR_SIZEOF_VOIDP
 == 8

192 
asm
 volatile ("1:\n"

194 
PPC405_ERR77_SYNC


198 : "=&r" (
¥ev
)

199 : "b" (
mem
), "r" (
wôh
)

202 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


204  
¥ev
;

205 
	}
}

	@atomic/unix/s390.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_S390


21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

23  
APR_SUCCESS
;

24 
	}
}

26 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

28  *
mem
;

29 
	}
}

31 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

33 *
mem
 = 
vÆ
;

34 
	}
}

36 
APR_INLINE
 
≠r_uöt32_t
 
	$©omic_add
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

38 
≠r_uöt32_t
 
¥ev
 = *
mem
, 
ãmp
;

40 
asm
 volatile ("loop_%=:\n"

45 : "+d" (
¥ev
), "+d" (
ãmp
), "=Q" (*
mem
)

46 : "d" (
vÆ
), "m" (*
mem
)

49  
¥ev
;

50 
	}
}

52 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

54  
	`©omic_add
(
mem
, 
vÆ
);

55 
	}
}

57 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

59  
	`©omic_add
(
mem
, 1);

60 
	}
}

62 
APR_INLINE
 
≠r_uöt32_t
 
	$©omic_sub
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

64 
≠r_uöt32_t
 
¥ev
 = *
mem
, 
ãmp
;

66 
asm
 volatile ("loop_%=:\n"

71 : "+d" (
¥ev
), "+d" (
ãmp
), "=Q" (*
mem
)

72 : "d" (
vÆ
), "m" (*
mem
)

75  
ãmp
;

76 
	}
}

78 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

80 
	`©omic_sub
(
mem
, 
vÆ
);

81 
	}
}

83 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

85  
	`©omic_sub
(
mem
, 1);

86 
	}
}

88 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

89 
≠r_uöt32_t
 
cmp
)

91 
asm
 volatile (" cs %0,%2,%1\n"

92 : "+d" (
cmp
), "=Q" (*
mem
)

93 : "d" (
wôh
), "m" (*
mem
)

96  
cmp
;

97 
	}
}

99 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

101 
≠r_uöt32_t
 
¥ev
 = *
mem
;

103 
asm
 volatile ("loop_%=:\n"

106 : "+d" (
¥ev
), "=Q" (*
mem
)

107 : "d" (
vÆ
), "m" (*
mem
)

110  
¥ev
;

111 
	}
}

113 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

115 *
¥ev
 = (*Ë
cmp
;

116 #i‡
APR_SIZEOF_VOIDP
 == 4

117 
asm
 volatile (" cs %0,%2,%1\n"

118 : "+d" (
¥ev
), "=Q" (*
mem
)

119 : "d" (
wôh
), "m" (*
mem
)

121 #ñi‡
APR_SIZEOF_VOIDP
 == 8

122 
asm
 volatile (" csg %0,%2,%1\n"

123 : "+d" (
¥ev
), "=Q" (*
mem
)

124 : "d" (
wôh
), "m" (*
mem
)

127 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


129  
¥ev
;

130 
	}
}

132 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

134 *
¥ev
 = (*Ë*
mem
;

135 #i‡
APR_SIZEOF_VOIDP
 == 4

136 
asm
 volatile ("loop_%=:\n"

139 : "+d" (
¥ev
), "=Q" (*
mem
)

140 : "d" (
wôh
), "m" (*
mem
)

142 #ñi‡
APR_SIZEOF_VOIDP
 == 8

143 
asm
 volatile ("loop_%=:\n"

146 : "+d" (
¥ev
), "=Q" (*
mem
)

147 : "d" (
wôh
), "m" (*
mem
)

150 #îr‹ 
APR_SIZEOF_VOIDP
 
vÆue
 
nŸ
 
suµ‹ãd


152  
¥ev
;

153 
	}
}

	@atomic/unix/solaris.c

17 
	~"≠r_¨ch_©omic.h
"

19 #ifde‡
USE_ATOMICS_SOLARIS


21 
	~<©omic.h
>

23 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

25  
APR_SUCCESS
;

26 
	}
}

28 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

30  *
mem
;

31 
	}
}

33 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

35 *
mem
 = 
vÆ
;

36 
	}
}

38 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

40  
	`©omic_add_32_nv
(
mem
, 
vÆ
) - val;

41 
	}
}

43 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

45 
	`©omic_add_32
(
mem
, -
vÆ
);

46 
	}
}

48 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

50  
	`©omic_öc_32_nv
(
mem
) - 1;

51 
	}
}

53 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

55  
	`©omic_dec_32_nv
(
mem
);

56 
	}
}

58 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

59 
≠r_uöt32_t
 
cmp
)

61  
	`©omic_ˇs_32
(
mem
, 
cmp
, 
wôh
);

62 
	}
}

64 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

66  
	`©omic_sw≠_32
(
mem
, 
vÆ
);

67 
	}
}

69 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

71  
	`©omic_ˇs_±r
(
mem
, (*Ë
cmp
, 
wôh
);

72 
	}
}

74 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

76  
	`©omic_sw≠_±r
(
mem
, 
wôh
);

77 
	}
}

	@atomic/win32/apr_atomic.c

17 
	~"≠r.h
"

18 
	~"≠r_©omic.h
"

19 
	~"≠r_thªad_muãx.h
"

21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
)

23  
APR_SUCCESS
;

24 
	}
}

30 
WINBASEAPI
 
	t≠r_uöt32_t
 (
	tWINAPI
 * 
	t≠r_©omic_wö32_±r_‚
)

31 (
	t≠r_uöt32_t
 volatile *);

32 
WINBASEAPI
 
	t≠r_uöt32_t
 (
	tWINAPI
 * 
	t≠r_©omic_wö32_±r_vÆ_‚
)

33 (
	t≠r_uöt32_t
 volatile *,

34 
	t≠r_uöt32_t
);

35 
WINBASEAPI
 
	t≠r_uöt32_t
 (
	tWINAPI
 * 
	t≠r_©omic_wö32_±r_vÆ_vÆ_‚
)

36 (
	t≠r_uöt32_t
 volatile *,

37 
	t≠r_uöt32_t
,ápr_uint32_t);

38 
WINBASEAPI
 * (
	tWINAPI
 * 
	t≠r_©omic_wö32_±r_±r_±r_‚
)

41 
WINBASEAPI
 * (
	tWINAPI
 * 
	t≠r_©omic_wö32_±r_±r_‚
)

45 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_add32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

47 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
))

48  
	`I¡îlockedExch™geAdd
(
mem
, 
vÆ
);

49 #ñi‡
	`deföed
(
__MINGW32__
)

50  
	`I¡îlockedExch™geAdd
((*)
mem
, 
vÆ
);

52  ((
≠r_©omic_wö32_±r_vÆ_‚
)
I¡îlockedExch™geAdd
)(
mem
, 
vÆ
);

54 
	}
}

57 #ifde‡
_MSC_VER


58 #¥agm®
w¨nög
(
dißbÀ
: 4146)

61 
	$APR_DECLARE
(Ë
	$≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

63 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
))

64 
	`I¡îlockedExch™geAdd
(
mem
, -
vÆ
);

65 #ñi‡
	`deföed
(
__MINGW32__
)

66 
	`I¡îlockedExch™geAdd
((*)
mem
, -
vÆ
);

68 ((
≠r_©omic_wö32_±r_vÆ_‚
)
I¡îlockedExch™geAdd
)(
mem
, -
vÆ
);

70 
	}
}

72 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_öc32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

75 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

76  
	`I¡îlockedIn¸emít
(
mem
) - 1;

77 #ñi‡
	`deföed
(
__MINGW32__
)

78  
	`I¡îlockedIn¸emít
((*)
mem
) - 1;

80  ((
≠r_©omic_wö32_±r_‚
)
I¡îlockedIn¸emít
)(
mem
) - 1;

82 
	}
}

84 
	$APR_DECLARE
(Ë
	$≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

86 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

87  
	`I¡îlockedDe¸emít
(
mem
);

88 #ñi‡
	`deföed
(
__MINGW32__
)

89  
	`I¡îlockedDe¸emít
((*)
mem
);

91  ((
≠r_©omic_wö32_±r_‚
)
I¡îlockedDe¸emít
)(
mem
);

93 
	}
}

95 
	$APR_DECLARE
(Ë
	$≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

97 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

98 
	`I¡îlockedExch™ge
(
mem
, 
vÆ
);

99 #ñi‡
	`deföed
(
__MINGW32__
)

100 
	`I¡îlockedExch™ge
((*)
mem
, 
vÆ
);

102 ((
≠r_©omic_wö32_±r_vÆ_‚
)
I¡îlockedExch™ge
)(
mem
, 
vÆ
);

104 
	}
}

106 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ªad32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
)

108  *
mem
;

109 
	}
}

111 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_ˇs32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
wôh
,

112 
≠r_uöt32_t
 
cmp
)

114 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

115  
	`I¡îlockedCom∑ªExch™ge
(
mem
, 
wôh
, 
cmp
);

116 #ñi‡
	`deföed
(
__MINGW32__
)

117  
	`I¡îlockedCom∑ªExch™ge
((*)
mem
, 
wôh
, 
cmp
);

119  ((
≠r_©omic_wö32_±r_vÆ_vÆ_‚
)
I¡îlockedCom∑ªExch™ge
)(
mem
, 
wôh
, 
cmp
);

121 
	}
}

123 
	$APR_DECLARE
(*Ë
	$≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
)

125 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

126  
	`I¡îlockedCom∑ªExch™gePoöãr
((* vﬁ©ûe*)
mem
, 
wôh
, (*)
cmp
);

127 #ñi‡
	`deföed
(
__MINGW32__
)

128  
	`I¡îlockedCom∑ªExch™gePoöãr
((**)
mem
, 
wôh
, (*)
cmp
);

131  ((
≠r_©omic_wö32_±r_±r_±r_‚
)
I¡îlockedCom∑ªExch™ge
)(
mem
, 
wôh
, 
cmp
);

133 
	}
}

135 
	$APR_DECLARE
(
≠r_uöt32_t
Ë
	$≠r_©omic_xchg32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
)

137 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
)Ë&& !deföed(
RC_INVOKED
)

138  
	`I¡îlockedExch™ge
(
mem
, 
vÆ
);

139 #ñi‡
	`deföed
(
__MINGW32__
)

140  
	`I¡îlockedExch™ge
((*)
mem
, 
vÆ
);

142  ((
≠r_©omic_wö32_±r_vÆ_‚
)
I¡îlockedExch™ge
)(
mem
, 
vÆ
);

144 
	}
}

146 
	$APR_DECLARE
(*Ë
	$≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
)

148 #i‡(
	`deföed
(
_M_IA64
Ë|| deföed(
_M_AMD64
Ë|| deföed(
__MINGW32__
)Ë&& !deföed(
RC_INVOKED
)

149  
	`I¡îlockedExch™gePoöãr
((**)
mem
, 
wôh
);

152  ((
≠r_©omic_wö32_±r_±r_‚
)
I¡îlockedExch™ge
)(
mem
, 
wôh
);

154 
	}
}

	@build/aplibtool.c

17 
	~<°dio.h
>

18 
	~<¥o˚ss.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<dúít.h
>

24 
	tboﬁ
;

25 
	#Ál£
 0

	)

26 
	#åue
 (!
Ál£
)

	)

28 
boﬁ
 
	gsûít
 = 
Ál£
;

29 
boﬁ
 
	gsh¨ed
 = 
Ál£
;

30 
boﬁ
 
	gexp‹t_Æl
 = 
Ál£
;

31 
	emode_t
 { 
	mmCompûe
, 
	mmLök
, 
	mmIn°Æl
 };

32 
	eouçut_ty≥_t
 { 
	mŸGíîÆ
, 
	mŸObje˘
, 
	mŸProgøm
, 
	mŸSèticLibøry
, 
	mŸDy«micLibøry
 };

34 #ifde‡
__EMX__


35 
	#SHELL_CMD
 "sh"

	)

36 
	#CC
 "gcc"

	)

37 
	#GEN_EXPORTS
 "emxexp"

	)

38 
	#DEF2IMPLIB_CMD
 "emximp"

	)

39 
	#SHARE_SW
 "-ZdŒ -Zmtd"

	)

40 
	#USE_OMF
 
åue


	)

41 
	#TRUNCATE_DLL_NAME


	)

42 
	#DYNAMIC_LIB_EXT
 "dŒ"

	)

43 
	#EXE_EXT
 ".exe"

	)

45 #i‡
USE_OMF


47 
	#STATIC_LIB_EXT
 "lib"

	)

48 
	#OBJECT_EXT
 "obj"

	)

49 
	#LIBRARIAN
 "emxomÁr"

	)

52 
	#STATIC_LIB_EXT
 "a"

	)

53 
	#OBJECT_EXT
 "o"

	)

54 
	#LIBRARIAN
 "¨"

	)

60 *
	m¨gli°
[1024];

61 
	mnum_¨gs
;

62 
mode_t
 
	mmode
;

63 
ouçut_ty≥_t
 
	mouçut_ty≥
;

64 *
	mouçut_«me
;

65 *
	m°ub_«me
;

66 *
	mtmp_dús
[1024];

67 
	mnum_tmp_dús
;

68 *
	mobj_fûes
[1024];

69 
	mnum_obj_fûes
;

70 } 
	tcmd_d©a_t
;

72 
∑r£_¨gs
(
¨gc
, *
¨gv
[], 
cmd_d©a_t
 *
cmd_d©a
);

73 
boﬁ
 
∑r£_l⁄g_›t
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
);

74 
∑r£_sh‹t_›t
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
);

75 
boﬁ
 
∑r£_öput_fûe_«me
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
);

76 
boﬁ
 
∑r£_ouçut_fûe_«me
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
);

77 
po°_∑r£_fixup
(
cmd_d©a_t
 *
cmd_d©a
);

78 
boﬁ
 
ex∂ode_°©ic_lib
(*
lib
, 
cmd_d©a_t
 *
cmd_d©a
);

79 
execuã_comm™d
(
cmd_d©a_t
 *
cmd_d©a
);

80 *
shñl_esc
(c⁄° *
°r
);

81 
˛ónup_tmp_dús
(
cmd_d©a_t
 *
cmd_d©a
);

82 
gíî©e_def_fûe
(
cmd_d©a_t
 *
cmd_d©a
);

83 *
«meof
(*
fuŒ∑th
);

84 *
åunˇã_dŒ_«me
(*
∑th
);

87 
	$maö
(
¨gc
, *
¨gv
[])

89 
rc
;

90 
cmd_d©a_t
 
cmd_d©a
;

92 
	`mem£t
(&
cmd_d©a
, 0, (cmd_data));

93 
cmd_d©a
.
mode
 = 
mCompûe
;

94 
cmd_d©a
.
ouçut_ty≥
 = 
ŸGíîÆ
;

96 
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
cmd_d©a
);

97 
rc
 = 
	`execuã_comm™d
(&
cmd_d©a
);

99 i‡(
rc
 =0 && 
cmd_d©a
.
°ub_«me
) {

100 
	`f›í
(
cmd_d©a
.
°ub_«me
, "w");

103 
	`˛ónup_tmp_dús
(&
cmd_d©a
);

104  
rc
;

105 
	}
}

109 
	$∑r£_¨gs
(
¨gc
, *
¨gv
[], 
cmd_d©a_t
 *
cmd_d©a
)

111 
a
;

112 *
¨g
;

113 
boﬁ
 
¨gu£d
;

115 
a
=1;á < 
¨gc
;á++) {

116 
¨g
 = 
¨gv
[
a
];

117 
¨gu£d
 = 
Ál£
;

119 i‡(
¨g
[0] == '-') {

120 i‡(
¨g
[1] == '-') {

121 
¨gu£d
 = 
	`∑r£_l⁄g_›t
(
¨g
 + 2, 
cmd_d©a
);

122 } i‡(
¨g
[1] ='o' && 
a
+1 < 
¨gc
) {

123 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
¨g
;

124 
¨g
 = 
¨gv
[++
a
];

125 
¨gu£d
 = 
	`∑r£_ouçut_fûe_«me
(
¨g
, 
cmd_d©a
);

127 
num_u£d
 = 
	`∑r£_sh‹t_›t
(
¨g
 + 1, 
cmd_d©a
);

128 
¨gu£d
 = 
num_u£d
 > 0;

130 i‡(
num_u£d
 > 1) {

131 
a
 +
num_u£d
 - 1;

135 
¨gu£d
 = 
	`∑r£_öput_fûe_«me
(
¨g
, 
cmd_d©a
);

138 i‡(!
¨gu£d
) {

139 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
¨g
;

143 
	`po°_∑r£_fixup
(
cmd_d©a
);

144 
	}
}

148 
boﬁ
 
	$∑r£_l⁄g_›t
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
)

150 *
equÆ_pos
 = 
	`°rchr
(
¨g
, '=');

151 
v¨
[50];

152 
vÆue
[500];

154 i‡(
equÆ_pos
) {

155 
	`°∫˝y
(
v¨
, 
¨g
, 
equÆ_pos
 -árg);

156 
v¨
[
equÆ_pos
 - 
¨g
] = 0;

157 
	`°r˝y
(
vÆue
, 
equÆ_pos
 + 1);

159 
	`°r˝y
(
v¨
, 
¨g
);

162 i‡(
	`°rcmp
(
v¨
, "silent") == 0) {

163 
sûít
 = 
åue
;

164 } i‡(
	`°rcmp
(
v¨
, "mode") == 0) {

165 i‡(
	`°rcmp
(
vÆue
, "compile") == 0) {

166 
cmd_d©a
->
mode
 = 
mCompûe
;

167 
cmd_d©a
->
ouçut_ty≥
 = 
ŸObje˘
;

170 i‡(
	`°rcmp
(
vÆue
, "link") == 0) {

171 
cmd_d©a
->
mode
 = 
mLök
;

174 i‡(
	`°rcmp
(
vÆue
, "install") == 0) {

175 
cmd_d©a
->
mode
 = 
mIn°Æl
;

177 } i‡(
	`°rcmp
(
v¨
, "shared") == 0) {

178 
sh¨ed
 = 
åue
;

179 } i‡(
	`°rcmp
(
v¨
, "export-all") == 0) {

180 
exp‹t_Æl
 = 
åue
;

182  
Ál£
;

185  
åue
;

186 
	}
}

190 
	$∑r£_sh‹t_›t
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
)

192 i‡(
	`°rcmp
(
¨g
, "export-dynamic") == 0) {

196 i‡(
	`°rcmp
(
¨g
, "module") == 0) {

200 i‡(
	`°rcmp
(
¨g
, "Zexe") == 0) {

204 i‡(
	`°rcmp
(
¨g
, "avoid-version") == 0) {

208 i‡(
	`°rcmp
(
¨g
, "prefer-pic") == 0) {

212 i‡(
	`°rcmp
(
¨g
, "prefer-non-pic") == 0) {

216 i‡(
	`°rcmp
(
¨g
, "version-info") == 0 ) {

220 i‡(
	`°rcmp
(
¨g
, "no-install") == 0) {

225 
	}
}

229 
boﬁ
 
	$∑r£_öput_fûe_«me
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
)

231 *
ext
 = 
	`°ºchr
(
¨g
, '.');

232 *
«me
 = 
	`°ºchr
(
¨g
, '/');

233 *
√w¨g
;

235 i‡(!
ext
) {

236  
Ál£
;

239 
ext
++;

241 i‡(
«me
 =
NULL
) {

242 
«me
 = 
	`°ºchr
(
¨g
, '\\');

244 i‡(
«me
 =
NULL
) {

245 
«me
 = 
¨g
;

247 
«me
++;

250 
«me
++;

253 i‡(
	`°rcmp
(
ext
, "lo") == 0) {

254 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 10);

255 
	`°r˝y
(
√w¨g
, 
¨g
);

256 
	`°r˝y
(
√w¨g
 + (
ext
 - 
¨g
), 
OBJECT_EXT
);

257 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
√w¨g
;

258 
cmd_d©a
->
obj_fûes
[cmd_d©a->
num_obj_fûes
++] = 
√w¨g
;

259  
åue
;

262 i‡(
	`°rcmp
(
ext
, "la") == 0) {

263 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 10);

264 
	`°r˝y
(
√w¨g
, 
¨g
);

265 
√w¨g
[
∑thÀn
] = 0;

266 
	`°rˇt
(
√w¨g
, ".libs/");

268 i‡(
	`°∫cmp
(
«me
, "lib", 3) == 0) {

269 
«me
 += 3;

272 
	`°rˇt
(
√w¨g
, 
«me
);

273 
ext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

275 i‡(
sh¨ed
 && 
cmd_d©a
->
mode
 =
mIn°Æl
) {

276 
	`°r˝y
(
ext
, 
DYNAMIC_LIB_EXT
);

277 
√w¨g
 = 
	`åunˇã_dŒ_«me
(newarg);

279 
	`°r˝y
(
ext
, 
STATIC_LIB_EXT
);

282 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
√w¨g
;

283  
åue
;

286 i‡(
	`°rcmp
(
ext
, "c") == 0) {

287 i‡(
cmd_d©a
->
°ub_«me
 =
NULL
) {

288 
cmd_d©a
->
°ub_«me
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 4);

289 
	`°r˝y
(
cmd_d©a
->
°ub_«me
, 
¨g
);

290 
	`°r˝y
(
	`°ºchr
(
cmd_d©a
->
°ub_«me
, '.') + 1, "lo");

294 i‡(
	`°rcmp
(
«me
, 
CC
Ë=0 || såcmp“ame, CC 
EXE_EXT
) == 0) {

295 i‡(
cmd_d©a
->
ouçut_ty≥
 =
ŸGíîÆ
) {

296 
cmd_d©a
->
ouçut_ty≥
 = 
ŸObje˘
;

300  
Ál£
;

301 
	}
}

305 
boﬁ
 
	$∑r£_ouçut_fûe_«me
(*
¨g
, 
cmd_d©a_t
 *
cmd_d©a
)

307 *
«me
 = 
	`°ºchr
(
¨g
, '/');

308 *
ext
 = 
	`°ºchr
(
¨g
, '.');

309 *
√w¨g
 = 
NULL
, *
√wext
;

311 i‡(
«me
 =
NULL
) {

312 
«me
 = 
	`°ºchr
(
¨g
, '\\');

314 i‡(
«me
 =
NULL
) {

315 
«me
 = 
¨g
;

317 
«me
++;

320 
«me
++;

323 i‡(!
ext
) {

324 
cmd_d©a
->
°ub_«me
 = 
¨g
;

325 
cmd_d©a
->
ouçut_ty≥
 = 
ŸProgøm
;

326 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 5);

327 
	`°r˝y
(
√w¨g
, 
¨g
);

328 
	`°rˇt
(
√w¨g
, 
EXE_EXT
);

329 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
√w¨g
;

330 
cmd_d©a
->
ouçut_«me
 = 
√w¨g
;

331  
åue
;

334 
ext
++;

336 i‡(
	`°rcmp
(
ext
, "la") == 0) {

337 
cmd_d©a
->
°ub_«me
 = 
¨g
;

338 
cmd_d©a
->
ouçut_ty≥
 = 
sh¨ed
 ? 
ŸDy«micLibøry
 : 
ŸSèticLibøry
;

339 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 10);

340 
	`mkdú
(".libs", 0);

341 
	`°r˝y
(
√w¨g
, ".libs/");

343 i‡(
	`°∫cmp
(
¨g
, "lib", 3) == 0) {

344 
¨g
 += 3;

347 
	`°rˇt
(
√w¨g
, 
¨g
);

348 
√wext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

349 
	`°r˝y
(
√wext
, 
sh¨ed
 ? 
DYNAMIC_LIB_EXT
 : 
STATIC_LIB_EXT
);

351 #ifde‡
TRUNCATE_DLL_NAME


352 i‡(
sh¨ed
) {

353 
√w¨g
 = 
	`åunˇã_dŒ_«me
(newarg);

357 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
√w¨g
;

358 
cmd_d©a
->
ouçut_«me
 = 
√w¨g
;

359  
åue
;

362 i‡(
	`°rcmp
(
ext
, "lo") == 0) {

363 
cmd_d©a
->
°ub_«me
 = 
¨g
;

364 
cmd_d©a
->
ouçut_ty≥
 = 
ŸObje˘
;

365 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 2);

366 
	`°r˝y
(
√w¨g
, 
¨g
);

367 
ext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

368 
	`°r˝y
(
ext
, 
OBJECT_EXT
);

369 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
√w¨g
;

370 
cmd_d©a
->
ouçut_«me
 = 
√w¨g
;

371  
åue
;

374  
Ál£
;

375 
	}
}

379 
	$po°_∑r£_fixup
(
cmd_d©a_t
 *
cmd_d©a
)

381 
a
;

382 *
¨g
;

383 *
ext
;

385 i‡(
cmd_d©a
->
ouçut_ty≥
 =
ŸSèticLibøry
 && cmd_d©a->
mode
 =
mLök
) {

391 
a
=0;á < 
cmd_d©a
->
num_¨gs
;á++) {

392 
¨g
 = 
cmd_d©a
->
¨gli°
[
a
];

394 i‡(
¨g
) {

395 
ext
 = 
	`°ºchr
(
¨g
, '.');

397 i‡(
ext
) {

398 
ext
++;

401 i‡(
¨g
[0] == '-') {

402 
cmd_d©a
->
¨gli°
[
a
] = 
NULL
;

404 i‡(
	`°rcmp
(
¨g
, "-Ω©h"Ë=0 && 
a
+1 < 
cmd_d©a
->
num_¨gs
) {

405 
cmd_d©a
->
¨gli°
[
a
+1] = 
NULL
;

408 i‡(
	`°rcmp
(
¨g
, "-R"Ë=0 && 
a
+1 < 
cmd_d©a
->
num_¨gs
) {

409 
cmd_d©a
->
¨gli°
[
a
+1] = 
NULL
;

412 i‡(
	`°rcmp
(
¨g
, "-vîsi⁄-öfo"Ë=0 && 
a
+1 < 
cmd_d©a
->
num_¨gs
) {

413 
cmd_d©a
->
¨gli°
[
a
+1] = 
NULL
;

416 i‡(
	`°rcmp
(
¨g
, "-Z°ack"Ë=0 && 
a
+1 < 
cmd_d©a
->
num_¨gs
) {

417 
cmd_d©a
->
¨gli°
[
a
+1] = 
NULL
;

420 i‡(
	`°rcmp
(
¨g
, "-o") == 0) {

421 
a
++;

425 i‡(
	`°rcmp
(
¨g
, 
CC
Ë=0 || såcmp◊rg, CC 
EXE_EXT
) == 0) {

426 
cmd_d©a
->
¨gli°
[
a
] = 
LIBRARIAN
 " cr";

429 i‡(
ext
) {

430 i‡(
	`°rcmp
(
ext
, "h") == 0 || strcmp(ext, "c") == 0) {

432 
cmd_d©a
->
¨gli°
[
a
] = 
NULL
;

435 i‡(
	`°rcmp
(
ext
, 
STATIC_LIB_EXT
) == 0) {

436 
cmd_d©a
->
¨gli°
[
a
] = 
NULL
;

437 
	`ex∂ode_°©ic_lib
(
¨g
, 
cmd_d©a
);

444 i‡(
cmd_d©a
->
ouçut_ty≥
 =
ŸDy«micLibøry
) {

445 
a
=0;á < 
cmd_d©a
->
num_¨gs
;á++) {

446 
¨g
 = 
cmd_d©a
->
¨gli°
[
a
];

448 i‡(
¨g
) {

449 i‡(
	`°rcmp
(
¨g
, "-Ω©h"Ë=0 && 
a
+1 < 
cmd_d©a
->
num_¨gs
) {

450 
cmd_d©a
->
¨gli°
[
a
] = 
NULL
;

451 
cmd_d©a
->
¨gli°
[
a
+1] = 
NULL
;

456 i‡(
exp‹t_Æl
) {

457 
	`gíî©e_def_fûe
(
cmd_d©a
);

461 #i‡
USE_OMF


462 i‡(
cmd_d©a
->
ouçut_ty≥
 =
ŸObje˘
 ||

463 
cmd_d©a
->
ouçut_ty≥
 =
ŸProgøm
 ||

464 
cmd_d©a
->
ouçut_ty≥
 =
ŸDy«micLibøry
) {

465 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = "-Zomf";

469 i‡(
sh¨ed
 && (
cmd_d©a
->
ouçut_ty≥
 =
ŸObje˘
 || cmd_d©a->ouçut_ty≥ =
ŸDy«micLibøry
)) {

470 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
SHARE_SW
;

472 
	}
}

476 
	$execuã_comm™d
(
cmd_d©a_t
 *
cmd_d©a
)

478 
èrgë
 = 0;

479 *
comm™d
;

480 
a
, 
tŸÆ_Àn
 = 0;

481 *
¨gs
[4];

483 
a
=0;á < 
cmd_d©a
->
num_¨gs
;á++) {

484 i‡(
cmd_d©a
->
¨gli°
[
a
]) {

485 
tŸÆ_Àn
 +
	`°æí
(
cmd_d©a
->
¨gli°
[
a
]) + 1;

489 
comm™d
 = (*)
	`mÆloc
–
tŸÆ_Àn
 );

490 
comm™d
[0] = 0;

492 
a
=0;á < 
cmd_d©a
->
num_¨gs
;á++) {

493 i‡(
cmd_d©a
->
¨gli°
[
a
]) {

494 
	`°rˇt
(
comm™d
, 
cmd_d©a
->
¨gli°
[
a
]);

495 
	`°rˇt
(
comm™d
, " ");

499 
comm™d
[
	`°æí
(command)-1] = 0;

501 i‡(!
sûít
) {

502 
	`puts
(
comm™d
);

505 
cmd_d©a
->
num_¨gs
 = 
èrgë
;

506 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
] = 
NULL
;

507 
comm™d
 = 
	`shñl_esc
(command);

509 
¨gs
[0] = 
SHELL_CMD
;

510 
¨gs
[1] = "-c";

511 
¨gs
[2] = 
comm™d
;

512 
¨gs
[3] = 
NULL
;

513  
	`•awnvp
(
P_WAIT
, 
¨gs
[0],árgs);

514 
	}
}

518 *
	$shñl_esc
(c⁄° *
°r
)

520 *
cmd
;

521 *
d
;

522 c⁄° *
s
;

524 
cmd
 = (*)
	`mÆloc
(2 * 
	`°æí
(
°r
) + 1);

525 
d
 = (*)
cmd
;

526 
s
 = (c⁄° *)
°r
;

528 ; *
s
; ++s) {

529 i‡(*
s
 == '"' || *s == '\\') {

530 *
d
++ = '\\';

532 *
d
++ = *
s
;

535 *
d
 = '\0';

536  
cmd
;

537 
	}
}

541 
boﬁ
 
	$ex∂ode_°©ic_lib
(*
lib
, 
cmd_d©a_t
 *
cmd_d©a
)

543 
tmpdú
[1024];

544 
ßvewd
[1024];

545 
cmd
[1024];

546 *
«me
;

547 
DIR
 *
dú
;

548 
dúít
 *
íåy
;

550 
	`°r˝y
(
tmpdú
, 
lib
);

551 
	`°rˇt
(
tmpdú
, ".exploded");

553 
	`mkdú
(
tmpdú
, 0);

554 
cmd_d©a
->
tmp_dús
[cmd_d©a->
num_tmp_dús
++] = 
	`°rdup
(
tmpdú
);

555 
	`gëcwd
(
ßvewd
, (savewd));

557 i‡(
	`chdú
(
tmpdú
) != 0)

558  
Ál£
;

560 
	`°r˝y
(
cmd
, 
LIBRARIAN
 " x ");

561 
«me
 = 
	`°ºchr
(
lib
, '/');

563 i‡(
«me
) {

564 
«me
++;

566 
«me
 = 
lib
;

569 
	`°rˇt
(
cmd
, "../");

570 
	`°rˇt
(
cmd
, 
«me
);

571 
	`sy°em
(
cmd
);

572 
	`chdú
(
ßvewd
);

573 
dú
 = 
	`›ídú
(
tmpdú
);

575 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

576 i‡(
íåy
->
d_«me
[0] != '.') {

577 
	`°r˝y
(
cmd
, 
tmpdú
);

578 
	`°rˇt
(
cmd
, "/");

579 
	`°rˇt
(
cmd
, 
íåy
->
d_«me
);

580 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
	`°rdup
(
cmd
);

584 
	`˛o£dú
(
dú
);

585  
åue
;

586 
	}
}

590 
	$˛ónup_tmp_dú
(*
dú«me
)

592 
DIR
 *
dú
;

593 
dúít
 *
íåy
;

594 
fuŒ«me
[1024];

596 
dú
 = 
	`›ídú
(
dú«me
);

598 i‡(
dú
 =
NULL
)

601 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

602 i‡(
íåy
->
d_«me
[0] != '.') {

603 
	`°r˝y
(
fuŒ«me
, 
dú«me
);

604 
	`°rˇt
(
fuŒ«me
, "/");

605 
	`°rˇt
(
fuŒ«me
, 
íåy
->
d_«me
);

606 
	`ªmove
(
fuŒ«me
);

610 
	`rmdú
(
dú«me
);

611 
	}
}

615 
	$˛ónup_tmp_dús
(
cmd_d©a_t
 *
cmd_d©a
)

617 
d
;

619 
d
=0; d < 
cmd_d©a
->
num_tmp_dús
; d++) {

620 
	`˛ónup_tmp_dú
(
cmd_d©a
->
tmp_dús
[
d
]);

622 
	}
}

626 
	$gíî©e_def_fûe
(
cmd_d©a_t
 *
cmd_d©a
)

628 
def_fûe
[1024];

629 
im∂ib_fûe
[1024];

630 *
ext
;

631 
FILE
 *
hDef
;

632 *
exp‹t_¨gs
[1024];

633 
num_exp‹t_¨gs
 = 0;

634 *
cmd
;

635 
cmd_size
 = 0;

636 
a
;

638 i‡(
cmd_d©a
->
ouçut_«me
) {

639 
	`°r˝y
(
def_fûe
, 
cmd_d©a
->
ouçut_«me
);

640 
	`°rˇt
(
def_fûe
, ".def");

641 
hDef
 = 
	`f›í
(
def_fûe
, "w");

643 i‡(
hDef
 !
NULL
) {

644 
	`Ârötf
(
hDef
, "LIBRARY '%s' INITINSTANCE\n", 
	`«meof
(
cmd_d©a
->
ouçut_«me
));

645 
	`Ârötf
(
hDef
, "DATA NONSHARED\n");

646 
	`Ârötf
(
hDef
, "EXPORTS\n");

647 
	`f˛o£
(
hDef
);

649 
a
=0;á < 
cmd_d©a
->
num_obj_fûes
;á++) {

650 
cmd_size
 +
	`°æí
(
cmd_d©a
->
obj_fûes
[
a
]) + 1;

653 
cmd_size
 +
	`°æí
(
GEN_EXPORTS
Ë+ såÀn(
def_fûe
) + 3;

654 
cmd
 = (*)
	`mÆloc
(
cmd_size
);

655 
	`°r˝y
(
cmd
, 
GEN_EXPORTS
);

657 
a
=0;á < 
cmd_d©a
->
num_obj_fûes
;á++) {

658 
	`°rˇt
(
cmd
, " ");

659 
	`°rˇt
(
cmd
, 
cmd_d©a
->
obj_fûes
[
a
] );

662 
	`°rˇt
(
cmd
, ">>");

663 
	`°rˇt
(
cmd
, 
def_fûe
);

664 
	`puts
(
cmd
);

665 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
SHELL_CMD
;

666 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = "-c";

667 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
cmd
;

668 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
NULL
;

669 
	`•awnvp
(
P_WAIT
, 
exp‹t_¨gs
[0],Éxport_args);

670 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
	`°rdup
(
def_fûe
);

673 
num_exp‹t_¨gs
 = 0;

674 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
DEF2IMPLIB_CMD
;

675 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = "-o";

677 
	`°r˝y
(
im∂ib_fûe
, ".libs/");

678 
	`°rˇt
(
im∂ib_fûe
, 
cmd_d©a
->
°ub_«me
);

679 
ext
 = 
	`°ºchr
(
im∂ib_fûe
, '.');

681 i‡(
ext
)

682 *
ext
 = 0;

684 
	`°rˇt
(
im∂ib_fûe
, ".");

685 
	`°rˇt
(
im∂ib_fûe
, 
STATIC_LIB_EXT
);

687 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
im∂ib_fûe
;

688 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
def_fûe
;

689 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
NULL
;

690 
	`•awnvp
(
P_WAIT
, 
exp‹t_¨gs
[0],Éxport_args);

693 
	}
}

698 *
	$«meof
(*
fuŒ∑th
)

700 
buf„r
[1024];

701 *
ext
;

702 *
«me
 = 
	`°ºchr
(
fuŒ∑th
, '/');

704 i‡(
«me
 =
NULL
) {

705 
«me
 = 
	`°ºchr
(
fuŒ∑th
, '\\');

708 i‡(
«me
 =
NULL
) {

709 
«me
 = 
fuŒ∑th
;

711 
«me
++;

714 
	`°r˝y
(
buf„r
, 
«me
);

715 
ext
 = 
	`°ºchr
(
buf„r
, '.');

717 i‡(
ext
) {

718 *
ext
 = 0;

719  
	`°rdup
(
buf„r
);

722  
«me
;

723 
	}
}

727 *
	$åunˇã_dŒ_«me
(*
∑th
)

730 *
tmµ©h
 = 
	`°rdup
(
∑th
);

731 *
√w«me
 = 
	`°ºchr
(
tmµ©h
, '/') + 1;

732 *
ext
 = 
	`°ºchr
(
tmµ©h
, '.');

733 
Àn
;

735 i‡(
ext
 =
NULL
)

736  
tmµ©h
;

738 
Àn
 = 
ext
 - 
√w«me
;

740 i‡(
	`°∫cmp
(
√w«me
, "mod_", 4) == 0) {

741 
	`°r˝y
(
√w«me
,Çewname + 4);

742 
Àn
 -= 4;

745 i‡(
Àn
 > 8) {

746 
	`°r˝y
(
√w«me
 + 8, 
	`°rchr
(newname, '.'));

749  
tmµ©h
;

750 
	}
}

	@build/jlibtool.c

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~<°dlib.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/ty≥s.h
>

22 #i‡!
deföed
(
__MINGW32__
)

23 
	~<sys/waô.h
>

25 
	~<uni°d.h
>

26 
	~<dúít.h
>

27 
	~<î∫o.h
>

28 
	~<as£π.h
>

30 #ifde‡
__EMX__


31 
	#SHELL_CMD
 "sh"

	)

32 
	#GEN_EXPORTS
 "emxexp"

	)

33 
	#DEF2IMPLIB_CMD
 "emximp"

	)

34 
	#SHARE_SW
 "-ZdŒ -Zmtd"

	)

35 
	#USE_OMF
 1

	)

36 
	#TRUNCATE_DLL_NAME


	)

37 
	#DYNAMIC_LIB_EXT
 "dŒ"

	)

38 
	#EXE_EXT
 ".exe"

	)

40 #i‡
USE_OMF


42 
	#STATIC_LIB_EXT
 "lib"

	)

43 
	#OBJECT_EXT
 "obj"

	)

44 
	#LIBRARIAN
 "emxomÁr"

	)

45 
	#LIBRARIAN_OPTS
 "¸"

	)

48 
	#STATIC_LIB_EXT
 "a"

	)

49 
	#OBJECT_EXT
 "o"

	)

50 
	#LIBRARIAN
 "¨"

	)

51 
	#LIBRARIAN_OPTS
 "¸"

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#SHELL_CMD
 "/bö/sh"

	)

57 
	#DYNAMIC_LIB_EXT
 "dylib"

	)

58 
	#MODULE_LIB_EXT
 "bundÀ"

	)

59 
	#STATIC_LIB_EXT
 "a"

	)

60 
	#OBJECT_EXT
 "o"

	)

61 
	#LIBRARIAN
 "¨"

	)

62 
	#LIBRARIAN_OPTS
 "¸"

	)

64 
	#RANLIB
 "ø∆ib"

	)

65 
	#PIC_FLAG
 "-fPIC -‚o-comm⁄"

	)

66 
	#SHARED_OPTS
 "-dy«mi˛ib"

	)

67 
	#MODULE_OPTS
 "-bundÀ -dy«mic"

	)

68 
	#DYNAMIC_LINK_OPTS
 "-Ê©_«me•a˚"

	)

69 
	#DYNAMIC_LINK_UNDEFINED
 "-undeföed suµªss"

	)

70 
	#dy«mic_lök_vîsi⁄_func
 
d¨wö_dy«mic_lök_fun˘i⁄


	)

71 
	#DYNAMIC_INSTALL_NAME
 "-ö°Æl_«me"

	)

72 
	#DYNAMIC_LINK_NO_INSTALL
 "-dylib_fûe"

	)

73 
	#HAS_REALPATH


	)

75 
	#LD_LIBRARY_PATH
 "DYLD_LIBRARY_PATH"

	)

78 #i‡
deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__NëBSD__
)

79 
	#SHELL_CMD
 "/bö/sh"

	)

80 
	#DYNAMIC_LIB_EXT
 "so"

	)

81 
	#MODULE_LIB_EXT
 "so"

	)

82 
	#STATIC_LIB_EXT
 "a"

	)

83 
	#OBJECT_EXT
 "o"

	)

84 
	#LIBRARIAN
 "¨"

	)

85 
	#LIBRARIAN_OPTS
 "¸"

	)

86 
	#RANLIB
 "ø∆ib"

	)

87 
	#PIC_FLAG
 "-fPIC"

	)

88 
	#RPATH
 "-Ω©h"

	)

89 
	#SHARED_OPTS
 "-sh¨ed"

	)

90 
	#MODULE_OPTS
 "-sh¨ed"

	)

91 
	#DYNAMIC_LINK_OPTS
 "-exp‹t-dy«mic"

	)

92 
	#LINKER_FLAG_PREFIX
 "-Wl,"

	)

93 
	#ADD_MINUS_L


	)

94 
	#LD_RUN_PATH
 "LD_RUN_PATH"

	)

95 
	#LD_LIBRARY_PATH
 "LD_LIBRARY_PATH"

	)

98 #i‡
deföed
(
sun
)

99 
	#SHELL_CMD
 "/bö/sh"

	)

100 
	#DYNAMIC_LIB_EXT
 "so"

	)

101 
	#MODULE_LIB_EXT
 "so"

	)

102 
	#STATIC_LIB_EXT
 "a"

	)

103 
	#OBJECT_EXT
 "o"

	)

104 
	#LIBRARIAN
 "¨"

	)

105 
	#LIBRARIAN_OPTS
 "¸"

	)

106 
	#RANLIB
 "ø∆ib"

	)

107 
	#PIC_FLAG
 "-KPIC"

	)

108 
	#RPATH
 "-R"

	)

109 
	#SHARED_OPTS
 "-G"

	)

110 
	#MODULE_OPTS
 "-G"

	)

111 
	#DYNAMIC_LINK_OPTS
 ""

	)

112 
	#LINKER_FLAG_NO_EQUALS


	)

113 
	#ADD_MINUS_L


	)

114 
	#HAS_REALPATH


	)

115 
	#LD_RUN_PATH
 "LD_RUN_PATH"

	)

116 
	#LD_LIBRARY_PATH
 "LD_LIBRARY_PATH"

	)

119 #i‡
deföed
(
_OSD_POSIX
)

120 
	#SHELL_CMD
 "/u§/bö/sh"

	)

121 
	#DYNAMIC_LIB_EXT
 "so"

	)

122 
	#MODULE_LIB_EXT
 "so"

	)

123 
	#STATIC_LIB_EXT
 "a"

	)

124 
	#OBJECT_EXT
 "o"

	)

125 
	#LIBRARIAN
 "¨"

	)

126 
	#LIBRARIAN_OPTS
 "¸"

	)

127 
	#SHARED_OPTS
 "-G"

	)

128 
	#MODULE_OPTS
 "-G"

	)

129 
	#LINKER_FLAG_PREFIX
 "-Wl,"

	)

130 
	#NEED_SNPRINTF


	)

133 #i‡
deföed
(
söix
Ë&& deföed(
mùs
Ë&& deföed(
__SNI_TARG_UNIX
)

134 
	#SHELL_CMD
 "/u§/bö/sh"

	)

135 
	#DYNAMIC_LIB_EXT
 "so"

	)

136 
	#MODULE_LIB_EXT
 "so"

	)

137 
	#STATIC_LIB_EXT
 "a"

	)

138 
	#OBJECT_EXT
 "o"

	)

139 
	#LIBRARIAN
 "¨"

	)

140 
	#LIBRARIAN_OPTS
 "¸"

	)

141 
	#RPATH
 "-BΩ©h"

	)

142 
	#SHARED_OPTS
 "-G"

	)

143 
	#MODULE_OPTS
 "-G"

	)

144 
	#DYNAMIC_LINK_OPTS
 "-Wl,-Bœrgedynsym"

	)

145 
	#LINKER_FLAG_PREFIX
 "-Wl,"

	)

146 
	#NEED_SNPRINTF


	)

147 
	#LD_RUN_PATH
 "LD_RUN_PATH"

	)

148 
	#LD_LIBRARY_PATH
 "LD_LIBRARY_PATH"

	)

151 #i‡
deföed
(
__MINGW32__
)

152 
	#SHELL_CMD
 "sh"

	)

153 
	#DYNAMIC_LIB_EXT
 "dŒ"

	)

154 
	#MODULE_LIB_EXT
 "dŒ"

	)

155 
	#STATIC_LIB_EXT
 "a"

	)

156 
	#OBJECT_EXT
 "o"

	)

157 
	#LIBRARIAN
 "¨"

	)

158 
	#LIBRARIAN_OPTS
 "¸"

	)

159 
	#RANLIB
 "ø∆ib"

	)

160 
	#LINKER_FLAG_PREFIX
 "-Wl,"

	)

161 
	#SHARED_OPTS
 "-sh¨ed"

	)

162 
	#MODULE_OPTS
 "-sh¨ed"

	)

163 
	#MKDIR_NO_UMASK


	)

164 
	#EXE_EXT
 ".exe"

	)

167 #i‚de‡
SHELL_CMD


168 #îr‹ 
Unsuµ‹ãd
 
∂©f‹m
: 
PÀa£
 
add
 
deföes
 
SHELL_CMD
 
ëc
. 
your
Ölatform.

171 #ifde‡
NEED_SNPRINTF


172 
	~<°d¨g.h
>

175 #ifde‡
__EMX__


176 
	~<¥o˚ss.h
>

179 #i‚de‡
PATH_MAX


180 
	#PATH_MAX
 1024

	)

185 
	#VERSION
 "1.4"

	)

187 
	etoﬁ_mode_t
 {

188 
	mmUnknown
,

189 
	mmCompûe
,

190 
	mmLök
,

191 
	mmIn°Æl
,

194 
	eouçut_t
 {

195 
	mŸGíîÆ
,

196 
	mŸObje˘
,

197 
	mŸProgøm
,

198 
	mŸLibøry
,

199 
	mŸSèticLibøryO∆y
,

200 
	mŸDy«micLibøryO∆y
,

201 
	mŸModuÀ
,

204 
	epic_mode_e
 {

205 
	mpic_UNKNOWN
,

206 
	mpic_PREFER
,

207 
	mpic_AVOID
,

210 
	esh¨ed_mode_e
 {

211 
	msh¨e_UNSET
,

212 
	msh¨e_STATIC
,

213 
	msh¨e_SHARED
,

216 
	elib_ty≥
 {

217 
	mty≥_UNKNOWN
,

218 
	mty≥_DYNAMIC_LIB
,

219 
	mty≥_STATIC_LIB
,

220 
	mty≥_MODULE_LIB
,

221 
	mty≥_OBJECT
,

225 c⁄° **
	mvÆs
;

226 
	mnum
;

227 } 
	tcou¡_ch¨s
;

230 c⁄° *
	mn‹mÆ
;

231 c⁄° *
	mö°Æl
;

232 } 
	tlibøry_«me
;

235 
cou¡_ch¨s
 *
	mn‹mÆ
;

236 
cou¡_ch¨s
 *
	mö°Æl
;

237 
cou¡_ch¨s
 *
	mdïídícõs
;

238 } 
	tlibøry_›ts
;

241 
	msûít
;

242 
sh¨ed_mode_e
 
	msh¨ed
;

243 
	mexp‹t_Æl
;

244 
	mdry_run
;

245 
pic_mode_e
 
	mpic_mode
;

246 
	mexp‹t_dy«mic
;

247 
	mno_ö°Æl
;

248 } 
	t›ti⁄s_t
;

251 
toﬁ_mode_t
 
	mmode
;

252 
ouçut_t
 
	mouçut
;

253 
›ti⁄s_t
 
	m›ti⁄s
;

255 *
	mouçut_«me
;

256 *
	mÁke_ouçut_«me
;

257 *
	mba£«me
;

259 c⁄° *
	mö°Æl_∑th
;

260 c⁄° *
	mcompûî
;

261 c⁄° *
	m¥ogøm
;

262 
cou¡_ch¨s
 *
	m¥ogøm_›ts
;

264 
cou¡_ch¨s
 *
	m¨gli°
;

265 
cou¡_ch¨s
 *
	mtmp_dús
;

266 
cou¡_ch¨s
 *
	mobj_fûes
;

267 
cou¡_ch¨s
 *
	mdï_Ω©hs
;

268 
cou¡_ch¨s
 *
	mΩ©hs
;

270 
libøry_«me
 
	m°©ic_«me
;

271 
libøry_«me
 
	msh¨ed_«me
;

272 
libøry_«me
 
	mmoduÀ_«me
;

274 
libøry_›ts
 
	m°©ic_›ts
;

275 
libøry_›ts
 
	msh¨ed_›ts
;

277 c⁄° *
	mvîsi⁄_öfo
;

278 c⁄° *
	mundeföed_Êag
;

279 } 
	tcomm™d_t
;

281 #ifde‡
RPATH


282 
add_Ω©h
(
cou¡_ch¨s
 *
cc
, c⁄° *
∑th
);

285 #i‡
deföed
(
NEED_SNPRINTF
)

292 
FILE
 *
	gf
=
NULL
;

293 
	$v¢¥ötf
–*
°r
, 
size_t
 
n
, c⁄° *
fmt
, 
va_li°
 
≠
 )

295 
ªs
;

297 i‡(
f
 =
NULL
)

298 
f
 = 
	`f›í
("/dev/null","w");

299 i‡(
f
 =
NULL
)

302 
	`£tvbuf
–
f
, 
°r
, 
_IOFBF
, 
n
 );

304 
ªs
 = 
	`vÂrötf
–
f
, 
fmt
, 
≠
 );

306 i‡–
ªs
 > 0 &&Ñe†< 
n
 ) {

307 
ªs
 = 
	`v•rötf
–
°r
, 
fmt
, 
≠
 );

309  
ªs
;

310 
	}
}

311 
	$¢¥ötf
–*
°r
, 
size_t
 
n
, c⁄° *
fmt
, ... )

313 
va_li°
 
≠
;

314 
ªs
;

316 
	`va_°¨t
–
≠
, 
fmt
 );

317 
ªs
 = 
	`v¢¥ötf
–
°r
, 
n
, 
fmt
, 
≠
 );

318 
	`va_íd
–
≠
 );

319  
ªs
;

320 
	}
}

323 
	$öô_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
)

325 
cc
->
vÆs
 = (c⁄° **)
	`mÆloc
(
PATH_MAX
*(*));

326 
cc
->
num
 = 0;

327 
	}
}

329 
	$˛ór_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
)

331 
i
;

332 
i
 = 0; i < 
cc
->
num
; i++) {

333 
cc
->
vÆs
[
i
] = 0;

336 
cc
->
num
 = 0;

337 
	}
}

339 
	$push_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
, c⁄° *
√wvÆ
)

341 
cc
->
vÆs
[cc->
num
++] = 
√wvÆ
;

342 
	}
}

344 
	$p›_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
)

346 
cc
->
num
--;

347 
	}
}

349 
	$ö£π_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
, c⁄° *
√wvÆ
, 
posôi⁄
)

351 
i
;

353 
i
 = 
cc
->
num
; i > 
posôi⁄
; i--) {

354 
cc
->
vÆs
[
i
] = cc->vals[i-1];

357 
cc
->
vÆs
[
posôi⁄
] = 
√wvÆ
;

358 
cc
->
num
++;

359 
	}
}

361 
	$≠≥nd_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
, cou¡_ch¨†*
c˘ﬂdd
)

363 
i
;

364 
i
 = 0; i < 
c˘ﬂdd
->
num
; i++) {

365 i‡(
c˘ﬂdd
->
vÆs
[
i
]) {

366 
	`push_cou¡_ch¨s
(
cc
, 
c˘ﬂdd
->
vÆs
[
i
]);

369 
	}
}

371 c⁄° *
	$Ê©ãn_cou¡_ch¨s
(
cou¡_ch¨s
 *
cc
, 
•a˚
)

373 
i
, 
size
;

374 *
√wvÆ
;

376 
size
 = 0;

377 
i
 = 0; i < 
cc
->
num
; i++) {

378 i‡(
cc
->
vÆs
[
i
]) {

379 
size
 +
	`°æí
(
cc
->
vÆs
[
i
]) + 1;

380 i‡(
•a˚
) {

381 
size
++;

386 
√wvÆ
 = (*)
	`mÆloc
(
size
 + 1);

387 
√wvÆ
[0] = 0;

389 
i
 = 0; i < 
cc
->
num
; i++) {

390 i‡(
cc
->
vÆs
[
i
]) {

391 
	`°rˇt
(
√wvÆ
, 
cc
->
vÆs
[
i
]);

392 i‡(
•a˚
) {

393 
	`°rˇt
(
√wvÆ
, " ");

398  
√wvÆ
;

399 
	}
}

401 *
	$shñl_esc
(c⁄° *
°r
)

403 
ö_quŸe
 = 0;

404 *
cmd
;

405 *
d
;

406 c⁄° *
s
;

408 
cmd
 = (*)
	`mÆloc
(2 * 
	`°æí
(
°r
) + 3);

409 
d
 = (*)
cmd
;

410 
s
 = (c⁄° *)
°r
;

412 #ifde‡
__MINGW32__


413 *
d
++ = '\"';

416 ; *
s
; ++s) {

417 i‡(*
s
 == '"') {

418 *
d
++ = '\\';

419 
ö_quŸe
++;

421 i‡(*
s
 ='\\' || (*†=' ' && (
ö_quŸe
 % 2))) {

422 *
d
++ = '\\';

424 *
d
++ = *
s
;

427 #ifde‡
__MINGW32__


428 *
d
++ = '\"';

431 *
d
 = '\0';

432  
cmd
;

433 
	}
}

435 
	$exã∫Æ_•awn
(
comm™d_t
 *
cmd
, c⁄° *
fûe
, c⁄° **
¨gv
)

437 i‡(!
cmd
->
›ti⁄s
.
sûít
) {

438 c⁄° **
¨gumít
 = 
¨gv
;

439 
	`¥ötf
("Executing: ");

440 *
¨gumít
) {

441 
	`¥ötf
("%†", *
¨gumít
);

442 
¨gumít
++;

444 
	`puts
("");

447 i‡(
cmd
->
›ti⁄s
.
dry_run
) {

450 #i‡
	`deföed
(
__EMX__
Ë|| deföed(
__MINGW32__
)

451  
	`•awnvp
(
P_WAIT
, 
¨gv
[0],árgv);

454 
pid_t
 
pid
;

455 
pid
 = 
	`f‹k
();

456 i‡(
pid
 == 0) {

457  
	`execvp
(
¨gv
[0], (**)argv);

460 
°©uscode
;

461 
	`waôpid
(
pid
, &
°©uscode
, 0);

462 i‡(
	`WIFEXITED
(
°©uscode
)) {

463  
	`WEXITSTATUS
(
°©uscode
);

469 
	}
}

471 
	$run_comm™d
(
comm™d_t
 *
cmd_d©a
, 
cou¡_ch¨s
 *
cc
)

473 *
comm™d
;

474 c⁄° *
•awn_¨gs
[4];

475 
cou¡_ch¨s
 
tmpcc
;

477 
	`öô_cou¡_ch¨s
(&
tmpcc
);

479 i‡(
cmd_d©a
->
¥ogøm
) {

480 
	`push_cou¡_ch¨s
(&
tmpcc
, 
cmd_d©a
->
¥ogøm
);

483 
	`≠≥nd_cou¡_ch¨s
(&
tmpcc
, 
cmd_d©a
->
¥ogøm_›ts
);

485 
	`≠≥nd_cou¡_ch¨s
(&
tmpcc
, 
cc
);

487 
comm™d
 = 
	`shñl_esc
(
	`Ê©ãn_cou¡_ch¨s
(&
tmpcc
, 1));

489 
•awn_¨gs
[0] = 
SHELL_CMD
;

490 
•awn_¨gs
[1] = "-c";

491 
•awn_¨gs
[2] = 
comm™d
;

492 
•awn_¨gs
[3] = 
NULL
;

493  
	`exã∫Æ_•awn
(
cmd_d©a
, 
•awn_¨gs
[0], (const **)spawn_args);

494 
	}
}

500 
	$¥öt_c⁄fig
()

502 #ifde‡
LD_RUN_PATH


503 
	`¥ötf
("ru≈©h_v¨=%s\n", 
LD_RUN_PATH
);

505 #ifde‡
LD_LIBRARY_PATH


506 
	`¥ötf
("shlib∑th_v¨=%s\n", 
LD_LIBRARY_PATH
);

508 #ifde‡
SHELL_CMD


509 
	`¥ötf
("SHELL=\"%s\"\n", 
SHELL_CMD
);

511 
	}
}

515 
	$add_ru¡imedúlib
(*
¨g
, 
comm™d_t
 *
cmd_d©a
)

517 #ifde‡
RPATH


518 
	`add_Ω©h
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
¨g
);

521 
	}
}

523 
	$∑r£_l⁄g_›t
(*
¨g
, 
comm™d_t
 *
cmd_d©a
)

525 *
equÆ_pos
 = 
	`°rchr
(
¨g
, '=');

526 
v¨
[50];

527 
vÆue
[500];

529 i‡(
equÆ_pos
) {

530 
	`°∫˝y
(
v¨
, 
¨g
, 
equÆ_pos
 -árg);

531 
v¨
[
equÆ_pos
 - 
¨g
] = 0;

532 
	`°r˝y
(
vÆue
, 
equÆ_pos
 + 1);

534 
	`°r˝y
(
v¨
, 
¨g
);

537 i‡(
	`°rcmp
(
v¨
, "silent") == 0) {

538 
cmd_d©a
->
›ti⁄s
.
sûít
 = 1;

539 } i‡(
	`°rcmp
(
v¨
, "mode") == 0) {

540 i‡(
	`°rcmp
(
vÆue
, "compile") == 0) {

541 
cmd_d©a
->
mode
 = 
mCompûe
;

542 
cmd_d©a
->
ouçut
 = 
ŸObje˘
;

545 i‡(
	`°rcmp
(
vÆue
, "link") == 0) {

546 
cmd_d©a
->
mode
 = 
mLök
;

547 
cmd_d©a
->
ouçut
 = 
ŸLibøry
;

550 i‡(
	`°rcmp
(
vÆue
, "install") == 0) {

551 
cmd_d©a
->
mode
 = 
mIn°Æl
;

553 } i‡(
	`°rcmp
(
v¨
, "shared") == 0) {

554 i‡(
cmd_d©a
->
mode
 =
mLök
) {

555 
cmd_d©a
->
ouçut
 = 
ŸDy«micLibøryO∆y
;

557 
cmd_d©a
->
›ti⁄s
.
sh¨ed
 = 
sh¨e_SHARED
;

558 } i‡(
	`°rcmp
(
v¨
, "export-all") == 0) {

559 
cmd_d©a
->
›ti⁄s
.
exp‹t_Æl
 = 1;

560 } i‡(
	`°rcmp
(
v¨
, "dry-run") == 0) {

561 
	`¥ötf
("Dry-run mode on!\n");

562 
cmd_d©a
->
›ti⁄s
.
dry_run
 = 1;

563 } i‡(
	`°rcmp
(
v¨
, "version") == 0) {

564 
	`¥ötf
("Vîsi⁄ " 
VERSION
 "\n");

565 } i‡(
	`°rcmp
(
v¨
, "help") == 0) {

566 
	`¥ötf
("Sorry. No helpávailable.\n");

567 } i‡(
	`°rcmp
(
v¨
, "config") == 0) {

568 
	`¥öt_c⁄fig
();

569 } i‡(
	`°rcmp
(
v¨
, "tag") == 0) {

570 i‡(
	`°rcmp
(
vÆue
, "CC") == 0) {

573 i‡(
	`°rcmp
(
vÆue
, "CXX") == 0) {

581 
	}
}

584 
	$∑r£_sh‹t_›t
(*
¨g
, 
comm™d_t
 *
cmd_d©a
)

586 i‡(
	`°rcmp
(
¨g
, "export-dynamic") == 0) {

587 
cmd_d©a
->
›ti⁄s
.
exp‹t_dy«mic
 = 1;

591 i‡(
	`°rcmp
(
¨g
, "module") == 0) {

592 
cmd_d©a
->
ouçut
 = 
ŸModuÀ
;

596 i‡(
	`°rcmp
(
¨g
, "shared") == 0) {

597 i‡(
cmd_d©a
->
mode
 =
mLök
) {

598 
cmd_d©a
->
ouçut
 = 
ŸDy«micLibøryO∆y
;

600 
cmd_d©a
->
›ti⁄s
.
sh¨ed
 = 
sh¨e_SHARED
;

604 i‡(
	`°rcmp
(
¨g
, "Zexe") == 0) {

608 i‡(
	`°rcmp
(
¨g
, "avoid-version") == 0) {

612 i‡(
	`°rcmp
(
¨g
, "prefer-pic") == 0) {

613 
cmd_d©a
->
›ti⁄s
.
pic_mode
 = 
pic_PREFER
;

617 i‡(
	`°rcmp
(
¨g
, "prefer-non-pic") == 0) {

618 
cmd_d©a
->
›ti⁄s
.
pic_mode
 = 
pic_AVOID
;

622 i‡(
	`°rcmp
(
¨g
, "static") == 0) {

623 
cmd_d©a
->
›ti⁄s
.
sh¨ed
 = 
sh¨e_STATIC
;

627 i‡(
cmd_d©a
->
mode
 =
mLök
) {

628 i‡(
	`°rcmp
(
¨g
, "no-install") == 0) {

629 
cmd_d©a
->
›ti⁄s
.
no_ö°Æl
 = 1;

632 i‡(
¨g
[0] == 'L' ||árg[0] == 'l') {

634 
¨g
--;

635 
	`push_cou¡_ch¨s
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
¨g
);

637 } i‡(
¨g
[0] == 'R' &&árg[1]) {

639 
	`add_ru¡imedúlib
(&
¨g
[1], 
cmd_d©a
);

644 
	}
}

646 *
	$åunˇã_dŒ_«me
(*
∑th
)

649 *
tmµ©h
 = 
	`°rdup
(
∑th
);

650 *
√w«me
 = 
	`°ºchr
(
tmµ©h
, '/') + 1;

651 *
ext
 = 
	`°ºchr
(
tmµ©h
, '.');

652 
Àn
;

654 i‡(
ext
 =
NULL
)

655  
tmµ©h
;

657 
Àn
 = 
ext
 - 
√w«me
;

659 i‡(
	`°∫cmp
(
√w«me
, "mod_", 4) == 0) {

660 
	`°r˝y
(
√w«me
,Çewname + 4);

661 
Àn
 -= 4;

664 i‡(
Àn
 > 8) {

665 
	`°r˝y
(
√w«me
 + 8, 
	`°rchr
(newname, '.'));

668  
tmµ©h
;

669 
	}
}

671 
	$ß„_°πﬁ
(c⁄° *
≈å
, c⁄° **
íd±r
, 
ba£
)

673 
rv
;

675 
î∫o
 = 0;

677 
rv
 = 
	`°πﬁ
(
≈å
, (**)
íd±r
, 10);

679 i‡(
î∫o
 =
ERANGE
) {

683  
rv
;

684 
	}
}

686 
	$ß„_mkdú
(c⁄° *
∑th
)

688 
mode_t
 
ﬁd_umask
;

690 
ﬁd_umask
 = 
	`umask
(0);

691 
	`umask
(
ﬁd_umask
);

693 #ifde‡
MKDIR_NO_UMASK


694 
	`mkdú
(
∑th
);

696 
	`mkdú
(
∑th
, ~
ﬁd_umask
);

698 
	}
}

701 c⁄° *
	$jlibtoﬁ_ba£«me
(c⁄° *
fuŒ∑th
)

703 c⁄° *
«me
 = 
	`°ºchr
(
fuŒ∑th
, '/');

705 i‡(
«me
 =
NULL
) {

706 
«me
 = 
	`°ºchr
(
fuŒ∑th
, '\\');

709 i‡(
«me
 =
NULL
) {

710 
«me
 = 
fuŒ∑th
;

712 
«me
++;

715  
«me
;

716 
	}
}

719 c⁄° *
	$«meof
(c⁄° *
fuŒ∑th
)

721 c⁄° *
«me
;

722 c⁄° *
ext
;

724 
«me
 = 
	`jlibtoﬁ_ba£«me
(
fuŒ∑th
);

725 
ext
 = 
	`°ºchr
(
«me
, '.');

727 i‡(
ext
) {

728 *
åimmed
;

729 
åimmed
 = 
	`mÆloc
(
ext
 - 
«me
 + 1);

730 
	`°∫˝y
(
åimmed
, 
«me
, 
ext
 -Çame);

731 
åimmed
[
ext
-
«me
] = 0;

732  
åimmed
;

735  
«me
;

736 
	}
}

739 c⁄° *
	$d¨wö_dy«mic_lök_fun˘i⁄
(c⁄° *
vîsi⁄_öfo
)

741 *
√w¨g
;

742 
maj‹
, 
mö‹
, 
∑tch
;

744 
maj‹
 = 0;

745 
mö‹
 = 0;

746 
∑tch
 = 0;

748 i‡(
vîsi⁄_öfo
) {

749 
maj‹
 = 
	`ß„_°πﬁ
(
vîsi⁄_öfo
, &version_info, 10);

751 i‡(
vîsi⁄_öfo
) {

752 i‡(
vîsi⁄_öfo
[0] == ':') {

753 
vîsi⁄_öfo
++;

756 
mö‹
 = 
	`ß„_°πﬁ
(
vîsi⁄_öfo
, &version_info, 10);

758 i‡(
vîsi⁄_öfo
) {

759 i‡(
vîsi⁄_öfo
[0] == ':') {

760 
vîsi⁄_öfo
++;

763 
∑tch
 = 
	`ß„_°πﬁ
(
vîsi⁄_öfo
, &version_info, 10);

770 i‡(
maj‹
 == 0) {

771 
maj‹
 = 1;

773 
√w¨g
 = (*)
	`mÆloc
(100);

774 
	`¢¥ötf
(
√w¨g
, 99,

776 
maj‹
, maj‹, 
mö‹
);

778  
√w¨g
;

779 
	}
}

786 *
	$gí_libøry_«me
(c⁄° *
«me
, 
gílib
)

788 *
√w¨g
, *
√wext
;

790 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
«me
) + 11);

791 
	`°r˝y
(
√w¨g
, ".libs/");

793 i‡(
gílib
 =2 && 
	`°∫cmp
(
«me
, "lib", 3) == 0) {

794 
«me
 += 3;

797 i‡(
gílib
 == 2) {

798 
	`°rˇt
(
√w¨g
, 
	`jlibtoﬁ_ba£«me
(
«me
));

801 
	`°rˇt
(
√w¨g
, 
«me
);

804 
√wext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

806 
gílib
) {

808 
	`°r˝y
(
√wext
, 
STATIC_LIB_EXT
);

811 
	`°r˝y
(
√wext
, 
DYNAMIC_LIB_EXT
);

814 
	`°r˝y
(
√wext
, 
MODULE_LIB_EXT
);

818  
√w¨g
;

819 
	}
}

826 *
	$gí_ö°Æl_«me
(c⁄° *
«me
, 
gílib
)

828 
°©
 
sb
;

829 *
√w«me
;

830 
rv
;

832 
√w«me
 = 
	`gí_libøry_«me
(
«me
, 
gílib
);

835 
rv
 = 
	`°©
(
√w«me
, &
sb
);

837 i‡(
rv
) {

838  
NULL
;

841  
√w«me
;

842 
	}
}

844 *
	$check_obje˘_exi°s
(
comm™d_t
 *
cmd
, c⁄° *
¨g
, 
¨gÀn
)

846 *
√w¨g
, *
ext
;

847 
∑ss
, 
rv
;

849 
√w¨g
 = (*)
	`mÆloc
(
¨gÀn
 + 10);

850 
	`mem˝y
(
√w¨g
, 
¨g
, 
¨gÀn
);

851 
√w¨g
[
¨gÀn
] = 0;

852 
ext
 = 
√w¨g
 + 
¨gÀn
;

854 
∑ss
 = 0;

857 
°©
 
sb
;

859 
∑ss
) {

861 
	`°r˝y
(
ext
, 
OBJECT_EXT
);

872 i‡(!
cmd
->
›ti⁄s
.
sûít
) {

873 
	`¥ötf
("Checkög (obj): %s\n", 
√w¨g
);

875 
rv
 = 
	`°©
(
√w¨g
, &
sb
);

877 
rv
 !0 && ++
∑ss
 < 1);

879 i‡(
rv
 == 0) {

880 i‡(
∑ss
 == 1) {

881 
cmd
->
›ti⁄s
.
pic_mode
 = 
pic_AVOID
;

883  
√w¨g
;

886  
NULL
;

887 
	}
}

893 *
	$check_libøry_exi°s
(
comm™d_t
 *
cmd
, c⁄° *
¨g
, 
∑thÀn
,

894 
libdúcheck
, 
lib_ty≥
 *
libty≥
)

896 *
√w¨g
, *
ext
;

897 
∑ss
, 
rv
, 
√w∑thÀn
;

899 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 10);

900 
	`°r˝y
(
√w¨g
, 
¨g
);

901 
√w¨g
[
∑thÀn
] = 0;

903 
√w∑thÀn
 = 
∑thÀn
;

904 i‡(
libdúcheck
) {

905 
	`°rˇt
(
√w¨g
, ".libs/");

906 
√w∑thÀn
 += (".libs/") - 1;

909 
	`°r˝y
(
√w¨g
+
√w∑thÀn
, 
¨g
+
∑thÀn
);

910 
ext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

912 
∑ss
 = 0;

915 
°©
 
sb
;

917 
∑ss
) {

919 i‡(
cmd
->
›ti⁄s
.
pic_mode
 !
pic_AVOID
 &&

920 
cmd
->
›ti⁄s
.
sh¨ed
 !
sh¨e_STATIC
) {

921 
	`°r˝y
(
ext
, 
DYNAMIC_LIB_EXT
);

922 *
libty≥
 = 
ty≥_DYNAMIC_LIB
;

925 
∑ss
 = 1;

928 
	`°r˝y
(
ext
, 
STATIC_LIB_EXT
);

929 *
libty≥
 = 
ty≥_STATIC_LIB
;

932 
	`°r˝y
(
ext
, 
MODULE_LIB_EXT
);

933 *
libty≥
 = 
ty≥_MODULE_LIB
;

936 
	`°r˝y
(
ext
, 
OBJECT_EXT
);

937 *
libty≥
 = 
ty≥_OBJECT
;

940 *
libty≥
 = 
ty≥_UNKNOWN
;

944 i‡(!
cmd
->
›ti⁄s
.
sûít
) {

945 
	`¥ötf
("Checkög (lib): %s\n", 
√w¨g
);

947 
rv
 = 
	`°©
(
√w¨g
, &
sb
);

949 
rv
 !0 && ++
∑ss
 < 4);

951 i‡(
rv
 == 0) {

952  
√w¨g
;

955  
NULL
;

956 
	}
}

958 * 
	$lﬂd_ö°Æl_∑th
(c⁄° *
¨g
)

960 
FILE
 *
f
;

961 *
∑th
;

963 
∑th
 = 
	`mÆloc
(
PATH_MAX
);

965 
f
 = 
	`f›í
(
¨g
,"r");

966 i‡(
f
 =
NULL
) {

967  
NULL
;

969 
	`fgës
(
∑th
, 
PATH_MAX
, 
f
);

970 
	`f˛o£
(
f
);

971 i‡(
∑th
[
	`°æí
(path)-1] == '\n') {

972 
∑th
[
	`°æí
(path)-1] = '\0';

977 i‡(
∑th
[0] != '/') {

978  
NULL
;

980  
∑th
;

981 
	}
}

983 * 
	$lﬂd_noö°Æl_∑th
(c⁄° *
¨g
, 
∑thÀn
)

985 *
√w¨g
, *
ex∑nded_∑th
;

986 
√w∑thÀn
;

988 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 10);

989 
	`°r˝y
(
√w¨g
, 
¨g
);

990 
√w¨g
[
∑thÀn
] = 0;

992 
√w∑thÀn
 = 
∑thÀn
;

993 
	`°rˇt
(
√w¨g
, ".libs");

994 
√w∑thÀn
 += (".libs") - 1;

995 
√w¨g
[
√w∑thÀn
] = 0;

997 #ifde‡
HAS_REALPATH


998 
ex∑nded_∑th
 = 
	`mÆloc
(
PATH_MAX
);

999 
ex∑nded_∑th
 = 
	`ªÆ∑th
(
√w¨g
,Éxpanded_path);

1001 i‡(!
ex∑nded_∑th
) {

1002 
ex∑nded_∑th
 = 
√w¨g
;

1006 
ex∑nded_∑th
 = 
√w¨g
;

1009  
ex∑nded_∑th
;

1010 
	}
}

1012 
	$add_dy«mic_lök_›ts
(
comm™d_t
 *
cmd_d©a
, 
cou¡_ch¨s
 *
¨gs
)

1014 #ifde‡
DYNAMIC_LINK_OPTS


1015 i‡(
cmd_d©a
->
›ti⁄s
.
pic_mode
 !
pic_AVOID
) {

1016 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1017 
	`¥ötf
("Addög: %s\n", 
DYNAMIC_LINK_OPTS
);

1019 
	`push_cou¡_ch¨s
(
¨gs
, 
DYNAMIC_LINK_OPTS
);

1020 i‡(
cmd_d©a
->
undeföed_Êag
) {

1021 
	`push_cou¡_ch¨s
(
¨gs
, "-undefined");

1022 #i‡
	`deföed
(
__APPLE__
)

1027 i‡(
	`°rˇ£cmp
(
cmd_d©a
->
undeföed_Êag
,

1029 
	`ö£π_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
,

1033 
	`push_cou¡_ch¨s
(
¨gs
, 
cmd_d©a
->
undeföed_Êag
);

1036 #ifde‡
DYNAMIC_LINK_UNDEFINED


1037 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1038 
	`¥ötf
("Addög: %s\n", 
DYNAMIC_LINK_UNDEFINED
);

1040 
	`push_cou¡_ch¨s
(
¨gs
, 
DYNAMIC_LINK_UNDEFINED
);

1045 
	}
}

1048 #ifde‡
RPATH


1049 
	$add_Ω©h
(
cou¡_ch¨s
 *
cc
, c⁄° *
∑th
)

1051 
size
 = 0;

1052 *
tmp
;

1054 #ifde‡
LINKER_FLAG_PREFIX


1055 
size
 = 
	`°æí
(
LINKER_FLAG_PREFIX
);

1057 
size
 = sizê+ 
	`°æí
(
∑th
Ë+ såÀn(
RPATH
) + 2;

1058 
tmp
 = 
	`mÆloc
(
size
);

1059 i‡(
tmp
 =
NULL
) {

1062 #ifde‡
LINKER_FLAG_PREFIX


1063 
	`°r˝y
(
tmp
, 
LINKER_FLAG_PREFIX
);

1064 
	`°rˇt
(
tmp
, 
RPATH
);

1066 
	`°r˝y
(
tmp
, 
RPATH
);

1068 #i‚de‡
LINKER_FLAG_NO_EQUALS


1069 
	`°rˇt
(
tmp
, "=");

1071 
	`°rˇt
(
tmp
, 
∑th
);

1073 
	`push_cou¡_ch¨s
(
cc
, 
tmp
);

1074 
	}
}

1076 
	$add_Ω©h_fûe
(
cou¡_ch¨s
 *
cc
, c⁄° *
¨g
)

1078 c⁄° *
∑th
;

1080 
∑th
 = 
	`lﬂd_ö°Æl_∑th
(
¨g
);

1081 i‡(
∑th
) {

1082 
	`add_Ω©h
(
cc
, 
∑th
);

1084 
	}
}

1086 
	$add_Ω©h_noö°Æl
(
cou¡_ch¨s
 *
cc
, c⁄° *
¨g
, 
∑thÀn
)

1088 c⁄° *
∑th
;

1090 
∑th
 = 
	`lﬂd_noö°Æl_∑th
(
¨g
, 
∑thÀn
);

1091 i‡(
∑th
) {

1092 
	`add_Ω©h
(
cc
, 
∑th
);

1094 
	}
}

1097 #ifde‡
DYNAMIC_LINK_NO_INSTALL


1098 
	$add_dylök_noö°Æl
(
cou¡_ch¨s
 *
cc
, c⁄° *
¨g
, 
∑thÀn
,

1099 
exéí
)

1101 c⁄° *
ö°Æl_∑th
, *
cuºít_∑th
, *
«me
;

1102 *
exp_¨gumít
;

1103 
i_p_Àn
, 
c_p_Àn
, 
«me_Àn
, 
dyext_Àn
, 
cur_Àn
;

1105 
ö°Æl_∑th
 = 
	`lﬂd_ö°Æl_∑th
(
¨g
);

1106 
cuºít_∑th
 = 
	`lﬂd_noö°Æl_∑th
(
¨g
, 
∑thÀn
);

1108 i‡(!
ö°Æl_∑th
 || !
cuºít_∑th
) {

1112 
	`push_cou¡_ch¨s
(
cc
, 
DYNAMIC_LINK_NO_INSTALL
);

1114 
i_p_Àn
 = 
	`°æí
(
ö°Æl_∑th
);

1115 
c_p_Àn
 = 
	`°æí
(
cuºít_∑th
);

1117 
«me
 = 
¨g
+
∑thÀn
;

1118 
«me_Àn
 = 
exéí
-
∑thÀn
;

1119 
dyext_Àn
 = (
DYNAMIC_LIB_EXT
) - 1;

1122 
exp_¨gumít
 = (*)
	`mÆloc
(
i_p_Àn
 + 
c_p_Àn
 + (
«me_Àn
*2) +

1123 (
dyext_Àn
*2) + 2);

1125 
cur_Àn
 = 0;

1126 
	`°r˝y
(
exp_¨gumít
, 
ö°Æl_∑th
);

1127 
cur_Àn
 +
i_p_Àn
;

1128 
exp_¨gumít
[
cur_Àn
++] = '/';

1129 
	`°∫˝y
(
exp_¨gumít
+
cur_Àn
, 
«me
, 
exéí
-
∑thÀn
);

1130 
cur_Àn
 +
«me_Àn
;

1131 
	`°r˝y
(
exp_¨gumít
+
cur_Àn
, 
DYNAMIC_LIB_EXT
);

1132 
cur_Àn
 +
dyext_Àn
;

1133 
exp_¨gumít
[
cur_Àn
++] = ':';

1134 
	`°r˝y
(
exp_¨gumít
+
cur_Àn
, 
cuºít_∑th
);

1135 
cur_Àn
 +
c_p_Àn
;

1136 
exp_¨gumít
[
cur_Àn
++] = '/';

1137 
	`°∫˝y
(
exp_¨gumít
+
cur_Àn
, 
«me
, 
exéí
-
∑thÀn
);

1138 
cur_Àn
 +
«me_Àn
;

1139 
	`°r˝y
(
exp_¨gumít
+
cur_Àn
, 
DYNAMIC_LIB_EXT
);

1140 
cur_Àn
 +
dyext_Àn
;

1142 
	`push_cou¡_ch¨s
(
cc
, 
exp_¨gumít
);

1143 
	}
}

1147 
	$add_möus_l
(
cou¡_ch¨s
 *
cc
, c⁄° *
¨g
)

1149 *
√w¨g
;

1150 *
«me
 = 
	`°ºchr
(
¨g
, '/');

1151 *
fûe
 = 
	`°ºchr
(
¨g
, '.');

1152 *
lib
 = 
	`°r°r
(
«me
, "lib");

1154 i‡(
«me
 !=
NULL
 && 
fûe
 !NULL && 
lib
 ==Çame+1) {

1155 *
«me
 = '\0';

1156 *
fûe
 = '\0';

1157 
fûe
 = 
«me
;

1158 
fûe
 = file+4;

1159 
	`push_cou¡_ch¨s
(
cc
, "-L");

1160 
	`push_cou¡_ch¨s
(
cc
, 
¨g
);

1162 
√w¨g
 = 
	`mÆloc
(
	`°æí
(
fûe
) + 3);

1163 
	`°r˝y
(
√w¨g
, "-l");

1164 
	`°rˇt
(
√w¨g
, 
fûe
);

1165 
	`push_cou¡_ch¨s
(
cc
, 
√w¨g
);

1167 
	`push_cou¡_ch¨s
(
cc
, 
¨g
);

1169 
	}
}

1171 
	$add_lökî_Êag_¥efix
(
cou¡_ch¨s
 *
cc
, c⁄° *
¨g
)

1173 #i‚de‡
LINKER_FLAG_PREFIX


1174 
	`push_cou¡_ch¨s
(
cc
, 
¨g
);

1176 *
√w¨g
;

1177 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
Ë+ (
LINKER_FLAG_PREFIX
) + 1);

1178 
	`°r˝y
(
√w¨g
, 
LINKER_FLAG_PREFIX
);

1179 
	`°rˇt
(
√w¨g
, 
¨g
);

1180 
	`push_cou¡_ch¨s
(
cc
, 
√w¨g
);

1182 
	}
}

1184 
	$ex∂ode_°©ic_lib
(
comm™d_t
 *
cmd_d©a
, c⁄° *
lib
)

1186 
cou¡_ch¨s
 
tmpdú_cc
, 
lib«me_cc
;

1187 c⁄° *
tmpdú
, *
lib«me
;

1188 
ßvewd
[
PATH_MAX
];

1189 c⁄° *
«me
;

1190 
DIR
 *
dú
;

1191 
dúít
 *
íåy
;

1192 c⁄° *
lib_¨gs
[4];

1195 i‡(
cmd_d©a
->
›ti⁄s
.
dry_run
) {

1199 
«me
 = 
	`jlibtoﬁ_ba£«me
(
lib
);

1201 
	`öô_cou¡_ch¨s
(&
tmpdú_cc
);

1202 
	`push_cou¡_ch¨s
(&
tmpdú_cc
, ".libs/");

1203 
	`push_cou¡_ch¨s
(&
tmpdú_cc
, 
«me
);

1204 
	`push_cou¡_ch¨s
(&
tmpdú_cc
, ".exploded/");

1205 
tmpdú
 = 
	`Ê©ãn_cou¡_ch¨s
(&
tmpdú_cc
, 0);

1207 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1208 
	`¥ötf
("Makög: %s\n", 
tmpdú
);

1210 
	`ß„_mkdú
(
tmpdú
);

1212 
	`push_cou¡_ch¨s
(
cmd_d©a
->
tmp_dús
, 
tmpdú
);

1214 
	`gëcwd
(
ßvewd
, (savewd));

1216 i‡(
	`chdú
(
tmpdú
) != 0) {

1217 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1218 
	`¥ötf
("W¨nög: couldÇŸÉx∂odê%s\n", 
lib
);

1223 i‡(
lib
[0] == '/') {

1224 
lib«me
 = 
lib
;

1227 
	`öô_cou¡_ch¨s
(&
lib«me_cc
);

1228 
	`push_cou¡_ch¨s
(&
lib«me_cc
, "../../");

1229 
	`push_cou¡_ch¨s
(&
lib«me_cc
, 
lib
);

1230 
lib«me
 = 
	`Ê©ãn_cou¡_ch¨s
(&
lib«me_cc
, 0);

1233 
lib_¨gs
[0] = 
LIBRARIAN
;

1234 
lib_¨gs
[1] = "x";

1235 
lib_¨gs
[2] = 
lib«me
;

1236 
lib_¨gs
[3] = 
NULL
;

1238 
	`exã∫Æ_•awn
(
cmd_d©a
, 
LIBRARIAN
, 
lib_¨gs
);

1240 
	`chdú
(
ßvewd
);

1241 
dú
 = 
	`›ídú
(
tmpdú
);

1243 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

1244 #i‡
	`deföed
(
__APPLE__
Ë&& deföed(
RANLIB
)

1249 i‡(
	`°r°r
(
íåy
->
d_«me
, "__.SYMDEF"Ë!
NULL
) {

1253 i‡(
íåy
->
d_«me
[0] != '.') {

1254 
	`push_cou¡_ch¨s
(&
tmpdú_cc
, 
íåy
->
d_«me
);

1255 
«me
 = 
	`Ê©ãn_cou¡_ch¨s
(&
tmpdú_cc
, 0);

1256 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1257 
	`¥ötf
("Addög: %s\n", 
«me
);

1259 
	`push_cou¡_ch¨s
(
cmd_d©a
->
obj_fûes
, 
«me
);

1260 
	`p›_cou¡_ch¨s
(&
tmpdú_cc
);

1264 
	`˛o£dú
(
dú
);

1266 
	}
}

1268 
	$∑r£_öput_fûe_«me
(*
¨g
, 
comm™d_t
 *
cmd_d©a
)

1270 *
ext
 = 
	`°ºchr
(
¨g
, '.');

1271 *
«me
 = 
	`°ºchr
(
¨g
, '/');

1272 
∑thÀn
;

1273 
lib_ty≥
 
libty≥
;

1274 *
√w¨g
;

1276 i‡(!
ext
) {

1280 
ext
++;

1282 i‡(
«me
 =
NULL
) {

1283 
«me
 = 
	`°ºchr
(
¨g
, '\\');

1285 i‡(
«me
 =
NULL
) {

1286 
«me
 = 
¨g
;

1288 
«me
++;

1291 
«me
++;

1294 
∑thÀn
 = 
«me
 - 
¨g
;

1296 i‡(
	`°rcmp
(
ext
, "lo") == 0) {

1297 
√w¨g
 = 
	`check_obje˘_exi°s
(
cmd_d©a
, 
¨g
, 
ext
 -árg);

1298 i‡(!
√w¨g
) {

1299 
	`¥ötf
("C™ÇŸ föd suôabÀ obje˘ fûêf‹ %s\n", 
¨g
);

1300 
	`exô
(1);

1302 i‡(
cmd_d©a
->
mode
 !
mLök
) {

1303 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
√w¨g
);

1306 
	`push_cou¡_ch¨s
(
cmd_d©a
->
obj_fûes
, 
√w¨g
);

1311 i‡(
	`°rcmp
(
ext
, "la") == 0) {

1312 
cmd_d©a
->
mode
) {

1313 
mLök
:

1315 
√w¨g
 = 
	`check_libøry_exi°s
(
cmd_d©a
, 
¨g
, 
∑thÀn
, 1, &
libty≥
);

1316 i‡(!
√w¨g
) {

1318 
√w¨g
 = 
	`check_libøry_exi°s
(
cmd_d©a
, 
¨g
, 
∑thÀn
, 0, &
libty≥
);

1319 i‡(!
√w¨g
) {

1320 
	`¥ötf
("C™ÇŸ föd suôabÀÜibøry f‹ %s\n", 
¨g
);

1321 
	`exô
(1);

1329 #ifde‡
ADD_MINUS_L


1330 i‡(
libty≥
 =
ty≥_DYNAMIC_LIB
) {

1331 
	`add_möus_l
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
√w¨g
);

1332 } i‡(
cmd_d©a
->
ouçut
 =
ŸLibøry
 &&

1333 
libty≥
 =
ty≥_STATIC_LIB
) {

1334 
	`ex∂ode_°©ic_lib
(
cmd_d©a
, 
√w¨g
);

1336 
	`push_cou¡_ch¨s
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
√w¨g
);

1339 i‡(
cmd_d©a
->
ouçut
 =
ŸLibøry
 && 
libty≥
 =
ty≥_STATIC_LIB
) {

1340 
	`ex∂ode_°©ic_lib
(
cmd_d©a
, 
√w¨g
);

1343 
	`push_cou¡_ch¨s
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
√w¨g
);

1346 i‡(
libty≥
 =
ty≥_DYNAMIC_LIB
) {

1347 i‡(
cmd_d©a
->
›ti⁄s
.
no_ö°Æl
) {

1348 #ifde‡
RPATH


1349 
	`add_Ω©h_noö°Æl
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
,

1350 
¨g
, 
∑thÀn
);

1352 #ifde‡
DYNAMIC_LINK_NO_INSTALL


1365 #ifde‡
RPATH


1366 
	`add_Ω©h_fûe
(
cmd_d©a
->
sh¨ed_›ts
.
dïídícõs
, 
¨g
);

1371 
mIn°Æl
:

1377 i‡(
cmd_d©a
->
ouçut
 =
ŸLibøry
) {

1378 
¨g
[
∑thÀn
] = '\0';

1379 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
¨g
);

1382 
cmd_d©a
->
ouçut
 = 
ŸLibøry
;

1383 
cmd_d©a
->
ouçut_«me
 = 
¨g
;

1384 
cmd_d©a
->
°©ic_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 0);

1385 
cmd_d©a
->
sh¨ed_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 1);

1386 
cmd_d©a
->
moduÀ_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 2);

1395 i‡(
	`°rcmp
(
ext
, "c") == 0) {

1397 i‡(
cmd_d©a
->
ba£«me
 =
NULL
) {

1398 
cmd_d©a
->
ba£«me
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 4);

1399 
	`°r˝y
(
cmd_d©a
->
ba£«me
, 
¨g
);

1400 
	`°r˝y
(
	`°ºchr
(
cmd_d©a
->
ba£«me
, '.') + 1, "lo");

1402 
cmd_d©a
->
Áke_ouçut_«me
 = 
	`°ºchr
(cmd_d©a->
ba£«me
, '/');

1403 i‡(
cmd_d©a
->
Áke_ouçut_«me
) {

1404 
cmd_d©a
->
Áke_ouçut_«me
++;

1407 
cmd_d©a
->
Áke_ouçut_«me
 = cmd_d©a->
ba£«me
;

1413 
	}
}

1415 
	$∑r£_ouçut_fûe_«me
(*
¨g
, 
comm™d_t
 *
cmd_d©a
)

1417 *
«me
 = 
	`°ºchr
(
¨g
, '/');

1418 *
ext
 = 
	`°ºchr
(
¨g
, '.');

1419 *
√w¨g
 = 
NULL
;

1420 
∑thÀn
;

1422 
cmd_d©a
->
Áke_ouçut_«me
 = 
¨g
;

1424 i‡(
«me
) {

1425 
«me
++;

1428 
«me
 = 
	`°ºchr
(
¨g
, '\\');

1430 i‡(
«me
 =
NULL
) {

1431 
«me
 = 
¨g
;

1434 
«me
++;

1438 #ifde‡
EXE_EXT


1439 i‡(!
ext
 || 
	`°rcmp
”xt, 
EXE_EXT
) == 0) {

1441 i‡(!
ext
) {

1443 
cmd_d©a
->
ba£«me
 = 
¨g
;

1444 
cmd_d©a
->
ouçut
 = 
ŸProgøm
;

1445 #i‡
	`deföed
(
_OSD_POSIX
)

1446 
cmd_d©a
->
›ti⁄s
.
pic_mode
 = 
pic_AVOID
;

1448 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 5);

1449 
	`°r˝y
(
√w¨g
, 
¨g
);

1450 #ifde‡
EXE_EXT


1451 i‡(!
ext
) {

1452 
	`°rˇt
(
√w¨g
, 
EXE_EXT
);

1455 
cmd_d©a
->
ouçut_«me
 = 
√w¨g
;

1459 
ext
++;

1460 
∑thÀn
 = 
«me
 - 
¨g
;

1462 i‡(
	`°rcmp
(
ext
, "la") == 0) {

1463 
	`as£π
(
cmd_d©a
->
mode
 =
mLök
);

1465 
cmd_d©a
->
ba£«me
 = 
¨g
;

1466 
cmd_d©a
->
°©ic_«me
.
n‹mÆ
 = 
	`gí_libøry_«me
(
¨g
, 0);

1467 
cmd_d©a
->
sh¨ed_«me
.
n‹mÆ
 = 
	`gí_libøry_«me
(
¨g
, 1);

1468 
cmd_d©a
->
moduÀ_«me
.
n‹mÆ
 = 
	`gí_libøry_«me
(
¨g
, 2);

1469 
cmd_d©a
->
°©ic_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 0);

1470 
cmd_d©a
->
sh¨ed_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 1);

1471 
cmd_d©a
->
moduÀ_«me
.
ö°Æl
 = 
	`gí_ö°Æl_«me
(
¨g
, 2);

1473 #ifde‡
TRUNCATE_DLL_NAME


1474 i‡(
sh¨ed
) {

1475 
¨g
 = 
	`åunˇã_dŒ_«me
(arg);

1479 
cmd_d©a
->
ouçut_«me
 = 
¨g
;

1483 i‡(
	`°rcmp
(
ext
, "lo") == 0) {

1484 
cmd_d©a
->
ba£«me
 = 
¨g
;

1485 
cmd_d©a
->
ouçut
 = 
ŸObje˘
;

1486 
√w¨g
 = (*)
	`mÆloc
(
	`°æí
(
¨g
) + 2);

1487 
	`°r˝y
(
√w¨g
, 
¨g
);

1488 
ext
 = 
	`°ºchr
(
√w¨g
, '.') + 1;

1489 
	`°r˝y
(
ext
, 
OBJECT_EXT
);

1490 
cmd_d©a
->
ouçut_«me
 = 
√w¨g
;

1495 
	}
}

1497 
	$∑r£_¨gs
(
¨gc
, *
¨gv
[], 
comm™d_t
 *
cmd_d©a
)

1499 
a
;

1500 *
¨g
;

1501 
¨gu£d
;

1503 
a
 = 1;á < 
¨gc
;á++) {

1504 
¨g
 = 
¨gv
[
a
];

1505 
¨gu£d
 = 1;

1507 i‡(
¨g
[0] == '-') {

1508 i‡(
¨g
[1] == '-') {

1509 
¨gu£d
 = 
	`∑r£_l⁄g_›t
(
¨g
 + 2, 
cmd_d©a
);

1512 
¨gu£d
 = 
	`∑r£_sh‹t_›t
(
¨g
 + 1, 
cmd_d©a
);

1517 i‡(
¨gu£d
 =0 && 
a
 + 1 < 
¨gc
) {

1518 i‡(
¨g
[1] == 'o' && !arg[2]) {

1519 
¨g
 = 
¨gv
[++
a
];

1520 
¨gu£d
 = 
	`∑r£_ouçut_fûe_«me
(
¨g
, 
cmd_d©a
);

1521 } i‡(
	`°rcmp
(
¨g
+1, "MT") == 0) {

1522 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1523 
	`¥ötf
("Addög: %s\n", 
¨g
);

1525 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
¨g
);

1526 
¨g
 = 
¨gv
[++
a
];

1527 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1528 
	`¥ötf
(" %s\n", 
¨g
);

1530 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
¨g
);

1531 
¨gu£d
 = 1;

1532 } i‡(
	`°rcmp
(
¨g
+1, "rpath") == 0) {

1534 
cmd_d©a
->
ö°Æl_∑th
 = 
¨gv
[++
a
];

1535 
¨gu£d
 = 1;

1536 } i‡(
	`°rcmp
(
¨g
+1, "release") == 0) {

1538 
cmd_d©a
->
vîsi⁄_öfo
 = 
¨gv
[++
a
];

1539 
¨gu£d
 = 1;

1540 } i‡(
	`°rcmp
(
¨g
+1, "version-info") == 0) {

1542 
cmd_d©a
->
vîsi⁄_öfo
 = 
¨gv
[++
a
];

1543 
¨gu£d
 = 1;

1544 } i‡(
	`°rcmp
(
¨g
+1, "export-symbols-regex") == 0) {

1546 ++
a
;

1547 
¨gu£d
 = 1;

1548 } i‡(
	`°rcmp
(
¨g
+1, "release") == 0) {

1550 ++
a
;

1551 
¨gu£d
 = 1;

1552 } i‡(
	`°rcmp
(
¨g
+1, "undefined") == 0) {

1553 
cmd_d©a
->
undeföed_Êag
 = 
¨gv
[++
a
];

1554 
¨gu£d
 = 1;

1555 } i‡(
¨g
[1] == 'R' && !arg[2]) {

1557 
	`add_ru¡imedúlib
(
¨gv
[++
a
], 
cmd_d©a
);

1558 
¨gu£d
 = 1;

1562 
¨gu£d
 = 
	`∑r£_öput_fûe_«me
(
¨g
, 
cmd_d©a
);

1565 i‡(!
¨gu£d
) {

1566 i‡(!
cmd_d©a
->
›ti⁄s
.
sûít
) {

1567 
	`¥ötf
("Addög: %s\n", 
¨g
);

1569 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
¨g
);

1573 
	}
}

1575 #ifde‡
GEN_EXPORTS


1576 
	$gíî©e_def_fûe
(
comm™d_t
 *
cmd_d©a
)

1578 
def_fûe
[1024];

1579 
im∂ib_fûe
[1024];

1580 *
ext
;

1581 
FILE
 *
hDef
;

1582 *
exp‹t_¨gs
[1024];

1583 
num_exp‹t_¨gs
 = 0;

1584 *
cmd
;

1585 
cmd_size
 = 0;

1586 
a
;

1588 i‡(
cmd_d©a
->
ouçut_«me
) {

1589 
	`°r˝y
(
def_fûe
, 
cmd_d©a
->
ouçut_«me
);

1590 
	`°rˇt
(
def_fûe
, ".def");

1591 
hDef
 = 
	`f›í
(
def_fûe
, "w");

1593 i‡(
hDef
 !
NULL
) {

1594 
	`Ârötf
(
hDef
, "LIBRARY '%s' INITINSTANCE\n", 
	`«meof
(
cmd_d©a
->
ouçut_«me
));

1595 
	`Ârötf
(
hDef
, "DATA NONSHARED\n");

1596 
	`Ârötf
(
hDef
, "EXPORTS\n");

1597 
	`f˛o£
(
hDef
);

1599 
a
 = 0;á < 
cmd_d©a
->
num_obj_fûes
;á++) {

1600 
cmd_size
 +
	`°æí
(
cmd_d©a
->
obj_fûes
[
a
]) + 1;

1603 
cmd_size
 +
	`°æí
(
GEN_EXPORTS
Ë+ såÀn(
def_fûe
) + 3;

1604 
cmd
 = (*)
	`mÆloc
(
cmd_size
);

1605 
	`°r˝y
(
cmd
, 
GEN_EXPORTS
);

1607 
a
=0;á < 
cmd_d©a
->
num_obj_fûes
;á++) {

1608 
	`°rˇt
(
cmd
, " ");

1609 
	`°rˇt
(
cmd
, 
cmd_d©a
->
obj_fûes
[
a
] );

1612 
	`°rˇt
(
cmd
, ">>");

1613 
	`°rˇt
(
cmd
, 
def_fûe
);

1614 
	`puts
(
cmd
);

1615 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
SHELL_CMD
;

1616 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = "-c";

1617 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
cmd
;

1618 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
NULL
;

1619 
	`exã∫Æ_•awn
(
cmd_d©a
, 
exp‹t_¨gs
[0], (const **)export_args);

1620 
cmd_d©a
->
¨gli°
[cmd_d©a->
num_¨gs
++] = 
	`°rdup
(
def_fûe
);

1623 
num_exp‹t_¨gs
 = 0;

1624 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
DEF2IMPLIB_CMD
;

1625 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = "-o";

1627 
	`°r˝y
(
im∂ib_fûe
, ".libs/");

1628 
	`°rˇt
(
im∂ib_fûe
, 
cmd_d©a
->
ba£«me
);

1629 
ext
 = 
	`°ºchr
(
im∂ib_fûe
, '.');

1631 i‡(
ext
)

1632 *
ext
 = 0;

1634 
	`°rˇt
(
im∂ib_fûe
, ".");

1635 
	`°rˇt
(
im∂ib_fûe
, 
STATIC_LIB_EXT
);

1637 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
im∂ib_fûe
;

1638 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
def_fûe
;

1639 
exp‹t_¨gs
[
num_exp‹t_¨gs
++] = 
NULL
;

1640 
	`exã∫Æ_•awn
(
cmd_d©a
, 
exp‹t_¨gs
[0], (const **)export_args);

1644 
	}
}

1647 c⁄° * 
	$ex∑nd_∑th
(c⁄° *
ªÕ©h
)

1649 
foo
[
PATH_MAX
], *
√w∑th
;

1651 
	`gëcwd
(
foo
, 
PATH_MAX
-1);

1652 
√w∑th
 = (*)
	`mÆloc
(
	`°æí
(
foo
)+°æí(
ªÕ©h
)+2);

1653 
	`°r˝y
(
√w∑th
, 
foo
);

1654 
	`°rˇt
(
√w∑th
, "/");

1655 
	`°rˇt
(
√w∑th
, 
ªÕ©h
);

1656  
√w∑th
;

1657 
	}
}

1659 
	$lök_fixup
(
comm™d_t
 *
c
)

1665 i‡(!
c
->
ö°Æl_∑th
 && (c->
ouçut
 =
ŸDy«micLibøryO∆y
 ||

1666 
c
->
ouçut
 =
ŸModuÀ
 || c->ouçuà=
ŸLibøry
)) {

1667 
c
->
ouçut
 = 
ŸSèticLibøryO∆y
;

1670 i‡(
c
->
ouçut
 =
ŸDy«micLibøryO∆y
 ||

1671 
c
->
ouçut
 =
ŸModuÀ
 ||

1672 
c
->
ouçut
 =
ŸLibøry
) {

1674 
	`push_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, "-o");

1675 i‡(
c
->
ouçut
 =
ŸModuÀ
) {

1676 
	`push_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, c->
moduÀ_«me
.normal);

1679 *
tmp
;

1680 
	`push_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, c->
sh¨ed_«me
.normal);

1681 #ifde‡
DYNAMIC_INSTALL_NAME


1682 
	`push_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, 
DYNAMIC_INSTALL_NAME
);

1684 
tmp
 = (*)
	`mÆloc
(
PATH_MAX
);

1685 
	`°r˝y
(
tmp
, 
c
->
ö°Æl_∑th
);

1686 
	`°rˇt
(
tmp
, 
	`°ºchr
(
c
->
sh¨ed_«me
.
n‹mÆ
, '/'));

1687 
	`push_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, 
tmp
);

1691 
	`≠≥nd_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, c->
obj_fûes
);

1692 
	`≠≥nd_cou¡_ch¨s
(
c
->
sh¨ed_›ts
.
n‹mÆ
, c->sh¨ed_›ts.
dïídícõs
);

1694 i‡(
c
->
›ti⁄s
.
exp‹t_Æl
) {

1695 #ifde‡
GEN_EXPORTS


1696 
	`gíî©e_def_fûe
(
c
);

1701 i‡(
c
->
ouçut
 =
ŸLibøry
 || c->ouçuà=
ŸSèticLibøryO∆y
) {

1702 
	`push_cou¡_ch¨s
(
c
->
°©ic_›ts
.
n‹mÆ
, "-o");

1703 
	`push_cou¡_ch¨s
(
c
->
°©ic_›ts
.
n‹mÆ
, c->
ouçut_«me
);

1706 i‡(
c
->
ouçut
 =
ŸProgøm
) {

1707 i‡(
c
->
ouçut_«me
) {

1708 
	`push_cou¡_ch¨s
(
c
->
¨gli°
, "-o");

1709 
	`push_cou¡_ch¨s
(
c
->
¨gli°
, c->
ouçut_«me
);

1710 
	`≠≥nd_cou¡_ch¨s
(
c
->
¨gli°
, c->
obj_fûes
);

1711 
	`≠≥nd_cou¡_ch¨s
(
c
->
¨gli°
, c->
sh¨ed_›ts
.
dïídícõs
);

1712 
	`add_dy«mic_lök_›ts
(
c
, c->
¨gli°
);

1715 
	}
}

1717 
	$po°_∑r£_fixup
(
comm™d_t
 *
cmd_d©a
)

1719 
cmd_d©a
->
mode
)

1721 
mCompûe
:

1722 #ifde‡
PIC_FLAG


1723 i‡(
cmd_d©a
->
›ti⁄s
.
pic_mode
 !
pic_AVOID
) {

1724 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
PIC_FLAG
);

1727 i‡(
cmd_d©a
->
ouçut_«me
) {

1728 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, "-o");

1729 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, cmd_d©a->
ouçut_«me
);

1732 
mLök
:

1733 
	`lök_fixup
(
cmd_d©a
);

1735 
mIn°Æl
:

1736 i‡(
cmd_d©a
->
ouçut
 =
ŸLibøry
) {

1737 
	`lök_fixup
(
cmd_d©a
);

1743 #i‡
USE_OMF


1744 i‡(
cmd_d©a
->
ouçut
 =
ŸObje˘
 ||

1745 
cmd_d©a
->
ouçut
 =
ŸProgøm
 ||

1746 
cmd_d©a
->
ouçut
 =
ŸLibøry
 ||

1747 
cmd_d©a
->
ouçut
 =
ŸDy«micLibøryO∆y
) {

1748 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, "-Zomf");

1752 i‡(
cmd_d©a
->
›ti⁄s
.
sh¨ed
 &&

1753 (
cmd_d©a
->
ouçut
 =
ŸObje˘
 ||

1754 
cmd_d©a
->
ouçut
 =
ŸLibøry
 ||

1755 
cmd_d©a
->
ouçut
 =
ŸDy«micLibøryO∆y
)) {

1756 #ifde‡
SHARE_SW


1757 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¨gli°
, 
SHARE_SW
);

1760 
	}
}

1762 
	$run_mode
(
comm™d_t
 *
cmd_d©a
)

1764 
rv
;

1765 
cou¡_ch¨s
 *
c˘emp
;

1767 
c˘emp
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

1768 
	`öô_cou¡_ch¨s
(
c˘emp
);

1770 
cmd_d©a
->
mode
)

1772 
mCompûe
:

1773 
rv
 = 
	`run_comm™d
(
cmd_d©a
, cmd_d©a->
¨gli°
);

1774 i‡(
rv
) {

1775  
rv
;

1778 
mIn°Æl
:

1783 i‡(!
cmd_d©a
->
ouçut_«me
) {

1784 
rv
 = 
	`run_comm™d
(
cmd_d©a
, cmd_d©a->
¨gli°
);

1785 i‡(
rv
) {

1786  
rv
;

1789 i‡(
cmd_d©a
->
ouçut_«me
) {

1790 
	`≠≥nd_cou¡_ch¨s
(
c˘emp
, 
cmd_d©a
->
¨gli°
);

1791 
	`ö£π_cou¡_ch¨s
(
c˘emp
,

1792 
cmd_d©a
->
ouçut_«me
,

1793 
c˘emp
->
num
 - 1);

1794 
rv
 = 
	`run_comm™d
(
cmd_d©a
, 
c˘emp
);

1795 i‡(
rv
) {

1796  
rv
;

1798 
	`˛ór_cou¡_ch¨s
(
c˘emp
);

1800 i‡(
cmd_d©a
->
°©ic_«me
.
ö°Æl
) {

1801 
	`≠≥nd_cou¡_ch¨s
(
c˘emp
, 
cmd_d©a
->
¨gli°
);

1802 
	`ö£π_cou¡_ch¨s
(
c˘emp
,

1803 
cmd_d©a
->
°©ic_«me
.
ö°Æl
,

1804 
c˘emp
->
num
 - 1);

1805 
rv
 = 
	`run_comm™d
(
cmd_d©a
, 
c˘emp
);

1806 i‡(
rv
) {

1807  
rv
;

1809 #i‡
	`deföed
(
__APPLE__
Ë&& deföed(
RANLIB
)

1824 c⁄° *
lib_¨gs
[3], *
°©ic_lib_«me
;

1825 *
tmp
;

1826 
size_t
 
Àn1
, 
Àn2
;

1827 
Àn1
 = 
	`°æí
(
cmd_d©a
->
¨gli°
->
vÆs
[cmd_d©a->¨gli°->
num
 - 1]);

1829 
°©ic_lib_«me
 = 
	`jlibtoﬁ_ba£«me
(
cmd_d©a
->
°©ic_«me
.
ö°Æl
);

1830 
Àn2
 = 
	`°æí
(
°©ic_lib_«me
);

1832 
tmp
 = 
	`mÆloc
(
Àn1
 + 
Àn2
 + 2);

1834 
	`¢¥ötf
(
tmp
, 
Àn1
 + 
Àn2
 + 2, "%s/%s",

1835 
cmd_d©a
->
¨gli°
->
vÆs
[cmd_d©a->¨gli°->
num
 - 1],

1836 
°©ic_lib_«me
);

1838 
lib_¨gs
[0] = 
RANLIB
;

1839 
lib_¨gs
[1] = 
tmp
;

1840 
lib_¨gs
[2] = 
NULL
;

1841 
	`exã∫Æ_•awn
(
cmd_d©a
, 
RANLIB
, 
lib_¨gs
);

1842 
	`‰ì
(
tmp
);

1844 
	`˛ór_cou¡_ch¨s
(
c˘emp
);

1846 i‡(
cmd_d©a
->
sh¨ed_«me
.
ö°Æl
) {

1847 
	`≠≥nd_cou¡_ch¨s
(
c˘emp
, 
cmd_d©a
->
¨gli°
);

1848 
	`ö£π_cou¡_ch¨s
(
c˘emp
,

1849 
cmd_d©a
->
sh¨ed_«me
.
ö°Æl
,

1850 
c˘emp
->
num
 - 1);

1851 
rv
 = 
	`run_comm™d
(
cmd_d©a
, 
c˘emp
);

1852 i‡(
rv
) {

1853  
rv
;

1855 
	`˛ór_cou¡_ch¨s
(
c˘emp
);

1857 i‡(
cmd_d©a
->
moduÀ_«me
.
ö°Æl
) {

1858 
	`≠≥nd_cou¡_ch¨s
(
c˘emp
, 
cmd_d©a
->
¨gli°
);

1859 
	`ö£π_cou¡_ch¨s
(
c˘emp
,

1860 
cmd_d©a
->
moduÀ_«me
.
ö°Æl
,

1861 
c˘emp
->
num
 - 1);

1862 
rv
 = 
	`run_comm™d
(
cmd_d©a
, 
c˘emp
);

1863 i‡(
rv
) {

1864  
rv
;

1866 
	`˛ór_cou¡_ch¨s
(
c˘emp
);

1869 
mLök
:

1870 i‡(!
cmd_d©a
->
›ti⁄s
.
dry_run
) {

1872 
	`ß„_mkdú
(".libs");

1875 i‡(
cmd_d©a
->
ouçut
 =
ŸSèticLibøryO∆y
 ||

1876 
cmd_d©a
->
ouçut
 =
ŸLibøry
) {

1877 #ifde‡
RANLIB


1878 c⁄° *
lib_¨gs
[3];

1881 
cmd_d©a
->
¥ogøm
 = 
LIBRARIAN
;

1882 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
, 
LIBRARIAN_OPTS
);

1883 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
,

1884 
cmd_d©a
->
°©ic_«me
.
n‹mÆ
);

1886 
rv
 = 
	`run_comm™d
(
cmd_d©a
, cmd_d©a->
obj_fûes
);

1887 i‡(
rv
) {

1888  
rv
;

1891 #ifde‡
RANLIB


1892 
lib_¨gs
[0] = 
RANLIB
;

1893 
lib_¨gs
[1] = 
cmd_d©a
->
°©ic_«me
.
n‹mÆ
;

1894 
lib_¨gs
[2] = 
NULL
;

1895 
	`exã∫Æ_•awn
(
cmd_d©a
, 
RANLIB
, 
lib_¨gs
);

1899 i‡(
cmd_d©a
->
ouçut
 =
ŸDy«micLibøryO∆y
 ||

1900 
cmd_d©a
->
ouçut
 =
ŸModuÀ
 ||

1901 
cmd_d©a
->
ouçut
 =
ŸLibøry
) {

1902 
cmd_d©a
->
¥ogøm
 = 
NULL
;

1903 
	`˛ór_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
);

1905 
	`≠≥nd_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
, cmd_d©a->
¨gli°
);

1906 i‡(
cmd_d©a
->
ouçut
 =
ŸModuÀ
) {

1907 #ifde‡
MODULE_OPTS


1908 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
, 
MODULE_OPTS
);

1911 #ifde‡
SHARED_OPTS


1912 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
, 
SHARED_OPTS
);

1914 #ifde‡
dy«mic_lök_vîsi⁄_func


1915 
	`push_cou¡_ch¨s
(
cmd_d©a
->
¥ogøm_›ts
,

1916 
	`dy«mic_lök_vîsi⁄_func
(
cmd_d©a
->
vîsi⁄_öfo
));

1919 
	`add_dy«mic_lök_›ts
(
cmd_d©a
, cmd_d©a->
¥ogøm_›ts
);

1921 
rv
 = 
	`run_comm™d
(
cmd_d©a
, cmd_d©a->
sh¨ed_›ts
.
n‹mÆ
);

1922 i‡(
rv
) {

1923  
rv
;

1926 i‡(
cmd_d©a
->
ouçut
 =
ŸProgøm
) {

1927 
rv
 = 
	`run_comm™d
(
cmd_d©a
, cmd_d©a->
¨gli°
);

1928 i‡(
rv
) {

1929  
rv
;

1938 
	}
}

1940 
	$˛ónup_tmp_dú
(c⁄° *
dú«me
)

1942 
DIR
 *
dú
;

1943 
dúít
 *
íåy
;

1944 
fuŒ«me
[1024];

1946 
dú
 = 
	`›ídú
(
dú«me
);

1948 i‡(
dú
 =
NULL
)

1951 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

1952 i‡(
íåy
->
d_«me
[0] != '.') {

1953 
	`°r˝y
(
fuŒ«me
, 
dú«me
);

1954 
	`°rˇt
(
fuŒ«me
, "/");

1955 
	`°rˇt
(
fuŒ«me
, 
íåy
->
d_«me
);

1956 
	`ªmove
(
fuŒ«me
);

1960 
	`rmdú
(
dú«me
);

1961 
	}
}

1963 
	$˛ónup_tmp_dús
(
comm™d_t
 *
cmd_d©a
)

1965 
d
;

1967 
d
 = 0; d < 
cmd_d©a
->
tmp_dús
->
num
; d++) {

1968 
	`˛ónup_tmp_dú
(
cmd_d©a
->
tmp_dús
->
vÆs
[
d
]);

1970 
	}
}

1972 
	$ísuª_Áke_u±od©e
(
comm™d_t
 *
cmd_d©a
)

1975 c⁄° *
touch_¨gs
[3];

1977 i‡(
cmd_d©a
->
mode
 =
mIn°Æl
) {

1980 i‡(!
cmd_d©a
->
Áke_ouçut_«me
) {

1984 
touch_¨gs
[0] = "touch";

1985 
touch_¨gs
[1] = 
cmd_d©a
->
Áke_ouçut_«me
;

1986 
touch_¨gs
[2] = 
NULL
;

1987  
	`exã∫Æ_•awn
(
cmd_d©a
, "touch", 
touch_¨gs
);

1988 
	}
}

1991 
	$add_f‹_ru¡ime
(
comm™d_t
 *
cmd_d©a
)

1993 i‡(
cmd_d©a
->
mode
 =
mIn°Æl
) {

1996 i‡(
cmd_d©a
->
ouçut
 =
ŸDy«micLibøryO∆y
 ||

1997 
cmd_d©a
->
ouçut
 =
ŸLibøry
) {

1998 
FILE
 *
f
=
	`f›í
(
cmd_d©a
->
Áke_ouçut_«me
,"w");

1999 i‡(
f
 =
NULL
) {

2002 
	`Ârötf
(
f
,"%s\n", 
cmd_d©a
->
ö°Æl_∑th
);

2003 
	`f˛o£
(
f
);

2006 (
	`ísuª_Áke_u±od©e
(
cmd_d©a
));

2008 
	}
}

2010 
	$maö
(
¨gc
, *
¨gv
[])

2012 
rc
;

2013 
comm™d_t
 
cmd_d©a
;

2015 
	`mem£t
(&
cmd_d©a
, 0, (cmd_data));

2017 
cmd_d©a
.
›ti⁄s
.
pic_mode
 = 
pic_UNKNOWN
;

2019 
cmd_d©a
.
¥ogøm_›ts
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2020 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
¥ogøm_›ts
);

2021 
cmd_d©a
.
¨gli°
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2022 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
¨gli°
);

2023 
cmd_d©a
.
tmp_dús
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2024 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
tmp_dús
);

2025 
cmd_d©a
.
obj_fûes
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2026 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
obj_fûes
);

2027 
cmd_d©a
.
dï_Ω©hs
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2028 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
dï_Ω©hs
);

2029 
cmd_d©a
.
Ω©hs
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2030 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
Ω©hs
);

2031 
cmd_d©a
.
°©ic_›ts
.
n‹mÆ
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2032 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
°©ic_›ts
.
n‹mÆ
);

2033 
cmd_d©a
.
sh¨ed_›ts
.
n‹mÆ
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2034 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
sh¨ed_›ts
.
n‹mÆ
);

2035 
cmd_d©a
.
sh¨ed_›ts
.
dïídícõs
 = (
cou¡_ch¨s
*)
	`mÆloc
((count_chars));

2036 
	`öô_cou¡_ch¨s
(
cmd_d©a
.
sh¨ed_›ts
.
dïídícõs
);

2038 
cmd_d©a
.
mode
 = 
mUnknown
;

2039 
cmd_d©a
.
ouçut
 = 
ŸGíîÆ
;

2041 
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
cmd_d©a
);

2042 
	`po°_∑r£_fixup
(&
cmd_d©a
);

2044 i‡(
cmd_d©a
.
mode
 =
mUnknown
) {

2045 
	`exô
(0);

2048 
rc
 = 
	`run_mode
(&
cmd_d©a
);

2050 i‡(!
rc
) {

2051 
	`add_f‹_ru¡ime
(&
cmd_d©a
);

2054 
	`˛ónup_tmp_dús
(&
cmd_d©a
);

2055  
rc
;

2056 
	}
}

	@dso/aix/dso.c

45 
	~<°dio.h
>

46 
	~<î∫o.h
>

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/ldr.h
>

51 
	~<a.out.h
>

52 
	~"≠r_¨ch_dso.h
"

53 
	~"≠r_p‹èbÀ.h
"

55 #i‡
APR_HAS_DSO


57 #unde‡
FREAD


58 #unde‡
FWRITE


59 
	~<ldf˙.h
>

65 #i‚de‡
BEGINNING


66 
	#BEGINNING
 
SEEK_SET


	)

68 #i‚de‡
FSEEK


69 
	#FSEEK
(
ld±r
,
o
,
p
Ë
	`f£ek
(
	`IOPTR
÷d±r),’==
BEGINNING
)?(
	`OFFSET
÷d±rË+o):o,p)

	)

71 #i‚de‡
FREAD


72 
	#FREAD
(
p
,
s
,
n
,
ld±r
Ë
	`‰ód
’,s,n,
	`IOPTR
÷d±r))

	)

78 #unde‡
RTLD_LAZY


79 
	#RTLD_LAZY
 1

	)

80 #unde‡
RTLD_NOW


81 
	#RTLD_NOW
 2

	)

82 #unde‡
RTLD_GLOBAL


83 
	#RTLD_GLOBAL
 0x100

	)

89 
	sdl_öfo
 {

90 (*
	möô
) ();

91 (*
	mföi
) ();

100 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

101 
≠r_os_dso_h™dÀ_t
 
osdso
,

102 
≠r_poﬁ_t
 *
poﬁ
)

104 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

105 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

106 (*
≠rdso
)->
poﬁ
 =Öool;

107  
APR_SUCCESS
;

108 
	}
}

110 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

111 
≠r_dso_h™dÀ_t
 *
≠rdso
)

113 *
osdso
 = 
≠rdso
->
h™dÀ
;

114  
APR_SUCCESS
;

115 
	}
}

117 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

119 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

121 i‡(
dso
->
h™dÀ
 !
NULL
 && 
	`dl˛o£
(dso->handle) != 0)

122  
APR_EINIT
;

123 
dso
->
h™dÀ
 = 
NULL
;

125  
APR_SUCCESS
;

126 
	}
}

128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

129 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
˘x
)

131 *
os_h™dÀ
 = 
	`dl›í
((*)
∑th
, 
RTLD_NOW
 | 
RTLD_GLOBAL
);

133 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
˘x
, (*res_handle));

135 if(
os_h™dÀ
 =
NULL
) {

136 (*
ªs_h™dÀ
)->
îr‹msg
 = 
	`dÀº‹
();

137  
APR_EDSOOPEN
;

140 (*
ªs_h™dÀ
)->
h™dÀ
 = (*)
os_h™dÀ
;

141 (*
ªs_h™dÀ
)->
poﬁ
 = 
˘x
;

142 (*
ªs_h™dÀ
)->
îr‹msg
 = 
NULL
;

144 
	`≠r_poﬁ_˛ónup_ªgi°î
(
˘x
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

146  
APR_SUCCESS
;

147 
	}
}

149 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

151  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
poﬁ
, h™dÀ, 
dso_˛ónup
);

152 
	}
}

154 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

155 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

156 c⁄° *
sym«me
)

158 *
ªtvÆ
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
sym«me
);

160 i‡(
ªtvÆ
 =
NULL
) {

161 
h™dÀ
->
îr‹msg
 = 
	`dÀº‹
();

162  
APR_ESYMNOTFOUND
;

165 *
ªssym
 = 
ªtvÆ
;

166  
APR_SUCCESS
;

167 
	}
}

169 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf„r
, 
≠r_size_t
 
buÊí
)

171 i‡(
dso
->
îr‹msg
) {

172 
	`≠r_˝y°∫
(
buf„r
, 
dso
->
îr‹msg
, 
buÊí
);

173  
dso
->
îr‹msg
;

176 
	}
}

188 *
	m«me
;

189 *
	maddr
;

190 } 
	tExp‹t
, *
	tExp‹tPå
;

197 (*
	möô
) ();

198 (*
	mãrm
) ();

199 } 
	tCdt‹
, *
	tCdt‹På
;

201 (*
	tGccCDt‹På
) ();

206 
	sModuÀ
 {

207 
ModuÀ
 *
√xt
;

208 *
«me
;

209 
ªfC¡
;

210 *
íåy
;

211 
dl_öfo
 *
öfo
;

212 
Cdt‹På
 
cdt‹s
;

213 
GccCDt‹På
 
gcc_˘‹
;

214 
GccCDt‹På
 
gcc_dt‹
;

215 
nExp‹ts
;

216 
Exp‹tPå
 
exp‹ts
;

217 } 
	tModuÀ
, *
	tModuÀPå
;

223 
ModuÀPå
 
modLi°
;

229 
îrbuf
[
BUFSIZ
];

230 
îrvÆid
;

236 *
	`°rdup
(const *);

237 
	`ˇãº
(*);

238 
	`ªadExp‹ts
(
ModuÀPå
);

239 
	`ãrmö©e
();

240 *
	`födMaö
();

242 *
	$dl›í
(c⁄° *
∑th
, 
mode
)

244 
ModuÀPå
 
mp
;

245 *
maöModuÀ
;

252 i‡(!
maöModuÀ
) {

253 i‡((
maöModuÀ
 = 
	`födMaö
()Ë=
NULL
)

254  
NULL
;

255 
	`©exô
(
ãrmö©e
);

260 
mp
 = 
modLi°
; mp; m∞mp->
√xt
)

261 i‡(
	`°rcmp
(
mp
->
«me
, 
∑th
) == 0) {

262 
mp
->
ªfC¡
++;

263  
mp
;

265 i‡((
mp
 = (
ModuÀPå
Ë
	`ˇŒoc
(1, (*mp))Ë=
NULL
) {

266 
îrvÆid
++;

267 
	`°r˝y
(
îrbuf
, "calloc: ");

268 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

269  
NULL
;

271 i‡((
mp
->
«me
 = 
	`°rdup
(
∑th
)Ë=
NULL
) {

272 
îrvÆid
++;

273 
	`°r˝y
(
îrbuf
, "strdup: ");

274 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

275 
	`‰ì
(
mp
);

276  
NULL
;

282 i‡((
mp
->
íåy
 = (*Ë
	`lﬂdAndInô
((*Ë
∑th
, 
L_NOAUTODEFER
, 
NULL
)) == NULL) {

283 
	`‰ì
(
mp
->
«me
);

284 
	`‰ì
(
mp
);

285 
îrvÆid
++;

286 
	`°r˝y
(
îrbuf
, "dlopen: ");

287 
	`°rˇt
(
îrbuf
, 
∑th
);

288 
	`°rˇt
(
îrbuf
, ": ");

294 i‡(
î∫o
 =
ENOEXEC
) {

295 *
tmp
[
BUFSIZ
 / (*)];

296 i‡(
	`lﬂdquîy
(
L_GETMESSAGES
, 
tmp
, (tmp)) == -1)

297 
	`°r˝y
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

299 **
p
;

300 
p
 = 
tmp
; *p;Ö++)

301 
	`ˇãº
(*
p
);

305 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

306  
NULL
;

308 
mp
->
ªfC¡
 = 1;

309 
mp
->
√xt
 = 
modLi°
;

310 
modLi°
 = 
mp
;

311 i‡(
	`lﬂdböd
(0, 
maöModuÀ
, 
mp
->
íåy
) == -1) {

312 
	`dl˛o£
(
mp
);

313 
îrvÆid
++;

314 
	`°r˝y
(
îrbuf
, "loadbind: ");

315 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

316  
NULL
;

322 i‡(
mode
 & 
RTLD_GLOBAL
) {

323 
ModuÀPå
 
mp1
;

324 
mp1
 = 
mp
->
√xt
; mp1; mp1 = mp1->next)

325 i‡(
	`lﬂdböd
(0, 
mp1
->
íåy
, 
mp
->entry) == -1) {

326 
	`dl˛o£
(
mp
);

327 
îrvÆid
++;

328 
	`°r˝y
(
îrbuf
, "loadbind: ");

329 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

330  
NULL
;

333 i‡(
	`ªadExp‹ts
(
mp
) == -1) {

334 
	`dl˛o£
(
mp
);

335  
NULL
;

340 i‡(
mp
->
öfo
 = (
dl_öfo
 *Ë
	`dlsym
(mp, "dl_info")) {

341 i‡(
mp
->
öfo
->
öô
)

342 (*
mp
->
öfo
->
öô
) ();

345 
îrvÆid
 = 0;

350 i‡(
mp
->
cdt‹s
 = (
Cdt‹På
Ë
	`dlsym
(mp, "__cdtors")) {

351 
Cdt‹På
 
˝
 = 
mp
->
cdt‹s
;

352 
˝
->
öô
 || cp->
ãrm
) {

353 i‡(
˝
->
öô
 && cp->init != ((*)()) 0xffffffff)

354 (*
˝
->
öô
) ();

355 
˝
++;

364 i‡(
mp
->
gcc_˘‹
 = (
GccCDt‹På
Ë
	`dlsym
(mp, "_GLOBAL__DI")) {

365 (*
mp
->
gcc_˘‹
) ();

366 
mp
->
gcc_dt‹
 = (
GccCDt‹På
Ë
	`dlsym
(mp, "_GLOBAL__DD");

369 
îrvÆid
 = 0;

370  
mp
;

371 
	}
}

377 
	$ˇãº
(*
s
)

379 *
p
 = 
s
;

381 *
p
 >= '0' && *p <= '9')

382 
p
++;

383 
	`©oi
(
s
)) {

384 
L_ERROR_TOOMANY
:

385 
	`°rˇt
(
îrbuf
, "to manyÉrrors");

387 
L_ERROR_NOLIB
:

388 
	`°rˇt
(
îrbuf
, "can'tÜoadÜibrary");

389 
	`°rˇt
(
îrbuf
, 
p
);

391 
L_ERROR_UNDEF
:

392 
	`°rˇt
(
îrbuf
, "can't find symbol");

393 
	`°rˇt
(
îrbuf
, 
p
);

395 
L_ERROR_RLDBAD
:

396 
	`°rˇt
(
îrbuf
, "bad RLD");

397 
	`°rˇt
(
îrbuf
, 
p
);

399 
L_ERROR_FORMAT
:

400 
	`°rˇt
(
îrbuf
, "badÉxec format in");

401 
	`°rˇt
(
îrbuf
, 
p
);

403 
L_ERROR_ERRNO
:

404 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
	`©oi
(++
p
)));

407 
	`°rˇt
(
îrbuf
, 
s
);

410 
	}
}

412 *
	$dlsym
(*
h™dÀ
, c⁄° *
symbﬁ
)

414 
ModuÀPå
 
mp
 = (ModuÀPåË
h™dÀ
;

415 
Exp‹tPå
 
ï
;

416 
i
;

422 
ï
 = 
mp
->
exp‹ts
, 
i
 = mp->
nExp‹ts
; i; i--,Ép++)

423 i‡(
	`°rcmp
(
ï
->
«me
, 
symbﬁ
) == 0)

424  
ï
->
addr
;

425 
îrvÆid
++;

426 
	`°r˝y
(
îrbuf
, "dlsym: undefined symbol ");

427 
	`°rˇt
(
îrbuf
, 
symbﬁ
);

428  
NULL
;

429 
	}
}

431 c⁄° *
	$dÀº‹
()

433 i‡(
îrvÆid
) {

434 
îrvÆid
 = 0;

435  
îrbuf
;

437  
NULL
;

438 
	}
}

440 
	$dl˛o£
(*
h™dÀ
)

442 
ModuÀPå
 
mp
 = (ModuÀPåË
h™dÀ
;

443 
ªsu…
;

444 
ModuÀPå
 
mp1
;

446 i‡(--
mp
->
ªfC¡
 > 0)

448 i‡(
mp
->
öfo
 && mp->öfo->
föi
)

449 (*
mp
->
öfo
->
föi
) ();

450 i‡(
mp
->
cdt‹s
) {

451 
Cdt‹På
 
˝
 = 
mp
->
cdt‹s
;

452 
˝
->
öô
 || cp->
ãrm
) {

453 i‡(
˝
->
ãrm
 && cp->
öô
 != ((*)()) 0xffffffff)

454 (*
˝
->
ãrm
) ();

455 
˝
++;

462 i‡(
mp
->
gcc_dt‹
) {

463 (*
mp
->
gcc_dt‹
) ();

465 
ªsu…
 = 
	`u∆ﬂd
(
mp
->
íåy
);

466 i‡(
ªsu…
 == -1) {

467 
îrvÆid
++;

468 
	`°r˝y
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

470 i‡(
mp
->
exp‹ts
) {

471 
Exp‹tPå
 
ï
;

472 
i
;

473 
ï
 = 
mp
->
exp‹ts
, 
i
 = mp->
nExp‹ts
; i; i--,Ép++)

474 i‡(
ï
->
«me
)

475 
	`‰ì
(
ï
->
«me
);

476 
	`‰ì
(
mp
->
exp‹ts
);

478 i‡(
mp
 =
modLi°
)

479 
modLi°
 = 
mp
->
√xt
;

481 
mp1
 = 
modLi°
; mp1; mp1 = mp1->
√xt
)

482 i‡(
mp1
->
√xt
 =
mp
) {

483 
mp1
->
√xt
 = 
mp
->next;

487 
	`‰ì
(
mp
->
«me
);

488 
	`‰ì
(
mp
);

489  
ªsu…
;

490 
	}
}

492 
	$ãrmö©e
()

494 
modLi°
)

495 
	`dl˛o£
(
modLi°
);

496 
	}
}

501 
	$ªadExp‹ts
(
ModuÀPå
 
mp
)

503 
LDFILE
 *
ldp
 = 
NULL
;

504 
SCNHDR
 
sh
, 
shd©a
;

505 
LDHDR
 *
lhp
;

506 *
ldbuf
;

507 
LDSYM
 *
ls
;

508 
i
;

509 
Exp‹tPå
 
ï
;

510 
ld_öfo
 *
Õ
;

511 *
buf
;

512 
size
 = 4 * 1024;

513 *
d©a‹g
;

520 i‡((
buf
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

521 
îrvÆid
++;

522 
	`°r˝y
(
îrbuf
, "readExports: ");

523 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

526 (
i
 = 
	`lﬂdquîy
(
L_GETINFO
, 
buf
, 
size
)Ë=-1 && 
î∫o
 =
ENOMEM
) {

527 
	`‰ì
(
buf
);

528 
size
 += 4 * 1024;

529 i‡((
buf
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

530 
îrvÆid
++;

531 
	`°r˝y
(
îrbuf
, "readExports: ");

532 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

536 i‡(
i
 == -1) {

537 
îrvÆid
++;

538 
	`°r˝y
(
îrbuf
, "readExports: ");

539 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

540 
	`‰ì
(
buf
);

548 
Õ
 = (
ld_öfo
 *Ë
buf
;

549 
Õ
) {

550 i‡((Ë
mp
->
íåy
 >(Ë
Õ
->
ldöfo_d©a‹g
 &&

551 (Ë
mp
->
íåy
 < (Ë
Õ
->
ldöfo_d©a‹g
 +

552 
Õ
->
ldöfo_d©asize
) {

553 
d©a‹g
 = 
Õ
->
ldöfo_d©a‹g
;

554 
ldp
 = 
	`ld›í
(
Õ
->
ldöfo_fûíame
,Üdp);

557 i‡(
Õ
->
ldöfo_√xt
 == 0)

558 
Õ
 = 
NULL
;

560 
Õ
 = (
ld_öfo
 *Ë((*ËÕ +Üp->
ldöfo_√xt
);

562 
	`‰ì
(
buf
);

563 i‡(!
ldp
) {

564 
îrvÆid
++;

565 
	`°r˝y
(
îrbuf
, "readExports: ");

566 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

569 i‡(
	`TYPE
(
ldp
Ë!
U802TOCMAGIC
) {

570 
îrvÆid
++;

571 
	`°r˝y
(
îrbuf
, "readExports: bad magic");

572 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

580 i‡(
	`ldnshªad
(
ldp
, 
_DATA
, &
shd©a
Ë!
SUCCESS
) {

581 
îrvÆid
++;

582 
	`°r˝y
(
îrbuf
, "readExports: cannotÑead data section header");

583 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

586 i‡(
	`ldnshªad
(
ldp
, 
_LOADER
, &
sh
Ë!
SUCCESS
) {

587 
îrvÆid
++;

588 
	`°r˝y
(
îrbuf
, "readExports: cannotÑeadÜoader section header");

589 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

596 i‡((
ldbuf
 = (*Ë
	`mÆloc
(
sh
.
s_size
)Ë=
NULL
) {

597 
îrvÆid
++;

598 
	`°r˝y
(
îrbuf
, "readExports: ");

599 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

600 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

603 i‡(
	`FSEEK
(
ldp
, 
sh
.
s_s˙±r
, 
BEGINNING
Ë!
OKFSEEK
) {

604 
îrvÆid
++;

605 
	`°r˝y
(
îrbuf
, "readExports: cannot seekÅoÜoader section");

606 
	`‰ì
(
ldbuf
);

607 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

610 i‡(
	`FREAD
(
ldbuf
, 
sh
.
s_size
, 1, 
ldp
) != 1) {

611 
îrvÆid
++;

612 
	`°r˝y
(
îrbuf
, "readExports: cannotÑeadÜoader section");

613 
	`‰ì
(
ldbuf
);

614 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

617 
lhp
 = (
LDHDR
 *Ë
ldbuf
;

618 
ls
 = (
LDSYM
 *Ë(
ldbuf
 + 
LDHDRSZ
);

622 
i
 = 
lhp
->
l_nsyms
; i; i--, 
ls
++) {

623 i‡(!
	`LDR_EXPORT
(*
ls
))

625 
mp
->
nExp‹ts
++;

627 i‡((
mp
->
exp‹ts
 = (
Exp‹tPå
Ë
	`ˇŒoc
(mp->
nExp‹ts
, (*mp->exp‹ts))Ë=
NULL
) {

628 
îrvÆid
++;

629 
	`°r˝y
(
îrbuf
, "readExports: ");

630 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

631 
	`‰ì
(
ldbuf
);

632 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

639 
ï
 = 
mp
->
exp‹ts
;

640 
ls
 = (
LDSYM
 *Ë(
ldbuf
 + 
LDHDRSZ
);

641 
i
 = 
lhp
->
l_nsyms
; i; i--, 
ls
++) {

642 *
sym«me
;

643 
tmpsym
[
SYMNMLEN
 + 1];

644 i‡(!
	`LDR_EXPORT
(*
ls
))

646 i‡(
ls
->
l_zî€s
 == 0)

647 
sym«me
 = 
ls
->
l_off£t
 + 
lhp
->
l_°off
 + 
ldbuf
;

654 
	`°∫˝y
(
tmpsym
, 
ls
->
l_«me
, 
SYMNMLEN
);

655 
tmpsym
[
SYMNMLEN
] = '\0';

656 
sym«me
 = 
tmpsym
;

658 
ï
->
«me
 = 
	`°rdup
(
sym«me
);

659 
ï
->
addr
 = (*Ë((Ë
d©a‹g
 +

660 
ls
->
l_vÆue
 - 
shd©a
.
s_vaddr
);

661 
ï
++;

663 
	`‰ì
(
ldbuf
);

664 
	`ld˛o£
(
ldp
Ë=
FAILURE
);

666 
	}
}

672 *
	$födMaö
()

674 
ld_öfo
 *
Õ
;

675 *
buf
;

676 
size
 = 4 * 1024;

677 
i
;

678 *
ªt
;

680 i‡((
buf
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

681 
îrvÆid
++;

682 
	`°r˝y
(
îrbuf
, "findMain: ");

683 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

684  
NULL
;

686 (
i
 = 
	`lﬂdquîy
(
L_GETINFO
, 
buf
, 
size
)Ë=-1 && 
î∫o
 =
ENOMEM
) {

687 
	`‰ì
(
buf
);

688 
size
 += 4 * 1024;

689 i‡((
buf
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

690 
îrvÆid
++;

691 
	`°r˝y
(
îrbuf
, "findMain: ");

692 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

693  
NULL
;

696 i‡(
i
 == -1) {

697 
îrvÆid
++;

698 
	`°r˝y
(
îrbuf
, "findMain: ");

699 
	`°rˇt
(
îrbuf
, 
	`°ªº‹
(
î∫o
));

700 
	`‰ì
(
buf
);

701  
NULL
;

708 
Õ
 = (
ld_öfo
 *Ë
buf
;

709 
ªt
 = 
Õ
->
ldöfo_d©a‹g
;

710 
	`‰ì
(
buf
);

711  
ªt
;

712 
	}
}

	@dso/beos/dso.c

17 
	~"≠r_¨ch_dso.h
"

18 
	~"≠r_p‹èbÀ.h
"

20 #i‡
APR_HAS_DSO


22 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

24 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

26 i‡(
dso
->
h™dÀ
 > 0 && 
	`u∆ﬂd_add_⁄
(dso->h™dÀË< 
B_NO_ERROR
)

27  
APR_EINIT
;

28 
dso
->
h™dÀ
 = -1;

30  
APR_SUCCESS
;

31 
	}
}

33 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

34 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

36 
image_id
 
√wid
 = -1;

38 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
poﬁ
, (*res_handle));

40 if((
√wid
 = 
	`lﬂd_add_⁄
(
∑th
)Ë< 
B_NO_ERROR
) {

41 (*
ªs_h™dÀ
)->
îr‹msg
 = 
	`°ªº‹
(
√wid
);

42  
APR_EDSOOPEN
;

45 (*
ªs_h™dÀ
)->
poﬁ
 =Öool;

46 (*
ªs_h™dÀ
)->
h™dÀ
 = 
√wid
;

48 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

50  
APR_SUCCESS
;

51 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

55  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
poﬁ
, h™dÀ, 
dso_˛ónup
);

56 
	}
}

58 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
, 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

59 c⁄° *
sym«me
)

61 
îr
;

63 i‡(
sym«me
 =
NULL
)

64  
APR_ESYMNOTFOUND
;

66 
îr
 = 
	`gë_image_symbﬁ
(
h™dÀ
->h™dÀ, 
sym«me
, 
B_SYMBOL_TYPE_ANY
,

67 
ªssym
);

69 if(
îr
 !
B_OK
)

70  
APR_ESYMNOTFOUND
;

72  
APR_SUCCESS
;

73 
	}
}

75 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf„r
, 
≠r_size_t
 
buÊí
)

77 
	`°∫˝y
(
buf„r
, 
	`°ªº‹
(
î∫o
), 
buÊí
);

78  
buf„r
;

79 
	}
}

81 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

82 
≠r_os_dso_h™dÀ_t
 
osdso
,

83 
≠r_poﬁ_t
 *
poﬁ
)

85 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

86 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

87 (*
≠rdso
)->
poﬁ
 =Öool;

88  
APR_SUCCESS
;

89 
	}
}

91 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

92 
≠r_dso_h™dÀ_t
 *
≠rdso
)

94 *
osdso
 = 
≠rdso
->
h™dÀ
;

95  
APR_SUCCESS
;

96 
	}
}

	@dso/netware/dso.c

17 
	~"≠r_¨ch_dso.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

21 
	~<libøry.h
>

22 
	~<uni°d.h
>

24 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

25 
≠r_os_dso_h™dÀ_t
 
osdso
,

26 
≠r_poﬁ_t
 *
poﬁ
)

28 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

29 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

30 (*
≠rdso
)->
poﬁ
 =Öool;

31  
APR_SUCCESS
;

32 
	}
}

34 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

35 
≠r_dso_h™dÀ_t
 *
≠rdso
)

37 *
osdso
 = 
≠rdso
->
h™dÀ
;

38  
APR_SUCCESS
;

39 
	}
}

41 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

43 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

44 
sym_li°
 *
symbﬁ
 = 
NULL
;

45 *
NLMH™dÀ
 = 
	`gë∆mh™dÀ
();

47 i‡(
dso
->
h™dÀ
 =
NULL
)

48  
APR_SUCCESS
;

50 i‡(
dso
->
symbﬁs
 !
NULL
) {

51 
symbﬁ
 = 
dso
->
symbﬁs
;

52 
symbﬁ
) {

53 
	`UnImp‹tPublicObje˘
(
NLMH™dÀ
, 
symbﬁ
->symbol);

54 
symbﬁ
 = symbﬁ->
√xt
;

58 i‡(
	`dl˛o£
(
dso
->
h™dÀ
) != 0)

59  
APR_EINIT
;

61 
dso
->
h™dÀ
 = 
NULL
;

62 
dso
->
symbﬁs
 = 
NULL
;

63 
dso
->
∑th
 = 
NULL
;

65  
APR_SUCCESS
;

66 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

69 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

72 *
os_h™dÀ
 = 
NULL
;

73 *
fuŒ∑th
 = 
NULL
;

74 
≠r_°©us_t
 
rv
;

76 i‡((
rv
 = 
	`≠r_fûï©h_mîge
(&
fuŒ∑th
, 
NULL
, 
∑th
,

77 
APR_FILEPATH_NATIVE
, 
poﬁ
)Ë!
APR_SUCCESS
) {

78  
rv
;

81 
os_h™dÀ
 = 
	`dl›í
(
fuŒ∑th
, 
RTLD_NOW
 | 
RTLD_LOCAL
);

83 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
poﬁ
, (**res_handle));

85 if(
os_h™dÀ
 =
NULL
) {

86 (*
ªs_h™dÀ
)->
îr‹msg
 = 
	`dÀº‹
();

87  
APR_EDSOOPEN
;

90 (*
ªs_h™dÀ
)->
h™dÀ
 = (*)
os_h™dÀ
;

91 (*
ªs_h™dÀ
)->
poﬁ
 =Öool;

92 (*
ªs_h™dÀ
)->
îr‹msg
 = 
NULL
;

93 (*
ªs_h™dÀ
)->
symbﬁs
 = 
NULL
;

94 (*
ªs_h™dÀ
)->
∑th
 = 
	`≠r_p°rdup
(
poﬁ
, 
fuŒ∑th
);

96 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

98  
APR_SUCCESS
;

99 
	}
}

101 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

103  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
poﬁ
, h™dÀ, 
dso_˛ónup
);

104 
	}
}

106 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

107 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

108 c⁄° *
sym«me
)

110 
sym_li°
 *
symbﬁ
 = 
NULL
;

111 *
ªtvÆ
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
sym«me
);

113 i‡(
ªtvÆ
 =
NULL
) {

114 
h™dÀ
->
îr‹msg
 = 
	`dÀº‹
();

115  
APR_ESYMNOTFOUND
;

118 
symbﬁ
 = 
	`≠r_pˇŒoc
(
h™dÀ
->
poﬁ
, (
sym_li°
));

119 
symbﬁ
->
√xt
 = 
h™dÀ
->
symbﬁs
;

120 
h™dÀ
->
symbﬁs
 = 
symbﬁ
;

121 
symbﬁ
->symbﬁ = 
	`≠r_p°rdup
(
h™dÀ
->
poﬁ
, 
sym«me
);

123 *
ªssym
 = 
ªtvÆ
;

125  
APR_SUCCESS
;

126 
	}
}

128 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf„r
,

129 
≠r_size_t
 
buÊí
)

131 i‡(
dso
->
îr‹msg
) {

132 
	`≠r_˝y°∫
(
buf„r
, 
dso
->
îr‹msg
, 
buÊí
);

133  
dso
->
îr‹msg
;

136 
	}
}

	@dso/os2/dso.c

17 
	~"≠r_¨ch_dso.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 #i‡
APR_HAS_DSO


25 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

27 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

28 
rc
;

30 i‡(
dso
->
h™dÀ
 == 0)

31  
APR_SUCCESS
;

33 
rc
 = 
	`DosFªeModuÀ
(
dso
->
h™dÀ
);

35 i‡(
rc
 == 0)

36 
dso
->
h™dÀ
 = 0;

38  
	`APR_FROM_OS_ERROR
(
rc
);

39 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
, c⁄° *
∑th
, 
≠r_poﬁ_t
 *
˘x
)

44 
Áûed_moduÀ
[200];

45 
HMODULE
 
h™dÀ
;

46 
rc
;

48 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
˘x
, (**res_handle));

49 (*
ªs_h™dÀ
)->
c⁄t
 = 
˘x
;

50 (*
ªs_h™dÀ
)->
lﬂd_îr‹
 = 
APR_SUCCESS
;

51 (*
ªs_h™dÀ
)->
Áûed_moduÀ
 = 
NULL
;

53 i‡((
rc
 = 
	`DosLﬂdModuÀ
(
Áûed_moduÀ
, (Áûed_moduÀ), 
∑th
, &
h™dÀ
)) != 0) {

54 (*
ªs_h™dÀ
)->
lﬂd_îr‹
 = 
	`APR_FROM_OS_ERROR
(
rc
);

55 (*
ªs_h™dÀ
)->
Áûed_moduÀ
 = 
	`≠r_p°rdup
(
˘x
, failed_module);

56  
	`APR_FROM_OS_ERROR
(
rc
);

59 (*
ªs_h™dÀ
)->
h™dÀ
 = handle;

60 
	`≠r_poﬁ_˛ónup_ªgi°î
(
˘x
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

61  
APR_SUCCESS
;

62 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

68  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
c⁄t
, h™dÀ, 
dso_˛ónup
);

69 
	}
}

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

74 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

75 c⁄° *
sym«me
)

77 
PFN
 
func
;

78 
rc
;

80 i‡(
sym«me
 =
NULL
 || 
ªssym
 == NULL)

81  
APR_ESYMNOTFOUND
;

83 i‡((
rc
 = 
	`DosQuîyProcAddr
(
h™dÀ
->h™dÀ, 0, 
sym«me
, &
func
)) != 0) {

84 
h™dÀ
->
lﬂd_îr‹
 = 
	`APR_FROM_OS_ERROR
(
rc
);

85  
h™dÀ
->
lﬂd_îr‹
;

88 *
ªssym
 = 
func
;

89  
APR_SUCCESS
;

90 
	}
}

94 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf„r
, 
≠r_size_t
 
buÊí
)

96 
mesßge
[200];

97 
	`≠r_°ªº‹
(
dso
->
lﬂd_îr‹
, 
mesßge
, (message));

99 i‡(
dso
->
Áûed_moduÀ
 !
NULL
) {

100 
	`°rˇt
(
mesßge
, " (");

101 
	`°rˇt
(
mesßge
, 
dso
->
Áûed_moduÀ
);

102 
	`°rˇt
(
mesßge
, ")");

105 
	`≠r_˝y°∫
(
buf„r
, 
mesßge
, 
buÊí
);

106  
buf„r
;

107 
	}
}

111 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

112 
≠r_os_dso_h™dÀ_t
 
osdso
,

113 
≠r_poﬁ_t
 *
poﬁ
)

115 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

116 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

117 (*
≠rdso
)->
c⁄t
 = 
poﬁ
;

118 (*
≠rdso
)->
lﬂd_îr‹
 = 
APR_SUCCESS
;

119 (*
≠rdso
)->
Áûed_moduÀ
 = 
NULL
;

120  
APR_SUCCESS
;

121 
	}
}

125 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

126 
≠r_dso_h™dÀ_t
 *
≠rdso
)

128 *
osdso
 = 
≠rdso
->
h™dÀ
;

129  
APR_SUCCESS
;

130 
	}
}

	@dso/os390/dso.c

17 
	~"≠r_p‹èbÀ.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_¨ch_dso.h
"

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

23 #i‡
APR_HAS_DSO


25 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

26 
≠r_os_dso_h™dÀ_t
 
osdso
,

27 
≠r_poﬁ_t
 *
poﬁ
)

29 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

30 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

31 (*
≠rdso
)->
poﬁ
 =Öool;

32  
APR_SUCCESS
;

33 
	}
}

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

36 
≠r_dso_h™dÀ_t
 *
≠rdso
)

38 *
osdso
 = 
≠rdso
->
h™dÀ
;

39  
APR_SUCCESS
;

40 
	}
}

42 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

44 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

45 
rc
;

47 i‡(
dso
->
h™dÀ
 == 0)

48  
APR_SUCCESS
;

50 
rc
 = 
	`dŒ‰ì
(
dso
->
h™dÀ
);

52 i‡(
rc
 == 0) {

53 
dso
->
h™dÀ
 = 0;

54  
APR_SUCCESS
;

56 
dso
->
Áûög_î∫o
 = 
î∫o
;

57  
î∫o
;

58 
	}
}

60 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

61 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
˘x
)

63 
dŒh™dÀ
 *
h™dÀ
;

64 
rc
;

66 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
˘x
, (**res_handle));

67 (*
ªs_h™dÀ
)->
poﬁ
 = 
˘x
;

68 i‡((
h™dÀ
 = 
	`dŒlﬂd
(
∑th
)Ë!
NULL
) {

69 (*
ªs_h™dÀ
)->
h™dÀ
 = handle;

70 
	`≠r_poﬁ_˛ónup_ªgi°î
(
˘x
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

71  
APR_SUCCESS
;

74 (*
ªs_h™dÀ
)->
Áûög_î∫o
 = 
î∫o
;

75  
APR_EDSOOPEN
;

76 
	}
}

78 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

80  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
poﬁ
, h™dÀ, 
dso_˛ónup
);

81 
	}
}

83 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

84 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

85 c⁄° *
sym«me
)

87 *
func_±r
;

88 *
v¨_±r
;

90 i‡((
v¨_±r
 = 
	`dŒquîyv¨
(
h™dÀ
->h™dÀ, 
sym«me
)Ë!
NULL
) {

91 *
ªssym
 = 
v¨_±r
;

92  
APR_SUCCESS
;

94 i‡((
func_±r
 = (*)
	`dŒquîy‚
(
h™dÀ
->h™dÀ, 
sym«me
)Ë!
NULL
) {

95 *
ªssym
 = 
func_±r
;

96  
APR_SUCCESS
;

98 
h™dÀ
->
Áûög_î∫o
 = 
î∫o
;

99  
APR_ESYMNOTFOUND
;

100 
	}
}

102 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
h™dÀ
, *
buf„r
,

103 
≠r_size_t
 
buÊí
)

105 
	`≠r_˝y°∫
(
buf„r
, 
	`°ªº‹
(
h™dÀ
->
Áûög_î∫o
), 
buÊí
);

106  
buf„r
;

107 
	}
}

	@dso/unix/dso.c

17 
	~"≠r_¨ch_dso.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

21 #i‡
APR_HAS_DSO


23 #i‡!
deföed
(
DSO_USE_DLFCN
Ë&& !deföed(
DSO_USE_SHL
Ë&& !deföed(
DSO_USE_DYLD
)

24 #îr‹ 
No
 
DSO
 
im∂emíèti⁄
 
•ecifõd
.

27 #ifde‡
HAVE_STDDEF_H


28 
	~<°ddef.h
>

30 #i‡
APR_HAVE_STDLIB_H


31 
	~<°dlib.h
>

33 #i‡
APR_HAVE_STRING_H


34 
	~<°rög.h
>

37 #i‡
deföed
(
DSO_USE_DYLD
)

38 
	#DYLD_LIBRARY_HANDLE
 (*)-1

	)

41 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

42 
≠r_os_dso_h™dÀ_t
 
osdso
,

43 
≠r_poﬁ_t
 *
poﬁ
)

45 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

46 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

47 (*
≠rdso
)->
poﬁ
 =Öool;

48  
APR_SUCCESS
;

49 
	}
}

51 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

52 
≠r_dso_h™dÀ_t
 *
≠rdso
)

54 *
osdso
 = 
≠rdso
->
h™dÀ
;

55  
APR_SUCCESS
;

56 
	}
}

58 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

60 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

62 i‡(
dso
->
h™dÀ
 =
NULL
)

63  
APR_SUCCESS
;

65 #i‡
	`deföed
(
DSO_USE_SHL
)

66 
	`shl_u∆ﬂd
((
shl_t
)
dso
->
h™dÀ
);

67 #ñi‡
	`deföed
(
DSO_USE_DYLD
)

68 i‡(
dso
->
h™dÀ
 !
DYLD_LIBRARY_HANDLE
) {

69 
	`NSUnLökModuÀ
(
dso
->
h™dÀ
, 
FALSE
);

71 #ñi‡
	`deföed
(
DSO_USE_DLFCN
)

72 i‡(
	`dl˛o£
(
dso
->
h™dÀ
) != 0)

73  
APR_EINIT
;

75 
dso
->
h™dÀ
 = 
NULL
;

77  
APR_SUCCESS
;

78 
	}
}

80 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

81 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

83 #i‡
	`deföed
(
DSO_USE_SHL
)

84 
shl_t
 
os_h™dÀ
 = 
	`shl_lﬂd
(
∑th
, 
BIND_IMMEDIATE
, 0L);

86 #ñi‡
	`deföed
(
DSO_USE_DYLD
)

87 
NSObje˘FûeImage
 
image
;

88 
NSModuÀ
 
os_h™dÀ
 = 
NULL
;

89 
NSObje˘FûeImageRëu∫Code
 
ds€º
;

90 c⁄° * 
îr_msg
 = 
NULL
;

91 
ds€º
 = 
	`NSCª©eObje˘FûeImageFromFûe
(
∑th
, &
image
);

93 i‡(
ds€º
 =
NSObje˘FûeImageSuc˚ss
) {

94 #i‡
	`deföed
(
NSLINKMODULE_OPTION_RETURN_ON_ERROR
Ë&& deföed(
NSLINKMODULE_OPTION_NONE
)

95 
os_h™dÀ
 = 
	`NSLökModuÀ
(
image
, 
∑th
,

96 
NSLINKMODULE_OPTION_RETURN_ON_ERROR
 |

97 
NSLINKMODULE_OPTION_NONE
);

99 i‡(!
os_h™dÀ
) {

100 
NSLökEdôEº‹s
 
îr‹s
;

101 
îr‹Numbî
;

102 c⁄° *
fûeName
;

103 
	`NSLökEdôEº‹
(&
îr‹s
, &
îr‹Numbî
, &
fûeName
, &
îr_msg
);

106 
os_h™dÀ
 = 
	`NSLökModuÀ
(
image
, 
∑th
, 
FALSE
);

108 
	`NSDe°royObje˘FûeImage
(
image
);

110 i‡((
ds€º
 =
NSObje˘FûeImageF‹m©
 ||

111 
ds€º
 =
NSObje˘FûeImageI«µr›rüãFûe
) &&

112 
	`NSAddLibøry
(
∑th
Ë=
TRUE
) {

113 
os_h™dÀ
 = (
NSModuÀ
)
DYLD_LIBRARY_HANDLE
;

116 
îr_msg
 = "cannot create object file image oráddÜibrary";

119 #ñi‡
	`deföed
(
DSO_USE_DLFCN
)

120 #i‡
	`deföed
(
OSF1
Ë|| deföed(
SEQUENT
Ë|| deföed(
SNI
) ||\

121 (
	`deföed
(
__FªeBSD_vîsi⁄
) && (__FreeBSD_version >= 220000)) ||\

122 
	`deföed
(
__Døg⁄Fly__
)

123 *
os_h™dÀ
 = 
	`dl›í
((*)
∑th
, 
RTLD_NOW
 | 
RTLD_GLOBAL
);

126 
Êags
 = 
RTLD_NOW
 | 
RTLD_GLOBAL
;

127 *
os_h™dÀ
;

128 #ifde‡
_AIX


129 i‡(
	`°rchr
(
∑th
 + 1, '('Ë&&Ö©h[
	`°æí
(path) - 1] == ')')

136 
Êags
 |
RTLD_MEMBER
;

139 
os_h™dÀ
 = 
	`dl›í
(
∑th
, 
Êags
);

143 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
poﬁ
, (**res_handle));

145 if(
os_h™dÀ
 =
NULL
) {

146 #i‡
	`deföed
(
DSO_USE_SHL
)

147 (*
ªs_h™dÀ
)->
îr‹msg
 = 
	`°ªº‹
(
î∫o
);

148  
APR_EDSOOPEN
;

149 #ñi‡
	`deföed
(
DSO_USE_DYLD
)

150 (*
ªs_h™dÀ
)->
îr‹msg
 = (
îr_msg
) ?Érr_msg : "link failed";

151  
APR_EDSOOPEN
;

152 #ñi‡
	`deföed
(
DSO_USE_DLFCN
)

153 (*
ªs_h™dÀ
)->
îr‹msg
 = 
	`dÀº‹
();

154  
APR_EDSOOPEN
;

158 (*
ªs_h™dÀ
)->
h™dÀ
 = (*)
os_h™dÀ
;

159 (*
ªs_h™dÀ
)->
poﬁ
 =Öool;

160 (*
ªs_h™dÀ
)->
îr‹msg
 = 
NULL
;

162 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

164  
APR_SUCCESS
;

165 
	}
}

167 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

169  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
poﬁ
, h™dÀ, 
dso_˛ónup
);

170 
	}
}

172 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

173 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

174 c⁄° *
sym«me
)

176 #i‡
	`deföed
(
DSO_USE_SHL
)

177 *
symaddr
 = 
NULL
;

178 
°©us
;

180 
î∫o
 = 0;

181 
°©us
 = 
	`shl_födsym
((*)&
h™dÀ
->h™dÀ, 
sym«me
, 
TYPE_PROCEDURE
, &
symaddr
);

182 i‡(
°©us
 =-1 && 
î∫o
 == 0)

183 
°©us
 = 
	`shl_födsym
((*)&
h™dÀ
->h™dÀ, 
sym«me
, 
TYPE_DATA
, &
symaddr
);

184 i‡(
°©us
 == -1)

185  
APR_ESYMNOTFOUND
;

186 *
ªssym
 = 
symaddr
;

187  
APR_SUCCESS
;

189 #ñi‡
	`deföed
(
DSO_USE_DYLD
)

190 *
ªtvÆ
 = 
NULL
;

191 
NSSymbﬁ
 
symbﬁ
;

192 *
sym«me2
 = (*)
	`mÆloc
(()*(
	`°æí
(
sym«me
)+2));

193 
	`•rötf
(
sym«me2
, "_%s", 
sym«me
);

194 #ifde‡
NSLINKMODULE_OPTION_PRIVATE


195 i‡(
h™dÀ
->h™dÀ =
DYLD_LIBRARY_HANDLE
) {

196 
symbﬁ
 = 
	`NSLookupAndBödSymbﬁ
(
sym«me2
);

199 
symbﬁ
 = 
	`NSLookupSymbﬁInModuÀ
((
NSModuÀ
)
h™dÀ
->h™dÀ, 
sym«me2
);

202 
symbﬁ
 = 
	`NSLookupAndBödSymbﬁ
(
sym«me2
);

204 
	`‰ì
(
sym«me2
);

205 i‡(
symbﬁ
 =
NULL
) {

206 
h™dÀ
->
îr‹msg
 = "undefined symbol";

207  
APR_ESYMNOTFOUND
;

209 
ªtvÆ
 = 
	`NSAddªssOfSymbﬁ
(
symbﬁ
);

210 i‡(
ªtvÆ
 =
NULL
) {

211 
h™dÀ
->
îr‹msg
 = "cannotÑesolve symbol";

212  
APR_ESYMNOTFOUND
;

214 *
ªssym
 = 
ªtvÆ
;

215  
APR_SUCCESS
;

216 #ñi‡
	`deföed
(
DSO_USE_DLFCN
)

218 #i‡
	`deföed
(
DLSYM_NEEDS_UNDERSCORE
)

219 *
ªtvÆ
;

220 *
symbﬁ
 = (*)
	`mÆloc
(()*(
	`°æí
(
sym«me
)+2));

221 
	`•rötf
(
symbﬁ
, "_%s", 
sym«me
);

222 
ªtvÆ
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
symbﬁ
);

223 
	`‰ì
(
symbﬁ
);

224 #ñi‡
	`deföed
(
SEQUENT
Ë|| deföed(
SNI
)

225 *
ªtvÆ
 = 
	`dlsym
(
h™dÀ
->h™dÀ, (*)
sym«me
);

227 *
ªtvÆ
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
sym«me
);

230 i‡(
ªtvÆ
 =
NULL
) {

231 
h™dÀ
->
îr‹msg
 = 
	`dÀº‹
();

232  
APR_ESYMNOTFOUND
;

235 *
ªssym
 = 
ªtvÆ
;

237  
APR_SUCCESS
;

239 
	}
}

241 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf„r
,

242 
≠r_size_t
 
buÊí
)

244 i‡(
dso
->
îr‹msg
) {

245 
	`≠r_˝y°∫
(
buf„r
, 
dso
->
îr‹msg
, 
buÊí
);

246  
dso
->
îr‹msg
;

249 
	}
}

	@dso/win32/dso.c

17 
	~"≠r_¨ch_dso.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~"≠r_¨ch_utf8.h
"

23 #i‡
APR_HAS_DSO


25 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
≠rdso
,

26 
≠r_os_dso_h™dÀ_t
 
osdso
,

27 
≠r_poﬁ_t
 *
poﬁ
)

29 *
≠rdso
 = 
	`≠r_pˇŒoc
(
poﬁ
,  **aprdso);

30 (*
≠rdso
)->
h™dÀ
 = 
osdso
;

31 (*
≠rdso
)->
c⁄t
 = 
poﬁ
;

32  
APR_SUCCESS
;

33 
	}
}

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
osdso
,

36 
≠r_dso_h™dÀ_t
 *
≠rdso
)

38 *
osdso
 = 
≠rdso
->
h™dÀ
;

39  
APR_SUCCESS
;

40 
	}
}

42 
≠r_°©us_t
 
	$dso_˛ónup
(*
thedso
)

44 
≠r_dso_h™dÀ_t
 *
dso
 = 
thedso
;

46 i‡(
dso
->
h™dÀ
 !
NULL
 && !
	`FªeLibøry
(dso->handle)) {

47  
	`≠r_gë_os_îr‹
();

49 
dso
->
h™dÀ
 = 
NULL
;

51  
APR_SUCCESS
;

52 
	}
}

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

55 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
˘x
)

57 
HINSTANCE
 
os_h™dÀ
;

58 
≠r_°©us_t
 
rv
;

59 #i‚de‡
_WIN32_WCE


60 
UINT
 
em
;

63 #i‡
APR_HAS_UNICODE_FS


64 
IF_WIN_OS_IS_UNICODE


66 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

67 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
, (wpath)

68 / (
≠r_wch¨_t
), 
∑th
))

69 !
APR_SUCCESS
) {

70 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
˘x
, (**res_handle));

71  ((*
ªs_h™dÀ
)->
lﬂd_îr‹
 = 
rv
);

74 #i‚de‡
_WIN32_WCE


75 
em
 = 
	`SëEº‹Mode
(
SEM_FAILCRITICALERRORS
);

77 
os_h™dÀ
 = 
	`LﬂdLibøryExW
(
w∑th
, 
NULL
, 0);

78 i‡(!
os_h™dÀ
)

79 
os_h™dÀ
 = 
	`LﬂdLibøryExW
(
w∑th
, 
NULL
, 
LOAD_WITH_ALTERED_SEARCH_PATH
);

80 i‡(!
os_h™dÀ
)

81 
rv
 = 
	`≠r_gë_os_îr‹
();

82 #i‚de‡
_WIN32_WCE


83 
	`SëEº‹Mode
(
em
);

87 #i‡
APR_HAS_ANSI_FS


88 
ELSE_WIN_OS_IS_ANSI


90 
f•ec
[
APR_PATH_MAX
], *
p
 = fspec;

97 
	`≠r_˝y°∫
(
f•ec
, 
∑th
, (fspec));

98 (
p
 = 
	`°rchr
’, '/')Ë!
NULL
)

99 *
p
 = '\\';

102 
em
 = 
	`SëEº‹Mode
(
SEM_FAILCRITICALERRORS
);

103 
os_h™dÀ
 = 
	`LﬂdLibøryEx
(
∑th
, 
NULL
, 
LOAD_WITH_ALTERED_SEARCH_PATH
);

104 i‡(!
os_h™dÀ
)

105 
os_h™dÀ
 = 
	`LﬂdLibøryEx
(
∑th
, 
NULL
, 0);

106 i‡(!
os_h™dÀ
)

107 
rv
 = 
	`≠r_gë_os_îr‹
();

109 
rv
 = 
APR_SUCCESS
;

110 
	`SëEº‹Mode
(
em
);

114 *
ªs_h™dÀ
 = 
	`≠r_pˇŒoc
(
˘x
, (**res_handle));

115 (*
ªs_h™dÀ
)->
c⁄t
 = 
˘x
;

117 i‡(
rv
) {

118  ((*
ªs_h™dÀ
)->
lﬂd_îr‹
 = 
rv
);

121 (*
ªs_h™dÀ
)->
h™dÀ
 = (*)
os_h™dÀ
;

122 (*
ªs_h™dÀ
)->
lﬂd_îr‹
 = 
APR_SUCCESS
;

124 
	`≠r_poﬁ_˛ónup_ªgi°î
(
˘x
, *
ªs_h™dÀ
, 
dso_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

126  
APR_SUCCESS
;

127 
	}
}

129 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
)

131  
	`≠r_poﬁ_˛ónup_run
(
h™dÀ
->
c⁄t
, h™dÀ, 
dso_˛ónup
);

132 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

135 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

136 c⁄° *
sym«me
)

138 #ifde‡
_WIN32_WCE


139 
≠r_size_t
 
symÀn
 = 
	`°æí
(
sym«me
) + 1;

140 
≠r_size_t
 
wsymÀn
 = 256;

141 
≠r_wch¨_t
 
wsym«me
[256];

142 
≠r_°©us_t
 
rv
;

144 
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
wsym«me
, &
wsymÀn
, 
sym«me
, &
symÀn
);

145 i‡(
rv
 !
APR_SUCCESS
) {

146  
rv
;

148 i‡(
symÀn
) {

149  
APR_ENAMETOOLONG
;

152 *
ªssym
 = (
≠r_dso_h™dÀ_sym_t
)
	`GëProcAddªssW
(
h™dÀ
->h™dÀ, 
wsym«me
);

154 *
ªssym
 = (
≠r_dso_h™dÀ_sym_t
)
	`GëProcAddªss
(
h™dÀ
->h™dÀ, 
sym«me
);

156 i‡(!*
ªssym
) {

157  
	`≠r_gë_os_îr‹
();

159  
APR_SUCCESS
;

160 
	}
}

162 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf
, 
≠r_size_t
 
bufsize
)

164  
	`≠r_°ªº‹
(
dso
->
lﬂd_îr‹
, 
buf
, 
bufsize
);

165 
	}
}

	@encoding/apr_escape.c

28 
	~"≠r_esˇ≥.h
"

29 
	~"≠r_esˇ≥_ã°_ch¨.h
"

30 
	~"≠r_lib.h
"

31 
	~"≠r_°rögs.h
"

34 #i‡
APR_CHARSET_EBCDIC


35 
	~"≠r_xœã.h
"

36 
	#RAW_ASCII_CHAR
(
ch
Ë
	`≠r_xœã_c⁄v_byã
(
≠_hdrs_‰om_ascii
, \

37 ()
ch
)

	)

39 
	#RAW_ASCII_CHAR
(
ch
Ë(ch)

	)

47 
	#TEST_CHAR
(
c
, 
f
Ë(
ã°_ch¨_èbÀ
[()(c)] & (f))

	)

49 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_shñl
(*
esˇ≥d
, c⁄° *
°r
,

50 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
)

52 *
d
;

53 c⁄° *
s
;

54 
≠r_size_t
 
size
 = 1;

55 
found
 = 0;

57 
d
 = (*Ë
esˇ≥d
;

58 
s
 = (c⁄° *Ë
°r
;

60 i‡(
s
) {

61 i‡(
d
) {

62 ; *
s
 && 
¶í
; ++s, slen--) {

63 #i‡
	`deföed
(
OS2
Ë|| deföed(
WIN32
)

69 i‡(*
s
 == '\r' || *s == '\n') {

70 i‡(
d
) {

71 *
d
++ = ' ';

72 
found
 = 1;

77 i‡(
	`TEST_CHAR
(*
s
, 
T_ESCAPE_SHELL_CMD
)) {

78 *
d
++ = '\\';

79 
size
++;

80 
found
 = 1;

82 *
d
++ = *
s
;

83 
size
++;

85 *
d
 = '\0';

88 ; *
s
 && 
¶í
; ++s, slen--) {

89 i‡(
	`TEST_CHAR
(*
s
, 
T_ESCAPE_SHELL_CMD
)) {

90 
size
++;

91 
found
 = 1;

93 
size
++;

98 i‡(
Àn
) {

99 *
Àn
 = 
size
;

101 i‡(!
found
) {

102  
APR_NOTFOUND
;

105  
APR_SUCCESS
;

106 
	}
}

108 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_shñl
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

110 
≠r_size_t
 
Àn
;

112 
	`≠r_esˇ≥_shñl
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, &
Àn
)) {

113 
APR_SUCCESS
: {

114 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

115 
	`≠r_esˇ≥_shñl
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
NULL
);

116  
cmd
;

118 
APR_NOTFOUND
: {

123  
°r
;

124 
	}
}

126 
	$x2c
(c⁄° *
wh©
)

128 
digô
;

130 #i‡!
APR_CHARSET_EBCDIC


131 
digô
 =

132 ((
wh©
[0] >= 'A') ? ((what[0] & 0xdf) - 'A') + 10 : (what[0] - '0'));

133 
digô
 *= 16;

134 
digô
 +(
wh©
[1] >= 'A' ? ((what[1] & 0xdf) - 'A') + 10 : (what[1] - '0'));

136 
x°r
[5];

137 
x°r
[0]='0';

138 
x°r
[1]='x';

139 
x°r
[2]=
wh©
[0];

140 
x°r
[3]=
wh©
[1];

141 
x°r
[4]='\0';

142 
digô
 = 
	`≠r_xœã_c⁄v_byã
(
≠_hdrs_‰om_ascii
,

143 0xFF & 
	`°πﬁ
(
x°r
, 
NULL
, 16));

145  (
digô
);

146 
	}
}

148 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_u√sˇ≥_uæ
(*
esˇ≥d
, c⁄° *
uæ
,

149 
≠r_ssize_t
 
¶í
, c⁄° *
f‹bid
, c⁄° *
ª£rved
, 
∂us
,

150 
≠r_size_t
 *
Àn
)

152 
≠r_size_t
 
size
 = 1;

153 
found
 = 0;

154 c⁄° *
s
 = (c⁄° *Ë
uæ
;

155 *
d
 = (*Ë
esˇ≥d
;

156 
badesc
, 
bad∑th
;

158 i‡(!
uæ
) {

159  
APR_NOTFOUND
;

162 
badesc
 = 0;

163 
bad∑th
 = 0;

164 i‡(
s
) {

165 i‡(
d
) {

166 ; *
s
 && 
¶í
; ++s, 
d
++, slen--) {

167 i‡(
∂us
 && *
s
 == '+') {

168 *
d
 = ' ';

169 
found
 = 1;

171 i‡(*
s
 != '%') {

172 *
d
 = *
s
;

175 i‡(!
	`≠r_isxdigô
(*(
s
 + 1)) || !apr_isxdigit(*(s + 2))) {

176 
badesc
 = 1;

177 *
d
 = '%';

180 
decoded
;

181 
decoded
 = 
	`x2c
(
s
 + 1);

182 i‡((
decoded
 == '\0')

183 || (
f‹bid
 && 
	`°rchr
(f‹bid, 
decoded
))) {

184 
bad∑th
 = 1;

185 *
d
 = 
decoded
;

186 
s
 += 2;

187 
¶í
 -= 2;

189 i‡(
ª£rved
 && 
	`°rchr
‘e£rved, 
decoded
)) {

190 *
d
++ = *
s
++;

191 *
d
++ = *
s
++;

192 *
d
 = *
s
;

193 
size
 += 2;

196 *
d
 = 
decoded
;

197 
s
 += 2;

198 
¶í
 -= 2;

199 
found
 = 1;

203 
size
++;

205 *
d
 = '\0';

208 ; *
s
 && 
¶í
; ++s, slen--) {

209 i‡(
∂us
 && *
s
 == '+') {

210 
found
 = 1;

212 i‡(*
s
 != '%') {

216 i‡(!
	`≠r_isxdigô
(*(
s
 + 1)) || !apr_isxdigit(*(s + 2))) {

217 
badesc
 = 1;

220 
decoded
;

221 
decoded
 = 
	`x2c
(
s
 + 1);

222 i‡((
decoded
 == '\0')

223 || (
f‹bid
 && 
	`°rchr
(f‹bid, 
decoded
))) {

224 
bad∑th
 = 1;

225 
s
 += 2;

226 
¶í
 -= 2;

228 i‡(
ª£rved
 && 
	`°rchr
‘e£rved, 
decoded
)) {

229 
s
 += 2;

230 
¶í
 -= 2;

231 
size
 += 2;

234 
s
 += 2;

235 
¶í
 -= 2;

236 
found
 = 1;

240 
size
++;

245 i‡(
Àn
) {

246 *
Àn
 = 
size
;

248 i‡(
badesc
) {

249  
APR_EINVAL
;

251 i‡(
bad∑th
) {

252  
APR_BADCH
;

254 i‡(!
found
) {

255  
APR_NOTFOUND
;

258  
APR_SUCCESS
;

259 
	}
}

261 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_pu√sˇ≥_uæ
(
≠r_poﬁ_t
 *
p
, c⁄° *
uæ
,

262 c⁄° *
f‹bid
, c⁄° *
ª£rved
, 
∂us
)

264 
≠r_size_t
 
Àn
;

266 
	`≠r_u√sˇ≥_uæ
(
NULL
, 
uæ
, 
APR_ESCAPE_STRING
, 
f‹bid
, 
ª£rved
,

267 
∂us
, &
Àn
)) {

268 
APR_SUCCESS
: {

269 *
buf
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

270 
	`≠r_u√sˇ≥_uæ
(
buf
, 
uæ
, 
APR_ESCAPE_STRING
, 
f‹bid
, 
ª£rved
, 
∂us
,

271 
NULL
);

272  
buf
;

274 
APR_EINVAL
:

275 
APR_BADCH
: {

276  
NULL
;

278 
APR_NOTFOUND
: {

283  
uæ
;

284 
	}
}

296 c⁄° 
	gc2x_èbÀ
[] = "0123456789abcdef";

298 
APR_INLINE
 *
	$c2x
(
wh©
, 
¥efix
,

299 *
whîe
)

301 #i‡
APR_CHARSET_EBCDIC


302 
wh©
 = 
	`≠r_xœã_c⁄v_byã
(
≠_hdrs_to_ascii
, ()what);

304 *
whîe
++ = 
¥efix
;

305 *
whîe
++ = 
c2x_èbÀ
[
wh©
 >> 4];

306 *
whîe
++ = 
c2x_èbÀ
[
wh©
 & 0xf];

307  
whîe
;

308 
	}
}

310 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_∑th_£gmít
(*
esˇ≥d
,

311 c⁄° *
°r
, 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
)

313 
≠r_size_t
 
size
 = 1;

314 
found
 = 0;

315 c⁄° *
s
 = (c⁄° *Ë
°r
;

316 *
d
 = (*Ë
esˇ≥d
;

317 
c
;

319 i‡(
s
) {

320 i‡(
d
) {

321 (
c
 = *
s
Ë&& 
¶í
) {

322 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_PATH_SEGMENT
)) {

323 
d
 = 
	`c2x
(
c
, '%', d);

324 
size
 += 2;

325 
found
 = 1;

328 *
d
++ = 
c
;

330 ++
s
;

331 
size
++;

332 
¶í
--;

334 *
d
 = '\0';

337 (
c
 = *
s
Ë&& 
¶í
) {

338 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_PATH_SEGMENT
)) {

339 
size
 += 2;

340 
found
 = 1;

342 ++
s
;

343 
size
++;

344 
¶í
--;

349 i‡(
Àn
) {

350 *
Àn
 = 
size
;

352 i‡(!
found
) {

353  
APR_NOTFOUND
;

356  
APR_SUCCESS
;

357 
	}
}

359 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_∑th_£gmít
(
≠r_poﬁ_t
 *
p
,

360 c⁄° *
°r
)

362 
≠r_size_t
 
Àn
;

364 
	`≠r_esˇ≥_∑th_£gmít
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, &
Àn
)) {

365 
APR_SUCCESS
: {

366 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

367 
	`≠r_esˇ≥_∑th_£gmít
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
NULL
);

368  
cmd
;

370 
APR_NOTFOUND
: {

375  
°r
;

376 
	}
}

378 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_∑th
(*
esˇ≥d
, c⁄° *
∑th
,

379 
≠r_ssize_t
 
¶í
, 
∑πül
, 
≠r_size_t
 *
Àn
)

381 
≠r_size_t
 
size
 = 1;

382 
found
 = 0;

383 c⁄° *
s
 = (c⁄° *Ë
∑th
;

384 *
d
 = (*Ë
esˇ≥d
;

385 
c
;

387 i‡(!
∑th
) {

388  
APR_NOTFOUND
;

391 i‡(!
∑πül
) {

392 c⁄° *
cﬁ⁄
 = 
	`°rchr
(
∑th
, ':');

393 c⁄° *
¶ash
 = 
	`°rchr
(
∑th
, '/');

395 i‡(
cﬁ⁄
 && (!
¶ash
 || colon < slash)) {

396 i‡(
d
) {

397 *
d
++ = '.';

398 *
d
++ = '/';

400 
size
 += 2;

401 
found
 = 1;

404 i‡(
d
) {

405 (
c
 = *
s
Ë&& 
¶í
) {

406 i‡(
	`TEST_CHAR
(
c
, 
T_OS_ESCAPE_PATH
)) {

407 
d
 = 
	`c2x
(
c
, '%', d);

410 *
d
++ = 
c
;

412 ++
s
;

413 
size
++;

414 
¶í
--;

416 *
d
 = '\0';

419 (
c
 = *
s
Ë&& 
¶í
) {

420 i‡(
	`TEST_CHAR
(
c
, 
T_OS_ESCAPE_PATH
)) {

421 
size
 += 2;

422 
found
 = 1;

424 ++
s
;

425 
size
++;

426 
¶í
--;

430 i‡(
Àn
) {

431 *
Àn
 = 
size
;

433 i‡(!
found
) {

434  
APR_NOTFOUND
;

437  
APR_SUCCESS
;

438 
	}
}

440 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_∑th
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

441 
∑πül
)

443 
≠r_size_t
 
Àn
;

445 
	`≠r_esˇ≥_∑th
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, 
∑πül
, &
Àn
)) {

446 
APR_SUCCESS
: {

447 *
∑th
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

448 
	`≠r_esˇ≥_∑th
(
∑th
, 
°r
, 
APR_ESCAPE_STRING
, 
∑πül
, 
NULL
);

449  
∑th
;

451 
APR_NOTFOUND
: {

456  
°r
;

457 
	}
}

459 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_uæícoded
(*
esˇ≥d
, c⁄° *
°r
,

460 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
)

462 
≠r_size_t
 
size
 = 1;

463 
found
 = 0;

464 c⁄° *
s
 = (c⁄° *Ë
°r
;

465 *
d
 = (*Ë
esˇ≥d
;

466 
c
;

468 i‡(
s
) {

469 i‡(
d
) {

470 (
c
 = *
s
Ë&& 
¶í
) {

471 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_URLENCODED
)) {

472 
d
 = 
	`c2x
(
c
, '%', d);

473 
size
 += 2;

474 
found
 = 1;

476 i‡(
c
 == ' ') {

477 *
d
++ = '+';

478 
found
 = 1;

481 *
d
++ = 
c
;

483 ++
s
;

484 
size
++;

485 
¶í
--;

487 *
d
 = '\0';

490 (
c
 = *
s
Ë&& 
¶í
) {

491 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_URLENCODED
)) {

492 
size
 += 2;

493 
found
 = 1;

495 i‡(
c
 == ' ') {

496 
found
 = 1;

498 ++
s
;

499 
size
++;

500 
¶í
--;

505 i‡(
Àn
) {

506 *
Àn
 = 
size
;

508 i‡(!
found
) {

509  
APR_NOTFOUND
;

512  
APR_SUCCESS
;

513 
	}
}

515 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_uæícoded
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

517 
≠r_size_t
 
Àn
;

519 
	`≠r_esˇ≥_uæícoded
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, &
Àn
)) {

520 
APR_SUCCESS
: {

521 *
ícoded
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

522 
	`≠r_esˇ≥_uæícoded
(
ícoded
, 
°r
, 
APR_ESCAPE_STRING
, 
NULL
);

523  
ícoded
;

525 
APR_NOTFOUND
: {

530  
°r
;

531 
	}
}

533 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_ítôy
(*
esˇ≥d
, c⁄° *
°r
,

534 
≠r_ssize_t
 
¶í
, 
tﬂsc
, 
≠r_size_t
 *
Àn
)

536 
≠r_size_t
 
size
 = 1;

537 
found
 = 0;

538 c⁄° *
s
 = (c⁄° *Ë
°r
;

539 *
d
 = (*Ë
esˇ≥d
;

540 
c
;

542 i‡(
s
) {

543 i‡(
d
) {

544 (
c
 = *
s
Ë&& 
¶í
) {

545 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_XML
)) {

546 
c
) {

548 
	`mem˝y
(
d
, "&gt;", 4);

549 
size
 += 4;

550 
d
 += 4;

554 
	`mem˝y
(
d
, "&lt;", 4);

555 
size
 += 4;

556 
d
 += 4;

560 
	`mem˝y
(
d
, "&amp;", 5);

561 
size
 += 5;

562 
d
 += 5;

566 
	`mem˝y
(
d
, "&quot;", 6);

567 
size
 += 6;

568 
d
 += 6;

572 
	`mem˝y
(
d
, "&apos;", 6);

573 
size
 += 6;

574 
d
 += 6;

578 
found
 = 1;

580 i‡(
tﬂsc
 && !
	`≠r_ißscii
(
c
)) {

581 
off£t
 = 
	`≠r_¢¥ötf
((*Ë
d
, 6, "&#%3.3d;", 
c
);

582 
size
 +
off£t
;

583 
d
 +
off£t
;

584 
found
 = 1;

587 *
d
++ = 
c
;

588 
size
++;

590 ++
s
;

591 
¶í
--;

593 *
d
 = '\0';

596 (
c
 = *
s
Ë&& 
¶í
) {

597 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_XML
)) {

598 
c
) {

600 
size
 += 4;

604 
size
 += 4;

608 
size
 += 5;

612 
size
 += 6;

616 
size
 += 6;

620 
found
 = 1;

622 i‡(
tﬂsc
 && !
	`≠r_ißscii
(
c
)) {

623 
buf
[8];

624 
size
 +
	`≠r_¢¥ötf
(
buf
, 6, "&#%3.3d;", 
c
);

625 
found
 = 1;

628 
size
++;

630 ++
s
;

631 
¶í
--;

636 i‡(
Àn
) {

637 *
Àn
 = 
size
;

639 i‡(!
found
) {

640  
APR_NOTFOUND
;

643  
APR_SUCCESS
;

644 
	}
}

646 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_ítôy
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

647 
tﬂsc
)

649 
≠r_size_t
 
Àn
;

651 
	`≠r_esˇ≥_ítôy
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, 
tﬂsc
, &
Àn
)) {

652 
APR_SUCCESS
: {

653 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

654 
	`≠r_esˇ≥_ítôy
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
tﬂsc
, 
NULL
);

655  
cmd
;

657 
APR_NOTFOUND
: {

662  
°r
;

663 
	}
}

666 
	#MAXENTLEN
 (6)

	)

668 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_u√sˇ≥_ítôy
(*
u√sˇ≥d
, c⁄° *
°r
,

669 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
)

671 
found
 = 0;

672 
≠r_size_t
 
size
 = 1;

673 
vÆ
, 
i
, 
j
;

674 *
d
 = 
u√sˇ≥d
;

675 c⁄° *
s
 = 
°r
;

676 c⁄° *
íts
;

677 c⁄° * c⁄° 
íéi°
[
MAXENTLEN
 + 1] =

679 
NULL
,

680 
NULL
,

696 i‡(
s
) {

697 i‡(
d
) {

698 ; *
s
 !'\0' && 
¶í
; s++, 
d
++, 
size
++, slen--) {

699 i‡(*
s
 != '&') {

700 *
d
 = *
s
;

704 
i
 = 1; 
s
[i] !';' && s[i] !'\0' && (
¶í
 - i) != 0;

705 
i
++) {

709 i‡(
s
[
i
] ='\0' || (
¶í
 - i) == 0) {

710 *
d
 = *
s
;

715 i‡(
s
[1] == '#') {

716 
j
 = 2, 
vÆ
 = 0; j < 
i
 && 
	`≠r_isdigô
(
s
[j]); j++) {

717 
vÆ
 = vÆ * 10 + 
s
[
j
] - '0';

719 
s
 +
i
;

720 i‡(
j
 < 
i
 || 
vÆ
 <= 8 || (val >= 11 && val <= 31)

721 || (
vÆ
 >= 127 && val <= 160) || val >= 256) {

722 
d
--;

723 
size
--;

726 *
d
 = 
	`RAW_ASCII_CHAR
(
vÆ
);

727 
found
 = 1;

731 
j
 = 
i
 - 1;

732 i‡(
j
 > 
MAXENTLEN
 || 
íéi°
[j] =
NULL
) {

734 *
d
 = '&';

737 
íts
 = 
íéi°
[
j
]; *ít†!'\0';É¡†+
i
) {

738 i‡(
	`°∫cmp
(
s
 + 1, 
íts
, 
j
) == 0) {

743 i‡(*
íts
 == '\0') {

744 *
d
 = '&';

747 *
d
 = 
	`RAW_ASCII_CHAR
(((c⁄° *Ë
íts
)[
j
]);

748 
s
 +
i
;

749 
¶í
 -
i
;

750 
found
 = 1;

754 *
d
 = '\0';

757 ; *
s
 !'\0' && 
¶í
; s++, 
size
++, slen--) {

758 i‡(*
s
 != '&') {

762 
i
 = 1; 
s
[i] !';' && s[i] !'\0' && (
¶í
 - i) != 0;

763 
i
++) {

767 i‡(
s
[
i
] ='\0' || (
¶í
 - i) == 0) {

772 i‡(
s
[1] == '#') {

773 
j
 = 2, 
vÆ
 = 0; j < 
i
 && 
	`≠r_isdigô
(
s
[j]); j++) {

774 
vÆ
 = vÆ * 10 + 
s
[
j
] - '0';

776 
s
 +
i
;

777 i‡(
j
 < 
i
 || 
vÆ
 <= 8 || (val >= 11 && val <= 31)

778 || (
vÆ
 >= 127 && val <= 160) || val >= 256) {

780 
size
--;

783 
found
 = 1;

787 
j
 = 
i
 - 1;

788 i‡(
j
 > 
MAXENTLEN
 || 
íéi°
[j] =
NULL
) {

792 
íts
 = 
íéi°
[
j
]; *ít†!'\0';É¡†+
i
) {

793 i‡(
	`°∫cmp
(
s
 + 1, 
íts
, 
j
) == 0) {

798 i‡(*
íts
 == '\0') {

802 
s
 +
i
;

803 
¶í
 -
i
;

804 
found
 = 1;

811 i‡(
Àn
) {

812 *
Àn
 = 
size
;

814 i‡(!
found
) {

815  
APR_NOTFOUND
;

818  
APR_SUCCESS
;

819 
	}
}

821 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_pu√sˇ≥_ítôy
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

823 
≠r_size_t
 
Àn
;

825 
	`≠r_u√sˇ≥_ítôy
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, &
Àn
)) {

826 
APR_SUCCESS
: {

827 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

828 
	`≠r_u√sˇ≥_ítôy
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
NULL
);

829  
cmd
;

831 
APR_NOTFOUND
: {

836  
°r
;

837 
	}
}

839 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_echo
(*
esˇ≥d
, c⁄° *
°r
,

840 
≠r_ssize_t
 
¶í
, 
quŸe
, 
≠r_size_t
 *
Àn
)

842 
≠r_size_t
 
size
 = 1;

843 
found
 = 0;

844 c⁄° *
s
 = (c⁄° *Ë
°r
;

845 *
d
 = (*Ë
esˇ≥d
;

846 
c
;

848 i‡(
s
) {

849 i‡(
d
) {

850 (
c
 = *
s
Ë&& 
¶í
) {

851 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_ECHO
)) {

852 *
d
++ = '\\';

853 
size
++;

854 
c
) {

856 *
d
++ = 'a';

857 
size
++;

858 
found
 = 1;

861 *
d
++ = 'b';

862 
size
++;

863 
found
 = 1;

866 *
d
++ = 'f';

867 
size
++;

868 
found
 = 1;

871 *
d
++ = 'n';

872 
size
++;

873 
found
 = 1;

876 *
d
++ = 'r';

877 
size
++;

878 
found
 = 1;

881 *
d
++ = 't';

882 
size
++;

883 
found
 = 1;

886 *
d
++ = 'v';

887 
size
++;

888 
found
 = 1;

891 *
d
++ = '\\';

892 
size
++;

893 
found
 = 1;

896 i‡(
quŸe
) {

897 *
d
++ = 
c
;

898 
size
++;

899 
found
 = 1;

902 
d
[-1] = 
c
;

906 
	`c2x
(
c
, 'x', 
d
);

907 
d
 += 3;

908 
size
 += 3;

909 
found
 = 1;

914 *
d
++ = 
c
;

915 
size
++;

917 ++
s
;

918 
¶í
--;

920 *
d
 = '\0';

923 (
c
 = *
s
Ë&& 
¶í
) {

924 i‡(
	`TEST_CHAR
(
c
, 
T_ESCAPE_ECHO
)) {

925 
size
++;

926 
c
) {

935 
size
++;

936 
found
 = 1;

939 i‡(
quŸe
) {

940 
size
++;

941 
found
 = 1;

945 
size
 += 3;

946 
found
 = 1;

951 
size
++;

953 ++
s
;

954 
¶í
--;

959 i‡(
Àn
) {

960 *
Àn
 = 
size
;

962 i‡(!
found
) {

963  
APR_NOTFOUND
;

966  
APR_SUCCESS
;

967 
	}
}

969 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_echo
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

970 
quŸe
)

972 
≠r_size_t
 
Àn
;

974 
	`≠r_esˇ≥_echo
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, 
quŸe
, &
Àn
)) {

975 
APR_SUCCESS
: {

976 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

977 
	`≠r_esˇ≥_echo
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
quŸe
, 
NULL
);

978  
cmd
;

980 
APR_NOTFOUND
: {

985  
°r
;

986 
	}
}

988 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_esˇ≥_hex
(*
de°
, c⁄° *
§c
,

989 
≠r_size_t
 
§˛í
, 
cﬁ⁄
,á¥_size_à*
Àn
)

991 c⁄° *
ö
 = 
§c
;

992 
≠r_size_t
 
size
;

994 i‡(!
§c
) {

995  
APR_NOTFOUND
;

998 i‡(
de°
) {

999 
size
 = 0; sizê< 
§˛í
; size++) {

1000 i‡(
cﬁ⁄
 && 
size
) {

1001 *
de°
++ = ':';

1003 *
de°
++ = 
c2x_èbÀ
[
ö
[
size
] >> 4];

1004 *
de°
++ = 
c2x_èbÀ
[
ö
[
size
] & 0xf];

1006 *
de°
 = '\0';

1009 i‡(
Àn
) {

1010 i‡(
cﬁ⁄
 && 
§˛í
) {

1011 *
Àn
 = 
§˛í
 * 3;

1014 *
Àn
 = 
§˛í
 * 2 + 1;

1018  
APR_SUCCESS
;

1019 
	}
}

1021 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_≥sˇ≥_hex
(
≠r_poﬁ_t
 *
p
, c⁄° *
§c
,

1022 
≠r_size_t
 
§˛í
, 
cﬁ⁄
)

1024 
≠r_size_t
 
Àn
;

1026 
	`≠r_esˇ≥_hex
(
NULL
, 
§c
, 
§˛í
, 
cﬁ⁄
, &
Àn
)) {

1027 
APR_SUCCESS
: {

1028 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
Àn
);

1029 
	`≠r_esˇ≥_hex
(
cmd
, 
§c
, 
§˛í
, 
cﬁ⁄
, 
NULL
);

1030  
cmd
;

1032 
APR_NOTFOUND
: {

1037  
§c
;

1038 
	}
}

1040 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_u√sˇ≥_hex
(*
de°
, c⁄° *
°r
,

1041 
≠r_ssize_t
 
¶í
, 
cﬁ⁄
, 
≠r_size_t
 *
Àn
)

1043 
≠r_size_t
 
size
 = 0;

1044 
Êù
 = 0;

1045 c⁄° *
s
 = (c⁄° *Ë
°r
;

1046 *
d
 = (*Ë
de°
;

1047 
c
;

1048 
u
 = 0;

1050 i‡(
s
) {

1051 i‡(
d
) {

1052 (
c
 = *
s
Ë&& 
¶í
) {

1054 i‡(!
Êù
) {

1055 
u
 = 0;

1058 i‡(
cﬁ⁄
 && 
c
 =':' && !
Êù
) {

1059 ++
s
;

1060 
¶í
--;

1063 i‡(
	`≠r_isdigô
(
c
)) {

1064 
u
 |
c
 - '0';

1066 i‡(
	`≠r_isuµî
(
c
) && c <= 'F') {

1067 
u
 |
c
 - ('A' - 10);

1069 i‡(
	`≠r_i¶owî
(
c
) && c <= 'f') {

1070 
u
 |
c
 - ('a' - 10);

1073  
APR_BADCH
;

1076 i‡(
Êù
) {

1077 *
d
++ = 
u
;

1078 
size
++;

1081 
u
 <<= 4;

1082 *
d
 = 
u
;

1084 
Êù
 = !flip;

1086 ++
s
;

1087 
¶í
--;

1091 (
c
 = *
s
Ë&& 
¶í
) {

1093 i‡(
cﬁ⁄
 && 
c
 =':' && !
Êù
) {

1094 ++
s
;

1095 
¶í
--;

1098 i‡(
	`≠r_isdigô
(
c
)) {

1101 i‡(
	`≠r_isuµî
(
c
) && c <= 'F') {

1104 i‡(
	`≠r_i¶owî
(
c
) && c <= 'f') {

1108  
APR_BADCH
;

1111 i‡(
Êù
) {

1112 
size
++;

1114 
Êù
 = !flip;

1116 ++
s
;

1117 
¶í
--;

1122 i‡(
Àn
) {

1123 *
Àn
 = 
size
;

1125 i‡(!
s
) {

1126  
APR_NOTFOUND
;

1129  
APR_SUCCESS
;

1130 
	}
}

1132 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_pu√sˇ≥_hex
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

1133 
cﬁ⁄
, 
≠r_size_t
 *
Àn
)

1135 
≠r_size_t
 
size
;

1137 
	`≠r_u√sˇ≥_hex
(
NULL
, 
°r
, 
APR_ESCAPE_STRING
, 
cﬁ⁄
, &
size
)) {

1138 
APR_SUCCESS
: {

1139 *
cmd
 = 
	`≠r_∑Œoc
(
p
, 
size
);

1140 
	`≠r_u√sˇ≥_hex
(
cmd
, 
°r
, 
APR_ESCAPE_STRING
, 
cﬁ⁄
, 
Àn
);

1141  
cmd
;

1143 
APR_BADCH
:

1144 
APR_NOTFOUND
: {

1149  
NULL
;

1150 
	}
}

	@file_io/netware/filepath.c

4 
	~"../wö32/fûï©h.c
"

	@file_io/netware/filestat.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"fsio.h
"

19 
	~"nks/dúio.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_hash.h
"

25 
	~"≠r_thªad_rwlock.h
"

27 #ifde‡
HAVE_UTIME_H


28 
	~<utime.h
>

31 
	#APR_HAS_PSA


	)

33 
≠r_fûëy≥_e
 
	$fûëy≥_‰om_mode
(
mode_t
 
mode
)

35 
≠r_fûëy≥_e
 
ty≥
 = 
APR_NOFILE
;

37 i‡(
	`S_ISREG
(
mode
))

38 
ty≥
 = 
APR_REG
;

39 i‡(
	`S_ISDIR
(
mode
))

40 
ty≥
 = 
APR_DIR
;

41 i‡(
	`S_ISCHR
(
mode
))

42 
ty≥
 = 
APR_CHR
;

43 i‡(
	`S_ISBLK
(
mode
))

44 
ty≥
 = 
APR_BLK
;

45 i‡(
	`S_ISFIFO
(
mode
))

46 
ty≥
 = 
APR_PIPE
;

47 i‡(
	`S_ISLNK
(
mode
))

48 
ty≥
 = 
APR_LNK
;

49 i‡(
	`S_ISSOCK
(
mode
))

50 
ty≥
 = 
APR_SOCK
;

52 
ty≥
 = 
APR_UNKFILE
;

53  
ty≥
;

54 
	}
}

56 
	$fûl_out_föfo
(
≠r_föfo_t
 *
föfo
, 
°©
 *
öfo
,

57 
≠r_öt32_t
 
w™ãd
)

59 
föfo
->
vÆid
 = 
APR_FINFO_MIN
 | 
APR_FINFO_IDENT
 | 
APR_FINFO_NLINK


60 | 
APR_FINFO_OWNER
 | 
APR_FINFO_PROT
;

62 
föfo
->
¥Ÿe˘i⁄
 = 
	`≠r_unix_mode2≥rms
(
öfo
->
°_mode
);

63 
föfo
->
fûëy≥
 = 
	`fûëy≥_‰om_mode
(
öfo
->
°_mode
);

64 
föfo
->
u£r
 = 
öfo
->
°_uid
;

65 
föfo
->
group
 = 
öfo
->
°_gid
;

66 
föfo
->
size
 = 
öfo
->
°_size
;

67 
föfo
->
öode
 = 
öfo
->
°_öo
;

68 
föfo
->
devi˚
 = 
öfo
->
°_dev
;

69 
föfo
->
∆ök
 = 
öfo
->
°_∆ök
;

71 
	`≠r_time_™si_put
(&
föfo
->
©ime
, 
öfo
->
°_©ime
.
tv_£c
);

72 
	`≠r_time_™si_put
(&
föfo
->
mtime
, 
öfo
->
°_mtime
.
tv_£c
);

73 
	`≠r_time_™si_put
(&
föfo
->
˘ime
, 
öfo
->
°_˘ime
.
tv_£c
);

75 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


76 #ifde‡
DEV_BSIZE


77 
föfo
->
csize
 = (
≠r_off_t
)
öfo
->
°_blocks
 * (≠r_off_t)
DEV_BSIZE
;

79 
föfo
->
csize
 = (
≠r_off_t
)
öfo
->
°_blocks
 * (apr_off_t)512;

81 
föfo
->
vÆid
 |
APR_FINFO_CSIZE
;

83 
	}
}

85 
≠r_°©us_t
 
	$≠r_fûe_öfo_gë_locked
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

86 
≠r_fûe_t
 *
thefûe
)

88 
°ru˘_°©
 
öfo
;

90 i‡(
thefûe
->
buf„ªd
) {

91 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

92 i‡(
rv
 !
APR_SUCCESS
)

93  
rv
;

96 i‡(
	`f°©
(
thefûe
->
fûedes
, &
öfo
) == 0) {

97 
föfo
->
poﬁ
 = 
thefûe
->pool;

98 
föfo
->
‚ame
 = 
thefûe
->fname;

99 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

100  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

103  
î∫o
;

105 
	}
}

107 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öfo_gë
(
≠r_föfo_t
 *
föfo
,

108 
≠r_öt32_t
 
w™ãd
,

109 
≠r_fûe_t
 *
thefûe
)

111 
°©
 
öfo
;

113 i‡(
thefûe
->
buf„ªd
) {

115 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

116 i‡(
rv
 !
APR_SUCCESS
)

117  
rv
;

120 i‡(
	`f°©
(
thefûe
->
fûedes
, &
öfo
) == 0) {

121 
föfo
->
poﬁ
 = 
thefûe
->pool;

122 
föfo
->
‚ame
 = 
thefûe
->fname;

123 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

124  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

127  
î∫o
;

129 
	}
}

131 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_≥rms_£t
(c⁄° *
‚ame
,

132 
≠r_fûïîms_t
 
≥rms
)

134 
mode_t
 
mode
 = 
	`≠r_unix_≥rms2mode
(
≥rms
);

136 i‡(
	`chmod
(
‚ame
, 
mode
) == -1)

137  
î∫o
;

138  
APR_SUCCESS
;

139 
	}
}

141 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_©ås_£t
(c⁄° *
‚ame
,

142 
≠r_fûóârs_t
 
©åibuãs
,

143 
≠r_fûóârs_t
 
©å_mask
,

144 
≠r_poﬁ_t
 *
poﬁ
)

146 
≠r_°©us_t
 
°©us
;

147 
≠r_föfo_t
 
föfo
;

150 i‡(!(
©å_mask
 & (
APR_FILE_ATTR_READONLY


151 | 
APR_FILE_ATTR_EXECUTABLE
)))

152  
APR_SUCCESS
;

154 
°©us
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_PROT
, 
poﬁ
);

155 i‡(
°©us
)

156  
°©us
;

159 i‡(
©å_mask
 & 
APR_FILE_ATTR_READONLY
)

161 i‡(
©åibuãs
 & 
APR_FILE_ATTR_READONLY
)

163 
föfo
.
¥Ÿe˘i⁄
 &~
APR_UWRITE
;

164 
föfo
.
¥Ÿe˘i⁄
 &~
APR_GWRITE
;

165 
föfo
.
¥Ÿe˘i⁄
 &~
APR_WWRITE
;

170 
föfo
.
¥Ÿe˘i⁄
 |
APR_UWRITE
;

171 
föfo
.
¥Ÿe˘i⁄
 |
APR_GWRITE
;

172 
föfo
.
¥Ÿe˘i⁄
 |
APR_WWRITE
;

176 i‡(
©å_mask
 & 
APR_FILE_ATTR_EXECUTABLE
)

178 i‡(
©åibuãs
 & 
APR_FILE_ATTR_EXECUTABLE
)

181 
föfo
.
¥Ÿe˘i⁄
 |
APR_UEXECUTE
;

182 
föfo
.
¥Ÿe˘i⁄
 |
APR_GEXECUTE
;

183 
föfo
.
¥Ÿe˘i⁄
 |
APR_WEXECUTE
;

187 
föfo
.
¥Ÿe˘i⁄
 &~
APR_UEXECUTE
;

188 
föfo
.
¥Ÿe˘i⁄
 &~
APR_GEXECUTE
;

189 
föfo
.
¥Ÿe˘i⁄
 &~
APR_WEXECUTE
;

193  
	`≠r_fûe_≥rms_£t
(
‚ame
, 
föfo
.
¥Ÿe˘i⁄
);

194 
	}
}

196 #i‚de‡
APR_HAS_PSA


197 
≠r_°©us_t
 
	$°©_ˇche_˛ónup
(*
d©a
)

199 
≠r_poﬁ_t
 *
p
 = (≠r_poﬁ_à*)
	`gëGlobÆPoﬁ
();

200 
≠r_hash_ödex_t
 *
hi
;

201 
≠r_hash_t
 *
°©Cache
 = (≠r_hash_t*)
d©a
;

202 *
key
;

203 
≠r_ssize_t
 
keyÀn
;

204 
NXP©hCtx_t
 
∑th˘x
;

206 
hi
 = 
	`≠r_hash_fú°
(
p
, 
°©Cache
); hi; hò
	`≠r_hash_√xt
(hi)) {

207 
	`≠r_hash_this
(
hi
, (c⁄° **)&
key
, &
keyÀn
, (**)&
∑th˘x
);

209 i‡(
∑th˘x
) {

210 
	`NXFªeP©hC⁄ãxt
(
∑th˘x
);

214  
APR_SUCCESS
;

215 
	}
}

217 
	$c°©
 (
NXP©hCtx_t
 
˘x
, *
∑th
, 
°©
 *
buf
, 
ªque°m≠
, 
≠r_poﬁ_t
 *
p
)

219 
≠r_poﬁ_t
 *
gPoﬁ
 = (≠r_poﬁ_à*)
	`gëGlobÆPoﬁ
();

220 
≠r_hash_t
 *
°©Cache
 = 
NULL
;

221 
≠r_thªad_rwlock_t
 *
rwlock
 = 
NULL
;

223 
NXP©hCtx_t
 
∑th˘x
 = 0;

224 *
±r
 = 
NULL
, *
å
;

225 
Àn
 = 0, 
x
;

226 *
µ©h
;

227 *
pöfo
;

229 i‡(
˘x
 == 1) {

233 i‡(!
gPoﬁ
) {

234 
poﬁ«me
[50];

236 i‡(
	`≠r_poﬁ_¸óã
(&
gPoﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

237  
	`gë°©
(
˘x
, 
∑th
, 
buf
, 
ªque°m≠
);

240 
	`£tGlobÆPoﬁ
(
gPoﬁ
);

241 
	`≠r_poﬁ_èg
(
gPoﬁ
, 
	`≠r_p°rdup
(gPool, "cstat_mem_pool"));

243 
°©Cache
 = 
	`≠r_hash_make
(
gPoﬁ
);

244 
	`≠r_poﬁ_u£rd©a_£t
 ((*)
°©Cache
, "STAT_CACHE", 
°©_ˇche_˛ónup
, 
gPoﬁ
);

246 
	`≠r_thªad_rwlock_¸óã
(&
rwlock
, 
gPoﬁ
);

247 
	`≠r_poﬁ_u£rd©a_£t
 ((*)
rwlock
, "STAT_CACHE_LOCK", 
≠r_poﬁ_˛ónup_nuŒ
, 
gPoﬁ
);

250 
	`≠r_poﬁ_u£rd©a_gë
((**)&
°©Cache
, "STAT_CACHE", 
gPoﬁ
);

251 
	`≠r_poﬁ_u£rd©a_gë
((**)&
rwlock
, "STAT_CACHE_LOCK", 
gPoﬁ
);

254 i‡(!
gPoﬁ
 || !
°©Cache
 || !
rwlock
) {

255  
	`gë°©
(
˘x
, 
∑th
, 
buf
, 
ªque°m≠
);

258 
x
 = 0,
å
 = 
∑th
;*tr != '\0';tr++,x++) {

259 i‡(*
å
 == '\\' || *tr == '/') {

260 
±r
 = 
å
;

261 
Àn
 = 
x
;

263 i‡(*
å
 == ':') {

264 
±r
 = "\\";

265 
Àn
 = 
x
;

269 i‡(
±r
) {

270 
µ©h
 = 
	`≠r_p°∫dup
 (
p
, 
∑th
, 
Àn
);

271 
	`°æwr
(
µ©h
);

272 i‡(
±r
[1] != '\0') {

273 
±r
++;

279 i‡(((*
±r
 == '/') || (*ptr == '\\')) && (*(ptr+1) == '\0')) {

280 
pöfo
 = 
	`≠r_p°rdup
 (
p
, ".");

283 
pöfo
 = 
	`≠r_p°rdup
 (
p
, 
±r
);

289 i‡(
°©Cache
) {

290 
	`≠r_thªad_rwlock_rdlock
(
rwlock
);

291 
∑th˘x
 = (
NXP©hCtx_t
Ë
	`≠r_hash_gë
(
°©Cache
, 
µ©h
, 
APR_HASH_KEY_STRING
);

292 
	`≠r_thªad_rwlock_u∆ock
(
rwlock
);

293 i‡(
∑th˘x
) {

294  
	`gë°©
(
∑th˘x
, 
pöfo
, 
buf
, 
ªque°m≠
);

297 
îr
;

299 
îr
 = 
	`NXCª©eP©hC⁄ãxt
(0, 
µ©h
, 0, 
NULL
, &
∑th˘x
);

300 i‡(!
îr
) {

301 
	`≠r_thªad_rwlock_wæock
(
rwlock
);

302 
	`≠r_hash_£t
(
°©Cache
, 
	`≠r_p°rdup
(
gPoﬁ
,
µ©h
Ë, 
APR_HASH_KEY_STRING
, (*)
∑th˘x
);

303 
	`≠r_thªad_rwlock_u∆ock
(
rwlock
);

304  
	`gë°©
(
∑th˘x
, 
pöfo
, 
buf
, 
ªque°m≠
);

309  
	`gë°©
(
˘x
, 
∑th
, 
buf
, 
ªque°m≠
);

310 
	}
}

313 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°©
(
≠r_föfo_t
 *
föfo
,

314 c⁄° *
‚ame
,

315 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
poﬁ
)

317 
°©
 
öfo
;

318 
§v
;

319 
NXP©hCtx_t
 
∑thCtx
 = 0;

321 
	`gëcwd∑th
(
NULL
, &
∑thCtx
, 
CTX_ACTUAL_CWD
);

322 #ifde‡
APR_HAS_PSA


323 
§v
 = 
	`gë°©
(
∑thCtx
, (*)
‚ame
, &
öfo
, 
ST_STAT_BITS
|
ST_NAME_BIT
);

325 
§v
 = 
	`c°©
(
∑thCtx
, (*)
‚ame
, &
öfo
, 
ST_STAT_BITS
|
ST_NAME_BIT
, 
poﬁ
);

327 
î∫o
 = 
§v
;

329 i‡(
§v
 == 0) {

330 
föfo
->
poﬁ
 =Öool;

331 
föfo
->
‚ame
 = fname;

332 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

333 i‡(
w™ãd
 & 
APR_FINFO_LINK
)

334 
w™ãd
 &~
APR_FINFO_LINK
;

335 i‡(
w™ãd
 & 
APR_FINFO_NAME
) {

336 
föfo
->
«me
 = 
	`≠r_p°rdup
(
poﬁ
, 
öfo
.
°_«me
);

337 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

339  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

342 #i‡!
	`deföed
(
ENOENT
Ë|| !deföed(
ENOTDIR
)

343 #îr‹ 
ENOENT
 || 
ENOTDIR
 
nŸ
 
deföed
; 
∂ó£
 
£e
 
the


344 #îr‹ 
commíts
 
©
 
this
 
löe
 
ö
 
the
 
sour˚
 
a
 
w‹k¨ound
.

360 #i‡!
	`deföed
(
ENOENT
)

361  
APR_ENOENT
;

365 i‡(
î∫o
 !
ENOENT
)

366  
APR_ENOENT
;

368  
î∫o
;

371  
î∫o
;

374 
	}
}

376 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mtime_£t
(c⁄° *
‚ame
,

377 
≠r_time_t
 
mtime
,

378 
≠r_poﬁ_t
 *
poﬁ
)

380 
≠r_°©us_t
 
°©us
;

381 
≠r_föfo_t
 
föfo
;

383 
°©us
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_ATIME
, 
poﬁ
);

384 i‡(
°©us
) {

385  
°©us
;

388 #ifde‡
HAVE_UTIMES


390 
timevÆ
 
tvp
[2];

392 
tvp
[0].
tv_£c
 = 
	`≠r_time_£c
(
föfo
.
©ime
);

393 
tvp
[0].
tv_u£c
 = 
	`≠r_time_u£c
(
föfo
.
©ime
);

394 
tvp
[1].
tv_£c
 = 
	`≠r_time_£c
(
mtime
);

395 
tvp
[1].
tv_u£c
 = 
	`≠r_time_u£c
(
mtime
);

397 i‡(
	`utimes
(
‚ame
, 
tvp
) == -1) {

398  
î∫o
;

401 #ñi‡
	`deföed
(
HAVE_UTIME
)

403 
utimbuf
 
buf
;

405 
buf
.
a˘ime
 = (
time_t
Ë(
föfo
.
©ime
 / 
APR_USEC_PER_SEC
);

406 
buf
.
modtime
 = (
time_t
Ë(
mtime
 / 
APR_USEC_PER_SEC
);

408 i‡(
	`utime
(
‚ame
, &
buf
) == -1) {

409  
î∫o
;

413  
APR_ENOTIMPL
;

416  
APR_SUCCESS
;

417 
	}
}

	@file_io/netware/filesys.c

17 
	~"≠r.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

21 
≠r_°©us_t
 
	$fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
)

27 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
roŸ
);

28  
APR_SUCCESS
;

29 
	}
}

31 
≠r_°©us_t
 
	$fûï©h_has_drive
(c⁄° *
roŸ∑th
, 
⁄ly
, 
≠r_poﬁ_t
 *
p
)

33 *
s
;

35 i‡(
roŸ∑th
) {

36 
s
 = 
	`°rchr
 (
roŸ∑th
, ':');

37 i‡(
⁄ly
)

40  (
s
 && (†!
roŸ∑th
) && !s[1]);

44  (
s
 && (†!
roŸ∑th
));

47 
	}
}

49 
≠r_°©us_t
 
	$fûï©h_com∑ª_drive
(c⁄° *
∑th1
, c⁄° *
∑th2
, 
≠r_poﬁ_t
 *
p
)

51 *
s1
, *
s2
;

53 i‡(
∑th1
 && 
∑th2
) {

54 
s1
 = 
	`°rchr
 (
∑th1
, ':');

55 
s2
 = 
	`°rchr
 (
∑th2
, ':');

60 i‡(
s1
 && 
s2
 && ((s1-
∑th1
Ë=(s2-
∑th2
))) {

61  
	`°∫icmp
 (
s1
, 
s2
, s1-
∑th1
);

65 
	}
}

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_gë
(**
roŸ∑th
, 
≠r_öt32_t
 
Êags
,

68 
≠r_poﬁ_t
 *
p
)

70 
∑th
[
APR_PATH_MAX
];

71 *
±r
;

74 i‡(!
	`gëcwd∑th
(
∑th
, 
NULL
, 0)) {

75 i‡(
î∫o
 =
ERANGE
)

76  
APR_ENAMETOOLONG
;

78  
î∫o
;

81 
±r
 = 
	`°Ωbrk
(
∑th
, "\\/:");

82 i‡(!
±r
) {

83  
APR_ENOENT
;

85 i‡(*
±r
 == ':') {

86 
±r
 = 
∑th
;

88 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
±r
);

89 i‡(!(
Êags
 & 
APR_FILEPATH_NATIVE
)) {

90 
±r
 = *
roŸ∑th
; *ptr; ++ptr) {

91 i‡(*
±r
 == '\\')

92 *
±r
 = '/';

95  
APR_SUCCESS
;

96 
	}
}

98 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_£t
(c⁄° *
roŸ∑th
,

99 
≠r_poﬁ_t
 *
p
)

101 i‡(
	`chdú2
(
roŸ∑th
) != 0)

102  
î∫o
;

103  
APR_SUCCESS
;

104 
	}
}

	@file_io/netware/flock.c

17 
	~<nks/fsio.h
>

18 
	~"≠r_¨ch_fûe_io.h
"

21 
≠r_°©us_t
 
	$≠r_fûe_lock
(
≠r_fûe_t
 *
thefûe
, 
ty≥
)

23 
fc
;

25 
fc
 = (
ty≥
 & 
APR_FLOCK_NONBLOCK
Ë? 
NX_RANGE_LOCK_TRYLOCK
 : 
NX_RANGE_LOCK_CHECK
;

27 if(
	`NXFûeR™geLock
(
thefûe
->
fûedes
,
fc
, 0, 0) == -1)

28  
î∫o
;

30  
APR_SUCCESS
;

31 
	}
}

33 
≠r_°©us_t
 
	$≠r_fûe_u∆ock
(
≠r_fûe_t
 *
thefûe
)

35 if(
	`NXFûeR™geU∆ock
(
thefûe
->
fûedes
,
NX_RANGE_LOCK_CANCEL
,0 , 0) == -1)

36  
î∫o
;

38  
APR_SUCCESS
;

39 
	}
}

	@file_io/netware/mktemp.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¨ch_öhîô.h
"

24 
	~<°dlib.h
>

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mkãmp
(
≠r_fûe_t
 **
Â
, *
ãm∂©e
, 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

28 
fd
;

29 
≠r_°©us_t
 
rv
;

31 
Êags
 = (!ÊagsË? 
APR_FOPEN_CREATE
 | 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 |

32 
APR_FOPEN_DELONCLOSE
 : 
Êags
 & ~
APR_FOPEN_EXCL
;

34 
fd
 = 
	`mk°emp
(
ãm∂©e
);

35 i‡(
fd
 == -1) {

36  
î∫o
;

41 
	`˛o£
(
fd
);

42 i‡((
rv
 = 
	`≠r_fûe_›í
(
Â
, 
ãm∂©e
, 
Êags
|
APR_FOPEN_NOCLEANUP
,

43 
APR_UREAD
 | 
APR_UWRITE
, 
p
)Ë=
APR_SUCCESS
) {

46 i‡(!(
Êags
 & 
APR_FOPEN_NOCLEANUP
)) {

47 
Êags
;

49 i‡((
Êags
 = 
	`f˙é
((*
Â
)->
fûedes
, 
F_GETFD
)) == -1)

50  
î∫o
;

52 
Êags
 |
FD_CLOEXEC
;

53 i‡(
	`f˙é
((*
Â
)->
fûedes
, 
F_SETFD
, 
Êags
) == -1)

54  
î∫o
;

56 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
Â
)->
poﬁ
, (*)(*fp),

57 
≠r_unix_fûe_˛ónup
,

58 
≠r_unix_chûd_fûe_˛ónup
);

62  
rv
;

63 
	}
}

	@file_io/netware/pipe.c

17 
	~<°dio.h
>

18 
	~<nks/fsio.h
>

19 
	~<nks/î∫o.h
>

21 
	~"≠r_¨ch_fûe_io.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~"≠r_¨ch_öhîô.h
"

26 
≠r_°©us_t
 
	$pùeblock
(
≠r_fûe_t
 *
thïùe
)

28 #ifde‡
USE_FLAGS


29 
Êags
;

31 i‡(
	`f˙é
(
thïùe
->
fûedes
, 
F_GETFL
, &
Êags
) != -1)

33 
Êags
 &~
FNDELAY
;

34 
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 
Êags
);

37 
î∫o
 = 0;

38 
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 0);

41 i‡(
î∫o
)

42  
î∫o
;

44 
thïùe
->
blockög
 = 
BLK_ON
;

45  
APR_SUCCESS
;

46 
	}
}

48 
≠r_°©us_t
 
	$pùí⁄block
(
≠r_fûe_t
 *
thïùe
)

50 #ifde‡
USE_FLAGS


51 
Êags
;

53 
î∫o
 = 0;

54 i‡(
	`f˙é
(
thïùe
->
fûedes
, 
F_GETFL
, &
Êags
) != -1)

56 
Êags
 |
FNDELAY
;

57 
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 
Êags
);

60 
î∫o
 = 0;

61 
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 
FNDELAY
);

64 i‡(
î∫o
)

65  
î∫o
;

67 
thïùe
->
blockög
 = 
BLK_OFF
;

68  
APR_SUCCESS
;

69 
	}
}

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_£t
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 
timeout
)

73 i‡(
thïùe
->
is_pùe
 == 1) {

74 
thïùe
->
timeout
 =Åimeout;

75 i‡(
timeout
 >= 0) {

76 i‡(
thïùe
->
blockög
 !
BLK_OFF
) {

77  
	`pùí⁄block
(
thïùe
);

81 i‡(
thïùe
->
blockög
 !
BLK_ON
) {

82  
	`pùeblock
(
thïùe
);

85  
APR_SUCCESS
;

87  
APR_EINVAL
;

88 
	}
}

90 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_gë
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 *
timeout
)

92 i‡(
thïùe
->
is_pùe
 == 1) {

93 *
timeout
 = 
thïùe
->timeout;

94  
APR_SUCCESS
;

96  
APR_EINVAL
;

97 
	}
}

99 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put_ex
(
≠r_fûe_t
 **
fûe
,

100 
≠r_os_fûe_t
 *
thefûe
,

101 
ªgi°î_˛ónup
,

102 
≠r_poﬁ_t
 *
poﬁ
)

104 *
dafûe
 = 
thefûe
;

106 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

107 (*
fûe
)->
poﬁ
 =Öool;

108 (*
fûe
)->
eof_hô
 = 0;

109 (*
fûe
)->
is_pùe
 = 1;

110 (*
fûe
)->
blockög
 = 
BLK_UNKNOWN
;

111 (*
fûe
)->
timeout
 = -1;

112 (*
fûe
)->
ungëch¨
 = -1;

113 (*
fûe
)->
fûedes
 = *
dafûe
;

114 i‡(!
ªgi°î_˛ónup
) {

115 (*
fûe
)->
Êags
 = 
APR_FOPEN_NOCLEANUP
;

117 (*
fûe
)->
buf„ªd
 = 0;

118 #i‡
APR_HAS_THREADS


119 (*
fûe
)->
thlock
 = 
NULL
;

121 i‡(
ªgi°î_˛ónup
) {

122 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
fûe
)->
poﬁ
, (*)(*file),

123 
≠r_unix_fûe_˛ónup
,

124 
≠r_poﬁ_˛ónup_nuŒ
);

126  
APR_SUCCESS
;

127 
	}
}

129 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put
(
≠r_fûe_t
 **
fûe
,

130 
≠r_os_fûe_t
 *
thefûe
,

131 
≠r_poﬁ_t
 *
poﬁ
)

133  
	`≠r_os_pùe_put_ex
(
fûe
, 
thefûe
, 0, 
poﬁ
);

134 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã
(
≠r_fûe_t
 **
ö
,á¥_fûe_à**
out
, 
≠r_poﬁ_t
 *
poﬁ
)

138 
fûedes
[2];

140 i‡(
	`pùe
(
fûedes
) == -1) {

141  
î∫o
;

144 (*
ö
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

145 (*
out
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

147 (*
ö
)->
poﬁ
 =

148 (*
out
)->
poﬁ
 =Öool;

149 (*
ö
)->
fûedes
 = filedes[0];

150 (*
out
)->
fûedes
 = filedes[1];

151 (*
ö
)->
Êags
 = 
APR_INHERIT
;

152 (*
out
)->
Êags
 = 
APR_INHERIT
;

153 (*
ö
)->
is_pùe
 =

154 (*
out
)->
is_pùe
 = 1;

155 (*
out
)->
‚ame
 =

156 (*
ö
)->
‚ame
 = 
NULL
;

157 (*
ö
)->
buf„ªd
 =

158 (*
out
)->
buf„ªd
 = 0;

159 (*
ö
)->
blockög
 =

160 (*
out
)->
blockög
 = 
BLK_ON
;

161 (*
ö
)->
timeout
 =

162 (*
out
)->
timeout
 = -1;

163 (*
ö
)->
ungëch¨
 = -1;

164 (*
ö
)->
thlock
 =

165 (*
out
)->
thlock
 = 
NULL
;

166 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
ö
)->
pﬁl£t
, 1, 
poﬁ
, 0);

167 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
out
)->
pﬁl£t
, 1, 
poﬁ
, 0);

169 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
ö
)->
poﬁ
, (*)(*ö), 
≠r_unix_fûe_˛ónup
,

170 
≠r_poﬁ_˛ónup_nuŒ
);

171 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
out
)->
poﬁ
, (*)(*out), 
≠r_unix_fûe_˛ónup
,

172 
≠r_poﬁ_˛ónup_nuŒ
);

174  
APR_SUCCESS
;

175 
	}
}

177 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã_ex
(
≠r_fûe_t
 **
ö
,

178 
≠r_fûe_t
 **
out
,

179 
≠r_öt32_t
 
blockög
,

180 
≠r_poﬁ_t
 *
poﬁ
)

182 
≠r_°©us_t
 
°©us
;

184 i‡((
°©us
 = 
	`≠r_fûe_pùe_¸óã
(
ö
, 
out
, 
poﬁ
)Ë!
APR_SUCCESS
)

185  
°©us
;

187 
blockög
) {

188 
APR_FULL_BLOCK
:

190 
APR_READ_BLOCK
:

191 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

193 
APR_WRITE_BLOCK
:

194 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

197 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

198 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

201  
APR_SUCCESS
;

202 
	}
}

204 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_«medpùe_¸óã
(c⁄° *
fûíame
,

205 
≠r_fûïîms_t
 
≥rm
, 
≠r_poﬁ_t
 *
poﬁ
)

207  
APR_ENOTIMPL
;

208 
	}
}

	@file_io/os2/buffer.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_thªad_muãx.h
"

20 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_buf„r_£t
(
≠r_fûe_t
 *
fûe
,

21 * 
buf„r
,

22 
≠r_size_t
 
bufsize
)

24 
≠r_°©us_t
 
rv
;

26 
	`≠r_thªad_muãx_lock
(
fûe
->
muãx
);

28 if(
fûe
->
buf„ªd
) {

30 
rv
 = 
	`≠r_fûe_Êush
(
fûe
);

31 i‡(
rv
 !
APR_SUCCESS
) {

32 
	`≠r_thªad_muãx_u∆ock
(
fûe
->
muãx
);

33  
rv
;

37 
fûe
->
buf„r
 = buffer;

38 
fûe
->
bufsize
 = bufsize;

39 
fûe
->
buf„ªd
 = 1;

40 
fûe
->
buÂos
 = 0;

41 
fûe
->
dúe˘i⁄
 = 0;

42 
fûe
->
d©aRód
 = 0;

44 i‡(
fûe
->
bufsize
 == 0) {

48 
fûe
->
buf„ªd
 = 0;

51 
	`≠r_thªad_muãx_u∆ock
(
fûe
->
muãx
);

53  
APR_SUCCESS
;

54 
	}
}

56 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_fûe_buf„r_size_gë
(
≠r_fûe_t
 *
fûe
)

58  
fûe
->
bufsize
;

59 
	}
}

	@file_io/os2/copy.c

1 
	~"../unix/c›y.c
"

	@file_io/os2/dir.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~<°rög.h
>

24 
≠r_°©us_t
 
	$dú_˛ónup
(*
thedú
)

26 
≠r_dú_t
 *
dú
 = 
thedú
;

27  
	`≠r_dú_˛o£
(
dú
);

28 
	}
}

32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_›í
(
≠r_dú_t
 **
√w
, c⁄° *
dú«me
, 
≠r_poﬁ_t
 *
poﬁ
)

34 
≠r_dú_t
 *
thedú
 = (≠r_dú_à*)
	`≠r_∑Œoc
(
poﬁ
, (apr_dir_t));

36 i‡(
thedú
 =
NULL
)

37  
APR_ENOMEM
;

39 
thedú
->
poﬁ
 =Öool;

40 
thedú
->
dú«me
 = 
	`≠r_p°rdup
(
poﬁ
, dirname);

42 i‡(
thedú
->
dú«me
 =
NULL
)

43  
APR_ENOMEM
;

45 
thedú
->
h™dÀ
 = 0;

46 
thedú
->
vÆidíåy
 = 
FALSE
;

47 *
√w
 = 
thedú
;

48 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
thedú
, 
dú_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

49  
APR_SUCCESS
;

50 
	}
}

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_˛o£
(
≠r_dú_t
 *
thedú
)

56 
rv
 = 0;

58 i‡(
thedú
->
h™dÀ
) {

59 
rv
 = 
	`DosFödClo£
(
thedú
->
h™dÀ
);

61 i‡(
rv
 == 0) {

62 
thedú
->
h™dÀ
 = 0;

66  
	`APR_FROM_OS_ERROR
(
rv
);

67 
	}
}

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªad
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

72 
≠r_dú_t
 *
thedú
)

74 
rv
;

75 
ULONG
 
íåõs
 = 1;

77 i‡(
thedú
->
h™dÀ
 == 0) {

78 
thedú
->
h™dÀ
 = 
HDIR_CREATE
;

79 
rv
 = 
	`DosFödFú°
(
	`≠r_p°rˇt
(
thedú
->
poﬁ
,Åhedú->
dú«me
, "/*", 
NULL
), &thedú->
h™dÀ
,

80 
FILE_ARCHIVED
|
FILE_DIRECTORY
|
FILE_SYSTEM
|
FILE_HIDDEN
|
FILE_READONLY
,

81 &
thedú
->
íåy
, —hedú->íåy), &
íåõs
, 
FIL_STANDARD
);

83 
rv
 = 
	`DosFödNext
(
thedú
->
h™dÀ
, &thedú->
íåy
, —hedú->íåy), &
íåõs
);

86 
föfo
->
poﬁ
 = 
thedú
->pool;

87 
föfo
->
‚ame
 = 
NULL
;

88 
föfo
->
vÆid
 = 0;

90 i‡(
rv
 =0 && 
íåõs
 == 1) {

91 
thedú
->
vÆidíåy
 = 
TRUE
;

94 
föfo
->
‚ame
 = 
NULL
;

95 
föfo
->
size
 = 
thedú
->
íåy
.
cbFûe
;

96 
föfo
->
csize
 = 
thedú
->
íåy
.
cbFûeAŒoc
;

99 
föfo
->
fûëy≥
 = (
thedú
->
íåy
.
©åFûe
 & 
FILE_DIRECTORY
Ë? 
APR_DIR
 : 
APR_REG
;

101 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
mtime
, 
thedú
->
íåy
.
fd©eLa°Wrôe
,

102 
thedú
->
íåy
.
·imeLa°Wrôe
);

103 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
©ime
, 
thedú
->
íåy
.
fd©eLa°Ac˚ss
,

104 
thedú
->
íåy
.
·imeLa°Ac˚ss
);

105 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
˘ime
, 
thedú
->
íåy
.
fd©eCª©i⁄
,

106 
thedú
->
íåy
.
·imeCª©i⁄
);

108 
föfo
->
«me
 = 
thedú
->
íåy
.
achName
;

109 
föfo
->
vÆid
 = 
APR_FINFO_NAME
 | 
APR_FINFO_MTIME
 | 
APR_FINFO_ATIME
 |

110 
APR_FINFO_CTIME
 | 
APR_FINFO_TYPE
 | 
APR_FINFO_SIZE
 |

111 
APR_FINFO_CSIZE
;

113  
APR_SUCCESS
;

116 
thedú
->
vÆidíåy
 = 
FALSE
;

118 i‡(
rv
)

119  
	`APR_FROM_OS_ERROR
(
rv
);

121  
APR_ENOENT
;

122 
	}
}

126 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªwöd
(
≠r_dú_t
 *
thedú
)

128  
	`≠r_dú_˛o£
(
thedú
);

129 
	}
}

133 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_make
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
, 
≠r_poﬁ_t
 *
poﬁ
)

135  
	`APR_FROM_OS_ERROR
(
	`DosCª©eDú
(
∑th
, 
NULL
));

136 
	}
}

140 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

142  
	`APR_FROM_OS_ERROR
(
	`DosDñëeDú
(
∑th
));

143 
	}
}

147 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dú_gë
(
≠r_os_dú_t
 **
thedú
, 
≠r_dú_t
 *
dú
)

149 i‡(
dú
 =
NULL
) {

150  
APR_ENODIR
;

152 *
thedú
 = &
dú
->
h™dÀ
;

153  
APR_SUCCESS
;

154 
	}
}

158 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dú_put
(
≠r_dú_t
 **
dú
, 
≠r_os_dú_t
 *
thedú
,

159 
≠r_poﬁ_t
 *
poﬁ
)

161 i‡((*
dú
Ë=
NULL
) {

162 (*
dú
Ë(
≠r_dú_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_dir_t));

163 (*
dú
)->
poﬁ
 =Öool;

165 (*
dú
)->
h™dÀ
 = *
thedú
;

166  
APR_SUCCESS
;

167 
	}
}

	@file_io/os2/dir_make_recurse.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_lib.h
"

19 
	~"≠r_°rögs.h
"

20 
	~<°rög.h
>

22 
	#IS_SEP
(
c
Ë(¯='/' || c ='\\')

	)

25 c⁄° *
	$∑th_ˇn⁄iˇlize
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

29 
≠r_size_t
 
Àn
 = 
	`°æí
(
∑th
);

30 
≠r_size_t
 
‹ig_Àn
 = 
Àn
;

32 (
Àn
 > 0Ë&& 
	`IS_SEP
(
∑th
[len - 1])) {

33 
Àn
--;

36 i‡(
Àn
 !
‹ig_Àn
) {

37  
	`≠r_p°∫dup
(
poﬁ
, 
∑th
, 
Àn
);

40  
∑th
;

42 
	}
}

47 *
	$∑th_ªmove_œ°_comp⁄ít
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

49 c⁄° *
√w∑th
 = 
	`∑th_ˇn⁄iˇlize
(
∑th
, 
poﬁ
);

50 
i
;

52 
i
 = 
	`°æí
(
√w∑th
) - 1; i >= 0; i--) {

53 i‡(
	`IS_SEP
(
∑th
[
i
])) {

58  
	`≠r_p°∫dup
(
poﬁ
, 
∑th
, (
i
 < 0) ? 0 : i);

59 
	}
}

63 
≠r_°©us_t
 
	$≠r_dú_make_ªcursive
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
,

64 
≠r_poﬁ_t
 *
poﬁ
)

66 
≠r_°©us_t
 
≠r_îr
 = 
APR_SUCCESS
;

68 
≠r_îr
 = 
	`≠r_dú_make
(
∑th
, 
≥rm
, 
poﬁ
);

70 i‡(
	`APR_STATUS_IS_ENOENT
(
≠r_îr
)) {

71 *
dú
;

73 
dú
 = 
	`∑th_ªmove_œ°_comp⁄ít
(
∑th
, 
poﬁ
);

74 
≠r_îr
 = 
	`≠r_dú_make_ªcursive
(
dú
, 
≥rm
, 
poﬁ
);

76 i‡(!
≠r_îr
) {

77 
≠r_îr
 = 
	`≠r_dú_make
(
∑th
, 
≥rm
, 
poﬁ
);

86 i‡(
	`APR_STATUS_IS_EEXIST
(
≠r_îr
))

87  
APR_SUCCESS
;

89  
≠r_îr
;

90 
	}
}

	@file_io/os2/fileacc.c

17 
	~"../unix/fûócc.c
"

	@file_io/os2/filedup.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_°rögs.h
"

21 
	~<°rög.h
>

22 
	~"≠r_¨ch_öhîô.h
"

24 
≠r_°©us_t
 
	$fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,á¥_fûe_à*
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

26 
rv
;

27 
≠r_fûe_t
 *
dup_fûe
;

29 i‡(*
√w_fûe
 =
NULL
) {

30 
dup_fûe
 = (
≠r_fûe_t
 *)
	`≠r_∑Œoc
(
p
, (apr_file_t));

32 i‡(
dup_fûe
 =
NULL
) {

33  
APR_ENOMEM
;

36 
dup_fûe
->
fûedes
 = -1;

38 
dup_fûe
 = *
√w_fûe
;

41 
dup_fûe
->
poﬁ
 = 
p
;

42 
rv
 = 
	`DosDupH™dÀ
(
ﬁd_fûe
->
fûedes
, &
dup_fûe
->filedes);

44 i‡(
rv
) {

45  
	`APR_FROM_OS_ERROR
(
rv
);

48 
dup_fûe
->
‚ame
 = 
	`≠r_p°rdup
(dup_fûe->
poﬁ
, 
ﬁd_fûe
->fname);

49 
dup_fûe
->
buf„ªd
 = 
ﬁd_fûe
->buffered;

50 
dup_fûe
->
is›í
 = 
ﬁd_fûe
->isopen;

51 
dup_fûe
->
Êags
 = 
ﬁd_fûe
->Êag†& ~
APR_INHERIT
;

53 
dup_fûe
->
pùe
 = 
ﬁd_fûe
->pipe;

55 i‡(*
√w_fûe
 =
NULL
) {

56 
	`≠r_poﬁ_˛ónup_ªgi°î
(
dup_fûe
->
poﬁ
, dup_fûe, 
≠r_fûe_˛ónup
,

57 
≠r_poﬁ_˛ónup_nuŒ
);

58 *
√w_fûe
 = 
dup_fûe
;

61  
APR_SUCCESS
;

62 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,á¥_fûe_à*
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

68 i‡(*
√w_fûe
) {

69 
	`≠r_fûe_˛o£
(*
√w_fûe
);

70 (*
√w_fûe
)->
fûedes
 = -1;

73  
	`fûe_dup
(
√w_fûe
, 
ﬁd_fûe
, 
p
);

74 
	}
}

78 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup2
(
≠r_fûe_t
 *
√w_fûe
,á¥_fûe_à*
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

80  
	`fûe_dup
(&
√w_fûe
, 
ﬁd_fûe
, 
p
);

81 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£èside
(
≠r_fûe_t
 **
√w_fûe
,

86 
≠r_fûe_t
 *
ﬁd_fûe
,

87 
≠r_poﬁ_t
 *
p
)

89 *
√w_fûe
 = (
≠r_fûe_t
 *)
	`≠r_pmemdup
(
p
, 
ﬁd_fûe
, (apr_file_t));

90 (*
√w_fûe
)->
poﬁ
 = 
p
;

92 i‡(
ﬁd_fûe
->
buf„ªd
) {

93 (*
√w_fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
p
, 
ﬁd_fûe
->
bufsize
);

94 (*
√w_fûe
)->
bufsize
 = 
ﬁd_fûe
->bufsize;

96 i‡(
ﬁd_fûe
->
dúe˘i⁄
 == 1) {

97 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
buÂos
);

100 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
d©aRód
);

103 i‡(
ﬁd_fûe
->
muãx
) {

104 
	`≠r_thªad_muãx_¸óã
(&((*
√w_fûe
)->
muãx
),

105 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

106 
	`≠r_thªad_muãx_de°roy
(
ﬁd_fûe
->
muãx
);

110 i‡(
ﬁd_fûe
->
‚ame
) {

111 (*
√w_fûe
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ﬁd_fûe
->fname);

114 i‡(!(
ﬁd_fûe
->
Êags
 & 
APR_FOPEN_NOCLEANUP
)) {

115 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)(*
√w_fûe
),

116 
≠r_fûe_˛ónup
,

117 
≠r_fûe_˛ónup
);

120 
ﬁd_fûe
->
fûedes
 = -1;

121 
	`≠r_poﬁ_˛ónup_kûl
(
ﬁd_fûe
->
poﬁ
, (*)old_file,

122 
≠r_fûe_˛ónup
);

124  
APR_SUCCESS
;

125 
	}
}

	@file_io/os2/filepath.c

16 
	~"../wö32/fûï©h.c
"

	@file_io/os2/filepath_util.c

1 
	~"../unix/fûï©h_utû.c
"

	@file_io/os2/filestat.c

17 
	#INCL_DOS


	)

18 
	#INCL_DOSERRORS


	)

19 
	~"≠r_¨ch_fûe_io.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_lib.h
"

22 
	~<sys/time.h
>

23 
	~"≠r_°rögs.h
"

26 
	$FS3_to_föfo
(
≠r_föfo_t
 *
föfo
, 
FILESTATUS3
 *
f°©us
)

28 
föfo
->
¥Ÿe˘i⁄
 = (
f°©us
->
©åFûe
 & 
FILE_READONLY
) ? 0x555 : 0x777;

30 i‡(
f°©us
->
©åFûe
 & 
FILE_DIRECTORY
)

31 
föfo
->
fûëy≥
 = 
APR_DIR
;

33 
föfo
->
fûëy≥
 = 
APR_REG
;

36 
föfo
->
u£r
 = 0;

37 
föfo
->
group
 = 0;

38 
föfo
->
öode
 = 0;

39 
föfo
->
devi˚
 = 0;

40 
föfo
->
size
 = 
f°©us
->
cbFûe
;

41 
föfo
->
csize
 = 
f°©us
->
cbFûeAŒoc
;

42 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
©ime
, 
f°©us
->
fd©eLa°Ac˚ss
,

43 
f°©us
->
·imeLa°Ac˚ss
 );

44 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
mtime
, 
f°©us
->
fd©eLa°Wrôe
,

45 
f°©us
->
·imeLa°Wrôe
 );

46 
	`≠r_os2_time_to_≠r_time
(&
föfo
->
˘ime
, 
f°©us
->
fd©eCª©i⁄
,

47 
f°©us
->
·imeCª©i⁄
 );

48 
föfo
->
vÆid
 = 
APR_FINFO_TYPE
 | 
APR_FINFO_PROT
 | 
APR_FINFO_SIZE


49 | 
APR_FINFO_CSIZE
 | 
APR_FINFO_MTIME


50 | 
APR_FINFO_CTIME
 | 
APR_FINFO_ATIME
 | 
APR_FINFO_LINK
;

51 
	}
}

55 
≠r_°©us_t
 
	$h™dÀ_ty≥
(
≠r_fûëy≥_e
 *
·y≥
, 
HFILE
 
fûe
)

57 
ULONG
 
fûëy≥
, 
fûóâr
, 
rc
;

59 
rc
 = 
	`DosQuîyHTy≥
(
fûe
, &
fûëy≥
, &
fûóâr
);

61 i‡(
rc
 == 0) {

62 
fûëy≥
 & 0xff) {

64 *
·y≥
 = 
APR_REG
;

68 *
·y≥
 = 
APR_CHR
;

72 *
·y≥
 = 
APR_PIPE
;

78 *
·y≥
 = 
APR_UNKFILE
;

82  
APR_SUCCESS
;

84  
	`APR_FROM_OS_ERROR
(
rc
);

85 
	}
}

89 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öfo_gë
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

90 
≠r_fûe_t
 *
thefûe
)

92 
ULONG
 
rc
;

93 
FILESTATUS3
 
f°©us
;

95 i‡(
thefûe
->
is›í
) {

96 i‡(
thefûe
->
buf„ªd
) {

98 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

100 i‡(
rv
 !
APR_SUCCESS
) {

101  
rv
;

105 
rc
 = 
	`DosQuîyFûeInfo
(
thefûe
->
fûedes
, 
FIL_STANDARD
, &
f°©us
, (fstatus));

108 
rc
 = 
	`DosQuîyP©hInfo
(
thefûe
->
‚ame
, 
FIL_STANDARD
, &
f°©us
, (fstatus));

110 i‡(
rc
 == 0) {

111 
	`FS3_to_föfo
(
föfo
, &
f°©us
);

112 
föfo
->
‚ame
 = 
thefûe
->fname;

114 i‡(
föfo
->
fûëy≥
 =
APR_REG
) {

115 i‡(
thefûe
->
is›í
) {

116  
	`h™dÀ_ty≥
(&
föfo
->
fûëy≥
, 
thefûe
->
fûedes
);

119  
APR_SUCCESS
;

123 
föfo
->
¥Ÿe˘i⁄
 = 0;

124 
föfo
->
fûëy≥
 = 
APR_NOFILE
;

125  
	`APR_FROM_OS_ERROR
(
rc
);

126 
	}
}

128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_≥rms_£t
(c⁄° *
‚ame
, 
≠r_fûïîms_t
 
≥rms
)

130  
APR_ENOTIMPL
;

131 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°©
(
≠r_föfo_t
 *
föfo
, c⁄° *
‚ame
,

135 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
c⁄t
)

137 
ULONG
 
rc
;

138 
FILESTATUS3
 
f°©us
;

140 
föfo
->
¥Ÿe˘i⁄
 = 0;

141 
föfo
->
fûëy≥
 = 
APR_NOFILE
;

142 
föfo
->
«me
 = 
NULL
;

143 
rc
 = 
	`DosQuîyP©hInfo
(
‚ame
, 
FIL_STANDARD
, &
f°©us
, (fstatus));

145 i‡(
rc
 == 0) {

146 
	`FS3_to_föfo
(
föfo
, &
f°©us
);

147 
föfo
->
‚ame
 = fname;

149 i‡(
w™ãd
 & 
APR_FINFO_NAME
) {

150 
ULONG
 
cou¡
 = 1;

151 
HDIR
 
hDú
 = 
HDIR_SYSTEM
;

152 
FILEFINDBUF3
 
ffb
;

153 
rc
 = 
	`DosFödFú°
(
‚ame
, &
hDú
,

154 
FILE_DIRECTORY
|
FILE_HIDDEN
|
FILE_SYSTEM
|
FILE_ARCHIVED
,

155 &
ffb
, (ffb), &
cou¡
, 
FIL_STANDARD
);

156 i‡(
rc
 =0 && 
cou¡
 == 1) {

157 
föfo
->
«me
 = 
	`≠r_p°rdup
(
c⁄t
, 
ffb
.
achName
);

158 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

161 } i‡(
rc
 =
ERROR_INVALID_ACCESS
) {

162 
	`mem£t
(
föfo
, 0, (
≠r_föfo_t
));

163 
föfo
->
vÆid
 = 
APR_FINFO_TYPE
 | 
APR_FINFO_PROT
;

164 
föfo
->
¥Ÿe˘i⁄
 = 0666;

165 
föfo
->
fûëy≥
 = 
APR_CHR
;

167 i‡(
w™ãd
 & 
APR_FINFO_NAME
) {

168 
föfo
->
«me
 = 
	`≠r_p°rdup
(
c⁄t
, 
‚ame
);

169 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

172  
	`APR_FROM_OS_ERROR
(
rc
);

175  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

176 
	}
}

180 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_©ås_£t
(c⁄° *
‚ame
,

181 
≠r_fûóârs_t
 
©åibuãs
,

182 
≠r_fûóârs_t
 
©å_mask
,

183 
≠r_poﬁ_t
 *
c⁄t
)

185 
FILESTATUS3
 
fs3
;

186 
ULONG
 
rc
;

189 i‡(!(
©å_mask
 & (
APR_FILE_ATTR_READONLY


190 | 
APR_FILE_ATTR_HIDDEN
)))

191  
APR_SUCCESS
;

193 
rc
 = 
	`DosQuîyP©hInfo
(
‚ame
, 
FIL_STANDARD
, &
fs3
, (fs3));

194 i‡(
rc
 == 0) {

195 
ULONG
 
ﬁd_©å
 = 
fs3
.
©åFûe
;

197 i‡(
©å_mask
 & 
APR_FILE_ATTR_READONLY
)

199 i‡(
©åibuãs
 & 
APR_FILE_ATTR_READONLY
) {

200 
fs3
.
©åFûe
 |
FILE_READONLY
;

202 
fs3
.
©åFûe
 &~
FILE_READONLY
;

206 i‡(
©å_mask
 & 
APR_FILE_ATTR_HIDDEN
)

208 i‡(
©åibuãs
 & 
APR_FILE_ATTR_HIDDEN
) {

209 
fs3
.
©åFûe
 |
FILE_HIDDEN
;

211 
fs3
.
©åFûe
 &~
FILE_HIDDEN
;

215 i‡(
fs3
.
©åFûe
 !
ﬁd_©å
) {

216 
rc
 = 
	`DosSëP©hInfo
(
‚ame
, 
FIL_STANDARD
, &
fs3
, (fs3), 0);

220  
	`APR_FROM_OS_ERROR
(
rc
);

221 
	}
}

225 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mtime_£t
(c⁄° *
‚ame
,

226 
≠r_time_t
 
mtime
,

227 
≠r_poﬁ_t
 *
poﬁ
)

229 
FILESTATUS3
 
fs3
;

230 
ULONG
 
rc
;

231 
rc
 = 
	`DosQuîyP©hInfo
(
‚ame
, 
FIL_STANDARD
, &
fs3
, (fs3));

233 i‡(
rc
) {

234  
	`APR_FROM_OS_ERROR
(
rc
);

237 
	`≠r_≠r_time_to_os2_time
(&
fs3
.
fd©eLa°Wrôe
, &fs3.
·imeLa°Wrôe
, 
mtime
);

239 
rc
 = 
	`DosSëP©hInfo
(
‚ame
, 
FIL_STANDARD
, &
fs3
, (fs3), 0);

240  
	`APR_FROM_OS_ERROR
(
rc
);

241 
	}
}

	@file_io/os2/filesys.c

17 
	~"≠r.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_lib.h
"

21 
	~<˘y≥.h
>

35 c⁄° 
	gc_is_‚ch¨
[256] =

52 
	#IS_SLASH
(
c
Ë(¯='/' || c ='\\')

	)

55 
≠r_°©us_t
 
	$fûï©h_roŸ_ã°
(*
∑th
, 
≠r_poﬁ_t
 *
p
)

57 
drive
 = 
	`≠r_touµî
(
∑th
[0]);

59 i‡(
drive
 >'A' && drivê<'Z' && 
∑th
[1] =':' && 
	`IS_SLASH
(path[2]))

60  
APR_SUCCESS
;

62  
APR_EBADPATH
;

63 
	}
}

66 
≠r_°©us_t
 
	$fûï©h_drive_gë
(**
roŸ∑th
, 
drive
,

67 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

69 
∑th
[
APR_PATH_MAX
];

70 *
pos
;

71 
ULONG
 
rc
;

72 
ULONG
 
bufsize
 = (
∑th
) - 3;

74 
∑th
[0] = 
drive
;

75 
∑th
[1] = ':';

76 
∑th
[2] = '/';

78 
rc
 = 
	`DosQuîyCuºítDú
(
	`≠r_touµî
(
drive
Ë- 'A', 
∑th
+3, &
bufsize
);

80 i‡(
rc
) {

81  
	`APR_FROM_OS_ERROR
(
rc
);

84 i‡(!(
Êags
 & 
APR_FILEPATH_NATIVE
)) {

85 
pos
=
∑th
; *pos;Öos++) {

86 i‡(*
pos
 == '\\')

87 *
pos
 = '/';

91 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

92  
APR_SUCCESS
;

93 
	}
}

96 
≠r_°©us_t
 
	$fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
)

98 i‡(
roŸ
[0] && 
	`≠r_i¶owî
(root[0]) &&Ñoot[1] == ':') {

99 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
roŸ
);

100 (*
roŸ∑th
)[0] = 
	`≠r_touµî
((*rootpath)[0]);

103 *
roŸ∑th
 = 
roŸ
;

105  
APR_SUCCESS
;

106 
	}
}

109 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_gë
(**
deÂ©h
, 
≠r_öt32_t
 
Êags
,

110 
≠r_poﬁ_t
 *
p
)

112 
∑th
[
APR_PATH_MAX
];

113 
ULONG
 
drive
;

114 
ULONG
 
drivem≠
;

115 
ULONG
 
rv
, 
∑thÀn
 = (
∑th
) - 3;

116 *
pos
;

118 
	`DosQuîyCuºítDisk
(&
drive
, &
drivem≠
);

119 
∑th
[0] = '@' + 
drive
;

120 
	`°r˝y
(
∑th
+1, ":\\");

121 
rv
 = 
	`DosQuîyCuºítDú
(
drive
, 
∑th
+3, &
∑thÀn
);

123 *
deÂ©h
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

125 i‡(!(
Êags
 & 
APR_FILEPATH_NATIVE
)) {

126 
pos
=*
deÂ©h
; *pos;Öos++) {

127 i‡(*
pos
 == '\\')

128 *
pos
 = '/';

132  
APR_SUCCESS
;

133 
	}
}

137 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_£t
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
p
)

139 
ULONG
 
rv
 = 0;

141 i‡(
∑th
[1] == ':')

142 
rv
 = 
	`DosSëDeÁu…Disk
(
	`≠r_touµî
(
∑th
[0]) - '@');

144 i‡(
rv
 == 0)

145 
rv
 = 
	`DosSëCuºítDú
(
∑th
);

147  
	`APR_FROM_OS_ERROR
(
rv
);

148 
	}
}

	@file_io/os2/flock.c

17 
	~"≠r_¨ch_fûe_io.h
"

19 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_lock
(
≠r_fûe_t
 *
thefûe
, 
ty≥
)

21 
FILELOCK
 
lockønge
 = { 0, 0x7fffffff };

22 
ULONG
 
rc
;

24 
rc
 = 
	`DosSëFûeLocks
(
thefûe
->
fûedes
, 
NULL
, &
lockønge
,

25 (
ty≥
 & 
APR_FLOCK_NONBLOCK
Ë? 0 : (
ULONG
)-1,

26 (
ty≥
 & 
APR_FLOCK_TYPEMASK
Ë=
APR_FLOCK_SHARED
);

27  
	`APR_FROM_OS_ERROR
(
rc
);

28 
	}
}

30 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_u∆ock
(
≠r_fûe_t
 *
thefûe
)

32 
FILELOCK
 
u∆ockønge
 = { 0, 0x7fffffff };

33 
ULONG
 
rc
;

35 
rc
 = 
	`DosSëFûeLocks
(
thefûe
->
fûedes
, &
u∆ockønge
, 
NULL
, 0, 0);

36  
	`APR_FROM_OS_ERROR
(
rc
);

37 
	}
}

	@file_io/os2/fullrw.c

1 
	~"../unix/fuŒrw.c
"

	@file_io/os2/maperrorcode.c

17 
	#INCL_DOSERRORS


	)

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~"≠r_î∫o.h
"

24 
	gîr‹m≠
[][2] = {

25 { 
NO_ERROR
, 
APR_SUCCESS
 },

26 { 
ERROR_FILE_NOT_FOUND
, 
APR_ENOENT
 },

27 { 
ERROR_PATH_NOT_FOUND
, 
APR_ENOENT
 },

28 { 
ERROR_TOO_MANY_OPEN_FILES
, 
APR_EMFILE
 },

29 { 
ERROR_ACCESS_DENIED
, 
APR_EACCES
 },

30 { 
ERROR_SHARING_VIOLATION
, 
APR_EACCES
 },

31 { 
ERROR_INVALID_PARAMETER
, 
APR_EINVAL
 },

32 { 
ERROR_OPEN_FAILED
, 
APR_ENOENT
 },

33 { 
ERROR_DISK_FULL
, 
APR_ENOSPC
 },

34 { 
ERROR_FILENAME_EXCED_RANGE
, 
APR_ENAMETOOLONG
 },

35 { 
ERROR_INVALID_FUNCTION
, 
APR_EINVAL
 },

36 { 
ERROR_INVALID_HANDLE
, 
APR_EBADF
 },

37 { 
ERROR_NEGATIVE_SEEK
, 
APR_ESPIPE
 },

38 { 
ERROR_NO_SIGNAL_SENT
, 
ESRCH
 },

39 { 
ERROR_NO_DATA
, 
APR_EAGAIN
 },

40 { 
SOCEINTR
, 
EINTR
 },

41 { 
SOCEWOULDBLOCK
, 
EWOULDBLOCK
 },

42 { 
SOCEINPROGRESS
, 
EINPROGRESS
 },

43 { 
SOCEALREADY
, 
EALREADY
 },

44 { 
SOCENOTSOCK
, 
ENOTSOCK
 },

45 { 
SOCEDESTADDRREQ
, 
EDESTADDRREQ
 },

46 { 
SOCEMSGSIZE
, 
EMSGSIZE
 },

47 { 
SOCEPROTOTYPE
, 
EPROTOTYPE
 },

48 { 
SOCENOPROTOOPT
, 
ENOPROTOOPT
 },

49 { 
SOCEPROTONOSUPPORT
, 
EPROTONOSUPPORT
 },

50 { 
SOCESOCKTNOSUPPORT
, 
ESOCKTNOSUPPORT
 },

51 { 
SOCEOPNOTSUPP
, 
EOPNOTSUPP
 },

52 { 
SOCEPFNOSUPPORT
, 
EPFNOSUPPORT
 },

53 { 
SOCEAFNOSUPPORT
, 
EAFNOSUPPORT
 },

54 { 
SOCEADDRINUSE
, 
EADDRINUSE
 },

55 { 
SOCEADDRNOTAVAIL
, 
EADDRNOTAVAIL
 },

56 { 
SOCENETDOWN
, 
ENETDOWN
 },

57 { 
SOCENETUNREACH
, 
ENETUNREACH
 },

58 { 
SOCENETRESET
, 
ENETRESET
 },

59 { 
SOCECONNABORTED
, 
ECONNABORTED
 },

60 { 
SOCECONNRESET
, 
ECONNRESET
 },

61 { 
SOCENOBUFS
, 
ENOBUFS
 },

62 { 
SOCEISCONN
, 
EISCONN
 },

63 { 
SOCENOTCONN
, 
ENOTCONN
 },

64 { 
SOCESHUTDOWN
, 
ESHUTDOWN
 },

65 { 
SOCETOOMANYREFS
, 
ETOOMANYREFS
 },

66 { 
SOCETIMEDOUT
, 
ETIMEDOUT
 },

67 { 
SOCECONNREFUSED
, 
ECONNREFUSED
 },

68 { 
SOCELOOP
, 
ELOOP
 },

69 { 
SOCENAMETOOLONG
, 
ENAMETOOLONG
 },

70 { 
SOCEHOSTDOWN
, 
EHOSTDOWN
 },

71 { 
SOCEHOSTUNREACH
, 
EHOSTUNREACH
 },

72 { 
SOCENOTEMPTY
, 
ENOTEMPTY
 },

73 { 
SOCEPIPE
, 
EPIPE
 }

76 
	#MAPSIZE
 ((
îr‹m≠
)/”º‹m≠[0]))

	)

78 
	$≠r_ˇn⁄iˇl_îr‹
(
≠r_°©us_t
 
îr
)

80 
rv
 = -1, 
ödex
;

82 i‡(
îr
 < 
APR_OS_START_SYSERR
)

83  
îr
;

85 
îr
 -
APR_OS_START_SYSERR
;

87 
ödex
=0; index<
MAPSIZE
 && 
îr‹m≠
[ödex][0] !
îr
; index++);

89 i‡(
ödex
<
MAPSIZE
)

90 
rv
 = 
îr‹m≠
[
ödex
][1];

92 
	`Ârötf
(
°dîr
, "≠r_ˇn⁄iˇl_îr‹: Unknow¿OS/2Éº‹ codê%d\n", 
îr
 );

94  
rv
;

95 
	}
}

	@file_io/os2/mktemp.c

1 
	~"../unix/mkãmp.c
"

	@file_io/os2/open.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_¨ch_öhîô.h
"

23 
	~<°rög.h
>

25 
≠r_°©us_t
 
	$≠r_fûe_˛ónup
(*
thefûe
)

27 
≠r_fûe_t
 *
fûe
 = 
thefûe
;

28  
	`≠r_fûe_˛o£
(
fûe
);

29 
	}
}

33 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í
(
≠r_fûe_t
 **
√w
, c⁄° *
‚ame
, 
≠r_öt32_t
 
Êag
, 
≠r_fûïîms_t
 
≥rm
, 
≠r_poﬁ_t
 *
poﬁ
)

35 
oÊags
 = 0;

36 
mÊags
 = 
OPEN_FLAGS_FAIL_ON_ERROR
|
OPEN_SHARE_DENYNONE
|
OPEN_FLAGS_NOINHERIT
;

37 
rv
;

38 
ULONG
 
a˘i⁄
;

39 
≠r_fûe_t
 *
dafûe
 = (≠r_fûe_à*)
	`≠r_∑Œoc
(
poﬁ
, (apr_file_t));

41 i‡(
Êag
 & 
APR_FOPEN_NONBLOCK
) {

42  
APR_ENOTIMPL
;

45 
dafûe
->
poﬁ
 =Öool;

46 
dafûe
->
is›í
 = 
FALSE
;

47 
dafûe
->
eof_hô
 = 
FALSE
;

48 
dafûe
->
buf„r
 = 
NULL
;

49 
dafûe
->
Êags
 = 
Êag
;

50 
dafûe
->
blockög
 = 
BLK_ON
;

52 i‡((
Êag
 & 
APR_FOPEN_READ
Ë&& (Êag & 
APR_FOPEN_WRITE
)) {

53 
mÊags
 |
OPEN_ACCESS_READWRITE
;

54 } i‡(
Êag
 & 
APR_FOPEN_READ
) {

55 
mÊags
 |
OPEN_ACCESS_READONLY
;

56 } i‡(
Êag
 & 
APR_FOPEN_WRITE
) {

57 
mÊags
 |
OPEN_ACCESS_WRITEONLY
;

59 
dafûe
->
fûedes
 = -1;

60  
APR_EACCES
;

63 
dafûe
->
buf„ªd
 = (
Êag
 & 
APR_FOPEN_BUFFERED
) > 0;

65 i‡(
dafûe
->
buf„ªd
) {

66 
dafûe
->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

67 
dafûe
->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

68 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
dafûe
->
muãx
, 0, 
poﬁ
);

70 i‡(
rv
)

71  
rv
;

74 i‡(
Êag
 & 
APR_FOPEN_CREATE
) {

75 
oÊags
 |
OPEN_ACTION_CREATE_IF_NEW
;

77 i‡(!(
Êag
 & 
APR_FOPEN_EXCL
Ë&& !(Êag & 
APR_FOPEN_TRUNCATE
)) {

78 
oÊags
 |
OPEN_ACTION_OPEN_IF_EXISTS
;

82 i‡((
Êag
 & 
APR_FOPEN_EXCL
Ë&& !(Êag & 
APR_FOPEN_CREATE
))

83  
APR_EACCES
;

85 i‡(
Êag
 & 
APR_FOPEN_TRUNCATE
) {

86 
oÊags
 |
OPEN_ACTION_REPLACE_IF_EXISTS
;

87 } i‡((
oÊags
 & 0xFF) == 0) {

88 
oÊags
 |
OPEN_ACTION_OPEN_IF_EXISTS
;

91 
rv
 = 
	`DosO≥n
(
‚ame
, &(
dafûe
->
fûedes
), &
a˘i⁄
, 0, 0, 
oÊags
, 
mÊags
, 
NULL
);

93 i‡(
rv
 =0 && (
Êag
 & 
APR_FOPEN_APPEND
)) {

94 
ULONG
 
√w±r
;

95 
rv
 = 
	`DosSëFûePå
(
dafûe
->
fûedes
, 0, 
FILE_END
, &
√w±r
 );

97 i‡(
rv
)

98 
	`DosClo£
(
dafûe
->
fûedes
);

101 i‡(
rv
 != 0)

102  
	`APR_FROM_OS_ERROR
(
rv
);

104 
dafûe
->
is›í
 = 
TRUE
;

105 
dafûe
->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, fname);

106 
dafûe
->
fûePå
 = 0;

107 
dafûe
->
buÂos
 = 0;

108 
dafûe
->
d©aRód
 = 0;

109 
dafûe
->
dúe˘i⁄
 = 0;

110 
dafûe
->
pùe
 = 
FALSE
;

112 i‡(!(
Êag
 & 
APR_FOPEN_NOCLEANUP
)) {

113 
	`≠r_poﬁ_˛ónup_ªgi°î
(
dafûe
->
poﬁ
, dafûe, 
≠r_fûe_˛ónup
,ápr_file_cleanup);

116 *
√w
 = 
dafûe
;

117  
APR_SUCCESS
;

118 
	}
}

122 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_˛o£
(
≠r_fûe_t
 *
fûe
)

124 
ULONG
 
rc
;

125 
≠r_°©us_t
 
°©us
;

127 i‡(
fûe
 && fûe->
is›í
) {

129 
°©us
 = 
	`≠r_fûe_Êush
(
fûe
);

130 
rc
 = 
	`DosClo£
(
fûe
->
fûedes
);

132 i‡(
rc
 == 0) {

133 
fûe
->
is›í
 = 
FALSE
;

135 i‡(
fûe
->
Êags
 & 
APR_FOPEN_DELONCLOSE
) {

136 
°©us
 = 
	`APR_FROM_OS_ERROR
(
	`DosDñëe
(
fûe
->
‚ame
));

142  
	`APR_FROM_OS_ERROR
(
rc
);

146 i‡(
fûe
->
buf„ªd
)

147 
	`≠r_thªad_muãx_de°roy
(
fûe
->
muãx
);

149  
°©us
;

150 
	}
}

154 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

156 
ULONG
 
rc
 = 
	`DosDñëe
(
∑th
);

157  
	`APR_FROM_OS_ERROR
(
rc
);

158 
	}
}

162 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ª«me
(c⁄° *
‰om_∑th
, c⁄° *
to_∑th
,

163 
≠r_poﬁ_t
 *
p
)

165 
ULONG
 
rc
 = 
	`DosMove
(
‰om_∑th
, 
to_∑th
);

167 i‡(
rc
 =
ERROR_ACCESS_DENIED
 ||Ñ¯=
ERROR_ALREADY_EXISTS
) {

168 
rc
 = 
	`DosDñëe
(
to_∑th
);

170 i‡(
rc
 =0 ||Ñ¯=
ERROR_FILE_NOT_FOUND
) {

171 
rc
 = 
	`DosMove
(
‰om_∑th
, 
to_∑th
);

175  
	`APR_FROM_OS_ERROR
(
rc
);

176 
	}
}

180 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_gë
(
≠r_os_fûe_t
 *
thefûe
, 
≠r_fûe_t
 *
fûe
)

182 *
thefûe
 = 
fûe
->
fûedes
;

183  
APR_SUCCESS
;

184 
	}
}

188 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_put
(
≠r_fûe_t
 **
fûe
, 
≠r_os_fûe_t
 *
thefûe
, 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
poﬁ
)

190 
≠r_os_fûe_t
 *
dafûe
 = 
thefûe
;

192 (*
fûe
Ë
	`≠r_∑Œoc
(
poﬁ
, (
≠r_fûe_t
));

193 (*
fûe
)->
poﬁ
 =Öool;

194 (*
fûe
)->
fûedes
 = *
dafûe
;

195 (*
fûe
)->
is›í
 = 
TRUE
;

196 (*
fûe
)->
eof_hô
 = 
FALSE
;

197 (*
fûe
)->
Êags
 = flags;

198 (*
fûe
)->
pùe
 = 
FALSE
;

199 (*
fûe
)->
buf„ªd
 = (
Êags
 & 
APR_FOPEN_BUFFERED
) > 0;

201 i‡((*
fûe
)->
buf„ªd
) {

202 
≠r_°©us_t
 
rv
;

204 (*
fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

205 (*
fûe
)->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

206 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&(*
fûe
)->
muãx
, 0, 
poﬁ
);

208 i‡(
rv
)

209  
rv
;

212  
APR_SUCCESS
;

213 
	}
}

216 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_eof
(
≠r_fûe_t
 *
Âå
)

218 i‡(!
Âå
->
is›í
 || f±r->
eof_hô
 == 1) {

219  
APR_EOF
;

221  
APR_SUCCESS
;

222 
	}
}

225 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dîr
(
≠r_fûe_t
 **
thefûe
,

226 
≠r_öt32_t
 
Êags
,

227 
≠r_poﬁ_t
 *
poﬁ
)

229 
≠r_os_fûe_t
 
fd
 = 2;

231  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_WRITE
, 
poﬁ
);

232 
	}
}

235 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dout
(
≠r_fûe_t
 **
thefûe
,

236 
≠r_öt32_t
 
Êags
,

237 
≠r_poﬁ_t
 *
poﬁ
)

239 
≠r_os_fûe_t
 
fd
 = 1;

241  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_WRITE
, 
poﬁ
);

242 
	}
}

245 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dö
(
≠r_fûe_t
 **
thefûe
,

246 
≠r_öt32_t
 
Êags
,

247 
≠r_poﬁ_t
 *
poﬁ
)

249 
≠r_os_fûe_t
 
fd
 = 0;

251  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_READ
, 
poﬁ
);

252 
	}
}

255 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dîr
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

257  
	`≠r_fûe_›í_Êags_°dîr
(
thefûe
, 0, 
poﬁ
);

258 
	}
}

261 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dout
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

263  
	`≠r_fûe_›í_Êags_°dout
(
thefûe
, 0, 
poﬁ
);

264 
	}
}

267 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dö
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

269  
	`≠r_fûe_›í_Êags_°dö
(
thefûe
, 0, 
poﬁ
);

270 
	}
}

272 
APR_POOL_IMPLEMENT_ACCESSOR
(
fûe
);

276 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öhîô_£t
(
≠r_fûe_t
 *
thefûe
)

278 
rv
;

279 
ULONG
 
°©e
;

281 
rv
 = 
	`DosQuîyFHSèã
(
thefûe
->
fûedes
, &
°©e
);

283 i‡(
rv
 =0 && (
°©e
 & 
OPEN_FLAGS_NOINHERIT
) != 0) {

284 
rv
 = 
	`DosSëFHSèã
(
thefûe
->
fûedes
, 
°©e
 & ~
OPEN_FLAGS_NOINHERIT
);

287  
	`APR_FROM_OS_ERROR
(
rv
);

288 
	}
}

292 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öhîô_un£t
(
≠r_fûe_t
 *
thefûe
)

294 
rv
;

295 
ULONG
 
°©e
;

297 
rv
 = 
	`DosQuîyFHSèã
(
thefûe
->
fûedes
, &
°©e
);

299 i‡(
rv
 =0 && (
°©e
 & 
OPEN_FLAGS_NOINHERIT
) == 0) {

300 
rv
 = 
	`DosSëFHSèã
(
thefûe
->
fûedes
, 
°©e
 | 
OPEN_FLAGS_NOINHERIT
);

303  
	`APR_FROM_OS_ERROR
(
rv
);

304 
	}
}

	@file_io/os2/pipe.c

17 
	#INCL_DOSERRORS


	)

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~<°rög.h
>

25 
	~<¥o˚ss.h
>

27 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã
(
≠r_fûe_t
 **
ö
,á¥_fûe_à**
out
, 
≠r_poﬁ_t
 *
poﬁ
)

29 
ULONG
 
fûedes
[2];

30 
ULONG
 
rc
, 
a˘i⁄
;

31 
id
 = 0;

32 
pùíame
[50];

34 
	`•rötf
(
pùíame
, "/pùe/%d.%d", 
	`gëpid
(), 
id
++);

35 
rc
 = 
	`DosCª©eNPùe
(
pùíame
, 
fûedes
, 
NP_ACCESS_INBOUND
, 
NP_NOWAIT
|1, 4096, 4096, 0);

37 i‡(
rc
)

38  
	`APR_FROM_OS_ERROR
(
rc
);

40 
rc
 = 
	`DosC⁄√˘NPùe
(
fûedes
[0]);

42 i‡(
rc
 &&Ñ¯!
ERROR_PIPE_NOT_CONNECTED
) {

43 
	`DosClo£
(
fûedes
[0]);

44  
	`APR_FROM_OS_ERROR
(
rc
);

47 
rc
 = 
	`DosO≥n
 (
pùíame
, 
fûedes
+1, &
a˘i⁄
, 0, 
FILE_NORMAL
,

48 
OPEN_ACTION_OPEN_IF_EXISTS
 | 
OPEN_ACTION_FAIL_IF_NEW
,

49 
OPEN_ACCESS_WRITEONLY
 | 
OPEN_SHARE_DENYREADWRITE
,

50 
NULL
);

52 i‡(
rc
) {

53 
	`DosClo£
(
fûedes
[0]);

54  
	`APR_FROM_OS_ERROR
(
rc
);

57 (*
ö
Ë(
≠r_fûe_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_file_t));

58 
rc
 = 
	`DosCª©eEvítSem
(
NULL
, &(*
ö
)->
pùeSem
, 
DC_SEM_SHARED
, 
FALSE
);

60 i‡(
rc
) {

61 
	`DosClo£
(
fûedes
[0]);

62 
	`DosClo£
(
fûedes
[1]);

63  
	`APR_FROM_OS_ERROR
(
rc
);

66 
rc
 = 
	`DosSëNPùeSem
(
fûedes
[0], (
HSEM
)(*
ö
)->
pùeSem
, 1);

68 i‡(!
rc
) {

69 
rc
 = 
	`DosSëNPHSèã
(
fûedes
[0], 
NP_WAIT
);

72 i‡(
rc
) {

73 
	`DosClo£
(
fûedes
[0]);

74 
	`DosClo£
(
fûedes
[1]);

75 
	`DosClo£EvítSem
((*
ö
)->
pùeSem
);

76  
	`APR_FROM_OS_ERROR
(
rc
);

79 (*
ö
)->
poﬁ
 =Öool;

80 (*
ö
)->
fûedes
 = filedes[0];

81 (*
ö
)->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, 
pùíame
);

82 (*
ö
)->
is›í
 = 
TRUE
;

83 (*
ö
)->
buf„ªd
 = 
FALSE
;

84 (*
ö
)->
Êags
 = 0;

85 (*
ö
)->
pùe
 = 1;

86 (*
ö
)->
timeout
 = -1;

87 (*
ö
)->
blockög
 = 
BLK_ON
;

88 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
ö
, 
≠r_fûe_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

90 (*
out
Ë(
≠r_fûe_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_file_t));

91 (*
out
)->
poﬁ
 =Öool;

92 (*
out
)->
fûedes
 = filedes[1];

93 (*
out
)->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, 
pùíame
);

94 (*
out
)->
is›í
 = 
TRUE
;

95 (*
out
)->
buf„ªd
 = 
FALSE
;

96 (*
out
)->
Êags
 = 0;

97 (*
out
)->
pùe
 = 1;

98 (*
out
)->
timeout
 = -1;

99 (*
out
)->
blockög
 = 
BLK_ON
;

100 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
out
, 
≠r_fûe_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

102  
APR_SUCCESS
;

103 
	}
}

107 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã_ex
(
≠r_fûe_t
 **
ö
,

108 
≠r_fûe_t
 **
out
,

109 
≠r_öt32_t
 
blockög
,

110 
≠r_poﬁ_t
 *
poﬁ
)

112 
≠r_°©us_t
 
°©us
;

114 i‡((
°©us
 = 
	`≠r_fûe_pùe_¸óã
(
ö
, 
out
, 
poﬁ
)Ë!
APR_SUCCESS
)

115  
°©us
;

117 
blockög
) {

118 
APR_FULL_BLOCK
:

120 
APR_READ_BLOCK
:

121 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

123 
APR_WRITE_BLOCK
:

124 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

127 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

128 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

131  
APR_SUCCESS
;

132 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_«medpùe_¸óã
(c⁄° *
fûíame
, 
≠r_fûïîms_t
 
≥rm
, 
≠r_poﬁ_t
 *
poﬁ
)

139  
APR_ENOTIMPL
;

140 
	}
}

144 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_£t
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 
timeout
)

146 i‡(
thïùe
->
pùe
 == 1) {

147 
thïùe
->
timeout
 =Åimeout;

149 i‡(
thïùe
->
timeout
 >= 0) {

150 i‡(
thïùe
->
blockög
 !
BLK_OFF
) {

151 
thïùe
->
blockög
 = 
BLK_OFF
;

152  
	`APR_FROM_OS_ERROR
(
	`DosSëNPHSèã
(
thïùe
->
fûedes
, 
NP_NOWAIT
));

155 i‡(
thïùe
->
timeout
 == -1) {

156 i‡(
thïùe
->
blockög
 !
BLK_ON
) {

157 
thïùe
->
blockög
 = 
BLK_ON
;

158  
	`APR_FROM_OS_ERROR
(
	`DosSëNPHSèã
(
thïùe
->
fûedes
, 
NP_WAIT
));

162  
APR_EINVAL
;

163 
	}
}

167 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_gë
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 *
timeout
)

169 i‡(
thïùe
->
pùe
 == 1) {

170 *
timeout
 = 
thïùe
->timeout;

171  
APR_SUCCESS
;

173  
APR_EINVAL
;

174 
	}
}

178 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put_ex
(
≠r_fûe_t
 **
fûe
,

179 
≠r_os_fûe_t
 *
thefûe
,

180 
ªgi°î_˛ónup
,

181 
≠r_poﬁ_t
 *
poﬁ
)

183 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

184 (*
fûe
)->
poﬁ
 =Öool;

185 (*
fûe
)->
is›í
 = 
TRUE
;

186 (*
fûe
)->
pùe
 = 1;

187 (*
fûe
)->
blockög
 = 
BLK_UNKNOWN
;

188 (*
fûe
)->
timeout
 = -1;

189 (*
fûe
)->
fûedes
 = *
thefûe
;

191 i‡(
ªgi°î_˛ónup
) {

192 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
fûe
, 
≠r_fûe_˛ónup
,

193 
≠r_poﬁ_˛ónup_nuŒ
);

196  
APR_SUCCESS
;

197 
	}
}

201 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put
(
≠r_fûe_t
 **
fûe
,

202 
≠r_os_fûe_t
 *
thefûe
,

203 
≠r_poﬁ_t
 *
poﬁ
)

205  
	`≠r_os_pùe_put_ex
(
fûe
, 
thefûe
, 0, 
poﬁ
);

206 
	}
}

	@file_io/os2/readwrite.c

17 
	#INCL_DOS


	)

18 
	#INCL_DOSERRORS


	)

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_°rögs.h
"

25 
	~<mÆloc.h
>

27 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªad
(
≠r_fûe_t
 *
thefûe
, *
buf
, 
≠r_size_t
 *
nbyãs
)

29 
ULONG
 
rc
 = 0;

30 
ULONG
 
byã§ód
;

32 i‡(!
thefûe
->
is›í
) {

33 *
nbyãs
 = 0;

34  
APR_EBADF
;

37 i‡(
thefûe
->
buf„ªd
) {

38 *
pos
 = (*)
buf
;

39 
ULONG
 
blocksize
;

40 
ULONG
 
size
 = *
nbyãs
;

42 
	`≠r_thªad_muãx_lock
(
thefûe
->
muãx
);

44 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

45 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

47 i‡(
rv
 !
APR_SUCCESS
) {

48 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

49  
rv
;

52 
thefûe
->
buÂos
 = 0;

53 
thefûe
->
dúe˘i⁄
 = 0;

54 
thefûe
->
d©aRód
 = 0;

57 
rc
 =0 && 
size
 > 0) {

58 i‡(
thefûe
->
buÂos
 >thefûe->
d©aRód
) {

59 
ULONG
 
byã§ód
;

60 
rc
 = 
	`DosRód
(
thefûe
->
fûedes
,Åhefûe->
buf„r
,

61 
thefûe
->
bufsize
, &
byã§ód
);

63 i‡(
byã§ód
 == 0) {

64 i‡(
rc
 == 0)

65 
thefûe
->
eof_hô
 = 
TRUE
;

69 
thefûe
->
d©aRód
 = 
byã§ód
;

70 
thefûe
->
fûePå
 +thefûe->
d©aRód
;

71 
thefûe
->
buÂos
 = 0;

74 
blocksize
 = 
size
 > 
thefûe
->
d©aRód
 -Åhefûe->
buÂos
 ?Åhefile->dataRead -Åhefile->bufpos : size;

75 
	`mem˝y
(
pos
, 
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
blocksize
);

76 
thefûe
->
buÂos
 +
blocksize
;

77 
pos
 +
blocksize
;

78 
size
 -
blocksize
;

81 *
nbyãs
 = 
rc
 =0 ? 
pos
 - (*)
buf
 : 0;

82 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

84 i‡(*
nbyãs
 =0 && 
rc
 =0 && 
thefûe
->
eof_hô
) {

85  
APR_EOF
;

88  
	`APR_FROM_OS_ERROR
(
rc
);

90 i‡(
thefûe
->
pùe
)

91 
	`DosRe£tEvítSem
(
thefûe
->
pùeSem
, &
rc
);

93 
rc
 = 
	`DosRód
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
, &
byã§ód
);

95 i‡(
rc
 =
ERROR_NO_DATA
 && 
thefûe
->
timeout
 != 0) {

96 
rcwaô
 = 
	`DosWaôEvítSem
(
thefûe
->
pùeSem
,Åhefûe->
timeout
 >0 ?Åhefûe->timeouà/ 1000 : 
SEM_INDEFINITE_WAIT
);

98 i‡(
rcwaô
 == 0) {

99 
rc
 = 
	`DosRód
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
, &
byã§ód
);

101 i‡(
rcwaô
 =
ERROR_TIMEOUT
) {

102 *
nbyãs
 = 0;

103  
APR_TIMEUP
;

107 i‡(
rc
) {

108 *
nbyãs
 = 0;

109  
	`APR_FROM_OS_ERROR
(
rc
);

112 *
nbyãs
 = 
byã§ód
;

114 i‡(
byã§ód
 == 0) {

115 
thefûe
->
eof_hô
 = 
TRUE
;

116  
APR_EOF
;

119  
APR_SUCCESS
;

121 
	}
}

125 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôe
(
≠r_fûe_t
 *
thefûe
, c⁄° *
buf
, 
≠r_size_t
 *
nbyãs
)

127 
ULONG
 
rc
 = 0;

128 
ULONG
 
byãswrôãn
;

130 i‡(!
thefûe
->
is›í
) {

131 *
nbyãs
 = 0;

132  
APR_EBADF
;

135 i‡(
thefûe
->
buf„ªd
) {

136 *
pos
 = (*)
buf
;

137 
blocksize
;

138 
size
 = *
nbyãs
;

140 
	`≠r_thªad_muãx_lock
(
thefûe
->
muãx
);

142 i‡–
thefûe
->
dúe˘i⁄
 == 0 ) {

144 
ULONG
 
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

145 i‡(
off£t
 !
thefûe
->
fûePå
)

146 
	`DosSëFûePå
(
thefûe
->
fûedes
, 
off£t
, 
FILE_BEGIN
, &thefûe->
fûePå
 );

147 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

148 
thefûe
->
dúe˘i⁄
 = 1;

151 
rc
 =0 && 
size
 > 0) {

152 i‡(
thefûe
->
buÂos
 =thefûe->
bufsize
)

154 
rc
 = 
	`≠r_fûe_Êush
(
thefûe
);

156 
blocksize
 = 
size
 > 
thefûe
->
bufsize
 -Åhefûe->
buÂos
 ?Åhefile->bufsize -Åhefile->bufpos : size;

157 
	`mem˝y
(
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
pos
, 
blocksize
);

158 
thefûe
->
buÂos
 +
blocksize
;

159 
pos
 +
blocksize
;

160 
size
 -
blocksize
;

163 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

164  
	`APR_FROM_OS_ERROR
(
rc
);

166 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_APPEND
) {

167 
FILELOCK
 
Æl
 = { 0, 0x7fffffff };

168 
ULONG
 
√wpos
;

169 
rc
 = 
	`DosSëFûeLocks
(
thefûe
->
fûedes
, 
NULL
, &
Æl
, -1, 0);

171 i‡(
rc
 == 0) {

172 
rc
 = 
	`DosSëFûePå
(
thefûe
->
fûedes
, 0, 
FILE_END
, &
√wpos
);

174 i‡(
rc
 == 0) {

175 
rc
 = 
	`DosWrôe
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
, &
byãswrôãn
);

178 
	`DosSëFûeLocks
(
thefûe
->
fûedes
, &
Æl
, 
NULL
, -1, 0);

181 
rc
 = 
	`DosWrôe
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
, &
byãswrôãn
);

184 i‡(
rc
) {

185 *
nbyãs
 = 0;

186  
	`APR_FROM_OS_ERROR
(
rc
);

189 *
nbyãs
 = 
byãswrôãn
;

190  
APR_SUCCESS
;

192 
	}
}

196 #ifde‡
HAVE_WRITEV


198 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôev
(
≠r_fûe_t
 *
thefûe
, c⁄° 
iovec
 *
vec
, 
≠r_size_t
 
nvec
,á¥_size_à*
nbyãs
)

200 
byãs
;

202 i‡(
thefûe
->
buf„ªd
) {

203 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

204 i‡(
rv
 !
APR_SUCCESS
) {

205  
rv
;

209 i‡((
byãs
 = 
	`wrôev
(
thefûe
->
fûedes
, 
vec
, 
nvec
)) < 0) {

210 *
nbyãs
 = 0;

211  
î∫o
;

214 *
nbyãs
 = 
byãs
;

215  
APR_SUCCESS
;

217 
	}
}

222 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_putc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

224 
ULONG
 
rc
;

225 
ULONG
 
byãswrôãn
;

227 i‡(!
thefûe
->
is›í
) {

228  
APR_EBADF
;

231 
rc
 = 
	`DosWrôe
(
thefûe
->
fûedes
, &
ch
, 1, &
byãswrôãn
);

233 i‡(
rc
) {

234  
	`APR_FROM_OS_ERROR
(
rc
);

237  
APR_SUCCESS
;

238 
	}
}

242 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ungëc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

244 
≠r_off_t
 
off£t
 = -1;

245  
	`≠r_fûe_£ek
(
thefûe
, 
APR_CUR
, &
off£t
);

246 
	}
}

249 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gëc
(*
ch
, 
≠r_fûe_t
 *
thefûe
)

251 
ULONG
 
rc
;

252 
≠r_size_t
 
byã§ód
;

254 i‡(!
thefûe
->
is›í
) {

255  
APR_EBADF
;

258 
byã§ód
 = 1;

259 
rc
 = 
	`≠r_fûe_ªad
(
thefûe
, 
ch
, &
byã§ód
);

261 i‡(
rc
) {

262  
rc
;

265 i‡(
byã§ód
 == 0) {

266 
thefûe
->
eof_hô
 = 
TRUE
;

267  
APR_EOF
;

270  
APR_SUCCESS
;

271 
	}
}

275 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_puts
(c⁄° *
°r
, 
≠r_fûe_t
 *
thefûe
)

277 
≠r_size_t
 
Àn
;

279 
Àn
 = 
	`°æí
(
°r
);

280  
	`≠r_fûe_wrôe
(
thefûe
, 
°r
, &
Àn
);

281 
	}
}

284 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_Êush
(
≠r_fûe_t
 *
thefûe
)

286 i‡(
thefûe
->
buf„ªd
) {

287 
ULONG
 
wrôãn
 = 0;

288 
rc
 = 0;

290 i‡(
thefûe
->
dúe˘i⁄
 =1 &&Åhefûe->
buÂos
) {

291 
rc
 = 
	`DosWrôe
(
thefûe
->
fûedes
,Åhefûe->
buf„r
,Åhefûe->
buÂos
, &
wrôãn
);

292 
thefûe
->
fûePå
 +
wrôãn
;

294 i‡(
rc
 == 0)

295 
thefûe
->
buÂos
 = 0;

298  
	`APR_FROM_OS_ERROR
(
rc
);

303  
APR_SUCCESS
;

305 
	}
}

307 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_sync
(
≠r_fûe_t
 *
thefûe
)

309  
APR_ENOTIMPL
;

310 
	}
}

312 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_d©async
(
≠r_fûe_t
 *
thefûe
)

314  
APR_ENOTIMPL
;

315 
	}
}

317 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gës
(*
°r
, 
Àn
, 
≠r_fûe_t
 *
thefûe
)

319 
≠r_size_t
 
ªadÀn
;

320 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

321 
i
;

323 
i
 = 0; i < 
Àn
-1; i++) {

324 
ªadÀn
 = 1;

325 
rv
 = 
	`≠r_fûe_ªad
(
thefûe
, 
°r
+
i
, &
ªadÀn
);

327 i‡(
rv
 !
APR_SUCCESS
) {

331 i‡(
ªadÀn
 != 1) {

332 
rv
 = 
APR_EOF
;

336 i‡(
°r
[
i
] == '\n') {

337 
i
++;

341 
°r
[
i
] = 0;

342 i‡(
i
 > 0) {

346  
APR_SUCCESS
;

348  
rv
;

349 
	}
}

353 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_fûe_¥ötf
(
≠r_fûe_t
 *
Âå
,

354 c⁄° *
f‹m©
, ...)

356 
cc
;

357 
va_li°
 
≠
;

358 *
buf
;

359 
Àn
;

361 
buf
 = 
	`mÆloc
(
HUGE_STRING_LEN
);

362 i‡(
buf
 =
NULL
) {

365 
	`va_°¨t
(
≠
, 
f‹m©
);

366 
Àn
 = 
	`≠r_v¢¥ötf
(
buf
, 
HUGE_STRING_LEN
, 
f‹m©
, 
≠
);

367 
cc
 = 
	`≠r_fûe_puts
(
buf
, 
Âå
);

368 
	`va_íd
(
≠
);

369 
	`‰ì
(
buf
);

370  (
cc
 =
APR_SUCCESS
Ë? 
Àn
 : -1;

371 
	}
}

375 
≠r_°©us_t
 
	$≠r_fûe_check_ªad
(
≠r_fûe_t
 *
fd
)

377 
rc
;

379 i‡(!
fd
->
pùe
)

380  
APR_SUCCESS
;

382 
rc
 = 
	`DosWaôEvítSem
(
fd
->
pùeSem
, 
SEM_IMMEDIATE_RETURN
);

384 i‡(
rc
 =
ERROR_TIMEOUT
)

385  
APR_TIMEUP
;

387  
	`APR_FROM_OS_ERROR
(
rc
);

388 
	}
}

	@file_io/os2/seek.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_lib.h
"

20 
	~<°rög.h
>

21 
	~<io.h
>

24 
≠r_°©us_t
 
	$£çå
(
≠r_fûe_t
 *
thefûe
, 
pos
 )

26 
√wbuÂos
;

27 
ULONG
 
rc
;

29 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

31 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

33 i‡(
rv
 !
APR_SUCCESS
) {

34  
rv
;

37 
thefûe
->
buÂos
 =Åhefûe->
dúe˘i⁄
 =Åhefûe->
d©aRód
 = 0;

40 
√wbuÂos
 = 
pos
 - (
thefûe
->
fûePå
 -Åhefûe->
d©aRód
);

41 i‡(
√wbuÂos
 >0 &&ÇewbuÂo†<
thefûe
->
d©aRód
) {

42 
thefûe
->
buÂos
 = 
√wbuÂos
;

43 
rc
 = 0;

45 
rc
 = 
	`DosSëFûePå
(
thefûe
->
fûedes
, 
pos
, 
FILE_BEGIN
, &thefûe->
fûePå
 );

47 i‡–!
rc
 )

48 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

51  
	`APR_FROM_OS_ERROR
(
rc
);

52 
	}
}

56 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£ek
(
≠r_fûe_t
 *
thefûe
, 
≠r_£ek_whîe_t
 
whîe
, 
≠r_off_t
 *
off£t
)

58 i‡(!
thefûe
->
is›í
) {

59  
APR_EBADF
;

62 
thefûe
->
eof_hô
 = 0;

64 i‡(
thefûe
->
buf„ªd
) {

65 
rc
 = 
EINVAL
;

66 
≠r_föfo_t
 
föfo
;

68 
whîe
) {

69 
APR_SET
:

70 
rc
 = 
	`£çå
(
thefûe
, *
off£t
);

73 
APR_CUR
:

74 
rc
 = 
	`£çå
(
thefûe
,Åhefûe->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
 + *
off£t
);

77 
APR_END
:

78 
rc
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_NORM
, 
thefûe
);

79 i‡(
rc
 =
APR_SUCCESS
)

80 
rc
 = 
	`£çå
(
thefûe
, 
föfo
.
size
 + *
off£t
);

84 *
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

85  
rc
;

87 
whîe
) {

88 
APR_SET
:

89 
whîe
 = 
FILE_BEGIN
;

92 
APR_CUR
:

93 
whîe
 = 
FILE_CURRENT
;

96 
APR_END
:

97 
whîe
 = 
FILE_END
;

101  
	`APR_FROM_OS_ERROR
(
	`DosSëFûePå
(
thefûe
->
fûedes
, *
off£t
, 
whîe
, (
ULONG
 *)offset));

103 
	}
}

107 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_åunc
(
≠r_fûe_t
 *
Â
, 
≠r_off_t
 
off£t
)

109 
rc
 = 
	`DosSëFûeSize
(
Â
->
fûedes
, 
off£t
);

111 i‡(
rc
 != 0) {

112  
	`APR_FROM_OS_ERROR
(
rc
);

115 i‡(
Â
->
buf„ªd
) {

116  
	`£çå
(
Â
, 
off£t
);

119  
APR_SUCCESS
;

120 
	}
}

	@file_io/os2/tempdir.c

1 
	~"../unix/ãmpdú.c
"

	@file_io/unix/buffer.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_poﬁs.h
"

19 
	~"≠r_thªad_muãx.h
"

21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_buf„r_£t
(
≠r_fûe_t
 *
fûe
,

22 * 
buf„r
,

23 
≠r_size_t
 
bufsize
)

25 
≠r_°©us_t
 
rv
;

27 
	`fûe_lock
(
fûe
);

29 if(
fûe
->
buf„ªd
) {

31 
rv
 = 
	`≠r_fûe_Êush_locked
(
fûe
);

32 i‡(
rv
 !
APR_SUCCESS
) {

33 
	`fûe_u∆ock
(
fûe
);

34  
rv
;

38 
fûe
->
buf„r
 = buffer;

39 
fûe
->
bufsize
 = bufsize;

40 
fûe
->
buf„ªd
 = 1;

41 
fûe
->
buÂos
 = 0;

42 
fûe
->
dúe˘i⁄
 = 0;

43 
fûe
->
d©aRód
 = 0;

45 i‡(
fûe
->
bufsize
 == 0) {

49 
fûe
->
buf„ªd
 = 0;

52 
	`fûe_u∆ock
(
fûe
);

54  
APR_SUCCESS
;

55 
	}
}

57 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_fûe_buf„r_size_gë
(
≠r_fûe_t
 *
fûe
)

59  
fûe
->
bufsize
;

60 
	}
}

	@file_io/unix/copy.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

20 
≠r_°©us_t
 
	$≠r_fûe_å™s„r_c⁄ã¡s
(c⁄° *
‰om_∑th
,

21 c⁄° *
to_∑th
,

22 
≠r_öt32_t
 
Êags
,

23 
≠r_fûïîms_t
 
to_≥rms
,

24 
≠r_poﬁ_t
 *
poﬁ
)

26 
≠r_fûe_t
 *
s
, *
d
;

27 
≠r_°©us_t
 
°©us
;

28 
≠r_föfo_t
 
föfo
;

29 
≠r_fûïîms_t
 
≥rms
;

32 
°©us
 = 
	`≠r_fûe_›í
(&
s
, 
‰om_∑th
, 
APR_FOPEN_READ
, 
APR_OS_DEFAULT
, 
poﬁ
);

33 i‡(
°©us
)

34  
°©us
;

37 i‡(
to_≥rms
 =
APR_FILE_SOURCE_PERMS
) {

38 
°©us
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_PROT
, 
s
);

39 i‡(
°©us
 !
APR_SUCCESS
 && sètu†!
APR_INCOMPLETE
) {

40 
	`≠r_fûe_˛o£
(
s
);

41  
°©us
;

43 
≥rms
 = 
föfo
.
¥Ÿe˘i⁄
;

46 
≥rms
 = 
to_≥rms
;

49 
°©us
 = 
	`≠r_fûe_›í
(&
d
, 
to_∑th
, 
Êags
, 
≥rms
, 
poﬁ
);

50 i‡(
°©us
) {

51 
	`≠r_fûe_˛o£
(
s
);

52  
°©us
;

55 #i‡
BUFSIZ
 > 
APR_FILE_DEFAULT_BUFSIZE


56 
	#COPY_BUFSIZ
 
BUFSIZ


	)

58 
	#COPY_BUFSIZ
 
APR_FILE_DEFAULT_BUFSIZE


	)

63 
buf
[
COPY_BUFSIZ
];

64 
≠r_size_t
 
byãs_this_time
 = (
buf
);

65 
≠r_°©us_t
 
ªad_îr
;

66 
≠r_°©us_t
 
wrôe_îr
;

69 
ªad_îr
 = 
	`≠r_fûe_ªad
(
s
, 
buf
, &
byãs_this_time
);

70 i‡(
ªad_îr
 && !
	`APR_STATUS_IS_EOF
(read_err)) {

71 
	`≠r_fûe_˛o£
(
s
);

72 
	`≠r_fûe_˛o£
(
d
);

73  
ªad_îr
;

77 
wrôe_îr
 = 
	`≠r_fûe_wrôe_fuŒ
(
d
, 
buf
, 
byãs_this_time
, 
NULL
);

78 i‡(
wrôe_îr
) {

79 
	`≠r_fûe_˛o£
(
s
);

80 
	`≠r_fûe_˛o£
(
d
);

81  
wrôe_îr
;

84 i‡(
ªad_îr
 && 
	`APR_STATUS_IS_EOF
(read_err)) {

85 
°©us
 = 
	`≠r_fûe_˛o£
(
s
);

86 i‡(
°©us
) {

87 
	`≠r_fûe_˛o£
(
d
);

88  
°©us
;

92  
	`≠r_fûe_˛o£
(
d
);

96 
	}
}

98 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_c›y
(c⁄° *
‰om_∑th
,

99 c⁄° *
to_∑th
,

100 
≠r_fûïîms_t
 
≥rms
,

101 
≠r_poﬁ_t
 *
poﬁ
)

103  
	`≠r_fûe_å™s„r_c⁄ã¡s
(
‰om_∑th
, 
to_∑th
,

104 (
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_TRUNCATE
),

105 
≥rms
,

106 
poﬁ
);

107 
	}
}

109 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_≠≥nd
(c⁄° *
‰om_∑th
,

110 c⁄° *
to_∑th
,

111 
≠r_fûïîms_t
 
≥rms
,

112 
≠r_poﬁ_t
 *
poﬁ
)

114  
	`≠r_fûe_å™s„r_c⁄ã¡s
(
‰om_∑th
, 
to_∑th
,

115 (
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_APPEND
),

116 
≥rms
,

117 
poﬁ
);

118 
	}
}

	@file_io/unix/dir.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 #i‡
APR_HAVE_SYS_SYSLIMITS_H


21 
	~<sys/sy¶imôs.h
>

23 #i‡
APR_HAVE_LIMITS_H


24 
	~<limôs.h
>

27 
≠r_°©us_t
 
	$dú_˛ónup
(*
thedú
)

29 
≠r_dú_t
 *
dú
 = 
thedú
;

30 i‡(
	`˛o£dú
(
dú
->
dú°ru˘
) == 0) {

31  
APR_SUCCESS
;

34  
î∫o
;

36 
	}
}

38 
	#PATH_SEPARATOR
 '/'

	)

41 c⁄° *
	$∑th_ˇn⁄iˇlize
 (c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

45 
≠r_size_t
 
Àn
 = 
	`°æí
 (
∑th
);

46 
≠r_size_t
 
‹ig_Àn
 = 
Àn
;

48 (
Àn
 > 0Ë&& (
∑th
[À¿- 1] =
PATH_SEPARATOR
))

49 
Àn
--;

51 i‡(
Àn
 !
‹ig_Àn
)

52  
	`≠r_p°∫dup
 (
poﬁ
, 
∑th
, 
Àn
);

54  
∑th
;

55 
	}
}

58 *
	$∑th_ªmove_œ°_comp⁄ít
 (c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

60 c⁄° *
√w∑th
 = 
	`∑th_ˇn⁄iˇlize
 (
∑th
, 
poﬁ
);

61 
i
;

63 
i
 = (
	`°æí
(
√w∑th
) - 1); i >= 0; i--) {

64 i‡(
∑th
[
i
] =
PATH_SEPARATOR
)

68  
	`≠r_p°∫dup
 (
poﬁ
, 
∑th
, (
i
 < 0) ? 0 : i);

69 
	}
}

71 
≠r_°©us_t
 
	$≠r_dú_›í
(
≠r_dú_t
 **
√w
, c⁄° *
dú«me
,

72 
≠r_poﬁ_t
 *
poﬁ
)

79 
≠r_size_t
 
dúít_size
 =

80 (*(*
√w
)->
íåy
) +

81 (((*
√w
)->
íåy
->
d_«me
) > 1 ? 0 : 255);

82 
DIR
 *
dú
 = 
	`›ídú
(
dú«me
);

84 i‡(!
dú
) {

85  
î∫o
;

88 (*
√w
Ë(
≠r_dú_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_dir_t));

90 (*
√w
)->
poﬁ
 =Öool;

91 (*
√w
)->
dú«me
 = 
	`≠r_p°rdup
(
poﬁ
, dirname);

92 (*
√w
)->
dú°ru˘
 = 
dú
;

93 (*
√w
)->
íåy
 = 
	`≠r_pˇŒoc
(
poﬁ
, 
dúít_size
);

95 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, *√w, 
dú_˛ónup
,

96 
≠r_poﬁ_˛ónup_nuŒ
);

97  
APR_SUCCESS
;

98 
	}
}

100 
≠r_°©us_t
 
	$≠r_dú_˛o£
(
≠r_dú_t
 *
thedú
)

102  
	`≠r_poﬁ_˛ónup_run
(
thedú
->
poﬁ
,Åhedú, 
dú_˛ónup
);

103 
	}
}

105 #ifde‡
DIRENT_TYPE


106 
≠r_fûëy≥_e
 
	$fûëy≥_‰om_dúít_ty≥
(
ty≥
)

108 
ty≥
) {

109 
DT_REG
:

110  
APR_REG
;

111 
DT_DIR
:

112  
APR_DIR
;

113 
DT_LNK
:

114  
APR_LNK
;

115 
DT_CHR
:

116  
APR_CHR
;

117 
DT_BLK
:

118  
APR_BLK
;

119 #i‡
	`deföed
(
DT_FIFO
)

120 
DT_FIFO
:

121  
APR_PIPE
;

123 #i‡!
	`deföed
(
BEOS
Ë&& deföed(
DT_SOCK
)

124 
DT_SOCK
:

125  
APR_SOCK
;

128  
APR_UNKFILE
;

130 
	}
}

133 
≠r_°©us_t
 
	$≠r_dú_ªad
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

134 
≠r_dú_t
 *
thedú
)

136 
≠r_°©us_t
 
ªt
 = 0;

137 #ifde‡
DIRENT_TYPE


138 
≠r_fûëy≥_e
 
ty≥
;

140 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
) \

141 && !
	`deföed
(
READDIR_IS_THREAD_SAFE
)

142 #ifde‡
APR_USE_READDIR64_R


143 
dúít64
 *
ªã¡
;

157 
ªt
 = 
	`ªaddú64_r
(
thedú
->
dú°ru˘
,Åhedú->
íåy
, &
ªã¡
);

160 
dúít
 *
ªã¡
;

162 
ªt
 = 
	`ªaddú_r
(
thedú
->
dú°ru˘
,Åhedú->
íåy
, &
ªã¡
);

167 i‡(!
ªt
 && 
ªã¡
 =
NULL
) {

168 
ªt
 = 
APR_ENOENT
;

178 i‡(
ªt
 =
EINVAL
) {

179 
ªt
 = 
APR_ENOENT
;

185 
î∫o
 = 0;

186 
thedú
->
íåy
 = 
	`ªaddú
—hedú->
dú°ru˘
);

187 i‡(
thedú
->
íåy
 =
NULL
) {

189 i‡(
î∫o
 =
APR_SUCCESS
) {

190 
ªt
 = 
APR_ENOENT
;

193 
ªt
 = 
î∫o
;

198 
föfo
->
‚ame
 = 
NULL
;

200 i‡(
ªt
) {

201 
föfo
->
vÆid
 = 0;

202  
ªt
;

205 #ifde‡
DIRENT_TYPE


206 
ty≥
 = 
	`fûëy≥_‰om_dúít_ty≥
(
thedú
->
íåy
->
DIRENT_TYPE
);

207 i‡(
ty≥
 !
APR_UNKFILE
) {

208 
w™ãd
 &~
APR_FINFO_TYPE
;

211 #ifde‡
DIRENT_INODE


212 i‡(
thedú
->
íåy
->
DIRENT_INODE
 &&Åhedir->entry->DIRENT_INODE != -1) {

213 #ifde‡
APR_USE_READDIR64_R


216 i‡((
≠r_öo_t
Ë>(
ªã¡
->
DIRENT_INODE
)

217 || (
≠r_öo_t
)
ªã¡
->
DIRENT_INODE
 ==Ñetent->DIRENT_INODE) {

218 
w™ãd
 &~
APR_FINFO_INODE
;

222 
ªã¡
->
DIRENT_INODE
 = 0;

225 
w™ãd
 &~
APR_FINFO_INODE
;

230 
w™ãd
 &~
APR_FINFO_NAME
;

232 i‡(
w™ãd
)

234 
f•ec
[
APR_PATH_MAX
];

235 *
íd
;

237 
íd
 = 
	`≠r_˝y°∫
(
f•ec
, 
thedú
->
dú«me
,  fspec);

239 i‡(
íd
 > 
f•ec
 &&Énd[-1] !'/' && (íd < f•e¯+ 
APR_PATH_MAX
))

240 *
íd
++ = '/';

242 
	`≠r_˝y°∫
(
íd
, 
thedú
->
íåy
->
d_«me
,

243  
f•ec
 - (
íd
 - fspec));

245 
ªt
 = 
	`≠r_°©
(
föfo
, 
f•ec
, 
APR_FINFO_LINK
 | 
w™ãd
, 
thedú
->
poﬁ
);

247 
föfo
->
‚ame
 = 
NULL
;

250 i‡(
w™ãd
 && (
ªt
 =
APR_SUCCESS
 ||Ñë =
APR_INCOMPLETE
)) {

251 
w™ãd
 &~
föfo
->
vÆid
;

257 
föfo
->
poﬁ
 = 
thedú
->pool;

258 
föfo
->
vÆid
 = 0;

259 #ifde‡
DIRENT_TYPE


260 i‡(
ty≥
 !
APR_UNKFILE
) {

261 
föfo
->
fûëy≥
 = 
ty≥
;

262 
föfo
->
vÆid
 |
APR_FINFO_TYPE
;

265 #ifde‡
DIRENT_INODE


266 i‡(
thedú
->
íåy
->
DIRENT_INODE
 &&Åhedir->entry->DIRENT_INODE != -1) {

267 
föfo
->
öode
 = 
thedú
->
íåy
->
DIRENT_INODE
;

268 
föfo
->
vÆid
 |
APR_FINFO_INODE
;

273 
föfo
->
«me
 = 
	`≠r_p°rdup
(
thedú
->
poﬁ
,Åhedú->
íåy
->
d_«me
);

274 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

276 i‡(
w™ãd
)

277  
APR_INCOMPLETE
;

279  
APR_SUCCESS
;

280 
	}
}

282 
≠r_°©us_t
 
	$≠r_dú_ªwöd
(
≠r_dú_t
 *
thedú
)

284 
	`ªwöddú
(
thedú
->
dú°ru˘
);

285  
APR_SUCCESS
;

286 
	}
}

288 
≠r_°©us_t
 
	$≠r_dú_make
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
,

289 
≠r_poﬁ_t
 *
poﬁ
)

291 
mode_t
 
mode
 = 
	`≠r_unix_≥rms2mode
(
≥rm
);

293 i‡(
	`mkdú
(
∑th
, 
mode
) == 0) {

294  
APR_SUCCESS
;

297  
î∫o
;

299 
	}
}

301 
≠r_°©us_t
 
	$≠r_dú_make_ªcursive
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
,

302 
≠r_poﬁ_t
 *
poﬁ
)

304 
≠r_°©us_t
 
≠r_îr
 = 0;

306 
≠r_îr
 = 
	`≠r_dú_make
 (
∑th
, 
≥rm
, 
poﬁ
);

308 i‡(
≠r_îr
 =
ENOENT
) {

309 *
dú
;

311 
dú
 = 
	`∑th_ªmove_œ°_comp⁄ít
(
∑th
, 
poﬁ
);

313 i‡(
dú
[0] == '\0') {

314  
≠r_îr
;

317 
≠r_îr
 = 
	`≠r_dú_make_ªcursive
(
dú
, 
≥rm
, 
poﬁ
);

319 i‡(!
≠r_îr
)

320 
≠r_îr
 = 
	`≠r_dú_make
 (
∑th
, 
≥rm
, 
poﬁ
);

328 i‡(
	`APR_STATUS_IS_EEXIST
(
≠r_îr
))

329  
APR_SUCCESS
;

331  
≠r_îr
;

332 
	}
}

334 
≠r_°©us_t
 
	$≠r_dú_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

336 i‡(
	`rmdú
(
∑th
) == 0) {

337  
APR_SUCCESS
;

340  
î∫o
;

342 
	}
}

344 
≠r_°©us_t
 
	$≠r_os_dú_gë
(
≠r_os_dú_t
 **
thedú
, 
≠r_dú_t
 *
dú
)

346 i‡(
dú
 =
NULL
) {

347  
APR_ENODIR
;

349 *
thedú
 = 
dú
->
dú°ru˘
;

350  
APR_SUCCESS
;

351 
	}
}

353 
≠r_°©us_t
 
	$≠r_os_dú_put
(
≠r_dú_t
 **
dú
, 
≠r_os_dú_t
 *
thedú
,

354 
≠r_poﬁ_t
 *
poﬁ
)

356 i‡((*
dú
Ë=
NULL
) {

357 (*
dú
Ë(
≠r_dú_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_dir_t));

358 (*
dú
)->
poﬁ
 =Öool;

360 (*
dú
)->
dú°ru˘
 = 
thedú
;

361  
APR_SUCCESS
;

362 
	}
}

	@file_io/unix/fileacc.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

22 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_«me_gë
(c⁄° **
‚ame
,

23 
≠r_fûe_t
 *
thefûe
)

25 *
‚ame
 = 
thefûe
->fname;

26  
APR_SUCCESS
;

27 
	}
}

29 
	$APR_DECLARE
(
≠r_öt32_t
Ë
	$≠r_fûe_Êags_gë
(
≠r_fûe_t
 *
f
)

31  
f
->
Êags
;

32 
	}
}

34 #i‡!
deföed
(
OS2
Ë&& !deföed(
WIN32
)

35 
mode_t
 
	$≠r_unix_≥rms2mode
(
≠r_fûïîms_t
 
≥rms
)

37 
mode_t
 
mode
 = 0;

39 i‡(
≥rms
 & 
APR_USETID
)

40 
mode
 |
S_ISUID
;

41 i‡(
≥rms
 & 
APR_UREAD
)

42 
mode
 |
S_IRUSR
;

43 i‡(
≥rms
 & 
APR_UWRITE
)

44 
mode
 |
S_IWUSR
;

45 i‡(
≥rms
 & 
APR_UEXECUTE
)

46 
mode
 |
S_IXUSR
;

48 i‡(
≥rms
 & 
APR_GSETID
)

49 
mode
 |
S_ISGID
;

50 i‡(
≥rms
 & 
APR_GREAD
)

51 
mode
 |
S_IRGRP
;

52 i‡(
≥rms
 & 
APR_GWRITE
)

53 
mode
 |
S_IWGRP
;

54 i‡(
≥rms
 & 
APR_GEXECUTE
)

55 
mode
 |
S_IXGRP
;

57 #ifde‡
S_ISVTX


58 i‡(
≥rms
 & 
APR_WSTICKY
)

59 
mode
 |
S_ISVTX
;

61 i‡(
≥rms
 & 
APR_WREAD
)

62 
mode
 |
S_IROTH
;

63 i‡(
≥rms
 & 
APR_WWRITE
)

64 
mode
 |
S_IWOTH
;

65 i‡(
≥rms
 & 
APR_WEXECUTE
)

66 
mode
 |
S_IXOTH
;

68  
mode
;

69 
	}
}

71 
≠r_fûïîms_t
 
	$≠r_unix_mode2≥rms
(
mode_t
 
mode
)

73 
≠r_fûïîms_t
 
≥rms
 = 0;

75 i‡(
mode
 & 
S_ISUID
)

76 
≥rms
 |
APR_USETID
;

77 i‡(
mode
 & 
S_IRUSR
)

78 
≥rms
 |
APR_UREAD
;

79 i‡(
mode
 & 
S_IWUSR
)

80 
≥rms
 |
APR_UWRITE
;

81 i‡(
mode
 & 
S_IXUSR
)

82 
≥rms
 |
APR_UEXECUTE
;

84 i‡(
mode
 & 
S_ISGID
)

85 
≥rms
 |
APR_GSETID
;

86 i‡(
mode
 & 
S_IRGRP
)

87 
≥rms
 |
APR_GREAD
;

88 i‡(
mode
 & 
S_IWGRP
)

89 
≥rms
 |
APR_GWRITE
;

90 i‡(
mode
 & 
S_IXGRP
)

91 
≥rms
 |
APR_GEXECUTE
;

93 #ifde‡
S_ISVTX


94 i‡(
mode
 & 
S_ISVTX
)

95 
≥rms
 |
APR_WSTICKY
;

97 i‡(
mode
 & 
S_IROTH
)

98 
≥rms
 |
APR_WREAD
;

99 i‡(
mode
 & 
S_IWOTH
)

100 
≥rms
 |
APR_WWRITE
;

101 i‡(
mode
 & 
S_IXOTH
)

102 
≥rms
 |
APR_WEXECUTE
;

104  
≥rms
;

105 
	}
}

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_d©a_gë
(**
d©a
, c⁄° *
key
,

109 
≠r_fûe_t
 *
fûe
)

111  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
fûe
->
poﬁ
);

112 
	}
}

114 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_fûe_d©a_£t
(
≠r_fûe_t
 *
fûe
, *
d©a
,

115 c⁄° *
key
,

116 
	$≠r_°©us_t
 (*
˛ónup
)(*))

118  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
fûe
->
poﬁ
);

119 
	}
}

	@file_io/unix/filedup.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_thªad_muãx.h
"

21 
	~"≠r_¨ch_öhîô.h
"

23 
≠r_°©us_t
 
	$fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,

24 
≠r_fûe_t
 *
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
,

25 
which_dup
)

27 
rv
;

28 #ifde‡
HAVE_DUP3


29 
Êags
 = 0;

32 i‡(
which_dup
 == 2) {

33 i‡((*
√w_fûe
Ë=
NULL
) {

35  
APR_EINVAL
;

37 #ifde‡
HAVE_DUP3


38 i‡(!((*
√w_fûe
)->
Êags
 & (
APR_FOPEN_NOCLEANUP
|
APR_INHERIT
)))

39 
Êags
 |
O_CLOEXEC
;

40 
rv
 = 
	`dup3
(
ﬁd_fûe
->
fûedes
, (*
√w_fûe
)->fûedes, 
Êags
);

42 
rv
 = 
	`dup2
(
ﬁd_fûe
->
fûedes
, (*
√w_fûe
)->filedes);

43 i‡(!((*
√w_fûe
)->
Êags
 & (
APR_FOPEN_NOCLEANUP
|
APR_INHERIT
))) {

44 
Êags
;

46 i‡(
rv
 == -1)

47  
î∫o
;

49 i‡((
Êags
 = 
	`f˙é
((*
√w_fûe
)->
fûedes
, 
F_GETFD
)) == -1)

50  
î∫o
;

52 
Êags
 |
FD_CLOEXEC
;

53 i‡(
	`f˙é
((*
√w_fûe
)->
fûedes
, 
F_SETFD
, 
Êags
) == -1)

54  
î∫o
;

59 
rv
 = 
	`dup
(
ﬁd_fûe
->
fûedes
);

62 i‡(
rv
 == -1)

63  
î∫o
;

65 i‡(
which_dup
 == 1) {

66 (*
√w_fûe
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_file_t));

67 (*
√w_fûe
)->
poﬁ
 = 
p
;

68 (*
√w_fûe
)->
fûedes
 = 
rv
;

71 (*
√w_fûe
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ﬁd_fûe
->fname);

72 (*
√w_fûe
)->
buf„ªd
 = 
ﬁd_fûe
->buffered;

78 #i‡
APR_HAS_THREADS


79 i‡((*
√w_fûe
)->
buf„ªd
 && !(*√w_fûe)->
thlock
 && 
ﬁd_fûe
->thlock) {

80 
	`≠r_thªad_muãx_¸óã
(&((*
√w_fûe
)->
thlock
),

81 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

87 i‡((*
√w_fûe
)->
buf„ªd
 && !(*√w_fûe)->
buf„r
) {

88 (*
√w_fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
p
, 
ﬁd_fûe
->
bufsize
);

89 (*
√w_fûe
)->
bufsize
 = 
ﬁd_fûe
->bufsize;

93 (*
√w_fûe
)->
blockög
 = 
ﬁd_fûe
->blocking;

96 (*
√w_fûe
)->
ungëch¨
 = 
ﬁd_fûe
->ungetchar;

104 i‡(
which_dup
 == 2) {

105  
APR_SUCCESS
;

113 (*
√w_fûe
)->
Êags
 = 
ﬁd_fûe
->flags

114 & ~(
APR_INHERIT
 | 
APR_FOPEN_NOCLEANUP
);

116 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w_fûe
)->
poﬁ
, (*)(*new_file),

117 
≠r_unix_fûe_˛ónup
,

118 
≠r_unix_chûd_fûe_˛ónup
);

119 #i‚de‡
WAITIO_USES_POLL


123 (*
√w_fûe
)->
pﬁl£t
 = 
NULL
;

125  
APR_SUCCESS
;

126 
	}
}

128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,

129 
≠r_fûe_t
 *
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

131  
	`fûe_dup
(
√w_fûe
, 
ﬁd_fûe
, 
p
, 1);

132 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup2
(
≠r_fûe_t
 *
√w_fûe
,

135 
≠r_fûe_t
 *
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

137  
	`fûe_dup
(&
√w_fûe
, 
ﬁd_fûe
, 
p
, 2);

138 
	}
}

140 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£èside
(
≠r_fûe_t
 **
√w_fûe
,

141 
≠r_fûe_t
 *
ﬁd_fûe
,

142 
≠r_poﬁ_t
 *
p
)

144 *
√w_fûe
 = (
≠r_fûe_t
 *)
	`≠r_pmemdup
(
p
, 
ﬁd_fûe
, (apr_file_t));

145 (*
√w_fûe
)->
poﬁ
 = 
p
;

146 i‡(
ﬁd_fûe
->
buf„ªd
) {

147 (*
√w_fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
p
, 
ﬁd_fûe
->
bufsize
);

148 (*
√w_fûe
)->
bufsize
 = 
ﬁd_fûe
->bufsize;

149 i‡(
ﬁd_fûe
->
dúe˘i⁄
 == 1) {

150 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
buÂos
);

153 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
d©aRód
);

155 #i‡
APR_HAS_THREADS


156 i‡(
ﬁd_fûe
->
thlock
) {

157 
	`≠r_thªad_muãx_¸óã
(&((*
√w_fûe
)->
thlock
),

158 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

159 
	`≠r_thªad_muãx_de°roy
(
ﬁd_fûe
->
thlock
);

163 i‡(
ﬁd_fûe
->
‚ame
) {

164 (*
√w_fûe
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ﬁd_fûe
->fname);

166 i‡(!(
ﬁd_fûe
->
Êags
 & 
APR_FOPEN_NOCLEANUP
)) {

167 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)(*
√w_fûe
),

168 
≠r_unix_fûe_˛ónup
,

169 ((*
√w_fûe
)->
Êags
 & 
APR_INHERIT
)

170 ? 
≠r_poﬁ_˛ónup_nuŒ


171 : 
≠r_unix_chûd_fûe_˛ónup
);

174 
ﬁd_fûe
->
fûedes
 = -1;

175 
	`≠r_poﬁ_˛ónup_kûl
(
ﬁd_fûe
->
poﬁ
, (*)old_file,

176 
≠r_unix_fûe_˛ónup
);

177 #i‚de‡
WAITIO_USES_POLL


178 (*
√w_fûe
)->
pﬁl£t
 = 
NULL
;

180  
APR_SUCCESS
;

181 
	}
}

	@file_io/unix/filepath.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_¨ch_fûe_io.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_°rögs.h
"

22 
	#APR_WANT_STRFUNC


	)

23 
	~"≠r_w™t.h
"

24 #i‡
APR_HAVE_UNISTD_H


25 
	~<uni°d.h
>

31 #i‡
APR_HAVE_DIRENT_H


32 
	~<dúít.h
>

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_gë
(**
deÂ©h
, 
≠r_öt32_t
 
Êags
,

38 
≠r_poﬁ_t
 *
p
)

40 
∑th
[
APR_PATH_MAX
];

42 i‡(!
	`gëcwd
(
∑th
, (path))) {

43 i‡(
î∫o
 =
ERANGE
)

44  
APR_ENAMETOOLONG
;

46  
î∫o
;

48 *
deÂ©h
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

50  
APR_SUCCESS
;

51 
	}
}

56 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_£t
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
p
)

58 i‡(
	`chdú
(
∑th
) != 0)

59  
î∫o
;

61  
APR_SUCCESS
;

62 
	}
}

64 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_roŸ
(c⁄° **
roŸ∑th
,

65 c⁄° **
ö∑th
,

66 
≠r_öt32_t
 
Êags
,

67 
≠r_poﬁ_t
 *
p
)

69 i‡(**
ö∑th
 == '/') {

70 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, "/");

72 ++(*
ö∑th
);

73 } **
ö∑th
 == '/');

75  
APR_SUCCESS
;

78  
APR_ERELATIVE
;

79 
	}
}

81 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_mîge
(**
√w∑th
,

82 c⁄° *
roŸ∑th
,

83 c⁄° *
add∑th
,

84 
≠r_öt32_t
 
Êags
,

85 
≠r_poﬁ_t
 *
p
)

87 *
∑th
;

88 
≠r_size_t
 
roŸÀn
;

89 
≠r_size_t
 
maxÀn
;

90 
≠r_size_t
 
kïéí
;

91 
≠r_size_t
 
∑thÀn
;

92 
≠r_size_t
 
£gÀn
;

93 
≠r_°©us_t
 
rv
;

97 i‡(!
add∑th
)

98 
add∑th
 = "";

100 i‡(
add∑th
[0] == '/') {

105 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
)

106  
APR_EABOVEROOT
;

107 i‡(
Êags
 & 
APR_FILEPATH_NOTABSOLUTE
)

108  
APR_EABSOLUTE
;

114 i‡(!
roŸ∑th
 && !(
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
))

115 
roŸ∑th
 = "";

123 i‡(
Êags
 & 
APR_FILEPATH_NOTABSOLUTE
) {

124 i‡(!
roŸ∑th
)

125 
roŸ∑th
 = "";

126 i‡(
roŸ∑th
[0] == '/')

127  
APR_EABSOLUTE
;

131 i‡(!
roŸ∑th
) {

136 *
gë∑th
;

137 
rv
 = 
	`≠r_fûï©h_gë
(&
gë∑th
, 
Êags
, 
p
);

138 
roŸ∑th
 = 
gë∑th
;

139 i‡(
rv
 !
APR_SUCCESS
)

140  
î∫o
;

149 
roŸÀn
 = 
	`°æí
(
roŸ∑th
);

150 
maxÀn
 = 
roŸÀn
 + 
	`°æí
(
add∑th
) + 4;

153 i‡(
maxÀn
 > 
APR_PATH_MAX
) {

154  
APR_ENAMETOOLONG
;

156 
∑th
 = (*)
	`≠r_∑Œoc
(
p
, 
maxÀn
);

158 i‡(
add∑th
[0] == '/') {

163 
kïéí
 = 0;

164 
add∑th
[0] == '/')

165 ++
add∑th
;

166 
∑th
[0] = '/';

167 
∑thÀn
 = 1;

172 i‡(
roŸ∑th
[0] !'/' && (
Êags
 & 
APR_FILEPATH_NOTRELATIVE
))

173  
APR_ERELATIVE
;

177 
kïéí
 = 
roŸÀn
;

178 
	`mem˝y
(
∑th
, 
roŸ∑th
, 
roŸÀn
);

182 i‡(
kïéí
 && 
∑th
[keptlen - 1] != '/') {

183 
∑th
[
kïéí
++] = '/';

185 
∑thÀn
 = 
kïéí
;

188 *
add∑th
) {

191 c⁄° *
√xt
 = 
add∑th
;

192 *
√xt
 && (*next != '/')) {

193 ++
√xt
;

195 
£gÀn
 = 
√xt
 - 
add∑th
;

197 i‡(
£gÀn
 =0 || (£gÀ¿=1 && 
add∑th
[0] == '.')) {

201 i‡(
£gÀn
 =2 && 
add∑th
[0] == '.' &&áddpath[1] == '.') {

203 i‡(
∑thÀn
 =1 && 
∑th
[0] == '/') {

207 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
) {

208  
APR_EABOVEROOT
;

214 
kïéí
 = 0;

216 i‡(
∑thÀn
 == 0

217 || (
∑thÀn
 == 3

218 && !
	`memcmp
(
∑th
 + 
∑thÀn
 - 3, "../", 3))

219 || (
∑thÀn
 > 3

220 && !
	`memcmp
(
∑th
 + 
∑thÀn
 - 4, "/../", 4))) {

224 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
) {

225  
APR_EABOVEROOT
;

231 
	`mem˝y
(
∑th
 + 
∑thÀn
, "../", *
√xt
 ? 3 : 2);

232 
∑thÀn
 +*
√xt
 ? 3 : 2;

238 --
∑thÀn
;

239 } 
∑thÀn
 && 
∑th
[pathlen - 1] != '/');

245 i‡(
∑thÀn
 < 
kïéí
) {

246 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
) {

247  
APR_EABOVEROOT
;

249 
kïéí
 = 
∑thÀn
;

255 i‡(*
√xt
) {

256 
£gÀn
++;

258 
	`mem˝y
(
∑th
 + 
∑thÀn
, 
add∑th
, 
£gÀn
);

259 
∑thÀn
 +
£gÀn
;

264 i‡(*
√xt
) {

265 ++
√xt
;

268 
add∑th
 = 
√xt
;

270 
∑th
[
∑thÀn
] = '\0';

278 i‡((
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
Ë&& 
kïéí
 < 
roŸÀn
) {

279 i‡(
	`°∫cmp
(
roŸ∑th
, 
∑th
, 
roŸÀn
)) {

280  
APR_EABOVEROOT
;

282 i‡(
roŸ∑th
[
roŸÀn
 - 1] != '/'

283 && 
∑th
[
roŸÀn
] &&Öath[rootlen] != '/') {

284  
APR_EABOVEROOT
;

288 *
√w∑th
 = 
∑th
;

289  
APR_SUCCESS
;

290 
	}
}

292 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_li°_•lô
(
≠r_¨øy_hódî_t
 **
∑thñts
,

293 c⁄° *
li°°r
,

294 
≠r_poﬁ_t
 *
p
)

296  
	`≠r_fûï©h_li°_•lô_im∂
(
∑thñts
, 
li°°r
, ':', 
p
);

297 
	}
}

299 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_li°_mîge
(**
li°°r
,

300 
≠r_¨øy_hódî_t
 *
∑thñts
,

301 
≠r_poﬁ_t
 *
p
)

303  
	`≠r_fûï©h_li°_mîge_im∂
(
li°°r
, 
∑thñts
, ':', 
p
);

304 
	}
}

306 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_ícodög
(*
°yÀ
, 
≠r_poﬁ_t
 *
p
)

308 #i‡
	`deföed
(
DARWIN
)

309 *
°yÀ
 = 
APR_FILEPATH_ENCODING_UTF8
;

311 *
°yÀ
 = 
APR_FILEPATH_ENCODING_LOCALE
;

313  
APR_SUCCESS
;

314 
	}
}

	@file_io/unix/filepath_util.c

18 
	#APR_WANT_STRFUNC


	)

19 
	#APR_WANT_MEMFUNC


	)

20 
	~"≠r_w™t.h
"

22 
	~"≠r_î∫o.h
"

23 
	~"≠r_poﬁs.h
"

24 
	~"≠r_°rögs.h
"

25 
	~"≠r_èbÀs.h
"

27 
	~"≠r_¥iv©e.h
"

29 
≠r_°©us_t
 
	$≠r_fûï©h_li°_•lô_im∂
(
≠r_¨øy_hódî_t
 **
∑thñts
,

30 c⁄° *
li°°r
,

31 
£∑øt‹
,

32 
≠r_poﬁ_t
 *
p
)

34 *
∑th
, *
∑π
, *
±r
;

35 
£∑øt‹_°rög
[2] = { '\0', '\0' };

36 
≠r_¨øy_hódî_t
 *
ñts
;

37 
√…s
;

39 
£∑øt‹_°rög
[0] = 
£∑øt‹
;

42 
∑th
 = 
	`≠r_p°rdup
(
p
, 
li°°r
);

43 
√…s
 = 0, 
±r
 = 
∑th
;Öå !
NULL
; ++nelts)

45 
±r
 = 
	`°rchr
’å, 
£∑øt‹
);

46 i‡(
±r
)

47 ++
±r
;

51 
ñts
 = 
	`≠r_¨øy_make
(
p
, 
√…s
, (*));

52 (
∑π
 = 
	`≠r_°πok
(
∑th
, 
£∑øt‹_°rög
, &
±r
)Ë!
NULL
)

54 i‡(*
∑π
 == '\0')

57 *(**)
	`≠r_¨øy_push
(
ñts
Ë
∑π
;

58 
∑th
 = 
NULL
;

61 *
∑thñts
 = 
ñts
;

62  
APR_SUCCESS
;

63 
	}
}

66 
≠r_°©us_t
 
	$≠r_fûï©h_li°_mîge_im∂
(**
li°°r
,

67 
≠r_¨øy_hódî_t
 *
∑thñts
,

68 
£∑øt‹
,

69 
≠r_poﬁ_t
 *
p
)

71 
≠r_size_t
 
∑th_size
 = 0;

72 *
∑th
;

73 
i
;

77 i‡(
∑thñts
->
ñt_size
 != (*))

78  
APR_EINVAL
;

81 
i
 = 0; i < 
∑thñts
->
√…s
; ++i)

82 
∑th_size
 +
	`°æí
(((**)
∑thñts
->
ñts
)[
i
]);

84 i‡(
∑th_size
 == 0)

86 *
li°°r
 = 
NULL
;

87  
APR_SUCCESS
;

90 i‡(
i
 > 0)

91 
∑th_size
 +(
i
 - 1);

94 
∑th
 = *
li°°r
 = 
	`≠r_∑Œoc
(
p
, 
∑th_size
 + 1);

95 
i
 = 0; i < 
∑thñts
->
√…s
; ++i)

99 c⁄° *
∑π
 = ((**)
∑thñts
->
ñts
)[
i
];

100 
≠r_size_t
 
∑π_size
 = 
	`°æí
(
∑π
);

101 i‡(
∑π_size
 == 0)

104 i‡(
i
 > 0)

105 *
∑th
++ = 
£∑øt‹
;

106 
	`mem˝y
(
∑th
, 
∑π
, 
∑π_size
);

107 
∑th
 +
∑π_size
;

109 *
∑th
 = '\0';

110  
APR_SUCCESS
;

111 
	}
}

	@file_io/unix/filestat.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_î∫o.h
"

23 #ifde‡
HAVE_UTIME


24 
	~<utime.h
>

27 
≠r_fûëy≥_e
 
	$fûëy≥_‰om_mode
(
mode_t
 
mode
)

29 
≠r_fûëy≥_e
 
ty≥
;

31 
mode
 & 
S_IFMT
) {

32 
S_IFREG
:

33 
ty≥
 = 
APR_REG
; ;

34 
S_IFDIR
:

35 
ty≥
 = 
APR_DIR
; ;

36 
S_IFLNK
:

37 
ty≥
 = 
APR_LNK
; ;

38 
S_IFCHR
:

39 
ty≥
 = 
APR_CHR
; ;

40 
S_IFBLK
:

41 
ty≥
 = 
APR_BLK
; ;

42 #i‡
	`deföed
(
S_IFFIFO
)

43 
S_IFFIFO
:

44 
ty≥
 = 
APR_PIPE
; ;

46 #i‡!
	`deföed
(
BEOS
Ë&& deföed(
S_IFSOCK
)

47 
S_IFSOCK
:

48 
ty≥
 = 
APR_SOCK
; ;

55 #i‡!
	`deföed
(
S_IFFIFO
Ë&& deföed(
S_ISFIFO
)

56 i‡(
	`S_ISFIFO
(
mode
)) {

57 
ty≥
 = 
APR_PIPE
;

60 #i‡!
	`deföed
(
BEOS
Ë&& !deföed(
S_IFSOCK
Ë&& deföed(
S_ISSOCK
)

61 i‡(
	`S_ISSOCK
(
mode
)) {

62 
ty≥
 = 
APR_SOCK
;

65 
ty≥
 = 
APR_UNKFILE
;

67  
ty≥
;

68 
	}
}

70 
	$fûl_out_föfo
(
≠r_föfo_t
 *
föfo
, 
°ru˘_°©
 *
öfo
,

71 
≠r_öt32_t
 
w™ãd
)

73 
föfo
->
vÆid
 = 
APR_FINFO_MIN
 | 
APR_FINFO_IDENT
 | 
APR_FINFO_NLINK


74 | 
APR_FINFO_OWNER
 | 
APR_FINFO_PROT
;

75 
föfo
->
¥Ÿe˘i⁄
 = 
	`≠r_unix_mode2≥rms
(
öfo
->
°_mode
);

76 
föfo
->
fûëy≥
 = 
	`fûëy≥_‰om_mode
(
öfo
->
°_mode
);

77 
föfo
->
u£r
 = 
öfo
->
°_uid
;

78 
föfo
->
group
 = 
öfo
->
°_gid
;

79 
föfo
->
size
 = 
öfo
->
°_size
;

80 
föfo
->
devi˚
 = 
öfo
->
°_dev
;

81 
föfo
->
∆ök
 = 
öfo
->
°_∆ök
;

85 i‡((
≠r_öo_t
Ë>(
öfo
->
°_öo
)

86 || (
≠r_öo_t
)
öfo
->
°_öo
 == info->st_ino) {

87 
föfo
->
öode
 = 
öfo
->
°_öo
;

89 
föfo
->
vÆid
 &~
APR_FINFO_INODE
;

92 
	`≠r_time_™si_put
(&
föfo
->
©ime
, 
öfo
->
°_©ime
);

93 #ifde‡
HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC


94 
föfo
->
©ime
 +
öfo
->
°_©im
.
tv_n£c
 / 
	`APR_TIME_C
(1000);

95 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_ATIMENSEC
)

96 
föfo
->
©ime
 +
öfo
->
°_©imí£c
 / 
	`APR_TIME_C
(1000);

97 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_ATIME_N
)

98 
föfo
->
©ime
 +
öfo
->
°_©ime_n
 / 
	`APR_TIME_C
(1000);

101 
	`≠r_time_™si_put
(&
föfo
->
mtime
, 
öfo
->
°_mtime
);

102 #ifde‡
HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC


103 
föfo
->
mtime
 +
öfo
->
°_mtim
.
tv_n£c
 / 
	`APR_TIME_C
(1000);

104 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_MTIMENSEC
)

105 
föfo
->
mtime
 +
öfo
->
°_mtimí£c
 / 
	`APR_TIME_C
(1000);

106 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_MTIME_N
)

107 
föfo
->
mtime
 +
öfo
->
°_mtime_n
 / 
	`APR_TIME_C
(1000);

110 
	`≠r_time_™si_put
(&
föfo
->
˘ime
, 
öfo
->
°_˘ime
);

111 #ifde‡
HAVE_STRUCT_STAT_ST_CTIM_TV_NSEC


112 
föfo
->
˘ime
 +
öfo
->
°_˘im
.
tv_n£c
 / 
	`APR_TIME_C
(1000);

113 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_CTIMENSEC
)

114 
föfo
->
˘ime
 +
öfo
->
°_˘imí£c
 / 
	`APR_TIME_C
(1000);

115 #ñi‡
	`deföed
(
HAVE_STRUCT_STAT_ST_CTIME_N
)

116 
föfo
->
˘ime
 +
öfo
->
°_˘ime_n
 / 
	`APR_TIME_C
(1000);

119 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


120 #ifde‡
DEV_BSIZE


121 
föfo
->
csize
 = (
≠r_off_t
)
öfo
->
°_blocks
 * (≠r_off_t)
DEV_BSIZE
;

123 
föfo
->
csize
 = (
≠r_off_t
)
öfo
->
°_blocks
 * (apr_off_t)512;

125 
föfo
->
vÆid
 |
APR_FINFO_CSIZE
;

127 
	}
}

129 
≠r_°©us_t
 
	$≠r_fûe_öfo_gë_locked
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

130 
≠r_fûe_t
 *
thefûe
)

132 
°ru˘_°©
 
öfo
;

134 i‡(
thefûe
->
buf„ªd
) {

135 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

136 i‡(
rv
 !
APR_SUCCESS
)

137  
rv
;

140 i‡(
	`f°©
(
thefûe
->
fûedes
, &
öfo
) == 0) {

141 
föfo
->
poﬁ
 = 
thefûe
->pool;

142 
föfo
->
‚ame
 = 
thefûe
->fname;

143 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

144  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

147  
î∫o
;

149 
	}
}

151 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öfo_gë
(
≠r_föfo_t
 *
föfo
,

152 
≠r_öt32_t
 
w™ãd
,

153 
≠r_fûe_t
 *
thefûe
)

155 
°ru˘_°©
 
öfo
;

157 i‡(
thefûe
->
buf„ªd
) {

158 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

159 i‡(
rv
 !
APR_SUCCESS
)

160  
rv
;

163 i‡(
	`f°©
(
thefûe
->
fûedes
, &
öfo
) == 0) {

164 
föfo
->
poﬁ
 = 
thefûe
->pool;

165 
föfo
->
‚ame
 = 
thefûe
->fname;

166 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

167  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

170  
î∫o
;

172 
	}
}

174 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_≥rms_£t
(c⁄° *
‚ame
,

175 
≠r_fûïîms_t
 
≥rms
)

177 
mode_t
 
mode
 = 
	`≠r_unix_≥rms2mode
(
≥rms
);

179 i‡(
	`chmod
(
‚ame
, 
mode
) == -1)

180  
î∫o
;

181  
APR_SUCCESS
;

182 
	}
}

184 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_©ås_£t
(c⁄° *
‚ame
,

185 
≠r_fûóârs_t
 
©åibuãs
,

186 
≠r_fûóârs_t
 
©å_mask
,

187 
≠r_poﬁ_t
 *
poﬁ
)

189 
≠r_°©us_t
 
°©us
;

190 
≠r_föfo_t
 
föfo
;

193 i‡(!(
©å_mask
 & (
APR_FILE_ATTR_READONLY


194 | 
APR_FILE_ATTR_EXECUTABLE
)))

195  
APR_SUCCESS
;

197 
°©us
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_PROT
, 
poﬁ
);

198 i‡(
°©us
)

199  
°©us
;

202 i‡(
©å_mask
 & 
APR_FILE_ATTR_READONLY
)

204 i‡(
©åibuãs
 & 
APR_FILE_ATTR_READONLY
)

206 
föfo
.
¥Ÿe˘i⁄
 &~
APR_UWRITE
;

207 
föfo
.
¥Ÿe˘i⁄
 &~
APR_GWRITE
;

208 
föfo
.
¥Ÿe˘i⁄
 &~
APR_WWRITE
;

213 
föfo
.
¥Ÿe˘i⁄
 |
APR_UWRITE
;

214 
föfo
.
¥Ÿe˘i⁄
 |
APR_GWRITE
;

215 
föfo
.
¥Ÿe˘i⁄
 |
APR_WWRITE
;

219 i‡(
©å_mask
 & 
APR_FILE_ATTR_EXECUTABLE
)

221 i‡(
©åibuãs
 & 
APR_FILE_ATTR_EXECUTABLE
)

224 
föfo
.
¥Ÿe˘i⁄
 |
APR_UEXECUTE
;

225 
föfo
.
¥Ÿe˘i⁄
 |
APR_GEXECUTE
;

226 
föfo
.
¥Ÿe˘i⁄
 |
APR_WEXECUTE
;

230 
föfo
.
¥Ÿe˘i⁄
 &~
APR_UEXECUTE
;

231 
föfo
.
¥Ÿe˘i⁄
 &~
APR_GEXECUTE
;

232 
föfo
.
¥Ÿe˘i⁄
 &~
APR_WEXECUTE
;

236  
	`≠r_fûe_≥rms_£t
(
‚ame
, 
föfo
.
¥Ÿe˘i⁄
);

237 
	}
}

240 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mtime_£t
(c⁄° *
‚ame
,

241 
≠r_time_t
 
mtime
,

242 
≠r_poﬁ_t
 *
poﬁ
)

244 
≠r_°©us_t
 
°©us
;

245 
≠r_föfo_t
 
föfo
;

247 
°©us
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_ATIME
, 
poﬁ
);

248 i‡(
°©us
) {

249  
°©us
;

252 #ifde‡
HAVE_UTIMES


254 
timevÆ
 
tvp
[2];

256 
tvp
[0].
tv_£c
 = 
	`≠r_time_£c
(
föfo
.
©ime
);

257 
tvp
[0].
tv_u£c
 = 
	`≠r_time_u£c
(
föfo
.
©ime
);

258 
tvp
[1].
tv_£c
 = 
	`≠r_time_£c
(
mtime
);

259 
tvp
[1].
tv_u£c
 = 
	`≠r_time_u£c
(
mtime
);

261 i‡(
	`utimes
(
‚ame
, 
tvp
) == -1) {

262  
î∫o
;

265 #ñi‡
	`deföed
(
HAVE_UTIME
)

267 
utimbuf
 
buf
;

269 
buf
.
a˘ime
 = (
time_t
Ë(
föfo
.
©ime
 / 
APR_USEC_PER_SEC
);

270 
buf
.
modtime
 = (
time_t
Ë(
mtime
 / 
APR_USEC_PER_SEC
);

272 i‡(
	`utime
(
‚ame
, &
buf
) == -1) {

273  
î∫o
;

277  
APR_ENOTIMPL
;

280  
APR_SUCCESS
;

281 
	}
}

284 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°©
(
≠r_föfo_t
 *
föfo
,

285 c⁄° *
‚ame
,

286 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
poﬁ
)

288 
°ru˘_°©
 
öfo
;

289 
§v
;

291 i‡(
w™ãd
 & 
APR_FINFO_LINK
)

292 
§v
 = 
	`l°©
(
‚ame
, &
öfo
);

294 
§v
 = 
	`°©
(
‚ame
, &
öfo
);

296 i‡(
§v
 == 0) {

297 
föfo
->
poﬁ
 =Öool;

298 
föfo
->
‚ame
 = fname;

299 
	`fûl_out_föfo
(
föfo
, &
öfo
, 
w™ãd
);

300 i‡(
w™ãd
 & 
APR_FINFO_LINK
)

301 
w™ãd
 &~
APR_FINFO_LINK
;

302  (
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
;

305 #i‡!
	`deföed
(
ENOENT
Ë|| !deföed(
ENOTDIR
)

306 #îr‹ 
ENOENT
 || 
ENOTDIR
 
nŸ
 
deföed
; 
∂ó£
 
£e
 
the


307 #îr‹ 
commíts
 
©
 
this
 
löe
 
ö
 
the
 
sour˚
 
a
 
w‹k¨ound
.

323 #i‡!
	`deföed
(
ENOENT
)

324  
APR_ENOENT
;

328 i‡(
î∫o
 !
ENOENT
)

329  
APR_ENOENT
;

331  
î∫o
;

334  
î∫o
;

337 
	}
}

	@file_io/unix/flock.c

17 
	~"≠r_¨ch_fûe_io.h
"

19 #i‡
APR_HAVE_FCNTL_H


20 
	~<f˙é.h
>

22 #ifde‡
HAVE_SYS_FILE_H


23 
	~<sys/fûe.h
>

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_lock
(
≠r_fûe_t
 *
thefûe
, 
ty≥
)

28 
rc
;

30 #i‡
	`deföed
(
HAVE_FCNTL_H
)

32 
Êock
 
l
 = { 0 };

33 
fc
;

35 
l
.
l_whí˚
 = 
SEEK_SET
;

36 
l
.
l_°¨t
 = 0;

37 
l
.
l_Àn
 = 0;

38 i‡((
ty≥
 & 
APR_FLOCK_TYPEMASK
Ë=
APR_FLOCK_SHARED
)

39 
l
.
l_ty≥
 = 
F_RDLCK
;

41 
l
.
l_ty≥
 = 
F_WRLCK
;

43 
fc
 = (
ty≥
 & 
APR_FLOCK_NONBLOCK
Ë? 
F_SETLK
 : 
F_SETLKW
;

46 (
rc
 = 
	`f˙é
(
thefûe
->
fûedes
, 
fc
, &
l
)Ë< 0 && 
î∫o
 =
EINTR
)

49 i‡(
rc
 == -1) {

54 i‡(
î∫o
 =
EACCES
) {

55  
EAGAIN
;

57  
î∫o
;

60 #ñi‡
	`deföed
(
HAVE_SYS_FILE_H
)

62 
…y≥
;

64 i‡((
ty≥
 & 
APR_FLOCK_TYPEMASK
Ë=
APR_FLOCK_SHARED
)

65 
…y≥
 = 
LOCK_SH
;

67 
…y≥
 = 
LOCK_EX
;

68 i‡((
ty≥
 & 
APR_FLOCK_NONBLOCK
) != 0)

69 
…y≥
 |
LOCK_NB
;

72 (
rc
 = 
	`Êock
(
thefûe
->
fûedes
, 
…y≥
)Ë< 0 && 
î∫o
 =
EINTR
)

75 i‡(
rc
 == -1)

76  
î∫o
;

79 #îr‹ 
No
 
fûe
 
lockög
 
mech™ism
 
is
 
avaûabÀ
.

82  
APR_SUCCESS
;

83 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_u∆ock
(
≠r_fûe_t
 *
thefûe
)

87 
rc
;

89 #i‡
	`deföed
(
HAVE_FCNTL_H
)

91 
Êock
 
l
 = { 0 };

93 
l
.
l_whí˚
 = 
SEEK_SET
;

94 
l
.
l_°¨t
 = 0;

95 
l
.
l_Àn
 = 0;

96 
l
.
l_ty≥
 = 
F_UNLCK
;

99 (
rc
 = 
	`f˙é
(
thefûe
->
fûedes
, 
F_SETLKW
, &
l
)) < 0

100 && 
î∫o
 =
EINTR
)

103 i‡(
rc
 == -1)

104  
î∫o
;

106 #ñi‡
	`deföed
(
HAVE_SYS_FILE_H
)

109 (
rc
 = 
	`Êock
(
thefûe
->
fûedes
, 
LOCK_UN
)Ë< 0 && 
î∫o
 =
EINTR
)

112 i‡(
rc
 == -1)

113  
î∫o
;

116 #îr‹ 
No
 
fûe
 
lockög
 
mech™ism
 
is
 
avaûabÀ
.

119  
APR_SUCCESS
;

120 
	}
}

	@file_io/unix/fullrw.c

17 
	~"≠r_fûe_io.h
"

20 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªad_fuŒ
(
≠r_fûe_t
 *
thefûe
, *
buf
,

21 
≠r_size_t
 
nbyãs
,

22 
≠r_size_t
 *
byãs_ªad
)

24 
≠r_°©us_t
 
°©us
;

25 
≠r_size_t
 
tŸÆ_ªad
 = 0;

28 
≠r_size_t
 
amt
 = 
nbyãs
;

30 
°©us
 = 
	`≠r_fûe_ªad
(
thefûe
, 
buf
, &
amt
);

31 
buf
 = (*)bu‡+ 
amt
;

32 
nbyãs
 -
amt
;

33 
tŸÆ_ªad
 +
amt
;

34 } 
°©us
 =
APR_SUCCESS
 && 
nbyãs
 > 0);

36 i‡(
byãs_ªad
 !
NULL
)

37 *
byãs_ªad
 = 
tŸÆ_ªad
;

39  
°©us
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôe_fuŒ
(
≠r_fûe_t
 *
thefûe
,

43 c⁄° *
buf
,

44 
≠r_size_t
 
nbyãs
,

45 
≠r_size_t
 *
byãs_wrôãn
)

47 
≠r_°©us_t
 
°©us
;

48 
≠r_size_t
 
tŸÆ_wrôãn
 = 0;

51 
≠r_size_t
 
amt
 = 
nbyãs
;

53 
°©us
 = 
	`≠r_fûe_wrôe
(
thefûe
, 
buf
, &
amt
);

54 
buf
 = (*)bu‡+ 
amt
;

55 
nbyãs
 -
amt
;

56 
tŸÆ_wrôãn
 +
amt
;

57 } 
°©us
 =
APR_SUCCESS
 && 
nbyãs
 > 0);

59 i‡(
byãs_wrôãn
 !
NULL
)

60 *
byãs_wrôãn
 = 
tŸÆ_wrôãn
;

62  
°©us
;

63 
	}
}

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôev_fuŒ
(
≠r_fûe_t
 *
thefûe
,

66 c⁄° 
iovec
 *
vec
,

67 
≠r_size_t
 
nvec
,

68 
≠r_size_t
 *
byãs_wrôãn
)

70 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

71 
≠r_size_t
 
i
;

72 
≠r_size_t
 
amt
 = 0;

73 
≠r_size_t
 
tŸÆ
 = 0;

75 
i
 = 0; i < 
nvec
; i++) {

76 
tŸÆ
 +
vec
[
i
].
iov_Àn
;

79 
rv
 = 
	`≠r_fûe_wrôev
(
thefûe
, 
vec
, 
nvec
, &
amt
);

81 i‡(
byãs_wrôãn
 !
NULL
)

82 *
byãs_wrôãn
 = 
amt
;

84 i‡(
rv
 !
APR_SUCCESS
 || (
amt
 =
tŸÆ
)) {

85  
rv
;

88 
i
 = 0; i < 
nvec
 && 
amt
; i++) {

89 i‡(
amt
 >
vec
[
i
].
iov_Àn
) {

90 
amt
 -
vec
[
i
].
iov_Àn
;

97 i‡(
amt
) {

98 
rv
 = 
	`≠r_fûe_wrôe_fuŒ
(
thefûe
, (c⁄° *)
vec
[
i
].
iov_ba£
 + 
amt
,

99 
vec
[
i
].
iov_Àn
 - 
amt
, 
NULL
);

102 ; 
i
 < 
nvec
 && 
rv
 =
APR_SUCCESS
; i++) {

103 
rv
 = 
	`≠r_fûe_wrôe_fuŒ
(
thefûe
, 
vec
[
i
].
iov_ba£
,

104 
vec
[
i
].
iov_Àn
, &
amt
);

107 i‡(
byãs_wrôãn
 !
NULL
)

108 *
byãs_wrôãn
 = 
tŸÆ
;

110  
rv
;

111 
	}
}

	@file_io/unix/mktemp.c

49 
	~"≠r_¥iv©e.h
"

50 
	~"≠r_fûe_io.h
"

51 
	~"≠r_°rögs.h
"

52 
	~"≠r_¨ch_fûe_io.h
"

53 
	~"≠r_p‹èbÀ.h
"

54 
	~"≠r_¨ch_öhîô.h
"

56 #i‚de‡
HAVE_MKSTEMP


58 #i‡
deföed
(
SVR4
Ë|| deföed(
WIN32
Ë|| deföed(
NETWARE
)

59 #ifde‡
SVR4


60 #i‡
HAVE_INTTYPES_H


61 
	~<öây≥s.h
>

64 
	#¨c4øndom
(Ë
	`ønd
()

	)

65 
	#£edøndom
(
a
Ë
	`§™d
◊)

	)

67 #i‡
APR_HAVE_STDINT_H


68 
	~<°döt.h
>

70 
	#¨c4øndom
(Ë
	`øndom
()

	)

71 
	#£edøndom
(
a
Ë
	`§™dom
◊)

	)

74 #i‡
APR_HAVE_SYS_TYPES_H


75 
	~<sys/ty≥s.h
>

77 #i‡
APR_HAVE_SYS_STAT_H


78 
	~<sys/°©.h
>

80 #i‡
APR_HAVE_FCNTL_H


81 
	~<f˙é.h
>

83 
	~<°dio.h
>

84 
	~<°dlib.h
>

85 
	~<°rög.h
>

86 
	~<˘y≥.h
>

87 #ifde‡
HAVE_TIME_H


88 
	~<time.h
>

91 c⁄° 
	g∑dch¨
[] =

93 
≠r_uöt32_t
 
	gønd£ed
=0;

95 
	$gëãmp
(*
∑th
, 
≠r_fûe_t
 **
do›í
, 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

97 *
°¨t
, *
åv
, *
sufÂ
;

98 *
∑d
;

99 
≠r_föfo_t
 
sbuf
;

100 
≠r_°©us_t
 
rv
;

101 
≠r_uöt32_t
 
øndnum
;

103 i‡(
ønd£ed
==0) {

104 
ønd£ed
 = ()
	`≠r_time_now
();

105 
	`£edøndom
(
ønd£ed
);

108 
åv
 = 
∑th
; *trv; ++trv)

110 
sufÂ
 = 
åv
;

111 --
åv
;

112 i‡(
åv
 < 
∑th
) {

113  
APR_EINVAL
;

117 *
åv
 == 'X') {

118 
øndnum
 = 
	`¨c4øndom
(Ë% ((
∑dch¨
) - 1);

119 *
åv
-- = 
∑dch¨
[
øndnum
];

121 
°¨t
 = 
åv
 + 1;

126 ;; --
åv
) {

127 i‡(
åv
 <
∑th
)

129 i‡(*
åv
 == '/') {

130 *
åv
 = '\0';

131 
rv
 = 
	`≠r_°©
(&
sbuf
, 
∑th
, 
APR_FINFO_TYPE
, 
p
);

132 *
åv
 = '/';

133 i‡(
rv
 !
APR_SUCCESS
)

134  
rv
;

135 i‡(
sbuf
.
fûëy≥
 !
APR_DIR
) {

136  
APR_ENOTDIR
;

143 i‡((
rv
 = 
	`≠r_fûe_›í
(
do›í
, 
∑th
, 
Êags
,

144 
APR_UREAD
 | 
APR_UWRITE
, 
p
)Ë=
APR_SUCCESS
)

145  
APR_SUCCESS
;

146 i‡(!
	`APR_STATUS_IS_EEXIST
(
rv
))

147  
rv
;

150 
åv
 = 
°¨t
;;) {

151 i‡(*
åv
 ='\0' ||Årv =
sufÂ
)

152  
APR_EINVAL
;

153 
∑d
 = 
	`°rchr
((*)
∑dch¨
, *
åv
);

154 i‡(
∑d
 =
NULL
 || !*++pad) {

155 *
åv
++ = 
∑dch¨
[0];

158 *
åv
++ = *
∑d
;

164 
	}
}

168 #i‡
APR_HAVE_STDLIB_H


169 
	~<°dlib.h
>

171 #i‡
APR_HAVE_UNISTD_H


172 
	~<uni°d.h
>

176 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mkãmp
(
≠r_fûe_t
 **
Â
, *
ãm∂©e
, 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

178 #ifde‡
HAVE_MKSTEMP


179 
fd
;

181 
Êags
 = (!ÊagsË? 
APR_FOPEN_CREATE
 | 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_EXCL
 |

182 
APR_FOPEN_DELONCLOSE
 : 
Êags
;

183 #i‚de‡
HAVE_MKSTEMP


184  
	`gëãmp
(
ãm∂©e
, 
Â
, 
Êags
, 
p
);

187 #ifde‡
HAVE_MKSTEMP64


188 
fd
 = 
	`mk°emp64
(
ãm∂©e
);

190 
fd
 = 
	`mk°emp
(
ãm∂©e
);

193 i‡(
fd
 == -1) {

194  
î∫o
;

203 
	`≠r_os_fûe_put
(
Â
, &
fd
, 
Êags
, 
p
);

204 (*
Â
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ãm∂©e
);

206 i‡(!(
Êags
 & 
APR_FOPEN_NOCLEANUP
)) {

207 
Êags
;

209 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
)) == -1)

210  
î∫o
;

212 
Êags
 |
FD_CLOEXEC
;

213 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1)

214  
î∫o
;

216 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
Â
)->
poﬁ
, (*)(*fp),

217 
≠r_unix_fûe_˛ónup
,

218 
≠r_unix_chûd_fûe_˛ónup
);

221  
APR_SUCCESS
;

222 
	}
}

	@file_io/unix/open.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_thªad_muãx.h
"

21 
	~"≠r_¨ch_öhîô.h
"

23 #ifde‡
NETWARE


24 
	~"nks/dúio.h
"

25 
	~"≠r_hash.h
"

26 
	~"fsio.h
"

29 
≠r_°©us_t
 
	$fûe_˛ónup
(
≠r_fûe_t
 *
fûe
, 
is_chûd
)

31 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

32 
fd
 = 
fûe
->
fûedes
;

37 
fûe
->
fûedes
 = -1;

39 i‡(
	`˛o£
(
fd
) == 0) {

41 i‡(!
is_chûd
 && (
fûe
->
Êags
 & 
APR_FOPEN_DELONCLOSE
)) {

42 
	`u∆ök
(
fûe
->
‚ame
);

44 #i‡
APR_HAS_THREADS


45 i‡(
fûe
->
thlock
) {

46 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
fûe
->
thlock
);

52 
fûe
->
fûedes
 = 
fd
;

55 
rv
 = 
î∫o
;

57 #i‚de‡
WAITIO_USES_POLL


58 i‡(
fûe
->
pﬁl£t
 !
NULL
) {

59 
≠r_°©us_t
 
pﬁl£t_rv
 = 
	`≠r_pﬁl£t_de°roy
(
fûe
->
pﬁl£t
);

63 i‡(
rv
 =
APR_SUCCESS
) {

64 
rv
 = 
pﬁl£t_rv
;

68  
rv
;

69 
	}
}

71 
≠r_°©us_t
 
	$≠r_unix_fûe_˛ónup
(*
thefûe
)

73 
≠r_fûe_t
 *
fûe
 = 
thefûe
;

74 
≠r_°©us_t
 
Êush_rv
 = 
APR_SUCCESS
, 
rv
 = APR_SUCCESS;

76 i‡(
fûe
->
buf„ªd
) {

77 
Êush_rv
 = 
	`≠r_fûe_Êush
(
fûe
);

80 
rv
 = 
	`fûe_˛ónup
(
fûe
, 0);

82  
rv
 !
APR_SUCCESS
 ?Ñv : 
Êush_rv
;

83 
	}
}

85 
≠r_°©us_t
 
	$≠r_unix_chûd_fûe_˛ónup
(*
thefûe
)

87  
	`fûe_˛ónup
(
thefûe
, 1);

88 
	}
}

90 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í
(
≠r_fûe_t
 **
√w
,

91 c⁄° *
‚ame
,

92 
≠r_öt32_t
 
Êag
,

93 
≠r_fûïîms_t
 
≥rm
,

94 
≠r_poﬁ_t
 *
poﬁ
)

96 
≠r_os_fûe_t
 
fd
;

97 
oÊags
 = 0;

98 #i‡
APR_HAS_THREADS


99 
≠r_thªad_muãx_t
 *
thlock
;

100 
≠r_°©us_t
 
rv
;

103 i‡((
Êag
 & 
APR_FOPEN_READ
Ë&& (Êag & 
APR_FOPEN_WRITE
)) {

104 
oÊags
 = 
O_RDWR
;

106 i‡(
Êag
 & 
APR_FOPEN_READ
) {

107 
oÊags
 = 
O_RDONLY
;

109 i‡(
Êag
 & 
APR_FOPEN_WRITE
) {

110 
oÊags
 = 
O_WRONLY
;

113  
APR_EACCES
;

116 i‡(
Êag
 & 
APR_FOPEN_CREATE
) {

117 
oÊags
 |
O_CREAT
;

118 i‡(
Êag
 & 
APR_FOPEN_EXCL
) {

119 
oÊags
 |
O_EXCL
;

122 i‡((
Êag
 & 
APR_FOPEN_EXCL
Ë&& !(Êag & 
APR_FOPEN_CREATE
)) {

123  
APR_EACCES
;

126 i‡(
Êag
 & 
APR_FOPEN_APPEND
) {

127 
oÊags
 |
O_APPEND
;

129 i‡(
Êag
 & 
APR_FOPEN_TRUNCATE
) {

130 
oÊags
 |
O_TRUNC
;

132 #ifde‡
O_BINARY


133 i‡(
Êag
 & 
APR_FOPEN_BINARY
) {

134 
oÊags
 |
O_BINARY
;

138 i‡(
Êag
 & 
APR_FOPEN_NONBLOCK
) {

139 #ifde‡
O_NONBLOCK


140 
oÊags
 |
O_NONBLOCK
;

142  
APR_ENOTIMPL
;

146 #ifde‡
O_CLOEXEC


149 i‡(!(
Êag
 & 
APR_FOPEN_NOCLEANUP
)) {

150 
oÊags
 |
O_CLOEXEC
;

154 #i‡
APR_HAS_LARGE_FILES
 && 
	`deföed
(
_LARGEFILE64_SOURCE
)

155 
oÊags
 |
O_LARGEFILE
;

156 #ñi‡
	`deföed
(
O_LARGEFILE
)

157 i‡(
Êag
 & 
APR_FOPEN_LARGEFILE
) {

158 
oÊags
 |
O_LARGEFILE
;

162 #i‡
APR_HAS_THREADS


163 i‡((
Êag
 & 
APR_FOPEN_BUFFERED
Ë&& (Êag & 
APR_FOPEN_XTHREAD
)) {

164 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
thlock
,

165 
APR_THREAD_MUTEX_DEFAULT
, 
poﬁ
);

166 i‡(
rv
) {

167  
rv
;

172 i‡(
≥rm
 =
APR_OS_DEFAULT
) {

173 
fd
 = 
	`›í
(
‚ame
, 
oÊags
, 0666);

176 
fd
 = 
	`›í
(
‚ame
, 
oÊags
, 
	`≠r_unix_≥rms2mode
(
≥rm
));

178 i‡(
fd
 < 0) {

179  
î∫o
;

181 i‡(!(
Êag
 & 
APR_FOPEN_NOCLEANUP
)) {

182 #ifde‡
O_CLOEXEC


183 
has_o_˛€xec
 = 0;

184 i‡(!
has_o_˛€xec
)

187 
Êags
;

189 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
)) == -1) {

190 
	`˛o£
(
fd
);

191  
î∫o
;

193 i‡((
Êags
 & 
FD_CLOEXEC
) == 0) {

194 
Êags
 |
FD_CLOEXEC
;

195 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1) {

196 
	`˛o£
(
fd
);

197  
î∫o
;

200 #ifde‡
O_CLOEXEC


202 
has_o_˛€xec
 = 1;

208 (*
√w
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

209 (*
√w
)->
poﬁ
 =Öool;

210 (*
√w
)->
Êags
 = 
Êag
;

211 (*
√w
)->
fûedes
 = 
fd
;

213 (*
√w
)->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, fname);

215 (*
√w
)->
blockög
 = 
BLK_ON
;

216 (*
√w
)->
buf„ªd
 = (
Êag
 & 
APR_FOPEN_BUFFERED
) > 0;

218 i‡((*
√w
)->
buf„ªd
) {

219 (*
√w
)->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

220 (*
√w
)->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

221 #i‡
APR_HAS_THREADS


222 i‡((*
√w
)->
Êags
 & 
APR_FOPEN_XTHREAD
) {

223 (*
√w
)->
thlock
 =Åhlock;

228 (*
√w
)->
buf„r
 = 
NULL
;

231 (*
√w
)->
is_pùe
 = 0;

232 (*
√w
)->
timeout
 = -1;

233 (*
√w
)->
ungëch¨
 = -1;

234 (*
√w
)->
eof_hô
 = 0;

235 (*
√w
)->
fûePå
 = 0;

236 (*
√w
)->
buÂos
 = 0;

237 (*
√w
)->
d©aRód
 = 0;

238 (*
√w
)->
dúe˘i⁄
 = 0;

239 #i‚de‡
WAITIO_USES_POLL


243 (*
√w
)->
pﬁl£t
 = 
NULL
;

245 i‡(!(
Êag
 & 
APR_FOPEN_NOCLEANUP
)) {

246 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*new),

247 
≠r_unix_fûe_˛ónup
,

248 
≠r_unix_chûd_fûe_˛ónup
);

250  
APR_SUCCESS
;

251 
	}
}

253 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_˛o£
(
≠r_fûe_t
 *
fûe
)

255  
	`≠r_poﬁ_˛ónup_run
(
fûe
->
poﬁ
, fûe, 
≠r_unix_fûe_˛ónup
);

256 
	}
}

258 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

260 i‡(
	`u∆ök
(
∑th
) == 0) {

261  
APR_SUCCESS
;

264  
î∫o
;

266 
	}
}

268 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ª«me
(c⁄° *
‰om_∑th
,

269 c⁄° *
to_∑th
,

270 
≠r_poﬁ_t
 *
p
)

272 i‡(
	`ª«me
(
‰om_∑th
, 
to_∑th
) != 0) {

273  
î∫o
;

275  
APR_SUCCESS
;

276 
	}
}

278 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_gë
(
≠r_os_fûe_t
 *
thefûe
,

279 
≠r_fûe_t
 *
fûe
)

281 *
thefûe
 = 
fûe
->
fûedes
;

282  
APR_SUCCESS
;

283 
	}
}

285 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_put
(
≠r_fûe_t
 **
fûe
,

286 
≠r_os_fûe_t
 *
thefûe
,

287 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
poﬁ
)

289 *
dafûe
 = 
thefûe
;

291 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

292 (*
fûe
)->
poﬁ
 =Öool;

293 (*
fûe
)->
eof_hô
 = 0;

294 (*
fûe
)->
blockög
 = 
BLK_UNKNOWN
;

295 (*
fûe
)->
timeout
 = -1;

296 (*
fûe
)->
ungëch¨
 = -1;

297 (*
fûe
)->
fûedes
 = *
dafûe
;

298 (*
fûe
)->
Êags
 = fœg†| 
APR_FOPEN_NOCLEANUP
;

299 (*
fûe
)->
buf„ªd
 = (
Êags
 & 
APR_FOPEN_BUFFERED
) > 0;

301 #i‚de‡
WAITIO_USES_POLL


305 (*
fûe
)->
pﬁl£t
 = 
NULL
;

308 i‡((*
fûe
)->
buf„ªd
) {

309 (*
fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

310 (*
fûe
)->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

311 #i‡
APR_HAS_THREADS


312 i‡((*
fûe
)->
Êags
 & 
APR_FOPEN_XTHREAD
) {

313 
≠r_°©us_t
 
rv
;

314 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&((*
fûe
)->
thlock
),

315 
APR_THREAD_MUTEX_DEFAULT
, 
poﬁ
);

316 i‡(
rv
) {

317  
rv
;

322  
APR_SUCCESS
;

323 
	}
}

325 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_eof
(
≠r_fûe_t
 *
Âå
)

327 i‡(
Âå
->
eof_hô
 == 1) {

328  
APR_EOF
;

330  
APR_SUCCESS
;

331 
	}
}

333 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dîr
(
≠r_fûe_t
 **
thefûe
,

334 
≠r_öt32_t
 
Êags
,

335 
≠r_poﬁ_t
 *
poﬁ
)

337 
fd
 = 
STDERR_FILENO
;

339  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_WRITE
, 
poﬁ
);

340 
	}
}

342 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dout
(
≠r_fûe_t
 **
thefûe
,

343 
≠r_öt32_t
 
Êags
,

344 
≠r_poﬁ_t
 *
poﬁ
)

346 
fd
 = 
STDOUT_FILENO
;

348  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_WRITE
, 
poﬁ
);

349 
	}
}

351 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dö
(
≠r_fûe_t
 **
thefûe
,

352 
≠r_öt32_t
 
Êags
,

353 
≠r_poﬁ_t
 *
poﬁ
)

355 
fd
 = 
STDIN_FILENO
;

357  
	`≠r_os_fûe_put
(
thefûe
, &
fd
, 
Êags
 | 
APR_FOPEN_READ
, 
poﬁ
);

358 
	}
}

360 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dîr
(
≠r_fûe_t
 **
thefûe
,

361 
≠r_poﬁ_t
 *
poﬁ
)

363  
	`≠r_fûe_›í_Êags_°dîr
(
thefûe
, 0, 
poﬁ
);

364 
	}
}

366 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dout
(
≠r_fûe_t
 **
thefûe
,

367 
≠r_poﬁ_t
 *
poﬁ
)

369  
	`≠r_fûe_›í_Êags_°dout
(
thefûe
, 0, 
poﬁ
);

370 
	}
}

372 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dö
(
≠r_fûe_t
 **
thefûe
,

373 
≠r_poﬁ_t
 *
poﬁ
)

375  
	`≠r_fûe_›í_Êags_°dö
(
thefûe
, 0, 
poﬁ
);

376 
	}
}

378 
	$APR_IMPLEMENT_INHERIT_SET
(
fûe
, 
Êags
, 
poﬁ
, 
≠r_unix_fûe_˛ónup
)

383 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öhîô_un£t
(
≠r_fûe_t
 *
thefûe
)

385 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_NOCLEANUP
) {

386  
APR_EINVAL
;

388 i‡(
thefûe
->
Êags
 & 
APR_INHERIT
) {

389 
Êags
;

391 i‡((
Êags
 = 
	`f˙é
(
thefûe
->
fûedes
, 
F_GETFD
)) == -1)

392  
î∫o
;

394 
Êags
 |
FD_CLOEXEC
;

395 i‡(
	`f˙é
(
thefûe
->
fûedes
, 
F_SETFD
, 
Êags
) == -1)

396  
î∫o
;

398 
thefûe
->
Êags
 &~
APR_INHERIT
;

399 
	`≠r_poﬁ_chûd_˛ónup_£t
(
thefûe
->
poﬁ
,

400 (*)
thefûe
,

401 
≠r_unix_fûe_˛ónup
,

402 
≠r_unix_chûd_fûe_˛ónup
);

404  
APR_SUCCESS
;

405 
	}
}

407 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
fûe
)

409 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_lök
(c⁄° *
‰om_∑th
,

410 c⁄° *
to_∑th
)

412 i‡(
	`lök
(
‰om_∑th
, 
to_∑th
) == -1) {

413  
î∫o
;

416  
APR_SUCCESS
;

417 
	}
}

	@file_io/unix/pipe.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_öhîô.h
"

28 #i‡
deföed
(
BEOS
)

29 #i‡!
deföed
(
BONE7
)

30 
	#BEOS_BLOCKING
 1

	)

32 
	#BEOS_BLOCKING
 0

	)

36 
≠r_°©us_t
 
	$pùeblock
(
≠r_fûe_t
 *
thïùe
)

38 #i‡!
	`deföed
(
BEOS
Ë|| !
BEOS_BLOCKING


39 
fd_Êags
;

41 
fd_Êags
 = 
	`f˙é
(
thïùe
->
fûedes
, 
F_GETFL
, 0);

42 #i‡
	`deföed
(
O_NONBLOCK
)

43 
fd_Êags
 &~
O_NONBLOCK
;

44 #ñi‡
	`deföed
(
O_NDELAY
)

45 
fd_Êags
 &~
O_NDELAY
;

46 #ñi‡
	`deföed
(
O_FNDELAY
)

47 
fd_Êags
 &~
O_FNDELAY
;

50  
APR_ENOTIMPL
;

52 i‡(
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 
fd_Êags
) == -1) {

53  
î∫o
;

57 #i‡
BEOS_BONE


58 
⁄
 = 0;

59 i‡(
	`io˘l
(
thïùe
->
fûedes
, 
FIONBIO
, &
⁄
, (on)) < 0) {

60  
î∫o
;

63  
APR_ENOTIMPL
;

68 
thïùe
->
blockög
 = 
BLK_ON
;

69  
APR_SUCCESS
;

70 
	}
}

72 
≠r_°©us_t
 
	$pùí⁄block
(
≠r_fûe_t
 *
thïùe
)

74 #i‡!
	`deföed
(
BEOS
Ë|| !
BEOS_BLOCKING


75 
fd_Êags
 = 
	`f˙é
(
thïùe
->
fûedes
, 
F_GETFL
, 0);

77 #i‡
	`deföed
(
O_NONBLOCK
)

78 
fd_Êags
 |
O_NONBLOCK
;

79 #ñi‡
	`deföed
(
O_NDELAY
)

80 
fd_Êags
 |
O_NDELAY
;

81 #ñi‡
	`deföed
(
O_FNDELAY
)

82 
fd_Êags
 |
O_FNDELAY
;

85  
APR_ENOTIMPL
;

87 i‡(
	`f˙é
(
thïùe
->
fûedes
, 
F_SETFL
, 
fd_Êags
) == -1) {

88  
î∫o
;

93 #i‡
BEOS_BONE


94 
⁄
 = 1;

95 i‡(
	`io˘l
(
thïùe
->
fûedes
, 
FIONBIO
, &
⁄
, (on)) < 0) {

96  
î∫o
;

99  
APR_ENOTIMPL
;

104 
thïùe
->
blockög
 = 
BLK_OFF
;

105  
APR_SUCCESS
;

106 
	}
}

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_£t
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 
timeout
)

110 i‡(
thïùe
->
is_pùe
 == 1) {

111 
thïùe
->
timeout
 =Åimeout;

112 i‡(
timeout
 >= 0) {

113 i‡(
thïùe
->
blockög
 !
BLK_OFF
) {

114  
	`pùí⁄block
(
thïùe
);

118 i‡(
thïùe
->
blockög
 !
BLK_ON
) {

119  
	`pùeblock
(
thïùe
);

122  
APR_SUCCESS
;

124  
APR_EINVAL
;

125 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_gë
(
≠r_fûe_t
 *
thïùe
, 
≠r_öãrvÆ_time_t
 *
timeout
)

129 i‡(
thïùe
->
is_pùe
 == 1) {

130 *
timeout
 = 
thïùe
->timeout;

131  
APR_SUCCESS
;

133  
APR_EINVAL
;

134 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put_ex
(
≠r_fûe_t
 **
fûe
,

137 
≠r_os_fûe_t
 *
thefûe
,

138 
ªgi°î_˛ónup
,

139 
≠r_poﬁ_t
 *
poﬁ
)

141 *
dafûe
 = 
thefûe
;

143 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

144 (*
fûe
)->
poﬁ
 =Öool;

145 (*
fûe
)->
eof_hô
 = 0;

146 (*
fûe
)->
is_pùe
 = 1;

147 (*
fûe
)->
blockög
 = 
BLK_UNKNOWN
;

148 (*
fûe
)->
timeout
 = -1;

149 (*
fûe
)->
ungëch¨
 = -1;

150 (*
fûe
)->
fûedes
 = *
dafûe
;

151 i‡(!
ªgi°î_˛ónup
) {

152 (*
fûe
)->
Êags
 = 
APR_FOPEN_NOCLEANUP
;

154 (*
fûe
)->
buf„ªd
 = 0;

155 #i‡
APR_HAS_THREADS


156 (*
fûe
)->
thlock
 = 
NULL
;

158 i‡(
ªgi°î_˛ónup
) {

159 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
fûe
)->
poﬁ
, (*)(*file),

160 
≠r_unix_fûe_˛ónup
,

161 
≠r_poﬁ_˛ónup_nuŒ
);

163 #i‚de‡
WAITIO_USES_POLL


167 (*
fûe
)->
pﬁl£t
 = 
NULL
;

169  
APR_SUCCESS
;

170 
	}
}

172 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put
(
≠r_fûe_t
 **
fûe
,

173 
≠r_os_fûe_t
 *
thefûe
,

174 
≠r_poﬁ_t
 *
poﬁ
)

176  
	`≠r_os_pùe_put_ex
(
fûe
, 
thefûe
, 0, 
poﬁ
);

177 
	}
}

179 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã
(
≠r_fûe_t
 **
ö
,á¥_fûe_à**
out
, 
≠r_poﬁ_t
 *
poﬁ
)

181 
fûedes
[2];

183 i‡(
	`pùe
(
fûedes
) == -1) {

184  
î∫o
;

187 (*
ö
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

188 (*
ö
)->
poﬁ
 =Öool;

189 (*
ö
)->
fûedes
 = filedes[0];

190 (*
ö
)->
is_pùe
 = 1;

191 (*
ö
)->
‚ame
 = 
NULL
;

192 (*
ö
)->
buf„ªd
 = 0;

193 (*
ö
)->
blockög
 = 
BLK_ON
;

194 (*
ö
)->
timeout
 = -1;

195 (*
ö
)->
ungëch¨
 = -1;

196 (*
ö
)->
Êags
 = 
APR_INHERIT
;

197 #i‡
APR_HAS_THREADS


198 (*
ö
)->
thlock
 = 
NULL
;

200 #i‚de‡
WAITIO_USES_POLL


201 (*
ö
)->
pﬁl£t
 = 
NULL
;

203 (*
out
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

204 (*
out
)->
poﬁ
 =Öool;

205 (*
out
)->
fûedes
 = filedes[1];

206 (*
out
)->
is_pùe
 = 1;

207 (*
out
)->
‚ame
 = 
NULL
;

208 (*
out
)->
buf„ªd
 = 0;

209 (*
out
)->
blockög
 = 
BLK_ON
;

210 (*
out
)->
Êags
 = 
APR_INHERIT
;

211 (*
out
)->
timeout
 = -1;

212 #i‡
APR_HAS_THREADS


213 (*
out
)->
thlock
 = 
NULL
;

215 #i‚de‡
WAITIO_USES_POLL


216 (*
out
)->
pﬁl£t
 = 
NULL
;

218 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
ö
)->
poﬁ
, (*)(*ö), 
≠r_unix_fûe_˛ónup
,

219 
≠r_poﬁ_˛ónup_nuŒ
);

220 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
out
)->
poﬁ
, (*)(*out), 
≠r_unix_fûe_˛ónup
,

221 
≠r_poﬁ_˛ónup_nuŒ
);

222  
APR_SUCCESS
;

223 
	}
}

225 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã_ex
(
≠r_fûe_t
 **
ö
,

226 
≠r_fûe_t
 **
out
,

227 
≠r_öt32_t
 
blockög
,

228 
≠r_poﬁ_t
 *
poﬁ
)

230 
≠r_°©us_t
 
°©us
;

232 i‡((
°©us
 = 
	`≠r_fûe_pùe_¸óã
(
ö
, 
out
, 
poﬁ
)Ë!
APR_SUCCESS
)

233  
°©us
;

235 
blockög
) {

236 
APR_FULL_BLOCK
:

238 
APR_READ_BLOCK
:

239 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

241 
APR_WRITE_BLOCK
:

242 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

245 
	`≠r_fûe_pùe_timeout_£t
(*
out
, 0);

246 
	`≠r_fûe_pùe_timeout_£t
(*
ö
, 0);

249  
APR_SUCCESS
;

250 
	}
}

252 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_«medpùe_¸óã
(c⁄° *
fûíame
,

253 
≠r_fûïîms_t
 
≥rm
, 
≠r_poﬁ_t
 *
poﬁ
)

255 
mode_t
 
mode
 = 
	`≠r_unix_≥rms2mode
(
≥rm
);

257 i‡(
	`mkfifo
(
fûíame
, 
mode
) == -1) {

258  
î∫o
;

260  
APR_SUCCESS
;

261 
	}
}

	@file_io/unix/readwrite.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_thªad_muãx.h
"

20 
	~"≠r_suµ‹t.h
"

24 #i‡!
deföed
(
BEOS_R5
)

25 
	#USE_WAIT_FOR_IO


	)

28 
≠r_°©us_t
 
	$fûe_ªad_buf„ªd
(
≠r_fûe_t
 *
thefûe
, *
buf
,

29 
≠r_size_t
 *
nbyãs
)

31 
≠r_ssize_t
 
rv
;

32 *
pos
 = (*)
buf
;

33 
≠r_uöt64_t
 
blocksize
;

34 
≠r_uöt64_t
 
size
 = *
nbyãs
;

36 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

37 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

38 i‡(
rv
) {

39  
rv
;

41 
thefûe
->
buÂos
 = 0;

42 
thefûe
->
dúe˘i⁄
 = 0;

43 
thefûe
->
d©aRód
 = 0;

46 
rv
 = 0;

47 i‡(
thefûe
->
ungëch¨
 != -1) {

48 *
pos
 = ()
thefûe
->
ungëch¨
;

49 ++
pos
;

50 --
size
;

51 
thefûe
->
ungëch¨
 = -1;

53 
rv
 =0 && 
size
 > 0) {

54 i‡(
thefûe
->
buÂos
 >thefûe->
d©aRód
) {

55 
byã§ód
 = 
	`ªad
(
thefûe
->
fûedes
,Åhefûe->
buf„r
,

56 
thefûe
->
bufsize
);

57 i‡(
byã§ód
 == 0) {

58 
thefûe
->
eof_hô
 = 
TRUE
;

59 
rv
 = 
APR_EOF
;

62 i‡(
byã§ód
 == -1) {

63 
rv
 = 
î∫o
;

66 
thefûe
->
d©aRód
 = 
byã§ód
;

67 
thefûe
->
fûePå
 +thefûe->
d©aRód
;

68 
thefûe
->
buÂos
 = 0;

71 
blocksize
 = 
size
 > 
thefûe
->
d©aRód
 -Åhefûe->
buÂos
 ?Åhefile->dataRead -Åhefile->bufpos : size;

72 
	`mem˝y
(
pos
, 
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
blocksize
);

73 
thefûe
->
buÂos
 +
blocksize
;

74 
pos
 +
blocksize
;

75 
size
 -
blocksize
;

78 *
nbyãs
 = 
pos
 - (*)
buf
;

79 i‡(*
nbyãs
) {

80 
rv
 = 0;

82  
rv
;

83 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªad
(
≠r_fûe_t
 *
thefûe
, *
buf
, 
≠r_size_t
 *
nbyãs
)

87 
≠r_ssize_t
 
rv
;

88 
≠r_size_t
 
byãs_ªad
;

90 i‡(*
nbyãs
 <= 0) {

91 *
nbyãs
 = 0;

92  
APR_SUCCESS
;

95 i‡(
thefûe
->
buf„ªd
) {

96 
	`fûe_lock
(
thefûe
);

97 
rv
 = 
	`fûe_ªad_buf„ªd
(
thefûe
, 
buf
, 
nbyãs
);

98 
	`fûe_u∆ock
(
thefûe
);

99  
rv
;

102 
byãs_ªad
 = 0;

103 i‡(
thefûe
->
ungëch¨
 != -1) {

104 
byãs_ªad
 = 1;

105 *(*)
buf
 = ()
thefûe
->
ungëch¨
;

106 
buf
 = (*)buf + 1;

107 (*
nbyãs
)--;

108 
thefûe
->
ungëch¨
 = -1;

109 i‡(*
nbyãs
 == 0) {

110 *
nbyãs
 = 
byãs_ªad
;

111  
APR_SUCCESS
;

116 
rv
 = 
	`ªad
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
);

117 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

118 #ifde‡
USE_WAIT_FOR_IO


119 i‡(
rv
 == -1 &&

120 (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) &&

121 
thefûe
->
timeout
 != 0) {

122 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
thefûe
, 
NULL
, 1);

123 i‡(
¨v
 !
APR_SUCCESS
) {

124 *
nbyãs
 = 
byãs_ªad
;

125  
¨v
;

129 
rv
 = 
	`ªad
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
);

130 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

134 *
nbyãs
 = 
byãs_ªad
;

135 i‡(
rv
 == 0) {

136 
thefûe
->
eof_hô
 = 
TRUE
;

137  
APR_EOF
;

139 i‡(
rv
 > 0) {

140 *
nbyãs
 +
rv
;

141  
APR_SUCCESS
;

143  
î∫o
;

145 
	}
}

147 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôe
(
≠r_fûe_t
 *
thefûe
, c⁄° *
buf
, 
≠r_size_t
 *
nbyãs
)

149 
≠r_size_t
 
rv
;

151 i‡(
thefûe
->
buf„ªd
) {

152 *
pos
 = (*)
buf
;

153 
blocksize
;

154 
size
 = *
nbyãs
;

156 
	`fûe_lock
(
thefûe
);

158 i‡–
thefûe
->
dúe˘i⁄
 == 0 ) {

162 
≠r_öt64_t
 
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

163 i‡(
off£t
 !
thefûe
->
fûePå
)

164 
	`l£ek
(
thefûe
->
fûedes
, 
off£t
, 
SEEK_SET
);

165 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

166 
thefûe
->
dúe˘i⁄
 = 1;

169 
rv
 = 0;

170 
rv
 =0 && 
size
 > 0) {

171 i‡(
thefûe
->
buÂos
 =thefûe->
bufsize
)

172 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

174 
blocksize
 = 
size
 > 
thefûe
->
bufsize
 -Åhefûe->
buÂos
 ?

175 
thefûe
->
bufsize
 -Åhefûe->
buÂos
 : 
size
;

176 
	`mem˝y
(
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
pos
, 
blocksize
);

177 
thefûe
->
buÂos
 +
blocksize
;

178 
pos
 +
blocksize
;

179 
size
 -
blocksize
;

182 
	`fûe_u∆ock
(
thefûe
);

184  
rv
;

188 
rv
 = 
	`wrôe
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
);

189 } 
rv
 =(
≠r_size_t
)-1 && 
î∫o
 =
EINTR
);

190 #ifde‡
USE_WAIT_FOR_IO


191 i‡(
rv
 =(
≠r_size_t
)-1 &&

192 (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) &&

193 
thefûe
->
timeout
 != 0) {

194 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
thefûe
, 
NULL
, 0);

195 i‡(
¨v
 !
APR_SUCCESS
) {

196 *
nbyãs
 = 0;

197  
¨v
;

202 
rv
 = 
	`wrôe
(
thefûe
->
fûedes
, 
buf
, *
nbyãs
);

203 } 
rv
 =(
≠r_size_t
)-1 && 
î∫o
 =
EINTR
);

204 i‡(
rv
 =(
≠r_size_t
)-1 &&

205 (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)) {

206 *
nbyãs
 /= 2;

217 i‡(
rv
 =(
≠r_size_t
)-1) {

218 (*
nbyãs
) = 0;

219  
î∫o
;

221 *
nbyãs
 = 
rv
;

222  
APR_SUCCESS
;

224 
	}
}

226 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôev
(
≠r_fûe_t
 *
thefûe
, c⁄° 
iovec
 *
vec
,

227 
≠r_size_t
 
nvec
,á¥_size_à*
nbyãs
)

229 #ifde‡
HAVE_WRITEV


230 
≠r_°©us_t
 
rv
;

231 
≠r_ssize_t
 
byãs
;

233 i‡(
thefûe
->
buf„ªd
) {

234 
	`fûe_lock
(
thefûe
);

236 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

237 i‡(
rv
 !
APR_SUCCESS
) {

238 
	`fûe_u∆ock
(
thefûe
);

239  
rv
;

241 i‡(
thefûe
->
dúe˘i⁄
 == 0) {

245 
≠r_öt64_t
 
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +

246 
thefûe
->
buÂos
;

247 i‡(
off£t
 !
thefûe
->
fûePå
)

248 
	`l£ek
(
thefûe
->
fûedes
, 
off£t
, 
SEEK_SET
);

249 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

252 
	`fûe_u∆ock
(
thefûe
);

255 i‡((
byãs
 = 
	`wrôev
(
thefûe
->
fûedes
, 
vec
, 
nvec
)) < 0) {

256 *
nbyãs
 = 0;

257 
rv
 = 
î∫o
;

260 *
nbyãs
 = 
byãs
;

261 
rv
 = 
APR_SUCCESS
;

263  
rv
;

279 *
nbyãs
 = 
vec
[0].
iov_Àn
;

280  
	`≠r_fûe_wrôe
(
thefûe
, 
vec
[0].
iov_ba£
, 
nbyãs
);

282 
	}
}

284 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_putc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

286 
≠r_size_t
 
nbyãs
 = 1;

288  
	`≠r_fûe_wrôe
(
thefûe
, &
ch
, &
nbyãs
);

289 
	}
}

291 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ungëc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

293 
thefûe
->
ungëch¨
 = ()
ch
;

294  
APR_SUCCESS
;

295 
	}
}

297 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gëc
(*
ch
, 
≠r_fûe_t
 *
thefûe
)

299 
≠r_size_t
 
nbyãs
 = 1;

301  
	`≠r_fûe_ªad
(
thefûe
, 
ch
, &
nbyãs
);

302 
	}
}

304 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_puts
(c⁄° *
°r
, 
≠r_fûe_t
 *
thefûe
)

306  
	`≠r_fûe_wrôe_fuŒ
(
thefûe
, 
°r
, 
	`°æí
(°r), 
NULL
);

307 
	}
}

309 
≠r_°©us_t
 
	$≠r_fûe_Êush_locked
(
≠r_fûe_t
 *
thefûe
)

311 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

313 i‡(
thefûe
->
dúe˘i⁄
 =1 &&Åhefûe->
buÂos
) {

314 
≠r_ssize_t
 
wrôãn
 = 0, 
ªt
;

317 
ªt
 = 
	`wrôe
(
thefûe
->
fûedes
,Åhefûe->
buf„r
 + 
wrôãn
,

318 
thefûe
->
buÂos
 - 
wrôãn
);

319 i‡(
ªt
 > 0)

320 
wrôãn
 +
ªt
;

321 } 
wrôãn
 < 
thefûe
->
buÂos
 &&

322 (
ªt
 > 0 || (ªà=-1 && 
î∫o
 =
EINTR
)));

323 i‡(
ªt
 == -1) {

324 
rv
 = 
î∫o
;

326 
thefûe
->
fûePå
 +
wrôãn
;

327 
thefûe
->
buÂos
 = 0;

331  
rv
;

332 
	}
}

334 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_Êush
(
≠r_fûe_t
 *
thefûe
)

336 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

338 i‡(
thefûe
->
buf„ªd
) {

339 
	`fûe_lock
(
thefûe
);

340 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

341 
	`fûe_u∆ock
(
thefûe
);

346  
rv
;

347 
	}
}

349 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_sync
(
≠r_fûe_t
 *
thefûe
)

351 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

353 
	`fûe_lock
(
thefûe
);

355 i‡(
thefûe
->
buf„ªd
) {

356 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

358 i‡(
rv
 !
APR_SUCCESS
) {

359 
	`fûe_u∆ock
(
thefûe
);

360  
rv
;

364 i‡(
	`fsync
(
thefûe
->
fûedes
)) {

365 
rv
 = 
	`≠r_gë_os_îr‹
();

368 
	`fûe_u∆ock
(
thefûe
);

370  
rv
;

371 
	}
}

373 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_d©async
(
≠r_fûe_t
 *
thefûe
)

375 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

377 
	`fûe_lock
(
thefûe
);

379 i‡(
thefûe
->
buf„ªd
) {

380 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

382 i‡(
rv
 !
APR_SUCCESS
) {

383 
	`fûe_u∆ock
(
thefûe
);

384  
rv
;

388 #ifde‡
HAVE_FDATASYNC


389 i‡(
	`fd©async
(
thefûe
->
fûedes
)) {

391 i‡(
	`fsync
(
thefûe
->
fûedes
)) {

393 
rv
 = 
	`≠r_gë_os_îr‹
();

396 
	`fûe_u∆ock
(
thefûe
);

398  
rv
;

399 
	}
}

401 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gës
(*
°r
, 
Àn
, 
≠r_fûe_t
 *
thefûe
)

403 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

404 
≠r_size_t
 
nbyãs
;

405 c⁄° *
°r_°¨t
 = 
°r
;

406 *
föÆ
 = 
°r
 + 
Àn
 - 1;

408 i‡(
Àn
 <= 1) {

411  
APR_SUCCESS
;

417 i‡(
thefûe
->
buf„ªd
) {

418 
	`fûe_lock
(
thefûe
);

420 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

421 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

422 i‡(
rv
) {

423 
	`fûe_u∆ock
(
thefûe
);

424  
rv
;

427 
thefûe
->
dúe˘i⁄
 = 0;

428 
thefûe
->
buÂos
 = 0;

429 
thefûe
->
d©aRód
 = 0;

432 
°r
 < 
föÆ
) {

434 i‡(
thefûe
->
buÂos
 <Åhefûe->
d©aRód
 &&

435 
thefûe
->
ungëch¨
 == -1) {

436 *
°r
 = 
thefûe
->
buf„r
[thefûe->
buÂos
++];

439 
nbyãs
 = 1;

440 
rv
 = 
	`fûe_ªad_buf„ªd
(
thefûe
, 
°r
, &
nbyãs
);

441 i‡(
rv
 !
APR_SUCCESS
) {

445 i‡(*
°r
 == '\n') {

446 ++
°r
;

449 ++
°r
;

451 
	`fûe_u∆ock
(
thefûe
);

454 
°r
 < 
föÆ
) {

455 
nbyãs
 = 1;

456 
rv
 = 
	`≠r_fûe_ªad
(
thefûe
, 
°r
, &
nbyãs
);

457 i‡(
rv
 !
APR_SUCCESS
) {

460 i‡(*
°r
 == '\n') {

461 ++
°r
;

464 ++
°r
;

471 *
°r
 = '\0';

472 i‡(
°r
 > 
°r_°¨t
) {

476  
APR_SUCCESS
;

478  
rv
;

479 
	}
}

481 
	s≠r_fûe_¥ötf_d©a
 {

482 
≠r_vf‹m©ãr_buff_t
 
	mvbuff
;

483 
≠r_fûe_t
 *
	mÂå
;

484 *
	mbuf
;

487 
	$fûe_¥ötf_Êush
(
≠r_vf‹m©ãr_buff_t
 *
buff
)

489 
≠r_fûe_¥ötf_d©a
 *
d©a
 = (≠r_fûe_¥ötf_d©®*)
buff
;

491 i‡(
	`≠r_fûe_wrôe_fuŒ
(
d©a
->
Âå
, d©a->
buf
,

492 
d©a
->
vbuff
.
cuΩos
 - d©a->
buf
, 
NULL
)) {

496 
d©a
->
vbuff
.
cuΩos
 = d©a->
buf
;

498 
	}
}

500 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_fûe_¥ötf
(
≠r_fûe_t
 *
Âå
,

501 c⁄° *
f‹m©
, ...)

503 
≠r_fûe_¥ötf_d©a
 
d©a
;

504 
va_li°
 
≠
;

505 
cou¡
;

508 
d©a
.
buf
 = 
	`mÆloc
(
HUGE_STRING_LEN
);

509 i‡(
d©a
.
buf
 =
NULL
) {

512 
d©a
.
vbuff
.
cuΩos
 = d©a.
buf
;

513 
d©a
.
vbuff
.
ídpos
 = d©a.
buf
 + 
HUGE_STRING_LEN
;

514 
d©a
.
Âå
 = fptr;

515 
	`va_°¨t
(
≠
, 
f‹m©
);

516 
cou¡
 = 
	`≠r_vf‹m©ãr
(
fûe_¥ötf_Êush
,

517 (
≠r_vf‹m©ãr_buff_t
 *)&
d©a
, 
f‹m©
, 
≠
);

519 i‡(
cou¡
 >0Ë
	`fûe_¥ötf_Êush
((
≠r_vf‹m©ãr_buff_t
 *)&
d©a
);

521 
	`va_íd
(
≠
);

523 
	`‰ì
(
d©a
.
buf
);

525  
cou¡
;

526 
	}
}

	@file_io/unix/seek.c

17 
	~"≠r_¨ch_fûe_io.h
"

19 
≠r_°©us_t
 
	$£çå
(
≠r_fûe_t
 *
thefûe
, 
≠r_off_t
 
pos
 )

21 
≠r_off_t
 
√wbuÂos
;

22 
≠r_°©us_t
 
rv
;

24 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

25 
rv
 = 
	`≠r_fûe_Êush_locked
(
thefûe
);

26 i‡(
rv
) {

27  
rv
;

29 
thefûe
->
buÂos
 =Åhefûe->
dúe˘i⁄
 =Åhefûe->
d©aRód
 = 0;

32 
√wbuÂos
 = 
pos
 - (
thefûe
->
fûePå
 -Åhefûe->
d©aRód
);

33 i‡(
√wbuÂos
 >0 &&ÇewbuÂo†<
thefûe
->
d©aRód
) {

34 
thefûe
->
buÂos
 = 
√wbuÂos
;

35 
rv
 = 
APR_SUCCESS
;

38 i‡(
	`l£ek
(
thefûe
->
fûedes
, 
pos
, 
SEEK_SET
) != -1) {

39 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

40 
thefûe
->
fûePå
 = 
pos
;

41 
rv
 = 
APR_SUCCESS
;

44 
rv
 = 
î∫o
;

48  
rv
;

49 
	}
}

52 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£ek
(
≠r_fûe_t
 *
thefûe
, 
≠r_£ek_whîe_t
 
whîe
, 
≠r_off_t
 *
off£t
)

54 
≠r_off_t
 
rv
;

56 
thefûe
->
eof_hô
 = 0;

58 i‡(
thefûe
->
buf„ªd
) {

59 
rc
 = 
EINVAL
;

60 
≠r_föfo_t
 
föfo
;

62 
	`fûe_lock
(
thefûe
);

64 
whîe
) {

65 
APR_SET
:

66 
rc
 = 
	`£çå
(
thefûe
, *
off£t
);

69 
APR_CUR
:

70 
rc
 = 
	`£çå
(
thefûe
,Åhefûe->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
 + *
off£t
);

73 
APR_END
:

74 
rc
 = 
	`≠r_fûe_öfo_gë_locked
(&
föfo
, 
APR_FINFO_SIZE
, 
thefûe
);

75 i‡(
rc
 =
APR_SUCCESS
)

76 
rc
 = 
	`£çå
(
thefûe
, 
föfo
.
size
 + *
off£t
);

80 *
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

82 
	`fûe_u∆ock
(
thefûe
);

84  
rc
;

87 
rv
 = 
	`l£ek
(
thefûe
->
fûedes
, *
off£t
, 
whîe
);

88 i‡(
rv
 == -1) {

89 *
off£t
 = -1;

90  
î∫o
;

93 *
off£t
 = 
rv
;

94  
APR_SUCCESS
;

97 
	}
}

99 
≠r_°©us_t
 
	$≠r_fûe_åunc
(
≠r_fûe_t
 *
Â
, 
≠r_off_t
 
off£t
)

101 i‡(
Â
->
buf„ªd
) {

102 
rc
 = 0;

103 
	`fûe_lock
(
Â
);

104 i‡(
Â
->
dúe˘i⁄
 =1 && fp->
buÂos
 != 0) {

105 
≠r_off_t
 
Àn
 = 
Â
->
fûePå
 + fp->
buÂos
;

106 i‡(
off£t
 < 
Àn
) {

110 
≠r_off_t
 
off
 = 
Àn
 - 
off£t
;

111 i‡(
off
 >0 && of‡<
Â
->
buÂos
)

112 
Â
->
buÂos
 = fp->buÂo†- (
size_t
)
off
;

114 
Â
->
buÂos
 = 0;

116 
rc
 = 
	`≠r_fûe_Êush_locked
(
Â
);

118 
Â
->
buÂos
 = fp->
dúe˘i⁄
 = fp->
d©aRód
 = 0;

120 
	`fûe_u∆ock
(
Â
);

121 i‡(
rc
) {

122  
rc
;

125 i‡(
	`·runˇã
(
Â
->
fûedes
, 
off£t
) == -1) {

126  
î∫o
;

128  
	`≠r_fûe_£ek
(
Â
, 
APR_SET
, &
off£t
);

129 
	}
}

	@file_io/unix/tempdir.c

16 
	~"≠r_¥iv©e.h
"

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_ív.h
"

24 
	$ã°_ãmpdú
(c⁄° *
ãmp_dú
, 
≠r_poﬁ_t
 *
p
)

26 
≠r_fûe_t
 *
dummy_fûe
;

27 *
∑th
 = 
	`≠r_p°rˇt
(
p
, 
ãmp_dú
, "/≠r-tmp.XXXXXX", 
NULL
);

29 i‡(
	`≠r_fûe_mkãmp
(&
dummy_fûe
, 
∑th
, 0, 
p
Ë=
APR_SUCCESS
) {

30 i‡(
	`≠r_fûe_putc
('!', 
dummy_fûe
Ë=
APR_SUCCESS
) {

31 i‡(
	`≠r_fûe_˛o£
(
dummy_fûe
Ë=
APR_SUCCESS
) {

37 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ãmp_dú_gë
(c⁄° **
ãmp_dú
,

41 
≠r_poﬁ_t
 *
p
)

43 
≠r_°©us_t
 
≠r_îr
;

44 c⁄° *
åy_dús
[] = { "/tmp", "/usr/tmp", "/var/tmp" };

45 c⁄° *
åy_ívs
[] = { "TMPDIR", "TMP", "TEMP"};

46 c⁄° *
dú
;

47 *
cwd
;

48 
i
;

69 
i
 = 0; i < ((
åy_ívs
) / (const *)); i++) {

70 *
vÆue
;

71 
≠r_îr
 = 
	`≠r_ív_gë
(&
vÆue
, 
åy_ívs
[
i
], 
p
);

72 i‡((
≠r_îr
 =
APR_SUCCESS
Ë&& 
vÆue
) {

73 
≠r_size_t
 
Àn
 = 
	`°æí
(
vÆue
);

74 i‡(
Àn
 && (À¿< 
APR_PATH_MAX
Ë&& 
	`ã°_ãmpdú
(
vÆue
, 
p
)) {

75 
dú
 = 
vÆue
;

76 
íd
;

81 #ifde‡
WIN32


83 i‡(
	`ã°_ãmpdú
("C:\\TEMP", 
p
)) {

84 
dú
 = "C:\\TEMP";

85 
íd
;

88 #ifde‡
NETWARE


90 i‡(
	`ã°_ãmpdú
("SYS:/TMP", 
p
)) {

91 
dú
 = "SYS:/TMP";

92 
íd
;

97 
i
 = 0; i < ((
åy_dús
) / (const *)); i++) {

98 i‡(
	`ã°_ãmpdú
(
åy_dús
[
i
], 
p
)) {

99 
dú
 = 
åy_dús
[
i
];

100 
íd
;

104 #ifde‡
P_tmpdú


109 i‡(
	`ã°_ãmpdú
(
P_tmpdú
, 
p
)) {

110 
dú
 = 
P_tmpdú
;

111 
íd
;

116 i‡(
APR_SUCCESS
 =
	`≠r_fûï©h_gë
(&
cwd
, 
APR_FILEPATH_NATIVE
, 
p
)) {

117 i‡(
	`ã°_ãmpdú
(
cwd
, 
p
)) {

118 
dú
 = 
cwd
;

119 
íd
;

124  
APR_EGENERAL
;

126 
íd
:

127 *
ãmp_dú
 = 
	`≠r_p°rdup
(
p
, 
dú
);

128  
APR_SUCCESS
;

129 
	}
}

	@file_io/win32/buffer.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_thªad_muãx.h
"

20 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_buf„r_£t
(
≠r_fûe_t
 *
fûe
,

21 * 
buf„r
,

22 
≠r_size_t
 
bufsize
)

24 
≠r_°©us_t
 
rv
;

26 
	`≠r_thªad_muãx_lock
(
fûe
->
muãx
);

28 if(
fûe
->
buf„ªd
) {

30 
rv
 = 
	`≠r_fûe_Êush
(
fûe
);

31 i‡(
rv
 !
APR_SUCCESS
) {

32 
	`≠r_thªad_muãx_u∆ock
(
fûe
->
muãx
);

33  
rv
;

37 
fûe
->
buf„r
 = buffer;

38 
fûe
->
bufsize
 = bufsize;

39 
fûe
->
buf„ªd
 = 1;

40 
fûe
->
buÂos
 = 0;

41 
fûe
->
dúe˘i⁄
 = 0;

42 
fûe
->
d©aRód
 = 0;

44 i‡(
fûe
->
bufsize
 == 0) {

48 
fûe
->
buf„ªd
 = 0;

51 
	`≠r_thªad_muãx_u∆ock
(
fûe
->
muãx
);

53  
APR_SUCCESS
;

54 
	}
}

56 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_fûe_buf„r_size_gë
(
≠r_fûe_t
 *
fûe
)

58  
fûe
->
bufsize
;

59 
	}
}

	@file_io/win32/dir.c

17 
	~"≠r.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¨ch_©ime.h
"

24 #i‡
APR_HAVE_ERRNO_H


25 
	~<î∫o.h
>

27 #i‡
APR_HAVE_STRING_H


28 
	~<°rög.h
>

30 #i‡
APR_HAVE_DIRENT_H


31 
	~<dúít.h
>

33 #ifde‡
HAVE_SYS_STAT_H


34 
	~<sys/°©.h
>

38 
≠r_°©us_t
 
	$dú_˛ónup
(*
thedú
)

40 
≠r_dú_t
 *
dú
 = 
thedú
;

41 i‡(
dú
->
dúh™d
 !
INVALID_HANDLE_VALUE
 && !
	`FödClo£
(dir->dirhand)) {

42  
	`≠r_gë_os_îr‹
();

44 
dú
->
dúh™d
 = 
INVALID_HANDLE_VALUE
;

45  
APR_SUCCESS
;

46 
	}
}

48 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_›í
(
≠r_dú_t
 **
√w
, c⁄° *
dú«me
,

49 
≠r_poﬁ_t
 *
poﬁ
)

51 
≠r_°©us_t
 
rv
;

53 
≠r_size_t
 
Àn
 = 
	`°æí
(
dú«me
);

54 (*
√w
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_dú_t
));

58 (*
√w
)->
dú«me
 = 
	`≠r_∑Œoc
(
poﬁ
, 
Àn
 + 3);

59 
	`mem˝y
((*
√w
)->
dú«me
, dú«me, 
Àn
);

60 i‡(
Àn
 && (*
√w
)->
dú«me
[len - 1] != '/') {

61 (*
√w
)->
dú«me
[
Àn
++] = '/';

63 (*
√w
)->
dú«me
[
Àn
++] = '\0';

64 (*
√w
)->
dú«me
[
Àn
] = '\0';

66 #i‡
APR_HAS_UNICODE_FS


67 
IF_WIN_OS_IS_UNICODE


71 (*
√w
)->
w
.
íåy
 = 
	`≠r_pˇŒoc
(
poﬁ
, (
WIN32_FIND_DATAW
));

72 (*
√w
)->
«me
 = 
	`≠r_pˇŒoc
(
poﬁ
, 
APR_FILE_MAX
 * 3 + 1);

75 #i‡
APR_HAS_ANSI_FS


76 
ELSE_WIN_OS_IS_ANSI


84 i‡(
Àn
 >
APR_PATH_MAX
) {

85 (*
√w
Ë
NULL
;

86  
APR_ENAMETOOLONG
;

88 (*
√w
)->
n
.
íåy
 = 
	`≠r_pˇŒoc
(
poﬁ
, (
WIN32_FIND_DATAW
));

91 (*
√w
)->
roŸÀn
 = 
Àn
 - 1;

92 (*
√w
)->
poﬁ
 =Öool;

93 (*
√w
)->
dúh™d
 = 
INVALID_HANDLE_VALUE
;

94 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*√w), 
dú_˛ónup
,

95 
≠r_poﬁ_˛ónup_nuŒ
);

97 
rv
 = 
	`≠r_dú_ªad
(
NULL
, 0, *
√w
);

98 i‡(
rv
 !
APR_SUCCESS
) {

99 
	`dú_˛ónup
(*
√w
);

100 *
√w
 = 
NULL
;

103  
rv
;

104 
	}
}

106 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_˛o£
(
≠r_dú_t
 *
dú
)

108 
	`≠r_poﬁ_˛ónup_kûl
(
dú
->
poﬁ
, dú, 
dú_˛ónup
);

109  
	`dú_˛ónup
(
dú
);

110 
	}
}

112 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªad
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

113 
≠r_dú_t
 *
thedú
)

115 
≠r_°©us_t
 
rv
;

116 *
‚ame
;

120 #i‡
APR_HAS_UNICODE_FS


121 
≠r_wch¨_t
 
wdú«me
[
APR_PATH_MAX
];

122 
≠r_wch¨_t
 *
eos
 = 
NULL
;

123 
IF_WIN_OS_IS_UNICODE


128 i‡(
thedú
->
dúh™d
 =
INVALID_HANDLE_VALUE
)

130 
≠r_°©us_t
 
rv
;

131 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
wdú«me
, (wdirname)

132 / (
≠r_wch¨_t
),

133 
thedú
->
dú«me
))) {

134  
rv
;

136 
eos
 = 
	`wcschr
(
wdú«me
, '\0');

137 
eos
[0] = '*';

138 
eos
[1] = '\0';

139 
thedú
->
dúh™d
 = 
	`FödFú°FûeW
(
wdú«me
,Åhedú->
w
.
íåy
);

140 
eos
[0] = '\0';

141 i‡(
thedú
->
dúh™d
 =
INVALID_HANDLE_VALUE
) {

142  
	`≠r_gë_os_îr‹
();

144 
thedú
->
bof
 = 1;

145  
APR_SUCCESS
;

147 i‡(
thedú
->
bof
) {

152 
thedú
->
bof
 = 0;

154 i‡(!
	`FödNextFûeW
(
thedú
->
dúh™d
,Åhedú->
w
.
íåy
)) {

155  
	`≠r_gë_os_îr‹
();

158 
thedú
->
roŸÀn
 &&

159 
thedú
->
roŸÀn
 + 
	`wc¶í
—hedú->
w
.
íåy
->
cFûeName
Ë>
APR_PATH_MAX
)

161 i‡(!
	`FödNextFûeW
(
thedú
->
dúh™d
,Åhedú->
w
.
íåy
)) {

162  
	`≠r_gë_os_îr‹
();

165 i‡((
rv
 = 
	`unicode_to_utf8_∑th
(
thedú
->
«me
, 
APR_FILE_MAX
 * 3 + 1,

166 
thedú
->
w
.
íåy
->
cFûeName
)))

167  
rv
;

168 
‚ame
 = 
thedú
->
«me
;

171 #i‡
APR_HAS_ANSI_FS


172 
ELSE_WIN_OS_IS_ANSI


177 i‡(
thedú
->
dúh™d
 =
INVALID_HANDLE_VALUE
) {

179 *
e›
 = 
	`°rchr
(
thedú
->
dú«me
, '\0');

180 
e›
[0] = '*';

181 
e›
[1] = '\0';

182 
thedú
->
dúh™d
 = 
	`FödFú°FûeA
—hedú->
dú«me
,

183 
thedú
->
n
.
íåy
);

184 
e›
[0] = '\0';

185 i‡(
thedú
->
dúh™d
 =
INVALID_HANDLE_VALUE
) {

186  
	`≠r_gë_os_îr‹
();

188 
thedú
->
bof
 = 1;

189  
APR_SUCCESS
;

191 i‡(
thedú
->
bof
) {

196 
thedú
->
bof
 = 0;

198 i‡(!
	`FödNextFûeA
(
thedú
->
dúh™d
,Åhedú->
n
.
íåy
)) {

199  
	`≠r_gë_os_îr‹
();

201 
thedú
->
roŸÀn
 &&

202 
thedú
->
roŸÀn
 + 
	`°æí
—hedú->
n
.
íåy
->
cFûeName
Ë>
MAX_PATH
)

204 i‡(!
	`FödNextFûeA
(
thedú
->
dúh™d
,Åhedú->
n
.
íåy
)) {

205  
	`≠r_gë_os_îr‹
();

208 
‚ame
 = 
thedú
->
n
.
íåy
->
cFûeName
;

212 
	`fûlö_fûeöfo
(
föfo
, (
WIN32_FILE_ATTRIBUTE_DATA
 *Ë
thedú
->
w
.
íåy
,

213 0, 
w™ãd
);

214 
föfo
->
poﬁ
 = 
thedú
->pool;

216 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

217 
föfo
->
«me
 = 
‚ame
;

219 i‡(
w™ãd
 &~
föfo
->
vÆid
) {

222 #i‡
APR_HAS_UNICODE_FS


223 
IF_WIN_OS_IS_UNICODE


228 i‡(!
eos
)

229 
eos
 = 
	`wcschr
(
wdú«me
, '\0');

230 
	`wcs˝y
(
eos
, 
thedú
->
w
.
íåy
->
cFûeName
);

231 
rv
 = 
	`m‹e_föfo
(
föfo
, 
wdú«me
, 
w™ãd
, 
MORE_OF_WFSPEC
);

232 
eos
[0] = '\0';

233  
rv
;

236 #i‡
APR_HAS_ANSI_FS


237 
ELSE_WIN_OS_IS_ANSI


239 #i‡
APR_HAS_UNICODE_FS


243 *
f•ec
 = (*)
wdú«me
;

245 
f•ec
[
APR_PATH_MAX
];

247 
≠r_size_t
 
dúÀn
 = 
	`°æí
(
thedú
->
dú«me
);

248 i‡(
dúÀn
 >(
f•ec
))

249 
dúÀn
 = (
f•ec
) - 1;

250 
	`≠r_˝y°∫
(
f•ec
, 
thedú
->
dú«me
, (fspec));

251 
	`≠r_˝y°∫
(
f•ec
 + 
dúÀn
, 
‚ame
, (fspec) - dirlen);

252  
	`m‹e_föfo
(
föfo
, 
f•ec
, 
w™ãd
, 
MORE_OF_FSPEC
);

257  
APR_SUCCESS
;

258 
	}
}

260 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªwöd
(
≠r_dú_t
 *
dú
)

262 
≠r_°©us_t
 
rv
;

267 
rv
 = 
	`dú_˛ónup
(
dú
);

269 i‡(
rv
 =
APR_SUCCESS
)

270 
rv
 = 
	`≠r_dú_ªad
(
NULL
, 0, 
dú
);

272  
rv
;

273 
	}
}

275 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_make
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
,

276 
≠r_poﬁ_t
 *
poﬁ
)

278 #i‡
APR_HAS_UNICODE_FS


279 
IF_WIN_OS_IS_UNICODE


281 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

282 
≠r_°©us_t
 
rv
;

283 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
,

284 (
w∑th
Ë/ (
≠r_wch¨_t
),

285 
∑th
))) {

286  
rv
;

288 i‡(!
	`Cª©eDúe˘‹yW
(
w∑th
, 
NULL
)) {

289  
	`≠r_gë_os_îr‹
();

293 #i‡
APR_HAS_ANSI_FS


294 
ELSE_WIN_OS_IS_ANSI


295 i‡(!
	`Cª©eDúe˘‹y
(
∑th
, 
NULL
)) {

296  
	`≠r_gë_os_îr‹
();

299  
APR_SUCCESS
;

300 
	}
}

303 
≠r_°©us_t
 
	$dú_make_∑ª¡
(*
∑th
,

304 
≠r_fûïîms_t
 
≥rm
,

305 
≠r_poﬁ_t
 *
poﬁ
)

307 
≠r_°©us_t
 
rv
;

308 *
ch
 = 
	`°ºchr
(
∑th
, '\\');

309 i‡(!
ch
) {

310  
APR_ENOENT
;

313 *
ch
 = '\0';

314 
rv
 = 
	`≠r_dú_make
 (
∑th
, 
≥rm
, 
poﬁ
);

316 i‡(
	`APR_STATUS_IS_ENOENT
(
rv
)) {

317 
rv
 = 
	`dú_make_∑ª¡
(
∑th
, 
≥rm
, 
poﬁ
);

319 i‡(
rv
 =
APR_SUCCESS
) {

320 
rv
 = 
	`≠r_dú_make
 (
∑th
, 
≥rm
, 
poﬁ
);

324 *
ch
 = '\\';

325  
rv
;

326 
	}
}

328 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_make_ªcursive
(c⁄° *
∑th
,

329 
≠r_fûïîms_t
 
≥rm
,

330 
≠r_poﬁ_t
 *
poﬁ
)

332 
≠r_°©us_t
 
rv
 = 0;

334 
rv
 = 
	`≠r_dú_make
 (
∑th
, 
≥rm
, 
poﬁ
);

336 i‡(
	`APR_STATUS_IS_ENOENT
(
rv
)) {

337 *
dú
;

339 
rv
 = 
	`≠r_fûï©h_mîge
(&
dú
, "", 
∑th
, 
APR_FILEPATH_NATIVE
, 
poﬁ
);

341 i‡(
rv
 =
APR_SUCCESS
)

342 
rv
 = 
	`dú_make_∑ª¡
(
dú
, 
≥rm
, 
poﬁ
);

344 i‡(
rv
 =
APR_SUCCESS
)

345 
rv
 = 
	`≠r_dú_make
 (
dú
, 
≥rm
, 
poﬁ
);

353 i‡(
	`APR_STATUS_IS_EEXIST
(
rv
))

354  
APR_SUCCESS
;

356  
rv
;

357 
	}
}

360 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_dú_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

362 #i‡
APR_HAS_UNICODE_FS


363 
IF_WIN_OS_IS_UNICODE


365 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

366 
≠r_°©us_t
 
rv
;

367 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
,

368 (
w∑th
Ë/ (
≠r_wch¨_t
),

369 
∑th
))) {

370  
rv
;

372 i‡(!
	`RemoveDúe˘‹yW
(
w∑th
)) {

373  
	`≠r_gë_os_îr‹
();

377 #i‡
APR_HAS_ANSI_FS


378 
ELSE_WIN_OS_IS_ANSI


379 i‡(!
	`RemoveDúe˘‹y
(
∑th
)) {

380  
	`≠r_gë_os_îr‹
();

383  
APR_SUCCESS
;

384 
	}
}

386 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dú_gë
(
≠r_os_dú_t
 **
thedú
,

387 
≠r_dú_t
 *
dú
)

389 i‡(
dú
 =
NULL
) {

390  
APR_ENODIR
;

392 *
thedú
 = 
dú
->
dúh™d
;

393  
APR_SUCCESS
;

394 
	}
}

396 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_dú_put
(
≠r_dú_t
 **
dú
,

397 
≠r_os_dú_t
 *
thedú
,

398 
≠r_poﬁ_t
 *
poﬁ
)

400  
APR_ENOTIMPL
;

401 
	}
}

	@file_io/win32/filedup.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~<°rög.h
>

22 
	~"≠r_¨ch_öhîô.h
"

23 
	~<io.h
>

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,

27 
≠r_fûe_t
 *
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

29 #ifde‡
_WIN32_WCE


30  
APR_ENOTIMPL
;

32 
HANDLE
 
h¥oc
 = 
	`GëCuºítPro˚ss
();

33 
HANDLE
 
√wh™d
 = 
NULL
;

35 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
ﬁd_fûe
->
fûeh™d
,

36 
h¥oc
, &
√wh™d
, 0, 
FALSE
,

37 
DUPLICATE_SAME_ACCESS
)) {

38  
	`≠r_gë_os_îr‹
();

41 (*
√w_fûe
Ë(
≠r_fûe_t
 *Ë
	`≠r_pˇŒoc
(
p
, (apr_file_t));

42 (*
√w_fûe
)->
fûeh™d
 = 
√wh™d
;

43 (*
√w_fûe
)->
Êags
 = 
ﬁd_fûe
->Êag†& ~(
APR_STD_FLAGS
 | 
APR_INHERIT
);

44 (*
√w_fûe
)->
poﬁ
 = 
p
;

45 (*
√w_fûe
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ﬁd_fûe
->fname);

46 (*
√w_fûe
)->
≠≥nd
 = 
ﬁd_fûe
->append;

47 (*
√w_fûe
)->
buf„ªd
 = 
FALSE
;

48 (*
√w_fûe
)->
ungëch¨
 = 
ﬁd_fûe
->ungetchar;

50 #i‡
APR_HAS_THREADS


51 i‡(
ﬁd_fûe
->
muãx
) {

52 
	`≠r_thªad_muãx_¸óã
(&((*
√w_fûe
)->
muãx
),

53 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

57 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w_fûe
)->
poﬁ
, (*)(*√w_fûe), 
fûe_˛ónup
,

58 
≠r_poﬁ_˛ónup_nuŒ
);

60 #i‡
APR_FILES_AS_SOCKETS


63 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w_fûe
)->
pﬁl£t
, 1, 
p
, 0);

65  
APR_SUCCESS
;

67 
	}
}

69 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_dup2
(
≠r_fûe_t
 *
√w_fûe
,

70 
≠r_fûe_t
 *
ﬁd_fûe
, 
≠r_poﬁ_t
 *
p
)

72 #ifde‡
_WIN32_WCE


73  
APR_ENOTIMPL
;

75 
HANDLE
 
h¥oc
 = 
	`GëCuºítPro˚ss
();

76 
HANDLE
 
√wh™d
 = 
NULL
;

77 
≠r_öt32_t
 
√wÊags
;

78 
fd
;

80 i‡(
√w_fûe
->
Êags
 & 
APR_STD_FLAGS
)

82 i‡((
√w_fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDERR_FLAG
)

89 
	`fÊush
(
°dîr
);

90 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

91 i‡(!
	`_ißây
(2)) {

92 
	`_commô
(2 );

102 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
ﬁd_fûe
->
fûeh™d
, h¥oc, &
√wh™d
,

103 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
)) {

104  
	`≠r_gë_os_îr‹
();

106 
fd
 = 
	`_›í_osfh™dÀ
((
INT_PTR
)
√wh™d
, 
_O_WRONLY
 | 
_O_BINARY
);

107 
	`_dup2
(
fd
, 2);

108 
	`_˛o£
(
fd
);

109 
	`_£tmode
(2, 
_O_BINARY
);

117 
√wh™d
 = (
HANDLE
)
	`_gë_osfh™dÀ
(2);

119 i‡((
√w_fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDOUT_FLAG
) {

121 
	`fÊush
(
°dout
);

122 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

123 i‡(!
	`_ißây
(1)) {

124 
	`_commô
(1 );

127 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
ﬁd_fûe
->
fûeh™d
, h¥oc, &
√wh™d
,

128 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
)) {

129  
	`≠r_gë_os_îr‹
();

131 
fd
 = 
	`_›í_osfh™dÀ
((
INT_PTR
)
√wh™d
, 
_O_WRONLY
 | 
_O_BINARY
);

132 
	`_dup2
(
fd
, 1);

133 
	`_˛o£
(
fd
);

134 
	`_£tmode
(1, 
_O_BINARY
);

135 
√wh™d
 = (
HANDLE
)
	`_gë_osfh™dÀ
(1);

137 i‡((
√w_fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDIN_FLAG
) {

139 
	`fÊush
(
°dö
);

140 
	`£tvbuf
(
°dö
, 
NULL
, 
_IONBF
, 0);

142 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
ﬁd_fûe
->
fûeh™d
, h¥oc, &
√wh™d
,

143 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
)) {

144  
	`≠r_gë_os_îr‹
();

146 
fd
 = 
	`_›í_osfh™dÀ
((
INT_PTR
)
√wh™d
, 
_O_RDONLY
 | 
_O_BINARY
);

147 
	`_dup2
(
fd
, 0);

148 
	`_˛o£
(
fd
);

149 
	`_£tmode
(0, 
_O_BINARY
);

150 
√wh™d
 = (
HANDLE
)
	`_gë_osfh™dÀ
(0);

152 
√wÊags
 = (
√w_fûe
->
Êags
 & 
APR_STD_FLAGS
)

153 | (
ﬁd_fûe
->
Êags
 & ~
APR_STD_FLAGS
Ë| 
APR_INHERIT
;

158 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
ﬁd_fûe
->
fûeh™d
,

159 
h¥oc
, &
√wh™d
, 0,

160 
FALSE
, 
DUPLICATE_SAME_ACCESS
)) {

161  
	`≠r_gë_os_îr‹
();

163 
√wÊags
 = 
ﬁd_fûe
->
Êags
 & ~(
APR_STD_FLAGS
 | 
APR_INHERIT
);

165 i‡(
√w_fûe
->
fûeh™d


166 && (
√w_fûe
->
fûeh™d
 !
INVALID_HANDLE_VALUE
)) {

167 
	`Clo£H™dÀ
(
√w_fûe
->
fûeh™d
);

171 
√w_fûe
->
Êags
 = 
√wÊags
;

172 
√w_fûe
->
fûeh™d
 = 
√wh™d
;

173 
√w_fûe
->
‚ame
 = 
	`≠r_p°rdup
“ew_fûe->
poﬁ
, 
ﬁd_fûe
->fname);

174 
√w_fûe
->
≠≥nd
 = 
ﬁd_fûe
->append;

175 
√w_fûe
->
buf„ªd
 = 
FALSE
;

176 
√w_fûe
->
ungëch¨
 = 
ﬁd_fûe
->ungetchar;

178 #i‡
APR_HAS_THREADS


179 i‡(
ﬁd_fûe
->
muãx
) {

180 
	`≠r_thªad_muãx_¸óã
(&(
√w_fûe
->
muãx
),

181 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

185  
APR_SUCCESS
;

187 
	}
}

189 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£èside
(
≠r_fûe_t
 **
√w_fûe
,

190 
≠r_fûe_t
 *
ﬁd_fûe
,

191 
≠r_poﬁ_t
 *
p
)

193 *
√w_fûe
 = (
≠r_fûe_t
 *)
	`≠r_pmemdup
(
p
, 
ﬁd_fûe
, (apr_file_t));

194 (*
√w_fûe
)->
poﬁ
 = 
p
;

195 i‡(
ﬁd_fûe
->
buf„ªd
) {

196 (*
√w_fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
p
, 
ﬁd_fûe
->
bufsize
);

197 (*
√w_fûe
)->
bufsize
 = 
ﬁd_fûe
->bufsize;

198 i‡(
ﬁd_fûe
->
dúe˘i⁄
 == 1) {

199 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
buÂos
);

202 
	`mem˝y
((*
√w_fûe
)->
buf„r
, 
ﬁd_fûe
->buf„r, old_fûe->
d©aRód
);

205 i‡(
ﬁd_fûe
->
muãx
) {

206 
	`≠r_thªad_muãx_¸óã
(&((*
√w_fûe
)->
muãx
),

207 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

208 
	`≠r_thªad_muãx_de°roy
(
ﬁd_fûe
->
muãx
);

210 i‡(
ﬁd_fûe
->
‚ame
) {

211 (*
√w_fûe
)->
‚ame
 = 
	`≠r_p°rdup
(
p
, 
ﬁd_fûe
->fname);

213 i‡(!(
ﬁd_fûe
->
Êags
 & 
APR_FOPEN_NOCLEANUP
)) {

214 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)(*
√w_fûe
),

215 
fûe_˛ónup
,

216 
fûe_˛ónup
);

219 
ﬁd_fûe
->
fûeh™d
 = 
INVALID_HANDLE_VALUE
;

220 
	`≠r_poﬁ_˛ónup_kûl
(
ﬁd_fûe
->
poﬁ
, (*)old_file,

221 
fûe_˛ónup
);

223 #i‡
APR_FILES_AS_SOCKETS


226 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w_fûe
)->
pﬁl£t
, 1, 
p
, 0);

228  
APR_SUCCESS
;

229 
	}
}

	@file_io/win32/filepath.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_¨ch_fûe_io.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_lib.h
"

22 
	~<°rög.h
>

23 
	~<˘y≥.h
>

25 #ifde‡
NETWARE


26 
	~<uni°d.h
>

27 
	~<fsio.h
>

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_roŸ
(c⁄° **
roŸ∑th
,

41 c⁄° **
ö∑th
,

42 
≠r_öt32_t
 
Êags
,

43 
≠r_poﬁ_t
 *
p
)

45 c⁄° *
ã°∑th
 = *
ö∑th
;

46 *
√w∑th
;

47 #ifde‡
NETWARE


48 
£≥øt‹
[2] = { 0, 0};

49 
£rvî
[
APR_PATH_MAX
+1];

50 
vﬁume
[
APR_PATH_MAX
+1];

51 
fûe
[
APR_PATH_MAX
+1];

52 *
vﬁ£p
 = 
NULL
;

53 
ñemíts
;

55 i‡(
ö∑th
 && *inpath)

56 
vﬁ£p
 = 
	`°rchr
 (*
ö∑th
, ':');

58  
APR_EBADPATH
;

60 i‡(
	`°æí
(*
ö∑th
Ë> 
APR_PATH_MAX
) {

61  
APR_EBADPATH
;

64 
£≥øt‹
[0] = (
Êags
 & 
APR_FILEPATH_NATIVE
) ? '\\' : '/';

68 
£rvî
[0] = 
vﬁume
[0] = 
fûe
[0] = '\0';

73 i‡(
vﬁ£p
) {

75 
	`dec⁄°ru˘
(
ã°∑th
, 
£rvî
, 
vﬁume
, 
NULL
, 
fûe
, NULL, &
ñemíts
, 
PATH_UNDEF
);

80 i‡(
vﬁume
 && 
	`°æí
(volume) > 0) {

81 
√w∑th
 = 
	`≠r_pˇŒoc
(
p
, 
	`°æí
(
£rvî
)+°æí(
vﬁume
)+5);

82 
	`c⁄°ru˘
(
√w∑th
, 
£rvî
, 
vﬁume
, 
NULL
, NULL, NULL, 
PATH_NETWARE
);

86 
	`°rˇt
(
√w∑th
, 
£≥øt‹
);

87 *
roŸ∑th
 = 
√w∑th
;

91 
√w∑th
 = 
vﬁ£p
;

93 ++
√w∑th
;

94 } *
√w∑th
 && ((*newpath == '/') || (*newpath == '\\')));

95 *
ö∑th
 = 
√w∑th
;

99  
APR_SUCCESS
;

102  
APR_EBADPATH
;

104 i‡((**
ö∑th
 == '/') || (**inpath == '\\')) {

109 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
£≥øt‹
);

111 ++(*
ö∑th
);

112 } (**
ö∑th
 == '/') || (**inpath == '\\'));

115  
APR_ERELATIVE
;

117  
APR_EINCOMPLETE
;

121 
£≥øt‹
[2];

122 c⁄° *
dñim1
;

123 c⁄° *
dñim2
;

125 
£≥øt‹
[0] = (
Êags
 & 
APR_FILEPATH_NATIVE
) ? '\\' : '/';

126 
£≥øt‹
[1] = 0;

128 i‡(
ã°∑th
[0] == '/' ||Åestpath[0] == '\\') {

129 i‡(
ã°∑th
[1] == '/' ||Åestpath[1] == '\\') {

131 #ifde‡
WIN32


132 i‡((
ã°∑th
[2] == '?' ||Åestpath[2] == '.')

133 && (
ã°∑th
[3] == '/' ||Åestpath[3] == '\\')) {

134 i‡(
	`IS_FNCHAR
(
ã°∑th
[4]) &&Åestpath[5] == ':')

136 
≠r_°©us_t
 
rv
;

137 
ã°∑th
 += 4;

141 
rv
 = 
	`≠r_fûï©h_roŸ
(
roŸ∑th
, &
ã°∑th
, 
Êags
, 
p
);

142 i‡(!
rv
 ||Ñv =
APR_EINCOMPLETE
)

143 *
ö∑th
 = 
ã°∑th
;

144  
rv
;

146 i‡(
	`°∫ˇ£cmp
(
ã°∑th
 + 4, "UNC", 3) == 0

147 && (
ã°∑th
[7] == '/' ||Åestpath[7] == '\\')

148 && (
ã°∑th
[2] == '?')) {

154 
ã°∑th
 += 6;

160  
APR_EBADPATH
;

165 
dñim1
 = 
ã°∑th
 + 2;

168 i‡(*
dñim1
 && !
	`IS_FNCHAR
(*(delim1++)))

169  
APR_EBADPATH
;

170 } *
dñim1
 && *delim1 != '/' && *delim1 != '\\');

172 i‡(*
dñim1
) {

173 
≠r_°©us_t
 
rv
;

174 
dñim2
 = 
dñim1
 + 1;

175 *
dñim2
 && *delim2 != '/' && *delim2 != '\\') {

177 i‡(!
	`IS_FNCHAR
(*(
dñim2
++)))

178  
APR_EBADPATH
;

184 
√w∑th
 = 
	`≠r_p°rmemdup
(
p
, 
ã°∑th
, 
dñim2
 -Åestpath + 1);

186 i‡(
dñim2
 =
dñim1
 + 1) {

189 *
roŸ∑th
 = 
√w∑th
;

190 *
ö∑th
 = 
dñim2
;

191  
APR_EINCOMPLETE
;

194 i‡(
Êags
 & 
APR_FILEPATH_TRUENAME
) {

202 
√w∑th
[0] = '\\';

203 
√w∑th
[1] = '\\';

204 
√w∑th
[
dñim1
 - 
ã°∑th
] = '\\';

205 
√w∑th
[
dñim2
 - 
ã°∑th
] = '\\';

207 
rv
 = 
	`fûï©h_roŸ_ã°
(
√w∑th
, 
p
);

208 i‡(
rv
)

209  
rv
;

210 
rv
 = 
	`fûï©h_roŸ_ˇ£
(&
√w∑th
,Çew∑th, 
p
);

211 i‡(
rv
)

212  
rv
;

213 
√w∑th
[0] = 
£≥øt‹
[0];

214 
√w∑th
[1] = 
£≥øt‹
[0];

215 
√w∑th
[
dñim1
 - 
ã°∑th
] = 
£≥øt‹
[0];

216 
√w∑th
[
dñim2
 - 
ã°∑th
] = (*dñim2 ? 
£≥øt‹
[0] : '\0');

221 
√w∑th
[0] = 
ã°∑th
[0];

222 
√w∑th
[1] = 
ã°∑th
[1];

223 
√w∑th
[
dñim1
 - 
ã°∑th
] = *delim1;

224 
√w∑th
[
dñim2
 - 
ã°∑th
] = *delim2;

231 i‡(*
dñim2
) {

232 *
ö∑th
 = 
dñim2
 + 1;

233 **
ö∑th
 == '/' || **inpath == '\\')

234 ++*
ö∑th
;

237 *
ö∑th
 = 
dñim2
;

240 *
roŸ∑th
 = 
√w∑th
;

241  
APR_SUCCESS
;

247 
dñim1
 = 
	`°rchr
(
ã°∑th
, '\0');

248 i‡(
dñim1
 > 
ã°∑th
 + 2) {

249 
√w∑th
 = 
	`≠r_p°∫dup
(
p
, 
ã°∑th
, 
dñim1
 -Åestpath + 1);

250 i‡(
Êags
 & 
APR_FILEPATH_TRUENAME
)

251 
√w∑th
[
dñim1
 - 
ã°∑th
] = 
£≥øt‹
[0];

253 
√w∑th
[
dñim1
 - 
ã°∑th
] =Çewpath[0];

254 
√w∑th
[
dñim1
 - 
ã°∑th
 + 1] = '\0';

257 
√w∑th
 = 
	`≠r_p°∫dup
(
p
, 
ã°∑th
, 
dñim1
 -Åestpath);

259 i‡(
Êags
 & 
APR_FILEPATH_TRUENAME
) {

260 
√w∑th
[0] = 
£≥øt‹
[0];

261 
√w∑th
[1] = 
£≥øt‹
[0];

263 *
roŸ∑th
 = 
√w∑th
;

264 *
ö∑th
 = 
dñim1
;

265  
APR_EINCOMPLETE
;

270 *
ö∑th
 = 
ã°∑th
 + 1;

271 
√w∑th
 = 
	`≠r_∑Œoc
(
p
, 2);

272 i‡(
Êags
 & 
APR_FILEPATH_TRUENAME
)

273 
√w∑th
[0] = 
£≥øt‹
[0];

275 
√w∑th
[0] = 
ã°∑th
[0];

276 
√w∑th
[1] = '\0';

277 *
roŸ∑th
 = 
√w∑th
;

278  
APR_EINCOMPLETE
;

282 i‡(
	`IS_FNCHAR
(*
ã°∑th
) &&Åestpath[1] == ':')

284 
≠r_°©us_t
 
rv
;

291 
√w∑th
 = 
	`≠r_∑Œoc
(
p
, 4);

292 
√w∑th
[0] = 
ã°∑th
[0];

293 
√w∑th
[1] = 
ã°∑th
[1];

294 
√w∑th
[2] = 
£≥øt‹
[0];

295 
√w∑th
[3] = '\0';

296 i‡(
Êags
 & 
APR_FILEPATH_TRUENAME
) {

297 
√w∑th
[0] = 
	`≠r_touµî
(newpath[0]);

298 
rv
 = 
	`fûï©h_roŸ_ã°
(
√w∑th
, 
p
);

299 i‡(
rv
)

300  
rv
;

304 i‡(
ã°∑th
[2] != '/' &&Åestpath[2] != '\\') {

305 
√w∑th
[2] = '\0';

306 *
roŸ∑th
 = 
√w∑th
;

307 *
ö∑th
 = 
ã°∑th
 + 2;

308  
APR_EINCOMPLETE
;

315 *
ö∑th
 = 
ã°∑th
 + 3;

316 **
ö∑th
 == '/' || **inpath == '\\')

317 ++*
ö∑th
;

318 i‡(!(
Êags
 & 
APR_FILEPATH_TRUENAME
))

319 
√w∑th
[2] = 
ã°∑th
[2];

320 *
roŸ∑th
 = 
√w∑th
;

321  
APR_SUCCESS
;

325  
APR_ERELATIVE
;

328 
	}
}

330 #i‡!
deföed
(
NETWARE
)

331 
	$ßme_drive
(c⁄° *
∑th1
, c⁄° *
∑th2
)

333 
drive1
 = 
∑th1
[0];

334 
drive2
 = 
∑th2
[0];

336 i‡(!
drive1
 || !
drive2
 || 
∑th1
[1] !':' || 
∑th2
[1] != ':')

337  
FALSE
;

339 i‡(
drive1
 =
drive2
)

340  
TRUE
;

342 i‡(
drive1
 >= 'a' && drive1 <= 'z')

343 
drive1
 += 'A' - 'a';

345 i‡(
drive2
 >= 'a' && drive2 <= 'z')

346 
drive2
 += 'A' - 'a';

348  (
drive1
 =
drive2
);

349 
	}
}

352 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_mîge
(**
√w∑th
,

353 c⁄° *
ba£∑th
,

354 c⁄° *
add∑th
,

355 
≠r_öt32_t
 
Êags
,

356 
≠r_poﬁ_t
 *
p
)

358 
∑th
[
APR_PATH_MAX
];

359 c⁄° *
ba£roŸ
 = 
NULL
;

360 c⁄° *
addroŸ
;

361 
≠r_size_t
 
roŸÀn
;

362 
≠r_size_t
 
ba£Àn
;

363 
≠r_size_t
 
kïéí
;

364 
≠r_size_t
 
∑thÀn
;

365 
≠r_size_t
 
£gíd
;

366 
≠r_size_t
 
£gÀn
;

367 
≠r_°©us_t
 
ba£ty≥
 = 0;

368 
≠r_°©us_t
 
addty≥
;

369 
≠r_°©us_t
 
rv
;

370 #i‚de‡
NETWARE


371 
fixunc
 = 0;

376 i‡(!
add∑th
) {

377 
add∑th
 = 
addroŸ
 = "";

378 
addty≥
 = 
APR_ERELATIVE
;

383 
addty≥
 = 
	`≠r_fûï©h_roŸ
(&
addroŸ
, &
add∑th
,

384 
APR_FILEPATH_TRUENAME


385 | (
Êags
 & 
APR_FILEPATH_NATIVE
),

386 
p
);

387 i‡(
addty≥
 =
APR_SUCCESS
) {

388 
addty≥
 = 
APR_EABSOLUTE
;

390 i‡(
addty≥
 =
APR_ERELATIVE
) {

391 
addroŸ
 = "";

393 i‡(
addty≥
 !
APR_EINCOMPLETE
) {

396  
addty≥
;

404 i‡(
addty≥
 =
APR_EABSOLUTE
 ||áddty≥ =
APR_EINCOMPLETE
)

406 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
)

407  
APR_EABOVEROOT
;

408 i‡(
Êags
 & 
APR_FILEPATH_NOTABSOLUTE
)

409  
addty≥
;

414 i‡(!
ba£∑th
) {

420 i‡(
addty≥
 =
APR_EABSOLUTE
 && !(
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
)) {

421 
ba£∑th
 = 
ba£roŸ
 = "";

422 
ba£ty≥
 = 
APR_ERELATIVE
;

429 i‡(
addty≥
 =
APR_ERELATIVE
 && (
Êags
 & 
APR_FILEPATH_NOTABSOLUTE
)) {

430 
ba£∑th
 = 
ba£roŸ
 = "";

431 
ba£ty≥
 = 
APR_ERELATIVE
;

435 i‡(!
ba£∑th
)

443 *
gë∑th
;

444 #i‚de‡
NETWARE


445 i‡(
addty≥
 =
APR_EINCOMPLETE
 && 
addroŸ
[1] == ':')

446 
rv
 = 
	`fûï©h_drive_gë
(&
gë∑th
, 
addroŸ
[0], 
Êags
, 
p
);

449 
rv
 = 
	`≠r_fûï©h_gë
(&
gë∑th
, 
Êags
, 
p
);

450 i‡(
rv
 !
APR_SUCCESS
)

451  
rv
;

452 
ba£∑th
 = 
gë∑th
;

455 i‡(!
ba£roŸ
) {

458 
ba£ty≥
 = 
	`≠r_fûï©h_roŸ
(&
ba£roŸ
, &
ba£∑th
,

459 (
Êags
 & 
APR_FILEPATH_NATIVE
), 
p
);

460 i‡(
ba£ty≥
 =
APR_SUCCESS
) {

461 
ba£ty≥
 = 
APR_EABSOLUTE
;

463 i‡(
ba£ty≥
 =
APR_ERELATIVE
) {

464 
ba£roŸ
 = "";

466 i‡(
ba£ty≥
 !
APR_EINCOMPLETE
) {

469  
ba£ty≥
;

472 
ba£Àn
 = 
	`°æí
(
ba£∑th
);

478 i‡((
Êags
 & 
APR_FILEPATH_NOTABSOLUTE
Ë&& 
ba£ty≥
 !
APR_ERELATIVE
)

479  
ba£ty≥
;

484 i‡(
addty≥
 =
APR_EABSOLUTE
)

488 i‡((
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
)

489 && 
	`°∫cmp
(
ba£roŸ
, 
addroŸ
, 
	`°æí
(baseroot)))

490  
APR_EABOVEROOT
;

491 
kïéí
 = 0;

492 
roŸÀn
 = 
∑thÀn
 = 
	`°æí
(
addroŸ
);

493 
	`mem˝y
(
∑th
, 
addroŸ
, 
∑thÀn
);

495 i‡(
addty≥
 =
APR_EINCOMPLETE
)

503 #i‚de‡
NETWARE


504 i‡((
addroŸ
[0] == '/' ||áddroot[0] == '\\') &&

505 (
addroŸ
[1] == '/' ||áddroot[1] == '\\'))

510 i‡(
Êags
 & 
APR_FILEPATH_NOTRELATIVE
)

511  
addty≥
;

512 i‡((
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
)

513 && 
	`°∫cmp
(
ba£roŸ
, 
addroŸ
, 
	`°æí
(baseroot)))

514  
APR_EABOVEROOT
;

515 
fixunc
 = 1;

516 
kïéí
 = 0;

517 
roŸÀn
 = 
∑thÀn
 = 
	`°æí
(
addroŸ
);

518 
	`mem˝y
(
∑th
, 
addroŸ
, 
∑thÀn
);

522 i‡((
addroŸ
[0] == '/' ||áddroot[0] == '\\') && !addroot[1])

528 i‡(
ba£ty≥
 !
APR_EABSOLUTE
 && (
Êags
 & 
APR_FILEPATH_NOTRELATIVE
))

529  
ba£ty≥
;

530 i‡(
ba£ty≥
 !
APR_ERELATIVE
) {

531 #i‚de‡
NETWARE


532 i‡(
ba£ty≥
 =
APR_INCOMPLETE


533 && (
ba£roŸ
[0] == '/' || baseroot[0] == '\\')

534 && (
ba£roŸ
[1] == '/' || baseroot[1] == '\\'))

535 
fixunc
 = 1;

537 
kïéí
 = 
roŸÀn
 = 
∑thÀn
 = 
	`°æí
(
ba£roŸ
);

538 
	`mem˝y
(
∑th
, 
ba£roŸ
, 
∑thÀn
);

541 i‡(
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
)

542  
APR_EABOVEROOT
;

543 
kïéí
 = 0;

544 
roŸÀn
 = 
∑thÀn
 = 
	`°æí
(
addroŸ
);

545 
	`mem˝y
(
∑th
, 
addroŸ
, 
∑thÀn
);

548 #ifde‡
NETWARE


549 i‡(
	`fûï©h_has_drive
(
addroŸ
, 
DRIVE_ONLY
, 
p
))

555 i‡(!
	`fûï©h_com∑ª_drive
(
addroŸ
, 
ba£roŸ
, 
p
) &&

556 
	`fûï©h_has_drive
(
ba£roŸ
, 0, 
p
)) {

558 i‡(
addroŸ
[0] &&áddroot[1] == ':' && !addroot[2])

564 i‡(
	`ßme_drive
(
addroŸ
, 
ba£roŸ
)) {

568 i‡(
ba£ty≥
 !
APR_EABSOLUTE
 && (
Êags
 & 
APR_FILEPATH_NOTRELATIVE
))

569  
ba£ty≥
;

570 
roŸÀn
 = 
	`°æí
(
ba£roŸ
);

571 
kïéí
 = 
∑thÀn
 = 
roŸÀn
 + 
ba£Àn
;

572 i‡(
kïéí
 >(
∑th
))

573  
APR_ENAMETOOLONG
;

574 
	`mem˝y
(
∑th
, 
ba£roŸ
, 
roŸÀn
);

575 
	`mem˝y
(
∑th
 + 
roŸÀn
, 
ba£∑th
, 
ba£Àn
);

578 i‡(
Êags
 & 
APR_FILEPATH_NOTRELATIVE
)

579  
addty≥
;

580 i‡(
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
)

581  
APR_EABOVEROOT
;

582 
kïéí
 = 0;

583 
roŸÀn
 = 
∑thÀn
 = 
	`°æí
(
addroŸ
);

584 
	`mem˝y
(
∑th
, 
addroŸ
, 
∑thÀn
);

591  
APR_EBADPATH
;

597 i‡(
ba£ty≥
 !
APR_EABSOLUTE
 && (
Êags
 & 
APR_FILEPATH_NOTRELATIVE
))

598  
ba£ty≥
;

600 #i‚de‡
NETWARE


603 i‡(
ba£ty≥
 =
APR_INCOMPLETE


604 && (
ba£roŸ
[0] == '/' || baseroot[0] == '\\')

605 && (
ba£roŸ
[1] == '/' || baseroot[1] == '\\'))

606 
fixunc
 = 1;

611 
roŸÀn
 = 
	`°æí
(
ba£roŸ
);

612 
kïéí
 = 
∑thÀn
 = 
roŸÀn
 + 
ba£Àn
;

613 i‡(
kïéí
 >(
∑th
))

614  
APR_ENAMETOOLONG
;

615 
	`mem˝y
(
∑th
, 
ba£roŸ
, 
roŸÀn
);

616 
	`mem˝y
(
∑th
 + 
roŸÀn
, 
ba£∑th
, 
ba£Àn
);

623 i‡(
∑thÀn
 && 
∑th
[pathlen - 1] != ':') {

624 i‡(
∑th
[
∑thÀn
 - 1] != '/' &&Öath[pathlen - 1] != '\\') {

625 i‡(
∑thÀn
 + 1 >(
∑th
))

626  
APR_ENAMETOOLONG
;

628 
∑th
[
∑thÀn
++] = ((
Êags
 & 
APR_FILEPATH_NATIVE
) ? '\\' : '/');

636 *
add∑th
)

640 
£gÀn
 = 0;

641 
add∑th
[
£gÀn
] &&áddpath[seglen] != '/'

642 && 
add∑th
[
£gÀn
] != '\\')

643 ++
£gÀn
;

646 
£gíd
 = 
£gÀn
;

647 
£gÀn
 && (
add∑th
[seglen - 1] == ' '

648 || 
add∑th
[
£gÀn
 - 1] == '.')) {

649 i‡(
£gÀn
 > 2 || 
add∑th
[seglen - 1] != '.' ||áddpath[0] != '.')

650 --
£gÀn
;

655 i‡(
£gÀn
 =0 || (£gÀ¿=1 && 
add∑th
[0] == '.'))

660 i‡(
£gÀn
 < 
£gíd
)

661  
APR_EBADPATH
;

663 #i‚de‡
NETWARE


666 i‡(
fixunc
)

667  
APR_EBADPATH
;

673 i‡(
£gÀn
 =2 && 
add∑th
[0] == '.' &&áddpath[1] == '.')

679 i‡(
£gÀn
 < 
£gíd
 && (£gÀ¿!3 || 
add∑th
[2] != '.'))

680  
APR_EBADPATH
;

682 #i‚de‡
NETWARE


685 i‡(
fixunc
)

686  
APR_EBADPATH
;

690 i‡(
roŸÀn
 && (
∑thÀn
 <=Ñootlen))

695 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
)

696  
APR_EABOVEROOT
;

701 i‡(
∑thÀn
 == 0

702 || (
∑thÀn
 >= 3

703 && (
∑thÀn
 == 3

704 || 
∑th
[
∑thÀn
 - 4] == ':'

705 || 
∑th
[
∑thÀn
 - 4] == '/'

706 || 
∑th
[
∑thÀn
 - 4] == '\\')

707 && 
∑th
[
∑thÀn
 - 3] == '.'

708 && 
∑th
[
∑thÀn
 - 2] == '.'

709 && (
∑th
[
∑thÀn
 - 1] == '/'

710 || 
∑th
[
∑thÀn
 - 1] == '\\')))

718 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
)

719  
APR_EABOVEROOT
;

723 i‡(
∑thÀn
 + 3 >(
∑th
))

724  
APR_ENAMETOOLONG
;

725 
∑th
[
∑thÀn
++] = '.';

726 
∑th
[
∑thÀn
++] = '.';

727 i‡(
add∑th
[
£gíd
]) {

728 
∑th
[
∑thÀn
++] = ((
Êags
 & 
APR_FILEPATH_NATIVE
)

729 ? '\\' : ((
Êags
 & 
APR_FILEPATH_TRUENAME
)

730 ? '/' : 
add∑th
[
£gíd
]));

736 
kïéí
 = 
∑thÀn
;

743 --
∑thÀn
;

744 } 
∑thÀn
 && 
∑th
[pathlen - 1] != '/'

745 && 
∑th
[
∑thÀn
 - 1] != '\\');

750 i‡(
∑thÀn
 < 
kïéí
)

752 i‡(
Êags
 & 
APR_FILEPATH_SECUREROOTTEST
)

753  
APR_EABOVEROOT
;

754 
kïéí
 = 
∑thÀn
;

760 #i‚de‡
NETWARE


761 i‡(
fixunc
) {

762 c⁄° *
ã°∑th
 = 
∑th
;

763 c⁄° *
ã°roŸ
;

764 
≠r_°©us_t
 
ã°ty≥
;

765 
≠r_size_t
 
i
 = (
add∑th
[
£gíd
] != '\0');

769 i‡(
£gÀn
 < 
£gíd
)

770  
APR_EBADPATH
;

771 i‡(
∑thÀn
 + 
£gÀn
 + 1 >(
∑th
))

772  
APR_ENAMETOOLONG
;

773 
	`mem˝y
(
∑th
 + 
∑thÀn
, 
add∑th
, 
£gÀn
 + 
i
);

777 
∑th
[
∑thÀn
 + 
£gÀn
] = ((
Êags
 & 
APR_FILEPATH_NATIVE
)

779 
∑thÀn
 +
£gÀn
 + 1;

785 
∑th
[
∑thÀn
] = '\0';

788 
ã°ty≥
 = 
	`≠r_fûï©h_roŸ
(&
ã°roŸ
, &
ã°∑th
,

789 
APR_FILEPATH_TRUENAME


790 | (
Êags
 & 
APR_FILEPATH_NATIVE
),

791 
p
);

792 i‡(
ã°ty≥
 =
APR_SUCCESS
) {

793 
roŸÀn
 = 
∑thÀn
 = (
ã°∑th
 - 
∑th
);

794 
	`mem˝y
(
∑th
, 
ã°roŸ
, 
∑thÀn
);

795 
fixunc
 = 0;

797 i‡(
ã°ty≥
 !
APR_EINCOMPLETE
) {

800  
ã°ty≥
;

808 
≠r_size_t
 
i
 = (
add∑th
[
£gíd
] != '\0');

809 i‡(
∑thÀn
 + 
£gÀn
 + 
i
 >(
∑th
))

810  
APR_ENAMETOOLONG
;

811 
	`mem˝y
(
∑th
 + 
∑thÀn
, 
add∑th
, 
£gÀn
 + 
i
);

812 i‡(
i
)

813 
∑th
[
∑thÀn
 + 
£gÀn
] = ((
Êags
 & 
APR_FILEPATH_NATIVE
)

815 
∑thÀn
 +
£gÀn
 + 
i
;

821 i‡(
add∑th
[
£gíd
])

822 ++
£gíd
;

824 
add∑th
 +
£gíd
;

834 i‡((
Êags
 & 
APR_FILEPATH_NOTABOVEROOT
Ë&& 
ba£Àn
) {

835 i‡(
	`memcmp
(
ba£∑th
, 
∑th
 + 
roŸÀn
, 
ba£Àn
) != 0)

836  
APR_EABOVEROOT
;

841 i‡(
ba£∑th
[
ba£Àn
 - 1] != '/' && basepath[baselen - 1] != '\\'

842 && 
∑th
[
roŸÀn
 + 
ba£Àn
] &&Öath[rootlen + baselen] != '/'

843 && 
∑th
[
roŸÀn
 + 
ba£Àn
] != '\\')

844  
APR_EABOVEROOT
;

847 i‡(
add∑th
 && (
Êags
 & 
APR_FILEPATH_TRUENAME
)) {

849 i‡(
roŸÀn
 > 
kïéí
)

850 
kïéí
 = 
roŸÀn
;

851 i‡((
∑th
[
kïéí
] == '/') || (path[keptlen] == '\\')) {

855 ++
kïéí
;

858 
kïéí
 < 
∑thÀn
) {

859 
≠r_föfo_t
 
föfo
;

860 
ßve¶ash
 = 0;

861 
£gÀn
 = 0;

863 
£gÀn
 = 0; 
kïéí
 + segÀ¿< 
∑thÀn
; ++seglen) {

864 i‡((
∑th
[
kïéí
 + 
£gÀn
] == '/') ||

865 (
∑th
[
kïéí
 + 
£gÀn
] == '\\')) {

866 
ßve¶ash
 = 
∑th
[
kïéí
 + 
£gÀn
];

871 
∑th
[
kïéí
 + 
£gÀn
] = '\0';

872 i‡((
rv
 = 
	`≠r_°©
(&
föfo
, 
∑th
,

873 
APR_FINFO_LINK
 | 
APR_FINFO_TYPE
 | 
APR_FINFO_NAME
, 
p
))

874 =
APR_SUCCESS
) {

875 
≠r_size_t
 
«mñí
 = 
	`°æí
(
föfo
.
«me
);

877 #i‡
	`deföed
(
OS2
)

879 i‡(
	`memcmp
(
föfo
.
«me
, 
∑th
 + 
kïéí
, 
£gÀn
) != 0) {

880 
	`mem˝y
(
∑th
 + 
kïéí
, 
föfo
.
«me
, 
«mñí
);

884 i‡((
«mñí
 !
£gÀn
) ||

885 (
	`memcmp
(
föfo
.
«me
, 
∑th
 + 
kïéí
, 
£gÀn
) != 0))

887 i‡(
«mñí
 <
£gÀn
) {

888 
	`mem˝y
(
∑th
 + 
kïéí
, 
föfo
.
«me
, 
«mñí
);

889 i‡((
«mñí
 < 
£gÀn
Ë&& 
ßve¶ash
) {

890 
	`memmove
(
∑th
 + 
kïéí
 + 
«mñí
 + 1,

891 
∑th
 + 
kïéí
 + 
£gÀn
 + 1,

892 
∑thÀn
 - 
kïéí
 - 
£gÀn
);

893 
∑thÀn
 +
«mñí
 - 
£gÀn
;

894 
£gÀn
 = 
«mñí
;

898 i‡(
∑thÀn
 + 
«mñí
 - 
£gÀn
 >(
∑th
))

899  
APR_ENAMETOOLONG
;

900 i‡(
ßve¶ash
) {

901 
	`memmove
(
∑th
 + 
kïéí
 + 
«mñí
 + 1,

902 
∑th
 + 
kïéí
 + 
£gÀn
 + 1,

903 
∑thÀn
 - 
kïéí
 - 
£gÀn
);

905 
	`mem˝y
(
∑th
 + 
kïéí
, 
föfo
.
«me
, 
«mñí
);

906 
∑thÀn
 +
«mñí
 - 
£gÀn
;

907 
£gÀn
 = 
«mñí
;

917 i‡((
föfo
.
fûëy≥
 !
APR_DIR
) &&

918 (
föfo
.
fûëy≥
 !
APR_LNK
Ë&& 
ßve¶ash
)

919 
rv
 = 
APR_ENOTDIR
;

920 #ifde‡
XXX_FIGURE_THIS_OUT


926 i‡(
ßve¶ash
) {

927 
kïéí
 +
£gÀn
;

928 
∑th
[
kïéí
] = 
ßve¶ash
;

929 i‡(
∑thÀn
 + 1 >(
∑th
))

930  
APR_ENAMETOOLONG
;

931 
	`memmove
(
∑th
 + 
kïéí
 + 1,

932 
∑th
 + 
kïéí
,

933 
∑thÀn
 - 
kïéí
);

934 
∑th
[
kïéí
] = '\0';

935 ++
∑thÀn
;

943 i‡(
ßve¶ash
) {

944 
∑th
[
kïéí
 + 
£gÀn
] = 
ßve¶ash
;

945 ++
£gÀn
;

947 
kïéí
 +
£gÀn
;

949 i‡(
rv
 !
APR_SUCCESS
) {

950 i‡(
	`APR_STATUS_IS_ENOENT
(
rv
))

952 i‡(
	`APR_STATUS_IS_EPATHWILD
(
rv
))

959 i‡(
	`APR_STATUS_IS_ENOTDIR
(
rv
))

968  
rv
;

973 *
√w∑th
 = 
	`≠r_p°rmemdup
(
p
, 
∑th
, 
∑thÀn
);

974  
APR_SUCCESS
;

975 
	}
}

978 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_li°_•lô
(
≠r_¨øy_hódî_t
 **
∑thñts
,

979 c⁄° *
li°°r
,

980 
≠r_poﬁ_t
 *
p
)

982  
	`≠r_fûï©h_li°_•lô_im∂
(
∑thñts
, 
li°°r
, ';', 
p
);

983 
	}
}

985 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_li°_mîge
(**
li°°r
,

986 
≠r_¨øy_hódî_t
 *
∑thñts
,

987 
≠r_poﬁ_t
 *
p
)

989  
	`≠r_fûï©h_li°_mîge_im∂
(
li°°r
, 
∑thñts
, ';', 
p
);

990 
	}
}

993 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_ícodög
(*
°yÀ
, 
≠r_poﬁ_t
 *
p
)

995 #i‡
APR_HAS_UNICODE_FS


996 
IF_WIN_OS_IS_UNICODE


998 *
°yÀ
 = 
APR_FILEPATH_ENCODING_UTF8
;

999  
APR_SUCCESS
;

1003 *
°yÀ
 = 
APR_FILEPATH_ENCODING_LOCALE
;

1004  
APR_SUCCESS
;

1005 
	}
}

	@file_io/win32/filestat.c

17 
	~"≠r.h
"

18 
	~<a˛≠i.h
>

19 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_°rögs.h
"

24 
	~"≠r_î∫o.h
"

25 
	~"≠r_time.h
"

26 
	~<sys/°©.h
>

27 
	~"≠r_¨ch_©ime.h
"

28 
	~"≠r_¨ch_misc.h
"

33 
≠r_°©us_t
 
	$ã°_ß„_«me
(c⁄° *
«me
)

38 i‡(
	`≠r_ißÕha
(*
«me
) && (name[1] == ':')) {

39 
«me
 += 2;

41 *
«me
) {

42 i‡(!
	`IS_FNCHAR
(*
«me
) && (*name != '\\') && (*name != '/')) {

43 i‡(*
«me
 == '?' || *name == '*')

44  
APR_EPATHWILD
;

46  
APR_EBADPATH
;

48 ++
«me
;

50  
APR_SUCCESS
;

51 
	}
}

53 
≠r_°©us_t
 
	$‰ì_loˇlhóp
(*
hóp
) {

54 
	`LoˇlFªe
(
hóp
);

55  
APR_SUCCESS
;

56 
	}
}

58 
≠r_gid_t
 
	gw‹ldid
 = 
NULL
;

60 
	$‰ì_w‹ld
()

62 i‡(
w‹ldid
) {

63 
	`FªeSid
(
w‹ldid
);

64 
w‹ldid
 = 
NULL
;

66 
	}
}

69 
	e¥Ÿ_sc›e_e
 {

70 
	m¥Ÿ_sc›e_w‹ld
 = 0,

71 
	m¥Ÿ_sc›e_group
 = 4,

72 
	m¥Ÿ_sc›e_u£r
 = 8

73 } 
	t¥Ÿ_sc›e_e
;

75 
≠r_fûïîms_t
 
	$c⁄vît_¥Ÿ
(
ACCESS_MASK
 
acc
, 
¥Ÿ_sc›e_e
 
sc›e
)

81 
≠r_fûïîms_t
 
¥Ÿ
 = 0;

82 i‡(
acc
 & 
FILE_EXECUTE
)

83 
¥Ÿ
 |
APR_WEXECUTE
;

84 i‡(
acc
 & 
FILE_WRITE_DATA
)

85 
¥Ÿ
 |
APR_WWRITE
;

86 i‡(
acc
 & 
FILE_READ_DATA
)

87 
¥Ÿ
 |
APR_WREAD
;

88  (
¥Ÿ
 << 
sc›e
);

89 
	}
}

91 
	$ªsﬁve_¥Ÿ
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
, 
PACL
 
da˛
)

93 
TRUSTEE_W
 
idít
 = {
NULL
, 
NO_MULTIPLE_TRUSTEE
, 
TRUSTEE_IS_SID
};

94 
ACCESS_MASK
 
acc
;

99 i‡((
w™ãd
 & 
APR_FINFO_WPROT
Ë&& !
w‹ldid
) {

100 
SID_IDENTIFIER_AUTHORITY
 
SIDAuth
 = {
SECURITY_WORLD_SID_AUTHORITY
};

101 i‡(
	`AŒoˇãAndInôülizeSid
(&
SIDAuth
, 1, 
SECURITY_WORLD_RID
,

102 0, 0, 0, 0, 0, 0, 0, &
w‹ldid
))

103 
	`©exô
(
‰ì_w‹ld
);

105 
w‹ldid
 = 
NULL
;

107 i‡((
w™ãd
 & 
APR_FINFO_UPROT
Ë&& (
föfo
->
vÆid
 & 
APR_FINFO_USER
)) {

108 
idít
.
Tru°ìTy≥
 = 
TRUSTEE_IS_USER
;

109 
idít
.
±°rName
 = 
föfo
->
u£r
;

114 i‡(
	`GëEf„˘iveRightsFromA˛W
(
da˛
, &
idít
, &
acc
Ë=
ERROR_SUCCESS
) {

115 
föfo
->
¥Ÿe˘i⁄
 |
	`c⁄vît_¥Ÿ
(
acc
, 
¥Ÿ_sc›e_u£r
);

116 
föfo
->
vÆid
 |
APR_FINFO_UPROT
;

124 i‡((
w™ãd
 & 
APR_FINFO_GPROT
Ë&& (
föfo
->
vÆid
 & 
APR_FINFO_GROUP
)) {

125 
idít
.
Tru°ìTy≥
 = 
TRUSTEE_IS_GROUP
;

126 
idít
.
±°rName
 = 
föfo
->
group
;

127 i‡(
	`GëEf„˘iveRightsFromA˛W
(
da˛
, &
idít
, &
acc
Ë=
ERROR_SUCCESS
) {

128 
föfo
->
¥Ÿe˘i⁄
 |
	`c⁄vît_¥Ÿ
(
acc
, 
¥Ÿ_sc›e_group
);

129 
föfo
->
vÆid
 |
APR_FINFO_GPROT
;

132 i‡((
w™ãd
 & 
APR_FINFO_WPROT
Ë&& (
w‹ldid
)) {

133 
idít
.
Tru°ìTy≥
 = 
TRUSTEE_IS_WELL_KNOWN_GROUP
;

134 
idít
.
±°rName
 = 
w‹ldid
;

135 i‡(
	`GëEf„˘iveRightsFromA˛W
(
da˛
, &
idít
, &
acc
Ë=
ERROR_SUCCESS
) {

136 
föfo
->
¥Ÿe˘i⁄
 |
	`c⁄vît_¥Ÿ
(
acc
, 
¥Ÿ_sc›e_w‹ld
);

137 
föfo
->
vÆid
 |
APR_FINFO_WPROT
;

140 
	}
}

142 
≠r_°©us_t
 
	$ªsﬁve_idít
(
≠r_föfo_t
 *
föfo
, c⁄° *
‚ame
,

143 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
poﬁ
)

145 
≠r_fûe_t
 *
thefûe
 = 
NULL
;

146 
≠r_°©us_t
 
rv
;

156 i‡((
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
‚ame
, 
APR_OPENINFO


157 | ((
w™ãd
 & 
APR_FINFO_LINK
Ë? 
APR_OPENLINK
 : 0)

158 | ((
w™ãd
 & (
APR_FINFO_PROT
 | 
APR_FINFO_OWNER
))

159 ? 
APR_READCONTROL
 : 0),

160 
APR_OS_DEFAULT
, 
poﬁ
)Ë=
APR_SUCCESS
) {

161 
rv
 = 
	`≠r_fûe_öfo_gë
(
föfo
, 
w™ãd
, 
thefûe
);

162 
föfo
->
fûeh™d
 = 
NULL
;

163 
	`≠r_fûe_˛o£
(
thefûe
);

165 i‡(
	`APR_STATUS_IS_EACCES
(
rv
Ë&& (
w™ãd
 & (
APR_FINFO_PROT


166 | 
APR_FINFO_OWNER
))) {

170 i‡((
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
‚ame
, 
APR_OPENINFO


171 | ((
w™ãd
 & 
APR_FINFO_LINK
Ë? 
APR_OPENLINK
 : 0),

172 
APR_OS_DEFAULT
, 
poﬁ
)Ë=
APR_SUCCESS
) {

173 
rv
 = 
	`≠r_fûe_öfo_gë
(
föfo
, 
w™ãd
 & ~(
APR_FINFO_PROT


174 | 
APR_FINFO_OWNER
),

175 
thefûe
);

176 
föfo
->
fûeh™d
 = 
NULL
;

177 
	`≠r_fûe_˛o£
(
thefûe
);

181 i‡(
rv
 !
APR_SUCCESS
 &&Ñv !
APR_INCOMPLETE
)

182  (
rv
);

185 i‡(
w™ãd
 & 
APR_FINFO_LINK
)

186 
föfo
->
vÆid
 |
APR_FINFO_LINK
;

188  
rv
;

189 
	}
}

191 
≠r_°©us_t
 
	$guess_¥Ÿe˘i⁄_bôs
(
≠r_föfo_t
 *
föfo
,

192 
≠r_öt32_t
 
w™ãd
)

199 i‡(
föfo
->
¥Ÿe˘i⁄
 & 
APR_FREADONLY
) {

200 
föfo
->
¥Ÿe˘i⁄
 |
APR_WREAD
 | 
APR_WEXECUTE
;

203 
föfo
->
¥Ÿe˘i⁄
 |
APR_WREAD
 | 
APR_WEXECUTE
 | 
APR_WWRITE
;

205 
föfo
->
¥Ÿe˘i⁄
 |(föfo->¥Ÿe˘i⁄ << 
¥Ÿ_sc›e_group
)

206 | (
föfo
->
¥Ÿe˘i⁄
 << 
¥Ÿ_sc›e_u£r
);

208 
föfo
->
vÆid
 |
APR_FINFO_UPROT
 | 
APR_FINFO_GPROT
 | 
APR_FINFO_WPROT
;

210  ((
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
);

211 
	}
}

213 
≠r_°©us_t
 
	$m‹e_föfo
(
≠r_föfo_t
 *
föfo
, c⁄° *
ufûe
,

214 
≠r_öt32_t
 
w™ãd
, 
wh©fûe
)

216 
PSID
 
u£r
 = 
NULL
, 
gΩ
 = NULL;

217 
PACL
 
da˛
 = 
NULL
;

218 
≠r_°©us_t
 
rv
;

220 i‡(
≠r_os_Àvñ
 < 
APR_WIN_NT
)

221  
	`guess_¥Ÿe˘i⁄_bôs
(
föfo
, 
w™ãd
);

223 i‡(
w™ãd
 & (
APR_FINFO_PROT
 | 
APR_FINFO_OWNER
))

231 
SECURITY_INFORMATION
 
söf
 = 0;

232 
PSECURITY_DESCRIPTOR
 
pdesc
 = 
NULL
;

233 i‡(
w™ãd
 & (
APR_FINFO_USER
 | 
APR_FINFO_UPROT
))

234 
söf
 |
OWNER_SECURITY_INFORMATION
;

235 i‡(
w™ãd
 & (
APR_FINFO_GROUP
 | 
APR_FINFO_GPROT
))

236 
söf
 |
GROUP_SECURITY_INFORMATION
;

237 i‡(
w™ãd
 & 
APR_FINFO_PROT
)

238 
söf
 |
DACL_SECURITY_INFORMATION
;

239 i‡(
wh©fûe
 =
MORE_OF_WFSPEC
) {

240 
≠r_wch¨_t
 *
wfûe
 = (≠r_wch¨_t*Ë
ufûe
;

241 
fix
 = 0;

242 i‡(
	`wc¢cmp
(
wfûe
, 
L
"\\\\?\\", 4) == 0) {

243 
fix
 = 4;

244 i‡(
	`wc¢cmp
(
wfûe
 + 
fix
, 
L
"UNC\\", 4) == 0)

245 
wfûe
[6] = 
L
'\\', 
fix
 = 6;

247 
rv
 = 
	`GëNamedSecurôyInfoW
(
wfûe
 + 
fix
,

248 
SE_FILE_OBJECT
, 
söf
,

249 ((
w™ãd
 & (
APR_FINFO_USER
 | 
APR_FINFO_UPROT
)Ë? &
u£r
 : 
NULL
),

250 ((
w™ãd
 & (
APR_FINFO_GROUP
 | 
APR_FINFO_GPROT
)Ë? &
gΩ
 : 
NULL
),

251 ((
w™ãd
 & 
APR_FINFO_PROT
Ë? &
da˛
 : 
NULL
),

252 
NULL
, &
pdesc
);

253 i‡(
fix
 == 6)

254 
wfûe
[6] = 
L
'C';

256 i‡(
wh©fûe
 =
MORE_OF_FSPEC
)

257 
rv
 = 
	`GëNamedSecurôyInfoA
((*)
ufûe
,

258 
SE_FILE_OBJECT
, 
söf
,

259 ((
w™ãd
 & (
APR_FINFO_USER
 | 
APR_FINFO_UPROT
)Ë? &
u£r
 : 
NULL
),

260 ((
w™ãd
 & (
APR_FINFO_GROUP
 | 
APR_FINFO_GPROT
)Ë? &
gΩ
 : 
NULL
),

261 ((
w™ãd
 & 
APR_FINFO_PROT
Ë? &
da˛
 : 
NULL
),

262 
NULL
, &
pdesc
);

263 i‡(
wh©fûe
 =
MORE_OF_HANDLE
)

264 
rv
 = 
	`GëSecurôyInfo
((
HANDLE
)
ufûe
,

265 
SE_FILE_OBJECT
, 
söf
,

266 ((
w™ãd
 & (
APR_FINFO_USER
 | 
APR_FINFO_UPROT
)Ë? &
u£r
 : 
NULL
),

267 ((
w™ãd
 & (
APR_FINFO_GROUP
 | 
APR_FINFO_GPROT
)Ë? &
gΩ
 : 
NULL
),

268 ((
w™ãd
 & 
APR_FINFO_PROT
Ë? &
da˛
 : 
NULL
),

269 
NULL
, &
pdesc
);

271  
APR_INCOMPLETE
;

272 i‡(
rv
 =
ERROR_SUCCESS
)

273 
	`≠r_poﬁ_˛ónup_ªgi°î
(
föfo
->
poﬁ
, 
pdesc
, 
‰ì_loˇlhóp
,

274 
≠r_poﬁ_˛ónup_nuŒ
);

276 
u£r
 = 
gΩ
 = 
da˛
 = 
NULL
;

278 i‡(
u£r
) {

279 
föfo
->
u£r
 = user;

280 
föfo
->
vÆid
 |
APR_FINFO_USER
;

283 i‡(
gΩ
) {

284 
föfo
->
group
 = 
gΩ
;

285 
föfo
->
vÆid
 |
APR_FINFO_GROUP
;

288 i‡(
da˛
) {

290 
	`ªsﬁve_¥Ÿ
(
föfo
, 
w™ãd
, 
da˛
);

292 i‡(
w™ãd
 & 
APR_FINFO_PROT
)

293 
	`guess_¥Ÿe˘i⁄_bôs
(
föfo
, 
w™ãd
);

296 i‡((
≠r_os_Àvñ
 >
APR_WIN_2000
Ë&& (
w™ãd
 & 
APR_FINFO_CSIZE
)

297 && (
föfo
->
fûëy≥
 =
APR_REG
))

299 
DWORD
 
sizño
, 
sizehi
;

300 i‡(
wh©fûe
 =
MORE_OF_HANDLE
) {

307 
IOSB
 
sb
;

308 
FSI
 
fi
;

309 i‡((
	`ZwQuîyInf‹m©i⁄Fûe
((
HANDLE
)
ufûe
, &
sb
,

310 &
fi
, (fi), 5) == 0)

311 && (
sb
.
Sètus
 == 0)) {

312 
föfo
->
csize
 = 
fi
.
AŒoˇti⁄Size
;

313 
föfo
->
vÆid
 |
APR_FINFO_CSIZE
;

317 
	`SëLa°Eº‹
(
NO_ERROR
);

318 i‡(
wh©fûe
 =
MORE_OF_WFSPEC
)

319 
sizño
 = 
	`GëCom¥es£dFûeSizeW
((
≠r_wch¨_t
*)
ufûe
, &
sizehi
);

320 i‡(
wh©fûe
 =
MORE_OF_FSPEC
)

321 
sizño
 = 
	`GëCom¥es£dFûeSizeA
((*)
ufûe
, &
sizehi
);

323  
APR_EGENERAL
;

325 i‡(
sizño
 !
INVALID_FILE_SIZE
 || 
	`GëLa°Eº‹
(Ë=
NO_ERROR
) {

326 #i‡
APR_HAS_LARGE_FILES


327 
föfo
->
csize
 = (
≠r_off_t
)
sizño


328 | ((
≠r_off_t
)
sizehi
 << 32);

330 
föfo
->
csize
 = (
≠r_off_t
)
sizño
;

331 i‡(
föfo
->
csize
 < 0 || 
sizehi
)

332 
föfo
->
csize
 = 0x7fffffff;

334 
föfo
->
vÆid
 |
APR_FINFO_CSIZE
;

338  ((
w™ãd
 & ~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE
 : 
APR_SUCCESS
);

339 
	}
}

352 
	$fûlö_fûeöfo
(
≠r_föfo_t
 *
föfo
,

353 
WIN32_FILE_ATTRIBUTE_DATA
 *
wööfo
,

354 
byh™dÀ
, 
≠r_öt32_t
 
w™ãd
)

356 
DWORD
 *
sizes
 = &
wööfo
->
nFûeSizeHigh
 + 
byh™dÀ
;

357 
w¨n
 = 0;

359 
	`mem£t
(
föfo
, '\0', (*finfo));

361 
	`FûeTimeToA¥Time
(&
föfo
->
©ime
, &
wööfo
->
·La°Ac˚ssTime
);

362 
	`FûeTimeToA¥Time
(&
föfo
->
˘ime
, &
wööfo
->
·Cª©i⁄Time
);

363 
	`FûeTimeToA¥Time
(&
föfo
->
mtime
, &
wööfo
->
·La°WrôeTime
);

365 #i‡
APR_HAS_LARGE_FILES


366 
föfo
->
size
 = (
≠r_off_t
)
sizes
[1]

367 | ((
≠r_off_t
)
sizes
[0] << 32);

369 
föfo
->
size
 = (
≠r_off_t
)
sizes
[1];

370 i‡(
föfo
->
size
 < 0 || 
sizes
[0])

371 
föfo
->
size
 = 0x7fffffff;

374 i‡(
w™ãd
 & 
APR_FINFO_LINK
 &&

375 
wööfo
->
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_REPARSE_POINT
) {

376 
föfo
->
fûëy≥
 = 
APR_LNK
;

378 i‡(
wööfo
->
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_DIRECTORY
) {

379 
föfo
->
fûëy≥
 = 
APR_DIR
;

381 i‡(
wööfo
->
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_DEVICE
) {

385 
föfo
->
fûëy≥
 = 
APR_CHR
;

392 i‡(!
wööfo
->
·La°WrôeTime
.
dwLowD©eTime


393 && !
wööfo
->
·La°WrôeTime
.
dwHighD©eTime


394 && !
föfo
->
size
)

395 
w¨n
 = 1;

396 
föfo
->
fûëy≥
 = 
APR_REG
;

402 i‡(
wööfo
->
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_READONLY
)

403 
föfo
->
¥Ÿe˘i⁄
 = 
APR_FREADONLY
;

405 
föfo
->
vÆid
 = 
APR_FINFO_ATIME
 | 
APR_FINFO_CTIME
 | 
APR_FINFO_MTIME


406 | 
APR_FINFO_SIZE
 | 
APR_FINFO_TYPE
;

412 i‡(!
byh™dÀ
 || (
w™ãd
 & 
APR_FINFO_LINK
))

413 
föfo
->
vÆid
 |
APR_FINFO_LINK
;

414  
w¨n
;

415 
	}
}

418 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_öfo_gë
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

419 
≠r_fûe_t
 *
thefûe
)

421 
BY_HANDLE_FILE_INFORMATION
 
FûeInfo
;

423 i‡(
thefûe
->
buf„ªd
) {

425 
≠r_°©us_t
 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

426 i‡(
rv
 !
APR_SUCCESS
)

427  
rv
;

430 i‡(!
	`GëFûeInf‹m©i⁄ByH™dÀ
(
thefûe
->
fûeh™d
, &
FûeInfo
)) {

431  
	`≠r_gë_os_îr‹
();

434 
	`fûlö_fûeöfo
(
föfo
, (
WIN32_FILE_ATTRIBUTE_DATA
 *Ë&
FûeInfo
, 1, 
w™ãd
);

436 i‡(
föfo
->
fûëy≥
 =
APR_REG
)

443 
DWORD
 
FûeTy≥
;

444 i‡((
FûeTy≥
 = 
	`GëFûeTy≥
(
thefûe
->
fûeh™d
))) {

445 i‡(
FûeTy≥
 =
FILE_TYPE_CHAR
) {

446 
föfo
->
fûëy≥
 = 
APR_CHR
;

448 i‡(
FûeTy≥
 =
FILE_TYPE_PIPE
) {

449 
föfo
->
fûëy≥
 = 
APR_PIPE
;

456 
föfo
->
poﬁ
 = 
thefûe
->pool;

462 
föfo
->
‚ame
 = 
thefûe
->fname;

465 
föfo
->
öode
 = (
≠r_öo_t
)
FûeInfo
.
nFûeIndexLow


466 | ((
≠r_öo_t
)
FûeInfo
.
nFûeIndexHigh
 << 32);

467 
föfo
->
devi˚
 = 
FûeInfo
.
dwVﬁumeSîülNumbî
;

468 
föfo
->
∆ök
 = 
FûeInfo
.
nNumbîOfLöks
;

470 
föfo
->
vÆid
 |
APR_FINFO_IDENT
 | 
APR_FINFO_NLINK
;

474 i‡((
w™ãd
 &~
föfo
->
vÆid
Ë& ~
APR_FINFO_NAME
) {

475  
	`m‹e_föfo
(
föfo
, 
thefûe
->
fûeh™d
, 
w™ãd
, 
MORE_OF_HANDLE
);

478  
APR_SUCCESS
;

479 
	}
}

481 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_≥rms_£t
(c⁄° *
‚ame
,

482 
≠r_fûïîms_t
 
≥rms
)

484  
APR_ENOTIMPL
;

485 
	}
}

487 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°©
(
≠r_föfo_t
 *
föfo
, c⁄° *
‚ame
,

488 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
poﬁ
)

491 
i§oŸ
 = 0;

492 
≠r_°©us_t
 
idít_rv
 = 0;

493 
≠r_°©us_t
 
rv
;

494 #i‡
APR_HAS_UNICODE_FS


495 
≠r_wch¨_t
 
w‚ame
[
APR_PATH_MAX
];

498 *
fûíame
 = 
NULL
;

501 
WIN32_FIND_DATAW
 
w
;

502 
WIN32_FIND_DATAA
 
n
;

503 
WIN32_FILE_ATTRIBUTE_DATA
 
i
;

504 } 
FûeInfo
;

510 i‡(
	`°æí
(
‚ame
Ë>
APR_PATH_MAX
) {

511  
APR_ENAMETOOLONG
;

514 #i‡
APR_HAS_UNICODE_FS


515 
IF_WIN_OS_IS_UNICODE


517 i‡((
w™ãd
 & (
APR_FINFO_IDENT
 | 
APR_FINFO_NLINK
))

518 || (~
w™ãd
 & 
APR_FINFO_LINK
)) {

530 i‡((
idít_rv
 = 
	`ªsﬁve_idít
(
föfo
, 
‚ame
, 
w™ãd
, 
poﬁ
))

531 =
APR_SUCCESS
)

532  
idít_rv
;

533 i‡(
idít_rv
 =
APR_INCOMPLETE
)

534 
w™ãd
 &~
föfo
->
vÆid
;

537 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w‚ame
, (wfname)

538 / (
≠r_wch¨_t
), 
‚ame
)))

539  
rv
;

540 i‡(!(
w™ãd
 & 
APR_FINFO_NAME
)) {

541 i‡(!
	`GëFûeAâribuãsExW
(
w‚ame
, 
GëFûeExInfoSènd¨d
,

542 &
FûeInfo
.
i
))

543  
	`≠r_gë_os_îr‹
();

550 
tm≤ame
[
APR_FILE_MAX
 * 3 + 1];

551 
HANDLE
 
hFöd
;

552 i‡((
rv
 = 
	`ã°_ß„_«me
(
‚ame
)Ë!
APR_SUCCESS
) {

553  
rv
;

555 
hFöd
 = 
	`FödFú°FûeW
(
w‚ame
, &
FûeInfo
.
w
);

556 i‡(
hFöd
 =
INVALID_HANDLE_VALUE
)

557  
	`≠r_gë_os_îr‹
();

558 
	`FödClo£
(
hFöd
);

559 i‡(
	`unicode_to_utf8_∑th
(
tm≤ame
, (tmpname),

560 
FûeInfo
.
w
.
cFûeName
)) {

561  
APR_ENAMETOOLONG
;

563 
fûíame
 = 
	`≠r_p°rdup
(
poﬁ
, 
tm≤ame
);

567 #i‡
APR_HAS_ANSI_FS


568 
ELSE_WIN_OS_IS_ANSI


570 *
roŸ
 = 
NULL
;

571 c⁄° *
ã°
 = 
‚ame
;

572 
rv
 = 
	`≠r_fûï©h_roŸ
(&
roŸ
, &
ã°
, 
APR_FILEPATH_NATIVE
, 
poﬁ
);

573 
i§oŸ
 = (
roŸ
 && *roŸ && !(*
ã°
));

575 i‡((
≠r_os_Àvñ
 >
APR_WIN_98
Ë&& (!(
w™ãd
 & 
APR_FINFO_NAME
Ë|| 
i§oŸ
))

580 i‡(!
	`GëFûeAâribuãsExA
(
‚ame
, 
GëFûeExInfoSènd¨d
,

581 &
FûeInfo
.
i
)) {

582  
	`≠r_gë_os_îr‹
();

585 i‡(
i§oŸ
) {

588 i‡(
	`GëDriveTy≥
(
‚ame
Ë!
DRIVE_UNKNOWN
)

590 
föfo
->
poﬁ
 =Öool;

591 
föfo
->
fûëy≥
 = 0;

592 
föfo
->
mtime
 = 
	`≠r_time_now
();

593 
föfo
->
¥Ÿe˘i⁄
 |
APR_WREAD
 | 
APR_WEXECUTE
 | 
APR_WWRITE
;

594 
föfo
->
¥Ÿe˘i⁄
 |(föfo->¥Ÿe˘i⁄ << 
¥Ÿ_sc›e_group
)

595 | (
föfo
->
¥Ÿe˘i⁄
 << 
¥Ÿ_sc›e_u£r
);

596 
föfo
->
vÆid
 |
APR_FINFO_TYPE
 | 
APR_FINFO_PROT


597 | 
APR_FINFO_MTIME


598 | (
w™ãd
 & 
APR_FINFO_LINK
);

599  (
w™ãd
 &~
föfo
->
vÆid
Ë? 
APR_INCOMPLETE


600 : 
APR_SUCCESS
;

603  
	`APR_FROM_OS_ERROR
(
ERROR_PATH_NOT_FOUND
);

610 
HANDLE
 
hFöd
;

611 i‡((
rv
 = 
	`ã°_ß„_«me
(
‚ame
)Ë!
APR_SUCCESS
) {

612  
rv
;

614 
hFöd
 = 
	`FödFú°FûeA
(
‚ame
, &
FûeInfo
.
n
);

615 i‡(
hFöd
 =
INVALID_HANDLE_VALUE
) {

616  
	`≠r_gë_os_îr‹
();

618 
	`FödClo£
(
hFöd
);

619 
fûíame
 = 
	`≠r_p°rdup
(
poﬁ
, 
FûeInfo
.
n
.
cFûeName
);

624 i‡(
idít_rv
 !
APR_INCOMPLETE
) {

625 i‡(
	`fûlö_fûeöfo
(
föfo
, (
WIN32_FILE_ATTRIBUTE_DATA
 *Ë&
FûeInfo
,

626 0, 
w™ãd
))

632 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
)

634 #i‡
APR_HAS_UNICODE_FS


635 
≠r_wch¨_t
 
tm≤ame
[
APR_FILE_MAX
];

636 
≠r_wch¨_t
 *
tmpoff
 = 
NULL
;

637 i‡(
	`GëFuŒP©hNameW
(
w‚ame
, (
tm≤ame
Ë/ (
≠r_wch¨_t
),

638 
tm≤ame
, &
tmpoff
))

640 i‡(!
	`wc¢cmp
(
tm≤ame
, 
L
"\\\\.\\", 4)) {

645 
tm≤ame
[
APR_FILE_MAX
];

646 *
tmpoff
;

647 i‡(
	`GëFuŒP©hName
(
‚ame
, (
tm≤ame
),Åm≤ame, &
tmpoff
))

649 i‡(!
	`°∫cmp
(
tm≤ame
, "\\\\.\\", 4)) {

651 i‡(
tmpoff
 =
tm≤ame
 + 4) {

652 
föfo
->
fûëy≥
 = 
APR_CHR
;

661 i‡(!
tmpoff
) {

662 
tmpoff
 = 
tm≤ame
 + 4;

663 *
tmpoff
) {

664 i‡(*
tmpoff
 == '\\' || *tmpoff == '/') {

667 ++
tmpoff
;

669 i‡(!*
tmpoff
) {

670 
föfo
->
fûëy≥
 = 
APR_CHR
;

676 
föfo
->
vÆid
 &~
APR_FINFO_TYPE
;

681 
föfo
->
vÆid
 &~
APR_FINFO_TYPE
;

684 
föfo
->
poﬁ
 =Öool;

687 i‡(
fûíame
 && !
i§oŸ
) {

688 
föfo
->
«me
 = 
fûíame
;

689 
föfo
->
vÆid
 |
APR_FINFO_NAME
;

692 i‡(
w™ãd
 &~
föfo
->
vÆid
) {

694 #i‡
APR_HAS_UNICODE_FS


695 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
)

696  
	`m‹e_föfo
(
föfo
, 
w‚ame
, 
w™ãd
, 
MORE_OF_WFSPEC
);

698  
	`m‹e_föfo
(
föfo
, 
‚ame
, 
w™ãd
, 
MORE_OF_FSPEC
);

701  
APR_SUCCESS
;

702 
	}
}

704 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_©ås_£t
(c⁄° *
‚ame
,

705 
≠r_fûóârs_t
 
©åibuãs
,

706 
≠r_fûóârs_t
 
©å_mask
,

707 
≠r_poﬁ_t
 *
poﬁ
)

709 
DWORD
 
Êags
;

710 
≠r_°©us_t
 
rv
;

711 #i‡
APR_HAS_UNICODE_FS


712 
≠r_wch¨_t
 
w‚ame
[
APR_PATH_MAX
];

716 i‡(!(
©å_mask
 & (
APR_FILE_ATTR_READONLY


717 | 
APR_FILE_ATTR_HIDDEN
)))

718  
APR_SUCCESS
;

720 #i‡
APR_HAS_UNICODE_FS


721 
IF_WIN_OS_IS_UNICODE


723 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w‚ame
,

724 (
w‚ame
) / (wfname[0]),

725 
‚ame
)))

726  
rv
;

727 
Êags
 = 
	`GëFûeAâribuãsW
(
w‚ame
);

730 #i‡
APR_HAS_ANSI_FS


731 
ELSE_WIN_OS_IS_ANSI


733 
Êags
 = 
	`GëFûeAâribuãsA
(
‚ame
);

737 i‡(
Êags
 == 0xFFFFFFFF)

738  
	`≠r_gë_os_îr‹
();

740 i‡(
©å_mask
 & 
APR_FILE_ATTR_READONLY
)

742 i‡(
©åibuãs
 & 
APR_FILE_ATTR_READONLY
)

743 
Êags
 |
FILE_ATTRIBUTE_READONLY
;

745 
Êags
 &~
FILE_ATTRIBUTE_READONLY
;

748 i‡(
©å_mask
 & 
APR_FILE_ATTR_HIDDEN
)

750 i‡(
©åibuãs
 & 
APR_FILE_ATTR_HIDDEN
)

751 
Êags
 |
FILE_ATTRIBUTE_HIDDEN
;

753 
Êags
 &~
FILE_ATTRIBUTE_HIDDEN
;

756 #i‡
APR_HAS_UNICODE_FS


757 
IF_WIN_OS_IS_UNICODE


759 
rv
 = 
	`SëFûeAâribuãsW
(
w‚ame
, 
Êags
);

762 #i‡
APR_HAS_ANSI_FS


763 
ELSE_WIN_OS_IS_ANSI


765 
rv
 = 
	`SëFûeAâribuãsA
(
‚ame
, 
Êags
);

769 i‡(
rv
 == 0)

770  
	`≠r_gë_os_îr‹
();

772  
APR_SUCCESS
;

773 
	}
}

776 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_mtime_£t
(c⁄° *
‚ame
,

777 
≠r_time_t
 
mtime
,

778 
≠r_poﬁ_t
 *
poﬁ
)

780 
≠r_fûe_t
 *
thefûe
;

781 
≠r_°©us_t
 
rv
;

783 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
‚ame
,

784 
APR_FOPEN_READ
 | 
APR_WRITEATTRS
,

785 
APR_OS_DEFAULT
, 
poﬁ
);

786 i‡(!
rv
)

788 
FILETIME
 
fûe_˘ime
;

789 
FILETIME
 
fûe_©ime
;

790 
FILETIME
 
fûe_mtime
;

792 i‡(!
	`GëFûeTime
(
thefûe
->
fûeh™d
,

793 &
fûe_˘ime
, &
fûe_©ime
, &
fûe_mtime
))

794 
rv
 = 
	`≠r_gë_os_îr‹
();

797 
	`A¥TimeToFûeTime
(&
fûe_mtime
, 
mtime
);

798 i‡(!
	`SëFûeTime
(
thefûe
->
fûeh™d
,

799 &
fûe_˘ime
, &
fûe_©ime
, &
fûe_mtime
))

800 
rv
 = 
	`≠r_gë_os_îr‹
();

803 
	`≠r_fûe_˛o£
(
thefûe
);

806  
rv
;

807 
	}
}

	@file_io/win32/filesys.c

17 
	~"≠r.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

49 c⁄° 
	g≠r_c_is_‚ch¨
[256] =

66 
≠r_°©us_t
 
	$fûï©h_roŸ_ã°
(*
∑th
, 
≠r_poﬁ_t
 *
p
)

68 
≠r_°©us_t
 
rv
;

69 #i‡
APR_HAS_UNICODE_FS


70 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
)

72 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

73 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
, (wpath)

74 / (
≠r_wch¨_t
), 
∑th
)))

75  
rv
;

76 
rv
 = 
	`GëDriveTy≥W
(
w∑th
);

80 
rv
 = 
	`GëDriveTy≥
(
∑th
);

82 i‡(
rv
 =
DRIVE_UNKNOWN
 ||Ñv =
DRIVE_NO_ROOT_DIR
)

83  
APR_EBADPATH
;

84  
APR_SUCCESS
;

85 
	}
}

88 
≠r_°©us_t
 
	$fûï©h_drive_gë
(**
roŸ∑th
, 
drive
,

89 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

91 
∑th
[
APR_PATH_MAX
];

92 #i‡
APR_HAS_UNICODE_FS


93 
IF_WIN_OS_IS_UNICODE


95 
≠r_wch¨_t
 *
ign‹ed
;

96 
≠r_wch¨_t
 
wdrive
[8];

97 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

98 
≠r_°©us_t
 
rv
;

102 
	`wcs˝y
(
wdrive
, 
L
"D:.");

103 
wdrive
[0] = (
≠r_wch¨_t
)()
drive
;

104 i‡(!
	`GëFuŒP©hNameW
(
wdrive
, (
w∑th
Ë/ (
≠r_wch¨_t
), w∑th, &
ign‹ed
))

105  
	`≠r_gë_os_îr‹
();

106 i‡((
rv
 = 
	`unicode_to_utf8_∑th
(
∑th
, ’©h), 
w∑th
)))

107  
rv
;

110 #i‡
APR_HAS_ANSI_FS


111 
ELSE_WIN_OS_IS_ANSI


113 *
ign‹ed
;

114 
drive°r
[4];

115 
drive°r
[0] = 
drive
;

116 
drive°r
[1] = ':';

117 
drive°r
[2] = '.';;

118 
drive°r
[3] = '\0';

119 i‡(!
	`GëFuŒP©hName
(
drive°r
, (
∑th
),Ö©h, &
ign‹ed
))

120  
	`≠r_gë_os_îr‹
();

123 i‡(!(
Êags
 & 
APR_FILEPATH_NATIVE
)) {

124 *
roŸ∑th
 = 
∑th
; **rootpath; ++*rootpath) {

125 i‡(**
roŸ∑th
 == '\\')

126 **
roŸ∑th
 = '/';

129 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

130  
APR_SUCCESS
;

131 
	}
}

134 
≠r_°©us_t
 
	$fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
)

136 #i‡
APR_HAS_UNICODE_FS


137 
IF_WIN_OS_IS_UNICODE


139 
≠r_wch¨_t
 *
ign‹ed
;

140 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

141 
≠r_°©us_t
 
rv
;

142 
≠r_wch¨_t
 
wroŸ
[
APR_PATH_MAX
];

146 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
wroŸ
, (wroot)

147 / (
≠r_wch¨_t
), 
roŸ
)))

148  
rv
;

149 i‡(!
	`GëFuŒP©hNameW
(
wroŸ
, (
w∑th
Ë/ (
≠r_wch¨_t
), w∑th, &
ign‹ed
))

150  
	`≠r_gë_os_îr‹
();

154 i‡((
rv
 = 
	`unicode_to_utf8_∑th
((*)
wroŸ
, (wroŸ), 
w∑th
)))

155  
rv
;

156 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, (*)
wroŸ
);

159 #i‡
APR_HAS_ANSI_FS


160 
ELSE_WIN_OS_IS_ANSI


162 
∑th
[
APR_PATH_MAX
];

163 *
ign‹ed
;

164 i‡(!
	`GëFuŒP©hName
(
roŸ
, (
∑th
),Ö©h, &
ign‹ed
))

165  
	`≠r_gë_os_îr‹
();

166 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

169  
APR_SUCCESS
;

170 
	}
}

173 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_gë
(**
roŸ∑th
, 
≠r_öt32_t
 
Êags
,

174 
≠r_poﬁ_t
 *
p
)

176 
∑th
[
APR_PATH_MAX
];

177 #i‡
APR_HAS_UNICODE_FS


178 
IF_WIN_OS_IS_UNICODE


180 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

181 
≠r_°©us_t
 
rv
;

182 i‡(!
	`GëCuºítDúe˘‹yW
((
w∑th
Ë/ (
≠r_wch¨_t
), wpath))

183  
	`≠r_gë_os_îr‹
();

184 i‡((
rv
 = 
	`unicode_to_utf8_∑th
(
∑th
, ’©h), 
w∑th
)))

185  
rv
;

188 #i‡
APR_HAS_ANSI_FS


189 
ELSE_WIN_OS_IS_ANSI


191 i‡(!
	`GëCuºítDúe˘‹y
((
∑th
),Öath))

192  
	`≠r_gë_os_îr‹
();

195 i‡(!(
Êags
 & 
APR_FILEPATH_NATIVE
)) {

196 *
roŸ∑th
 = 
∑th
; **rootpath; ++*rootpath) {

197 i‡(**
roŸ∑th
 == '\\')

198 **
roŸ∑th
 = '/';

201 *
roŸ∑th
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

202  
APR_SUCCESS
;

203 
	}
}

206 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûï©h_£t
(c⁄° *
roŸ∑th
,

207 
≠r_poﬁ_t
 *
p
)

209 #i‡
APR_HAS_UNICODE_FS


210 
IF_WIN_OS_IS_UNICODE


212 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

213 
≠r_°©us_t
 
rv
;

214 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
, (wpath)

215 / (
≠r_wch¨_t
), 
roŸ∑th
)))

216  
rv
;

217 i‡(!
	`SëCuºítDúe˘‹yW
(
w∑th
))

218  
	`≠r_gë_os_îr‹
();

221 #i‡
APR_HAS_ANSI_FS


222 
ELSE_WIN_OS_IS_ANSI


224 i‡(!
	`SëCuºítDúe˘‹y
(
roŸ∑th
))

225  
	`≠r_gë_os_îr‹
();

228  
APR_SUCCESS
;

229 
	}
}

	@file_io/win32/flock.c

17 
	~"≠r_¨ch_fûe_io.h
"

19 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_lock
(
≠r_fûe_t
 *
thefûe
, 
ty≥
)

21 #ifde‡
_WIN32_WCE


23  
APR_ENOTIMPL
;

25 c⁄° 
DWORD
 
Àn
 = 0xffffffff;

26 
DWORD
 
Êags
;

28 
Êags
 = ((
ty≥
 & 
APR_FLOCK_NONBLOCK
Ë? 
LOCKFILE_FAIL_IMMEDIATELY
 : 0)

29 + (((
ty≥
 & 
APR_FLOCK_TYPEMASK
Ë=
APR_FLOCK_SHARED
)

30 ? 0 : 
LOCKFILE_EXCLUSIVE_LOCK
);

31 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

33 
OVERLAPPED
 
off£t
;

34 
	`mem£t
 (&
off£t
, 0, (offset));

35 i‡(!
	`LockFûeEx
(
thefûe
->
fûeh™d
, 
Êags
, 0, 
Àn
,Üí, &
off£t
))

36  
	`≠r_gë_os_îr‹
();

50 !
	`LockFûe
(
thefûe
->
fûeh™d
, 0, 0, 
Àn
, 0)) {

51 
DWORD
 
îr
 = 
	`GëLa°Eº‹
();

52 i‡((
îr
 =
ERROR_LOCK_VIOLATION
Ë&& !(
ty≥
 & 
APR_FLOCK_NONBLOCK
))

54 
	`SÀï
(500);

57  
	`APR_FROM_OS_ERROR
(
îr
);

61  
APR_SUCCESS
;

63 
	}
}

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_u∆ock
(
≠r_fûe_t
 *
thefûe
)

67 #ifde‡
_WIN32_WCE


68  
APR_ENOTIMPL
;

70 
DWORD
 
Àn
 = 0xffffffff;

72 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

74 
OVERLAPPED
 
off£t
;

75 
	`mem£t
 (&
off£t
, 0, (offset));

76 i‡(!
	`U∆ockFûeEx
(
thefûe
->
fûeh™d
, 0, 
Àn
,Üí, &
off£t
))

77  
	`≠r_gë_os_îr‹
();

80 i‡(!
	`U∆ockFûe
(
thefûe
->
fûeh™d
, 0, 0, 
Àn
, 0))

81  
	`≠r_gë_os_îr‹
();

84  
APR_SUCCESS
;

86 
	}
}

	@file_io/win32/open.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_p‹èbÀ.h
"

23 
	~"≠r_thªad_muãx.h
"

24 #i‡
APR_HAVE_ERRNO_H


25 
	~<î∫o.h
>

27 
	~<wöba£.h
>

28 
	~<°rög.h
>

29 #i‡
APR_HAVE_SYS_STAT_H


30 
	~<sys/°©.h
>

32 
	~"≠r_¨ch_misc.h
"

33 
	~"≠r_¨ch_öhîô.h
"

34 
	~<io.h
>

35 
	~<wöio˘l.h
>

37 #i‡
APR_HAS_UNICODE_FS


38 
≠r_°©us_t
 
	$utf8_to_unicode_∑th
(
≠r_wch¨_t
* 
ªt°r
, 
≠r_size_t
 
ªéí
,

39 c⁄° * 
§c°r
)

53 
≠r_size_t
 
§¸emaös
 = 
	`°æí
(
§c°r
) + 1;

54 
≠r_wch¨_t
 *
t
 = 
ªt°r
;

55 
≠r_°©us_t
 
rv
;

71 i‡(
§¸emaös
 > 248) {

72 i‡(
§c°r
[1] == ':' && (srcstr[2] == '/' || srcstr[2] == '\\')) {

73 
	`wcs˝y
 (
ªt°r
, 
L
"\\\\?\\");

74 
ªéí
 -= 4;

75 
t
 += 4;

77 i‡((
§c°r
[0] == '/' || srcstr[0] == '\\')

78 && (
§c°r
[1] == '/' || srcstr[1] == '\\')

79 && (
§c°r
[2] != '?')) {

81 
§c°r
 += 2;

82 
§¸emaös
 -= 2;

83 
	`wcs˝y
 (
ªt°r
, 
L
"\\\\?\\UNC\\");

84 
ªéí
 -= 8;

85 
t
 += 8;

89 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
§c°r
, &
§¸emaös
, 
t
, &
ªéí
))) {

90  (
rv
 =
APR_INCOMPLETE
Ë? 
APR_EINVAL
 :Ñv;

92 i‡(
§¸emaös
) {

93  
APR_ENAMETOOLONG
;

95 ; *
t
; ++t)

96 i‡(*
t
 =
L
'/')

97 *
t
 = 
L
'\\';

98  
APR_SUCCESS
;

99 
	}
}

101 
≠r_°©us_t
 
	$unicode_to_utf8_∑th
(* 
ªt°r
, 
≠r_size_t
 
ªéí
,

102 c⁄° 
≠r_wch¨_t
* 
§c°r
)

110 
≠r_size_t
 
§¸emaös
 = 
	`wc¶í
(
§c°r
) + 1;

111 
≠r_°©us_t
 
rv
;

112 *
t
 = 
ªt°r
;

113 i‡(
§c°r
[0] =
L
'\\' && srcstr[1] == L'\\' &&

114 
§c°r
[2] =
L
'?' && srcstr[3] == L'\\') {

115 i‡(
§c°r
[4] =
L
'U' && srcstr[5] == L'N' &&

116 
§c°r
[6] =
L
'C' && srcstr[7] == L'\\') {

117 
§¸emaös
 -= 8;

118 
§c°r
 += 8;

119 
ªt°r
[0] = '\\';

120 
ªt°r
[1] = '\\';

121 
ªéí
 -= 2;

122 
t
 += 2;

125 
§¸emaös
 -= 4;

126 
§c°r
 += 4;

130 i‡((
rv
 = 
	`≠r_c⁄v_ucs2_to_utf8
(
§c°r
, &
§¸emaös
, 
t
, &
ªéí
))) {

131  
rv
;

133 i‡(
§¸emaös
) {

134  
APR_ENAMETOOLONG
;

136  
APR_SUCCESS
;

137 
	}
}

140 *
	$ªs_«me_‰om_fûíame
(c⁄° *
fûe
, 
globÆ
, 
≠r_poﬁ_t
 *
poﬁ
)

142 #i‡
APR_HAS_UNICODE_FS


143 
IF_WIN_OS_IS_UNICODE


145 
≠r_wch¨_t
 *
w¥e
, *
wfûe
, *
ch
;

146 
≠r_size_t
 
n
 = 
	`°æí
(
fûe
) + 1;

147 
≠r_size_t
 
r
, 
d
;

149 i‡(
≠r_os_Àvñ
 >
APR_WIN_2000
) {

150 i‡(
globÆ
)

151 
w¥e
 = 
L
"Global\\";

153 
w¥e
 = 
L
"Local\\";

156 
w¥e
 = 
L
"";

157 
r
 = 
	`wc¶í
(
w¥e
);

159 i‡(
n
 > 256 - 
r
) {

160 
fûe
 +
n
 - 256 - 
r
;

161 
n
 = 256;

163 (*
fûe
 & 0xC0) == 0x80) {

164 ++
fûe
;

165 --
n
;

168 
wfûe
 = 
	`≠r_∑Œoc
(
poﬁ
, (
r
 + 
n
Ë* (
≠r_wch¨_t
));

169 
	`wcs˝y
(
wfûe
, 
w¥e
);

170 
d
 = 
n
;

171 i‡(
	`≠r_c⁄v_utf8_to_ucs2
(
fûe
, &
n
, 
wfûe
 + 
r
, &
d
)) {

172  
NULL
;

174 
ch
 = 
wfûe
 + 
r
; *ch; ++ch) {

175 i‡(*
ch
 == ':' || *ch == '/' || *ch == '\\')

176 *
ch
 = '_';

178  
wfûe
;

181 #i‡
APR_HAS_ANSI_FS


182 
ELSE_WIN_OS_IS_ANSI


184 *
nfûe
, *
ch
;

185 
≠r_size_t
 
n
 = 
	`°æí
(
fûe
) + 1;

187 #i‡!
APR_HAS_UNICODE_FS


188 
≠r_size_t
 
r
, 
d
;

189 *
¥e
;

191 i‡(
≠r_os_Àvñ
 >
APR_WIN_2000
) {

192 i‡(
globÆ
)

193 
¥e
 = "Global\\";

195 
¥e
 = "Local\\";

198 
¥e
 = "";

199 
r
 = 
	`°æí
(
¥e
);

201 i‡(
n
 > 256 - 
r
) {

202 
fûe
 +
n
 - 256 - 
r
;

203 
n
 = 256;

205 
nfûe
 = 
	`≠r_∑Œoc
(
poﬁ
, (
r
 + 
n
Ë* (
≠r_wch¨_t
));

206 
	`mem˝y
(
nfûe
, 
¥e
, 
r
);

207 
	`mem˝y
(
nfûe
 + 
r
, 
fûe
, 
n
);

209 c⁄° 
≠r_size_t
 
r
 = 0;

210 i‡(
n
 > 256) {

211 
fûe
 +
n
 - 256;

212 
n
 = 256;

214 
nfûe
 = 
	`≠r_pmemdup
(
poﬁ
, 
fûe
, 
n
);

216 
ch
 = 
nfûe
 + 
r
; *ch; ++ch) {

217 i‡(*
ch
 == ':' || *ch == '/' || *ch == '\\')

218 *
ch
 = '_';

220  
nfûe
;

223 
	}
}

225 #i‡
APR_HAS_UNICODE_FS


226 
≠r_°©us_t
 
	$make_•¨£_fûe
(
≠r_fûe_t
 *
fûe
)

228 
BY_HANDLE_FILE_INFORMATION
 
öfo
;

229 
≠r_°©us_t
 
rv
;

230 
DWORD
 
byã§ód
 = 0;

231 
DWORD
 
ªs
;

235 i‡(
	`GëFûeInf‹m©i⁄ByH™dÀ
(
fûe
->
fûeh™d
, &
öfo
)

236 && (
öfo
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_SPARSE_FILE
))

237  
APR_SUCCESS
;

239 i‡(
fûe
->
pOvîœµed
) {

240 
fûe
->
pOvîœµed
->
Off£t
 = 0;

241 
fûe
->
pOvîœµed
->
Off£tHigh
 = 0;

244 i‡(
	`Devi˚IoC⁄åﬁ
(
fûe
->
fûeh™d
, 
FSCTL_SET_SPARSE
, 
NULL
, 0, NULL, 0,

245 &
byã§ód
, 
fûe
->
pOvîœµed
)) {

246 
rv
 = 
APR_SUCCESS
;

250 
rv
 = 
	`≠r_gë_os_îr‹
();

252 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_IO_PENDING
))

255 
ªs
 = 
	`WaôF‹SögÀObje˘
(
fûe
->
pOvîœµed
->
hEvít
,

256 (
fûe
->
timeout
 > 0)

257 ? (
DWORD
)(
fûe
->
timeout
/1000)

258 : ((
fûe
->
timeout
 == -1)

259 ? 
INFINITE
 : 0));

260 } 
ªs
 =
WAIT_ABANDONED
);

262 i‡(
ªs
 !
WAIT_OBJECT_0
) {

263 
	`C™˚lIo
(
fûe
->
fûeh™d
);

266 i‡(
	`GëOvîœµedResu…
(
fûe
->
fûeh™d
, fûe->
pOvîœµed
,

267 &
byã§ód
, 
TRUE
))

268 
rv
 = 
APR_SUCCESS
;

270 
rv
 = 
	`≠r_gë_os_îr‹
();

273  
rv
;

274 
	}
}

277 
≠r_°©us_t
 
	$fûe_˛ónup
(*
thefûe
)

279 
≠r_fûe_t
 *
fûe
 = 
thefûe
;

280 
≠r_°©us_t
 
Êush_rv
 = 
APR_SUCCESS
;

282 i‡(
fûe
->
fûeh™d
 !
INVALID_HANDLE_VALUE
) {

284 i‡(
fûe
->
buf„ªd
) {

286 
Êush_rv
 = 
	`≠r_fûe_Êush
((
≠r_fûe_t
 *)
thefûe
);

294 i‡(
fûe
->
Êags
 & 
APR_STD_FLAGS
)

296 i‡((
fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDERR_FLAG
) {

297 
	`_˛o£
(2);

298 
	`SëStdH™dÀ
(
STD_ERROR_HANDLE
, 
INVALID_HANDLE_VALUE
);

300 i‡((
fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDOUT_FLAG
) {

301 
	`_˛o£
(1);

302 
	`SëStdH™dÀ
(
STD_OUTPUT_HANDLE
, 
INVALID_HANDLE_VALUE
);

304 i‡((
fûe
->
Êags
 & 
APR_STD_FLAGS
Ë=
APR_STDIN_FLAG
) {

305 
	`_˛o£
(0);

306 
	`SëStdH™dÀ
(
STD_INPUT_HANDLE
, 
INVALID_HANDLE_VALUE
);

310 
	`Clo£H™dÀ
(
fûe
->
fûeh™d
);

312 
fûe
->
fûeh™d
 = 
INVALID_HANDLE_VALUE
;

314 i‡(
fûe
->
pOvîœµed
 && fûe->pOvîœµed->
hEvít
) {

315 
	`Clo£H™dÀ
(
fûe
->
pOvîœµed
->
hEvít
);

316 
fûe
->
pOvîœµed
 = 
NULL
;

318  
Êush_rv
;

319 
	}
}

321 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í
(
≠r_fûe_t
 **
√w
, c⁄° *
‚ame
,

322 
≠r_öt32_t
 
Êag
, 
≠r_fûïîms_t
 
≥rm
,

323 
≠r_poﬁ_t
 *
poﬁ
)

325 
HANDLE
 
h™dÀ
 = 
INVALID_HANDLE_VALUE
;

326 
DWORD
 
oÊags
 = 0;

327 
DWORD
 
¸óãÊags
 = 0;

328 
DWORD
 
©åibuãs
 = 0;

329 
DWORD
 
sh¨emode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

330 
≠r_°©us_t
 
rv
;

332 i‡(
Êag
 & 
APR_FOPEN_NONBLOCK
) {

333  
APR_ENOTIMPL
;

335 i‡(
Êag
 & 
APR_FOPEN_READ
) {

336 
oÊags
 |
GENERIC_READ
;

338 i‡(
Êag
 & 
APR_FOPEN_WRITE
) {

339 
oÊags
 |
GENERIC_WRITE
;

341 i‡(
Êag
 & 
APR_WRITEATTRS
) {

342 
oÊags
 |
FILE_WRITE_ATTRIBUTES
;

345 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
)

346 
sh¨emode
 |
FILE_SHARE_DELETE
;

348 i‡(
Êag
 & 
APR_FOPEN_CREATE
) {

349 i‡(
Êag
 & 
APR_FOPEN_EXCL
) {

351 
¸óãÊags
 = 
CREATE_NEW
;

352 } i‡(
Êag
 & 
APR_FOPEN_TRUNCATE
) {

354 
¸óãÊags
 = 
CREATE_ALWAYS
;

357 
¸óãÊags
 = 
OPEN_ALWAYS
;

359 } i‡(
Êag
 & 
APR_FOPEN_TRUNCATE
) {

361 
¸óãÊags
 = 
TRUNCATE_EXISTING
;

364 
¸óãÊags
 = 
OPEN_EXISTING
;

367 i‡((
Êag
 & 
APR_FOPEN_EXCL
Ë&& !(Êag & 
APR_FOPEN_CREATE
)) {

368  
APR_EACCES
;

371 i‡(
Êag
 & 
APR_FOPEN_DELONCLOSE
) {

372 
©åibuãs
 |
FILE_FLAG_DELETE_ON_CLOSE
;

375 i‡(
Êag
 & 
APR_OPENLINK
) {

376 
©åibuãs
 |
FILE_FLAG_OPEN_REPARSE_POINT
;

386 i‡(!(
Êag
 & (
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
))) {

387 i‡(
Êag
 & 
APR_OPENINFO
) {

388 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

389 
©åibuãs
 |
FILE_FLAG_BACKUP_SEMANTICS
;

393  
APR_EACCES
;

395 i‡(
Êag
 & 
APR_READCONTROL
)

396 
oÊags
 |
READ_CONTROL
;

399 i‡(
Êag
 & 
APR_FOPEN_XTHREAD
) {

403 
©åibuãs
 |
FILE_FLAG_OVERLAPPED
;

406 #i‡
APR_HAS_UNICODE_FS


407 
IF_WIN_OS_IS_UNICODE


409 
≠r_wch¨_t
 
w‚ame
[
APR_PATH_MAX
];

411 i‡(
Êag
 & 
APR_FOPEN_SENDFILE_ENABLED
) {

415 
Êag
 |
APR_FOPEN_XTHREAD
;

416 
©åibuãs
 |
FILE_FLAG_SEQUENTIAL_SCAN
 | 
FILE_FLAG_OVERLAPPED
;

419 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w‚ame
, (wfname)

420 / (
≠r_wch¨_t
), 
‚ame
)))

421  
rv
;

422 
h™dÀ
 = 
	`Cª©eFûeW
(
w‚ame
, 
oÊags
, 
sh¨emode
,

423 
NULL
, 
¸óãÊags
, 
©åibuãs
, 0);

426 #i‡
APR_HAS_ANSI_FS


427 
ELSE_WIN_OS_IS_ANSI
 {

428 
h™dÀ
 = 
	`Cª©eFûeA
(
‚ame
, 
oÊags
, 
sh¨emode
,

429 
NULL
, 
¸óãÊags
, 
©åibuãs
, 0);

431 
Êag
 &~
APR_FOPEN_SENDFILE_ENABLED
;

434 i‡(
h™dÀ
 =
INVALID_HANDLE_VALUE
) {

435  
	`≠r_gë_os_îr‹
();

438 (*
√w
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_file_t));

439 (*
√w
)->
poﬁ
 =Öool;

440 (*
√w
)->
fûeh™d
 = 
h™dÀ
;

441 (*
√w
)->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, fname);

442 (*
√w
)->
Êags
 = 
Êag
;

443 (*
√w
)->
timeout
 = -1;

444 (*
√w
)->
ungëch¨
 = -1;

446 i‡(
Êag
 & 
APR_FOPEN_APPEND
) {

447 (*
√w
)->
≠≥nd
 = 1;

448 
	`SëFûePoöãr
((*
√w
)->
fûeh™d
, 0, 
NULL
, 
FILE_END
);

450 i‡(
Êag
 & 
APR_FOPEN_BUFFERED
) {

451 (*
√w
)->
buf„ªd
 = 1;

452 (*
√w
)->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

453 (*
√w
)->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

456 i‡((*
√w
)->
buf„ªd
 || (*√w)->
≠≥nd
) {

457 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&(*
√w
)->
muãx
,

458 
APR_THREAD_MUTEX_DEFAULT
, 
poﬁ
);

459 i‡(
rv
) {

460 i‡(
	`fûe_˛ónup
(*
√w
Ë=
APR_SUCCESS
) {

461 
	`≠r_poﬁ_˛ónup_kûl
(
poﬁ
, *
√w
, 
fûe_˛ónup
);

463  
rv
;

467 #i‡
APR_HAS_UNICODE_FS


468 i‡((
≠r_os_Àvñ
 >
APR_WIN_2000
Ë&& ((*
√w
)->
Êags
 & 
APR_FOPEN_SPARSE
)) {

469 i‡((
rv
 = 
	`make_•¨£_fûe
(*
√w
)Ë!
APR_SUCCESS
)

474 (*
√w
)->
Êags
 &~
APR_FOPEN_SPARSE
;

479 (*
√w
)->
Êags
 &~
APR_FOPEN_SPARSE
;

481 #i‡
APR_FILES_AS_SOCKETS


484 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w
)->
pﬁl£t
, 1, 
poﬁ
, 0);

486 i‡(!(
Êag
 & 
APR_FOPEN_NOCLEANUP
)) {

487 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*√w), 
fûe_˛ónup
,

488 
≠r_poﬁ_˛ónup_nuŒ
);

490  
APR_SUCCESS
;

491 
	}
}

493 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_˛o£
(
≠r_fûe_t
 *
fûe
)

495 
≠r_°©us_t
 
°©
;

496 i‡((
°©
 = 
	`fûe_˛ónup
(
fûe
)Ë=
APR_SUCCESS
) {

497 
	`≠r_poﬁ_˛ónup_kûl
(
fûe
->
poﬁ
, fûe, 
fûe_˛ónup
);

499 i‡(
fûe
->
muãx
) {

500 
	`≠r_thªad_muãx_de°roy
(
fûe
->
muãx
);

503  
APR_SUCCESS
;

505  
°©
;

506 
	}
}

508 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
)

510 #i‡
APR_HAS_UNICODE_FS


511 
IF_WIN_OS_IS_UNICODE


513 
≠r_wch¨_t
 
w∑th
[
APR_PATH_MAX
];

514 
≠r_°©us_t
 
rv
;

515 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w∑th
, (wpath)

516 / (
≠r_wch¨_t
), 
∑th
))) {

517  
rv
;

519 i‡(
	`DñëeFûeW
(
w∑th
))

520  
APR_SUCCESS
;

523 #i‡
APR_HAS_ANSI_FS


524 
ELSE_WIN_OS_IS_ANSI


525 i‡(
	`DñëeFûe
(
∑th
))

526  
APR_SUCCESS
;

528  
	`≠r_gë_os_îr‹
();

529 
	}
}

531 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ª«me
(c⁄° *
‰om∑th
,

532 c⁄° *
t›©h
,

533 
≠r_poﬁ_t
 *
poﬁ
)

535 
IF_WIN_OS_IS_UNICODE


537 #i‡
APR_HAS_UNICODE_FS


538 
≠r_wch¨_t
 
w‰om∑th
[
APR_PATH_MAX
], 
wt›©h
[APR_PATH_MAX];

539 
≠r_°©us_t
 
rv
;

540 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w‰om∑th
,

541 (
w‰om∑th
Ë/ (
≠r_wch¨_t
),

542 
‰om∑th
))) {

543  
rv
;

545 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
wt›©h
,

546 (
wt›©h
Ë/ (
≠r_wch¨_t
),

547 
t›©h
))) {

548  
rv
;

550 #i‚de‡
_WIN32_WCE


551 i‡(
	`MoveFûeExW
(
w‰om∑th
, 
wt›©h
, 
MOVEFILE_REPLACE_EXISTING
 |

552 
MOVEFILE_COPY_ALLOWED
))

554 i‡(
	`MoveFûeW
(
w‰om∑th
, 
wt›©h
))

556  
APR_SUCCESS
;

558 i‡(
	`MoveFûeEx
(
‰om∑th
, 
t›©h
, 
MOVEFILE_REPLACE_EXISTING
 |

559 
MOVEFILE_COPY_ALLOWED
))

560  
APR_SUCCESS
;

563 #i‡
APR_HAS_ANSI_FS


564 
ELSE_WIN_OS_IS_ANSI


572 
HANDLE
 
h™dÀ
 = 
INVALID_HANDLE_VALUE
;

574 i‡((
h™dÀ
 = 
	`Cª©eFûe
(
t›©h
, 
GENERIC_WRITE
, 0, 0,

575 
OPEN_EXISTING
, 0, 0 )Ë!
INVALID_HANDLE_VALUE
 )

577 
	`Clo£H™dÀ
(
h™dÀ
);

578 i‡(!
	`DñëeFûe
(
t›©h
))

579  
	`≠r_gë_os_îr‹
();

581 i‡(
	`MoveFûe
(
‰om∑th
, 
t›©h
))

582  
APR_SUCCESS
;

585  
	`≠r_gë_os_îr‹
();

586 
	}
}

588 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_lök
(c⁄° *
‰om_∑th
,

589 c⁄° *
to_∑th
)

591 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

593 #i‡
APR_HAS_UNICODE_FS


594 
IF_WIN_OS_IS_UNICODE


596 
≠r_wch¨_t
 
w‰om_∑th
[
APR_PATH_MAX
];

597 
≠r_wch¨_t
 
wto_∑th
[
APR_PATH_MAX
];

599 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
w‰om_∑th
,

600 (
w‰om_∑th
Ë/ (
≠r_wch¨_t
),

601 
‰om_∑th
)))

602  
rv
;

603 i‡((
rv
 = 
	`utf8_to_unicode_∑th
(
wto_∑th
,

604 (
wto_∑th
Ë/ (
≠r_wch¨_t
),

605 
to_∑th
)))

606  
rv
;

608 i‡(!
	`Cª©eH¨dLökW
(
wto_∑th
, 
w‰om_∑th
, 
NULL
))

609  
	`≠r_gë_os_îr‹
();

612 #i‡
APR_HAS_ANSI_FS


613 
ELSE_WIN_OS_IS_ANSI
 {

614 i‡(!
	`Cª©eH¨dLökA
(
to_∑th
, 
‰om_∑th
, 
NULL
))

615  
	`≠r_gë_os_îr‹
();

618  
rv
;

619 
	}
}

621 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_gë
(
≠r_os_fûe_t
 *
thefûe
,

622 
≠r_fûe_t
 *
fûe
)

624 *
thefûe
 = 
fûe
->
fûeh™d
;

625  
APR_SUCCESS
;

626 
	}
}

628 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_fûe_put
(
≠r_fûe_t
 **
fûe
,

629 
≠r_os_fûe_t
 *
thefûe
,

630 
≠r_öt32_t
 
Êags
,

631 
≠r_poﬁ_t
 *
poﬁ
)

633 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

634 (*
fûe
)->
poﬁ
 =Öool;

635 (*
fûe
)->
fûeh™d
 = *
thefûe
;

636 (*
fûe
)->
ungëch¨
 = -1;

637 (*
fûe
)->
timeout
 = -1;

638 (*
fûe
)->
Êags
 = flags;

640 i‡(
Êags
 & 
APR_FOPEN_APPEND
) {

641 (*
fûe
)->
≠≥nd
 = 1;

643 i‡(
Êags
 & 
APR_FOPEN_BUFFERED
) {

644 (*
fûe
)->
buf„ªd
 = 1;

645 (*
fûe
)->
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
APR_FILE_DEFAULT_BUFSIZE
);

646 (*
fûe
)->
bufsize
 = 
APR_FILE_DEFAULT_BUFSIZE
;

649 i‡((*
fûe
)->
≠≥nd
 || (*fûe)->
buf„ªd
) {

650 
≠r_°©us_t
 
rv
;

651 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&(*
fûe
)->
muãx
,

652 
APR_THREAD_MUTEX_DEFAULT
, 
poﬁ
);

653 i‡(
rv
) {

654  
rv
;

658 #i‡
APR_FILES_AS_SOCKETS


661 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
fûe
)->
pﬁl£t
, 1, 
poﬁ
, 0);

668  
APR_SUCCESS
;

669 
	}
}

671 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_eof
(
≠r_fûe_t
 *
Âå
)

673 i‡(
Âå
->
eof_hô
 == 1) {

674  
APR_EOF
;

676  
APR_SUCCESS
;

677 
	}
}

679 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dîr
(
≠r_fûe_t
 **
thefûe
,

680 
≠r_öt32_t
 
Êags
,

681 
≠r_poﬁ_t
 *
poﬁ
)

683 #ifde‡
_WIN32_WCE


684  
APR_ENOTIMPL
;

686 
≠r_os_fûe_t
 
fûe_h™dÀ
;

688 
	`≠r_£t_os_îr‹
(
APR_SUCCESS
);

689 
fûe_h™dÀ
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

690 i‡(!
fûe_h™dÀ
)

691 
fûe_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

693  
	`≠r_os_fûe_put
(
thefûe
, &
fûe_h™dÀ
,

694 
Êags
 | 
APR_FOPEN_WRITE
 | 
APR_STDERR_FLAG
, 
poﬁ
);

696 
	}
}

698 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dout
(
≠r_fûe_t
 **
thefûe
,

699 
≠r_öt32_t
 
Êags
,

700 
≠r_poﬁ_t
 *
poﬁ
)

702 #ifde‡
_WIN32_WCE


703  
APR_ENOTIMPL
;

705 
≠r_os_fûe_t
 
fûe_h™dÀ
;

707 
	`≠r_£t_os_îr‹
(
APR_SUCCESS
);

708 
fûe_h™dÀ
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

709 i‡(!
fûe_h™dÀ
)

710 
fûe_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

712  
	`≠r_os_fûe_put
(
thefûe
, &
fûe_h™dÀ
,

713 
Êags
 | 
APR_FOPEN_WRITE
 | 
APR_STDOUT_FLAG
, 
poﬁ
);

715 
	}
}

717 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_Êags_°dö
(
≠r_fûe_t
 **
thefûe
,

718 
≠r_öt32_t
 
Êags
,

719 
≠r_poﬁ_t
 *
poﬁ
)

721 #ifde‡
_WIN32_WCE


722  
APR_ENOTIMPL
;

724 
≠r_os_fûe_t
 
fûe_h™dÀ
;

726 
	`≠r_£t_os_îr‹
(
APR_SUCCESS
);

727 
fûe_h™dÀ
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

728 i‡(!
fûe_h™dÀ
)

729 
fûe_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

731  
	`≠r_os_fûe_put
(
thefûe
, &
fûe_h™dÀ
,

732 
Êags
 | 
APR_FOPEN_READ
 | 
APR_STDIN_FLAG
, 
poﬁ
);

734 
	}
}

736 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dîr
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

738  
	`≠r_fûe_›í_Êags_°dîr
(
thefûe
, 0, 
poﬁ
);

739 
	}
}

741 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dout
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

743  
	`≠r_fûe_›í_Êags_°dout
(
thefûe
, 0, 
poﬁ
);

744 
	}
}

746 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_›í_°dö
(
≠r_fûe_t
 **
thefûe
, 
≠r_poﬁ_t
 *
poﬁ
)

748  
	`≠r_fûe_›í_Êags_°dö
(
thefûe
, 0, 
poﬁ
);

749 
	}
}

751 
APR_POOL_IMPLEMENT_ACCESSOR
(
fûe
);

753 
	$APR_IMPLEMENT_INHERIT_SET
(
fûe
, 
Êags
, 
poﬁ
, 
fûe_˛ónup
)

755 
	`APR_IMPLEMENT_INHERIT_UNSET
(
fûe
, 
Êags
, 
poﬁ
, 
fûe_˛ónup
)

	@file_io/win32/pipe.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 #i‡
APR_HAVE_ERRNO_H


22 
	~<î∫o.h
>

24 
	~<°rög.h
>

25 
	~<°dio.h
>

26 #i‡
APR_HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

29 #i‡
APR_HAVE_SYS_STAT_H


30 
	~<sys/°©.h
>

32 #i‡
APR_HAVE_PROCESS_H


33 
	~<¥o˚ss.h
>

35 
	~"≠r_¨ch_misc.h
"

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_£t
(
≠r_fûe_t
 *
thïùe
,

38 
≠r_öãrvÆ_time_t
 
timeout
)

41 i‡(
timeout
 == -1) {

42 
thïùe
->
timeout
 =Åimeout;

43  
APR_SUCCESS
;

45 i‡(!
thïùe
->
pùe
) {

46  
APR_ENOTIMPL
;

48 i‡(
timeout
 && !(
thïùe
->
pOvîœµed
)) {

50  
APR_EINVAL
;

52 
thïùe
->
timeout
 =Åimeout;

53  
APR_SUCCESS
;

54 
	}
}

56 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_timeout_gë
(
≠r_fûe_t
 *
thïùe
,

57 
≠r_öãrvÆ_time_t
 *
timeout
)

60 *
timeout
 = 
thïùe
->timeout;

61  
APR_SUCCESS
;

62 
	}
}

64 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã
(
≠r_fûe_t
 **
ö
,

65 
≠r_fûe_t
 **
out
,

66 
≠r_poﬁ_t
 *
p
)

69  
	`≠r_fûe_pùe_¸óã_ex
(
ö
, 
out
, 
APR_FULL_BLOCK
, 
p
);

70 
	}
}

72 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_pùe_¸óã_ex
(
≠r_fûe_t
 **
ö
,

73 
≠r_fûe_t
 **
out
,

74 
≠r_öt32_t
 
blockög
,

75 
≠r_poﬁ_t
 *
p
)

77 #ifde‡
_WIN32_WCE


78  
APR_ENOTIMPL
;

80 
SECURITY_ATTRIBUTES
 
ß
;

81 
id
 = 0;

82 
DWORD
 
dwPùeMode
;

83 
DWORD
 
dwO≥nMode
;

84 
«me
[50];

86 
ß
.
nLígth
 = (sa);

88 #i‡
APR_HAS_UNICODE_FS


89 
IF_WIN_OS_IS_UNICODE


90 
ß
.
bInhîôH™dÀ
 = 
FALSE
;

92 #i‡
APR_HAS_ANSI_FS


93 
ELSE_WIN_OS_IS_ANSI


94 
ß
.
bInhîôH™dÀ
 = 
TRUE
;

96 
ß
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

98 (*
ö
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_file_t));

99 (*
ö
)->
poﬁ
 = 
p
;

100 (*
ö
)->
‚ame
 = 
NULL
;

101 (*
ö
)->
pùe
 = 1;

102 (*
ö
)->
timeout
 = -1;

103 (*
ö
)->
ungëch¨
 = -1;

104 (*
ö
)->
eof_hô
 = 0;

105 (*
ö
)->
fûePå
 = 0;

106 (*
ö
)->
buÂos
 = 0;

107 (*
ö
)->
d©aRód
 = 0;

108 (*
ö
)->
dúe˘i⁄
 = 0;

109 (*
ö
)->
pOvîœµed
 = 
NULL
;

110 #i‡
APR_FILES_AS_SOCKETS


111 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
ö
)->
pﬁl£t
, 1, 
p
, 0);

113 (*
out
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_file_t));

114 (*
out
)->
poﬁ
 = 
p
;

115 (*
out
)->
‚ame
 = 
NULL
;

116 (*
out
)->
pùe
 = 1;

117 (*
out
)->
timeout
 = -1;

118 (*
out
)->
ungëch¨
 = -1;

119 (*
out
)->
eof_hô
 = 0;

120 (*
out
)->
fûePå
 = 0;

121 (*
out
)->
buÂos
 = 0;

122 (*
out
)->
d©aRód
 = 0;

123 (*
out
)->
dúe˘i⁄
 = 0;

124 (*
out
)->
pOvîœµed
 = 
NULL
;

125 #i‡
APR_FILES_AS_SOCKETS


126 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
out
)->
pﬁl£t
, 1, 
p
, 0);

128 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

130 
dwO≥nMode
 = 
PIPE_ACCESS_INBOUND
;

131 i‡(
blockög
 =
APR_WRITE_BLOCK


132 || 
blockög
 =
APR_FULL_NONBLOCK
) {

133 
dwO≥nMode
 |
FILE_FLAG_OVERLAPPED
;

134 (*
ö
)->
pOvîœµed
 = (
OVERLAPPED
*Ë
	`≠r_pˇŒoc
(
p
, (OVERLAPPED));

135 (*
ö
)->
pOvîœµed
->
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

136 (*
ö
)->
timeout
 = 0;

139 
dwPùeMode
 = 0;

141 
	`•rötf
(
«me
, "\\\\.\\pùe\\≠r-pùe-%u.%lu", 
	`gëpid
(), 
id
++);

143 (*
ö
)->
fûeh™d
 = 
	`Cª©eNamedPùe
(
«me
,

144 
dwO≥nMode
,

145 
dwPùeMode
,

150 &
ß
);

153 
dwO≥nMode
 = 
FILE_ATTRIBUTE_NORMAL
;

154 i‡(
blockög
 =
APR_READ_BLOCK


155 || 
blockög
 =
APR_FULL_NONBLOCK
) {

156 
dwO≥nMode
 |
FILE_FLAG_OVERLAPPED
;

157 (*
out
)->
pOvîœµed
 = (
OVERLAPPED
*Ë
	`≠r_pˇŒoc
(
p
, (OVERLAPPED));

158 (*
out
)->
pOvîœµed
->
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

159 (*
out
)->
timeout
 = 0;

162 (*
out
)->
fûeh™d
 = 
	`Cª©eFûe
(
«me
,

163 
GENERIC_WRITE
,

165 &
ß
,

166 
OPEN_EXISTING
,

167 
dwO≥nMode
,

168 
NULL
);

172 i‡(!
	`Cª©ePùe
(&(*
ö
)->
fûeh™d
, &(*
out
)->fûeh™d, &
ß
, 65536)) {

173  
	`≠r_gë_os_îr‹
();

177 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
ö
)->
poﬁ
, (*)(*ö), 
fûe_˛ónup
,

178 
≠r_poﬁ_˛ónup_nuŒ
);

179 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
out
)->
poﬁ
, (*)(*out), 
fûe_˛ónup
,

180 
≠r_poﬁ_˛ónup_nuŒ
);

181  
APR_SUCCESS
;

183 
	}
}

186 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_«medpùe_¸óã
(c⁄° *
fûíame
,

187 
≠r_fûïîms_t
 
≥rm
,

188 
≠r_poﬁ_t
 *
poﬁ
)

194  
APR_ENOTIMPL
;

195 
	}
}

204 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put_ex
(
≠r_fûe_t
 **
fûe
,

205 
≠r_os_fûe_t
 *
thefûe
,

206 
ªgi°î_˛ónup
,

207 
≠r_poﬁ_t
 *
poﬁ
)

209 (*
fûe
Ë
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_fûe_t
));

210 (*
fûe
)->
poﬁ
 =Öool;

211 (*
fûe
)->
pùe
 = 1;

212 (*
fûe
)->
timeout
 = -1;

213 (*
fûe
)->
ungëch¨
 = -1;

214 (*
fûe
)->
fûeh™d
 = *
thefûe
;

215 #i‡
APR_FILES_AS_SOCKETS


216 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
fûe
)->
pﬁl£t
, 1, 
poﬁ
, 0);

218 i‡(
ªgi°î_˛ónup
) {

219 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
fûe
, 
fûe_˛ónup
,

220 
≠r_poﬁ_˛ónup_nuŒ
);

223  
APR_SUCCESS
;

224 
	}
}

227 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_pùe_put
(
≠r_fûe_t
 **
fûe
,

228 
≠r_os_fûe_t
 *
thefûe
,

229 
≠r_poﬁ_t
 *
poﬁ
)

231  
	`≠r_os_pùe_put_ex
(
fûe
, 
thefûe
, 0, 
poﬁ
);

232 
	}
}

234 
≠r_°©us_t
 
	$¸óã_sockë_pùe
(
SOCKET
 *
rd
, SOCKET *
wr
)

236 
id
 = 0;

237 
FD_SET
 
rs
;

238 
SOCKET
 
ls
;

239 
timevÆ
 
socktm
;

240 
sockaddr_ö
 
∑
;

241 
sockaddr_ö
 
œ
;

242 
sockaddr_ö
 
ˇ
;

243 
ƒd
;

244 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

245 
Œ
 = (
œ
);

246 
lc
 = (
ˇ
);

247 
bm
 = 1;

248 
uid
[2];

249 
iid
[2];

251 *
rd
 = 
INVALID_SOCKET
;

252 *
wr
 = 
INVALID_SOCKET
;

258 
uid
[0] = 
	`gëpid
();

259 
uid
[1] = 
id
++;

260 i‡((
ls
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)Ë=
INVALID_SOCKET
) {

261  
	`≠r_gë_√tos_îr‹
();

264 
∑
.
sö_Ámûy
 = 
AF_INET
;

265 
∑
.
sö_p‹t
 = 0;

266 
∑
.
sö_addr
.
s_addr
 = 
	`öë_addr
("127.0.0.1");

268 i‡(
	`böd
(
ls
, (
SOCKADDR
 *)&
∑
, ’a)Ë=
SOCKET_ERROR
) {

269 
rv
 = 
	`≠r_gë_√tos_îr‹
();

270 
˛ónup
;

272 i‡(
	`gësock«me
(
ls
, (
SOCKADDR
 *)&
œ
, &
Œ
Ë=
SOCKET_ERROR
) {

273 
rv
 = 
	`≠r_gë_√tos_îr‹
();

274 
˛ónup
;

276 i‡(
	`li°í
(
ls
, 1Ë=
SOCKET_ERROR
) {

277 
rv
 = 
	`≠r_gë_√tos_îr‹
();

278 
˛ónup
;

280 i‡((*
wr
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)Ë=
INVALID_SOCKET
) {

281 
rv
 = 
	`≠r_gë_√tos_îr‹
();

282 
˛ónup
;

284 i‡(
	`c⁄√˘
(*
wr
, (
SOCKADDR
 *)&
œ
, ÷a)Ë=
SOCKET_ERROR
) {

285 
rv
 = 
	`≠r_gë_√tos_îr‹
();

286 
˛ónup
;

288 i‡(
	`£nd
(*
wr
, (*)
uid
, (uid), 0) != (uid)) {

289 i‡((
rv
 = 
	`≠r_gë_√tos_îr‹
()) == 0) {

290 
rv
 = 
APR_EINVAL
;

292 
˛ónup
;

294 i‡(
	`io˘lsockë
(
ls
, 
FIONBIO
, &
bm
Ë=
SOCKET_ERROR
) {

295 
rv
 = 
	`≠r_gë_√tos_îr‹
();

296 
˛ónup
;

299 
ns
;

300 
nc
 = 0;

307 
	`FD_ZERO
(&
rs
);

308 
	`FD_SET
(
ls
, &
rs
);

310 
socktm
.
tv_£c
 = 1;

311 
socktm
.
tv_u£c
 = 0;

312 i‡((
ns
 = 
	`£À˘
(0, &
rs
, 
NULL
, NULL, &
socktm
)Ë=
SOCKET_ERROR
) {

314 
	`SÀï
(100);

317 i‡(
ns
 == 0) {

321 i‡((*
rd
 = 
	`ac˚±
(
ls
, (
SOCKADDR
 *)&
ˇ
, &
lc
)Ë=
INVALID_SOCKET
) {

322 
rv
 = 
	`≠r_gë_√tos_îr‹
();

323 
˛ónup
;

328 i‡(
nc
++)

329 
	`SÀï
(1);

330 
ƒd
 = 
	`ªcv
(*
rd
, (*)
iid
, (iid), 0);

331 
rv
 = 
ƒd
 =
SOCKET_ERROR
 ? 
	`≠r_gë_√tos_îr‹
(Ë: 
APR_SUCCESS
;

332 } 
	`APR_STATUS_IS_EAGAIN
(
rv
));

334 i‡(
ƒd
 =(
iid
)) {

335 i‡(
	`memcmp
(
uid
, 
iid
, (uid)) == 0) {

340 
bm
 = 0;

341 i‡(
	`io˘lsockë
(*
rd
, 
FIONBIO
, &
bm
Ë=
SOCKET_ERROR
) {

342 
rv
 = 
	`≠r_gë_√tos_îr‹
();

343 
˛ónup
;

348 i‡(
ƒd
 =
SOCKET_ERROR
) {

349 
˛ónup
;

351 
	`˛o£sockë
(*
rd
);

354 
	`˛o£sockë
(
ls
);

357 
˛ónup
:

359 i‡(*
rd
 !
INVALID_SOCKET
)

360 
	`˛o£sockë
(*
rd
);

361 i‡(*
wr
 !
INVALID_SOCKET
)

362 
	`˛o£sockë
(*
wr
);

364 *
rd
 = 
INVALID_SOCKET
;

365 *
wr
 = 
INVALID_SOCKET
;

366 
	`˛o£sockë
(
ls
);

367  
rv
;

368 
	}
}

370 
≠r_°©us_t
 
	$sockë_pùe_˛ónup
(*
thefûe
)

372 
≠r_fûe_t
 *
fûe
 = 
thefûe
;

373 i‡(
fûe
->
fûeh™d
 !
INVALID_HANDLE_VALUE
) {

374 
	`shutdown
((
SOCKET
)
fûe
->
fûeh™d
, 
SD_BOTH
);

375 
	`˛o£sockë
((
SOCKET
)
fûe
->
fûeh™d
);

376 
fûe
->
fûeh™d
 = 
INVALID_HANDLE_VALUE
;

378  
APR_SUCCESS
;

379 
	}
}

381 
≠r_°©us_t
 
	$≠r_fûe_sockë_pùe_¸óã
(
≠r_fûe_t
 **
ö
,

382 
≠r_fûe_t
 **
out
,

383 
≠r_poﬁ_t
 *
p
)

385 
≠r_°©us_t
 
rv
;

386 
SOCKET
 
rd
;

387 
SOCKET
 
wr
;

389 i‡((
rv
 = 
	`¸óã_sockë_pùe
(&
rd
, &
wr
)Ë!
APR_SUCCESS
) {

390  
rv
;

392 (*
ö
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_file_t));

393 (*
ö
)->
poﬁ
 = 
p
;

394 (*
ö
)->
‚ame
 = 
NULL
;

395 (*
ö
)->
pùe
 = 1;

396 (*
ö
)->
timeout
 = -1;

397 (*
ö
)->
ungëch¨
 = -1;

398 (*
ö
)->
eof_hô
 = 0;

399 (*
ö
)->
fûePå
 = 0;

400 (*
ö
)->
buÂos
 = 0;

401 (*
ö
)->
d©aRód
 = 0;

402 (*
ö
)->
dúe˘i⁄
 = 0;

403 (*
ö
)->
pOvîœµed
 = (
OVERLAPPED
*)
	`≠r_pˇŒoc
(
p
, (OVERLAPPED));

404 (*
ö
)->
fûeh™d
 = (
HANDLE
)
rd
;

406 (*
out
Ë(
≠r_fûe_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_file_t));

407 (*
out
)->
poﬁ
 = 
p
;

408 (*
out
)->
‚ame
 = 
NULL
;

409 (*
out
)->
pùe
 = 1;

410 (*
out
)->
timeout
 = -1;

411 (*
out
)->
ungëch¨
 = -1;

412 (*
out
)->
eof_hô
 = 0;

413 (*
out
)->
fûePå
 = 0;

414 (*
out
)->
buÂos
 = 0;

415 (*
out
)->
d©aRód
 = 0;

416 (*
out
)->
dúe˘i⁄
 = 0;

417 (*
out
)->
pOvîœµed
 = (
OVERLAPPED
*)
	`≠r_pˇŒoc
(
p
, (OVERLAPPED));

418 (*
out
)->
fûeh™d
 = (
HANDLE
)
wr
;

420 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)(*
ö
), 
sockë_pùe_˛ónup
,

421 
≠r_poﬁ_˛ónup_nuŒ
);

422 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)(*
out
), 
sockë_pùe_˛ónup
,

423 
≠r_poﬁ_˛ónup_nuŒ
);

425  
rv
;

426 
	}
}

428 
≠r_°©us_t
 
	$≠r_fûe_sockë_pùe_˛o£
(
≠r_fûe_t
 *
fûe
)

430 
≠r_°©us_t
 
°©
;

431 i‡(!
fûe
->
pùe
)

432  
	`≠r_fûe_˛o£
(
fûe
);

433 i‡((
°©
 = 
	`sockë_pùe_˛ónup
(
fûe
)Ë=
APR_SUCCESS
) {

434 
	`≠r_poﬁ_˛ónup_kûl
(
fûe
->
poﬁ
, fûe, 
sockë_pùe_˛ónup
);

436 i‡(
fûe
->
muãx
) {

437 
	`≠r_thªad_muãx_de°roy
(
fûe
->
muãx
);

440  
APR_SUCCESS
;

442  
°©
;

443 
	}
}

	@file_io/win32/readwrite.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_î∫o.h
"

23 
	~<mÆloc.h
>

24 
	~"≠r_¨ch_©ime.h
"

25 
	~"≠r_¨ch_misc.h
"

31 
≠r_°©us_t
 
	$ªad_wôh_timeout
(
≠r_fûe_t
 *
fûe
, *
buf
, 
≠r_size_t
 
Àn_ö
,á¥_size_à*
nbyãs
)

33 
≠r_°©us_t
 
rv
;

34 
DWORD
 
ªs
;

35 
DWORD
 
Àn
 = (DWORD)
Àn_ö
;

36 
DWORD
 
byã§ód
 = 0;

39 i‡(
fûe
->
timeout
 == 0) {

43 i‡(
fûe
->
pùe
) {

44 
DWORD
 
byãs
;

45 i‡(!
	`PìkNamedPùe
(
fûe
->
fûeh™d
, 
NULL
, 0, NULL, &
byãs
, NULL)) {

46 
rv
 = 
	`≠r_gë_os_îr‹
();

47 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_BROKEN_PIPE
)) {

48 
rv
 = 
APR_EOF
;

50 *
nbyãs
 = 0;

51  
rv
;

54 i‡(
byãs
 == 0) {

55 *
nbyãs
 = 0;

56  
APR_EAGAIN
;

58 i‡(
Àn
 > 
byãs
) {

59 
Àn
 = 
byãs
;

71 i‡(
fûe
->
pOvîœµed
 && !fûe->
pùe
) {

72 
fûe
->
pOvîœµed
->
Off£t
 = (
DWORD
)fûe->
fûePå
;

73 
fûe
->
pOvîœµed
->
Off£tHigh
 = (
DWORD
)(fûe->
fûePå
 >> 32);

76 i‡(
	`RódFûe
(
fûe
->
fûeh™d
, 
buf
, 
Àn
,

77 &
byã§ód
, 
fûe
->
pOvîœµed
)) {

78 
rv
 = 
APR_SUCCESS
;

81 
rv
 = 
	`≠r_gë_os_îr‹
();

82 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_IO_PENDING
)) {

90 
ªs
 = 
	`WaôF‹SögÀObje˘
(
fûe
->
pOvîœµed
->
hEvít
,

91 (
fûe
->
timeout
 > 0)

92 ? (
DWORD
)(
fûe
->
timeout
/1000)

93 : ((
fûe
->
timeout
 == -1)

94 ? 
INFINITE
 : 0));

95 } 
ªs
 =
WAIT_ABANDONED
);

101 i‡(
ªs
 !
WAIT_OBJECT_0
) {

102 
	`C™˚lIo
(
fûe
->
fûeh™d
);

111 i‡(
	`GëOvîœµedResu…
(
fûe
->
fûeh™d
, fûe->
pOvîœµed
,

112 &
byã§ód
, 
TRUE
)) {

113 
rv
 = 
APR_SUCCESS
;

116 
rv
 = 
	`≠r_gë_os_îr‹
();

117 i‡(((
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_IO_INCOMPLETE
))

118 || (
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_OPERATION_ABORTED
)))

119 && (
ªs
 =
WAIT_TIMEOUT
))

120 
rv
 = 
APR_TIMEUP
;

123 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_BROKEN_PIPE
)) {

125 
rv
 = 
APR_EOF
;

126 } i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_HANDLE_EOF
)) {

128 
rv
 = 
APR_EOF
;

133 i‡(
rv
 =
APR_SUCCESS
 && 
byã§ód
 == 0)

134 
rv
 = 
APR_EOF
;

136 i‡(
rv
 =
APR_SUCCESS
 && 
fûe
->
pOvîœµed
 && !fûe->
pùe
) {

137 
fûe
->
fûePå
 +
byã§ód
;

139 *
nbyãs
 = 
byã§ód
;

140  
rv
;

141 
	}
}

143 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ªad
(
≠r_fûe_t
 *
thefûe
, *
buf
, 
≠r_size_t
 *
Àn
)

145 
≠r_°©us_t
 
rv
;

146 
DWORD
 
byãs_ªad
 = 0;

148 i‡(*
Àn
 <= 0) {

149 *
Àn
 = 0;

150  
APR_SUCCESS
;

157 i‡((
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
Ë&& !thefûe->
pOvîœµed
 ) {

158 
thefûe
->
pOvîœµed
 = (
OVERLAPPED
*Ë
	`≠r_pˇŒoc
—hefûe->
poﬁ
,

159 (
OVERLAPPED
));

160 
thefûe
->
pOvîœµed
->
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

161 i‡(!
thefûe
->
pOvîœµed
->
hEvít
) {

162 
rv
 = 
	`≠r_gë_os_îr‹
();

163  
rv
;

168 i‡(
thefûe
->
ungëch¨
 != -1) {

169 
byãs_ªad
 = 1;

170 *(*)
buf
 = ()
thefûe
->
ungëch¨
;

171 
buf
 = (*)buf + 1;

172 (*
Àn
)--;

173 
thefûe
->
ungëch¨
 = -1;

174 i‡(*
Àn
 == 0) {

175 *
Àn
 = 
byãs_ªad
;

176  
APR_SUCCESS
;

179 i‡(
thefûe
->
buf„ªd
) {

180 *
pos
 = (*)
buf
;

181 
≠r_size_t
 
blocksize
;

182 
≠r_size_t
 
size
 = *
Àn
;

184 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
) {

185 
	`≠r_thªad_muãx_lock
(
thefûe
->
muãx
);

188 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

189 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

190 i‡(
rv
 !
APR_SUCCESS
) {

191 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
) {

192 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

194  
rv
;

196 
thefûe
->
buÂos
 = 0;

197 
thefûe
->
dúe˘i⁄
 = 0;

198 
thefûe
->
d©aRód
 = 0;

201 
rv
 = 0;

202 
rv
 =0 && 
size
 > 0) {

203 i‡(
thefûe
->
buÂos
 >thefûe->
d©aRód
) {

204 
≠r_size_t
 
ªad
;

205 
rv
 = 
	`ªad_wôh_timeout
(
thefûe
,Åhefûe->
buf„r
,

206 
thefûe
->
bufsize
, &
ªad
);

207 i‡(
ªad
 == 0) {

208 i‡(
rv
 =
APR_EOF
)

209 
thefûe
->
eof_hô
 = 
TRUE
;

213 
thefûe
->
d©aRód
 = 
ªad
;

214 
thefûe
->
fûePå
 +thefûe->
d©aRód
;

215 
thefûe
->
buÂos
 = 0;

219 
blocksize
 = 
size
 > 
thefûe
->
d©aRód
 -Åhefûe->
buÂos
 ?Åhefile->dataRead -Åhefile->bufpos : size;

220 
	`mem˝y
(
pos
, 
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
blocksize
);

221 
thefûe
->
buÂos
 +
blocksize
;

222 
pos
 +
blocksize
;

223 
size
 -
blocksize
;

226 *
Àn
 = 
pos
 - (*)
buf
;

227 i‡(*
Àn
) {

228 
rv
 = 
APR_SUCCESS
;

231 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
) {

232 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

236 
≠r_size_t
 
nbyãs
;

237 
rv
 = 
	`ªad_wôh_timeout
(
thefûe
, 
buf
, *
Àn
, &
nbyãs
);

238 i‡(
rv
 =
APR_EOF
)

239 
thefûe
->
eof_hô
 = 
TRUE
;

240 *
Àn
 = 
nbyãs
;

243  
rv
;

244 
	}
}

246 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôe
(
≠r_fûe_t
 *
thefûe
, c⁄° *
buf
, 
≠r_size_t
 *
nbyãs
)

248 
≠r_°©us_t
 
rv
;

249 
DWORD
 
bwrŸe
;

255 i‡((
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
Ë&& !thefûe->
pOvîœµed
 ) {

256 
thefûe
->
pOvîœµed
 = (
OVERLAPPED
*Ë
	`≠r_pˇŒoc
—hefûe->
poﬁ
,

257 (
OVERLAPPED
));

258 
thefûe
->
pOvîœµed
->
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

259 i‡(!
thefûe
->
pOvîœµed
->
hEvít
) {

260 
rv
 = 
	`≠r_gë_os_îr‹
();

261  
rv
;

265 i‡(
thefûe
->
buf„ªd
) {

266 *
pos
 = (*)
buf
;

267 
≠r_size_t
 
blocksize
;

268 
≠r_size_t
 
size
 = *
nbyãs
;

270 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
) {

271 
	`≠r_thªad_muãx_lock
(
thefûe
->
muãx
);

274 i‡(
thefûe
->
dúe˘i⁄
 == 0) {

276 
≠r_off_t
 
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

277 
DWORD
 
ofÊo
 = (DWORD)
off£t
;

278 
LONG
 
offhi
 = (LONG)(
off£t
 >> 32);

279 i‡(
off£t
 !
thefûe
->
fûePå
)

280 
	`SëFûePoöãr
(
thefûe
->
fûeh™d
, 
ofÊo
, &
offhi
, 
FILE_BEGIN
);

281 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

282 
thefûe
->
dúe˘i⁄
 = 1;

285 
rv
 = 0;

286 
rv
 =0 && 
size
 > 0) {

287 i‡(
thefûe
->
buÂos
 =thefûe->
bufsize
)

288 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

290 
blocksize
 = 
size
 > 
thefûe
->
bufsize
 -Åhefûe->
buÂos
 ?

291 
thefûe
->
bufsize
 -Åhefûe->
buÂos
 : 
size
;

292 
	`mem˝y
(
thefûe
->
buf„r
 +Åhefûe->
buÂos
, 
pos
, 
blocksize
);

293 
thefûe
->
buÂos
 +
blocksize
;

294 
pos
 +
blocksize
;

295 
size
 -
blocksize
;

298 i‡(
thefûe
->
Êags
 & 
APR_FOPEN_XTHREAD
) {

299 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

301  
rv
;

303 i‡(!
thefûe
->
pùe
) {

304 
≠r_off_t
 
off£t
 = 0;

305 
≠r_°©us_t
 
rc
;

306 i‡(
thefûe
->
≠≥nd
) {

312 
	`≠r_thªad_muãx_lock
(
thefûe
->
muãx
);

313 
rc
 = 
	`≠r_fûe_lock
(
thefûe
, 
APR_FLOCK_EXCLUSIVE
);

314 i‡(
rc
 !
APR_SUCCESS
) {

315 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

316  
rc
;

318 
rc
 = 
	`≠r_fûe_£ek
(
thefûe
, 
APR_END
, &
off£t
);

319 i‡(
rc
 !
APR_SUCCESS
) {

320 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

321  
rc
;

324 i‡(
thefûe
->
pOvîœµed
) {

325 
thefûe
->
pOvîœµed
->
Off£t
 = (
DWORD
Èhefûe->
fûePå
;

326 
thefûe
->
pOvîœµed
->
Off£tHigh
 = (
DWORD
)—hefûe->
fûePå
 >> 32);

328 
rv
 = 
	`WrôeFûe
(
thefûe
->
fûeh™d
, 
buf
, (
DWORD
)*
nbyãs
, &
bwrŸe
,

329 
thefûe
->
pOvîœµed
);

330 i‡(
thefûe
->
≠≥nd
) {

331 
	`≠r_fûe_u∆ock
(
thefûe
);

332 
	`≠r_thªad_muãx_u∆ock
(
thefûe
->
muãx
);

336 
rv
 = 
	`WrôeFûe
(
thefûe
->
fûeh™d
, 
buf
, (
DWORD
)*
nbyãs
, &
bwrŸe
,

337 
thefûe
->
pOvîœµed
);

339 i‡(
rv
) {

340 *
nbyãs
 = 
bwrŸe
;

341 
rv
 = 
APR_SUCCESS
;

344 (*
nbyãs
) = 0;

345 
rv
 = 
	`≠r_gë_os_îr‹
();

348 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_IO_PENDING
)) {

350 
DWORD
 
timeout_ms
;

352 i‡(
thefûe
->
timeout
 == 0) {

353 
timeout_ms
 = 0;

355 i‡(
thefûe
->
timeout
 < 0) {

356 
timeout_ms
 = 
INFINITE
;

359 
timeout_ms
 = (
DWORD
)(
thefûe
->
timeout
 / 1000);

362 
rv
 = 
	`WaôF‹SögÀObje˘
(
thefûe
->
pOvîœµed
->
hEvít
, 
timeout_ms
);

363 
rv
) {

364 
WAIT_OBJECT_0
:

365 
	`GëOvîœµedResu…
(
thefûe
->
fûeh™d
,Åhefûe->
pOvîœµed
,

366 &
bwrŸe
, 
TRUE
);

367 *
nbyãs
 = 
bwrŸe
;

368 
rv
 = 
APR_SUCCESS
;

370 
WAIT_TIMEOUT
:

371 
rv
 = (
timeout_ms
 =0Ë? 
APR_EAGAIN
 : 
APR_TIMEUP
;

373 
WAIT_FAILED
:

374 
rv
 = 
	`≠r_gë_os_îr‹
();

379 i‡(
rv
 !
APR_SUCCESS
) {

380 i‡(
≠r_os_Àvñ
 >
APR_WIN_98
)

381 
	`C™˚lIo
(
thefûe
->
fûeh™d
);

385 i‡(
rv
 =
APR_SUCCESS
 && 
thefûe
->
pOvîœµed
 && !thefûe->
pùe
) {

386 
thefûe
->
fûePå
 +*
nbyãs
;

389  
rv
;

390 
	}
}

394 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_wrôev
(
≠r_fûe_t
 *
thefûe
,

395 c⁄° 
iovec
 *
vec
,

396 
≠r_size_t
 
nvec
,

397 
≠r_size_t
 *
nbyãs
)

399 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

400 
≠r_size_t
 
i
;

401 
≠r_size_t
 
bwrŸe
 = 0;

402 *
buf
;

404 *
nbyãs
 = 0;

405 
i
 = 0; i < 
nvec
; i++) {

406 
buf
 = 
vec
[
i
].
iov_ba£
;

407 
bwrŸe
 = 
vec
[
i
].
iov_Àn
;

408 
rv
 = 
	`≠r_fûe_wrôe
(
thefûe
, 
buf
, &
bwrŸe
);

409 *
nbyãs
 +
bwrŸe
;

410 i‡(
rv
 !
APR_SUCCESS
) {

414  
rv
;

415 
	}
}

417 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_putc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

419 
≠r_size_t
 
Àn
 = 1;

421  
	`≠r_fûe_wrôe
(
thefûe
, &
ch
, &
Àn
);

422 
	}
}

424 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_ungëc
(
ch
, 
≠r_fûe_t
 *
thefûe
)

426 
thefûe
->
ungëch¨
 = (Ë
ch
;

427  
APR_SUCCESS
;

428 
	}
}

430 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gëc
(*
ch
, 
≠r_fûe_t
 *
thefûe
)

432 
≠r_°©us_t
 
rc
;

433 
≠r_size_t
 
bªad
;

435 
bªad
 = 1;

436 
rc
 = 
	`≠r_fûe_ªad
(
thefûe
, 
ch
, &
bªad
);

438 i‡(
rc
) {

439  
rc
;

442 i‡(
bªad
 == 0) {

443 
thefûe
->
eof_hô
 = 
TRUE
;

444  
APR_EOF
;

446  
APR_SUCCESS
;

447 
	}
}

449 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_puts
(c⁄° *
°r
, 
≠r_fûe_t
 *
thefûe
)

451 
≠r_size_t
 
Àn
 = 
	`°æí
(
°r
);

453  
	`≠r_fûe_wrôe
(
thefûe
, 
°r
, &
Àn
);

454 
	}
}

456 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_gës
(*
°r
, 
Àn
, 
≠r_fûe_t
 *
thefûe
)

458 
≠r_size_t
 
ªadÀn
;

459 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

460 
i
;

462 
i
 = 0; i < 
Àn
-1; i++) {

463 
ªadÀn
 = 1;

464 
rv
 = 
	`≠r_fûe_ªad
(
thefûe
, 
°r
+
i
, &
ªadÀn
);

466 i‡(
rv
 !
APR_SUCCESS
 &&Ñv !
APR_EOF
)

467  
rv
;

469 i‡(
ªadÀn
 == 0) {

471 i‡(
i
 > 0)

472 
rv
 = 
APR_SUCCESS
;

476 i‡(
°r
[
i
] == '\n') {

477 
i
++;

481 
°r
[
i
] = 0;

482  
rv
;

483 
	}
}

485 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_Êush
(
≠r_fûe_t
 *
thefûe
)

487 i‡(
thefûe
->
buf„ªd
) {

488 
DWORD
 
numbyãs
, 
wrôãn
 = 0;

489 
≠r_°©us_t
 
rc
 = 0;

490 *
buf„r
;

491 
≠r_size_t
 
byã¶e·
;

493 i‡(
thefûe
->
dúe˘i⁄
 =1 &&Åhefûe->
buÂos
) {

494 
buf„r
 = 
thefûe
->buffer;

495 
byã¶e·
 = 
thefûe
->
buÂos
;

498 i‡(
byã¶e·
 > 
APR_DWORD_MAX
) {

499 
numbyãs
 = 
APR_DWORD_MAX
;

502 
numbyãs
 = (
DWORD
)
byã¶e·
;

505 i‡(!
	`WrôeFûe
(
thefûe
->
fûeh™d
, 
buf„r
, 
numbyãs
, &
wrôãn
, 
NULL
)) {

506 
rc
 = 
	`≠r_gë_os_îr‹
();

507 
thefûe
->
fûePå
 +
wrôãn
;

511 
thefûe
->
fûePå
 +
wrôãn
;

512 
byã¶e·
 -
wrôãn
;

513 
buf„r
 +
wrôãn
;

515 } 
byã¶e·
 > 0);

517 i‡(
rc
 == 0)

518 
thefûe
->
buÂos
 = 0;

521  
rc
;

527  
APR_SUCCESS
;

528 
	}
}

530 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_sync
(
≠r_fûe_t
 *
thefûe
){

531 
≠r_°©us_t
 
rv
;

533 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

534 i‡(
rv
 !
APR_SUCCESS
) {

535  
rv
;

538 i‡(!
	`FlushFûeBuf„rs
(
thefûe
->
fûeh™d
)) {

539 
rv
 = 
	`≠r_gë_os_îr‹
();

542  
rv
;

543 
	}
}

545 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_d©async
(
≠r_fûe_t
 *
thefûe
){

546  
	`≠r_fûe_sync
(
thefûe
);

547 
	}
}

549 
	s≠r_fûe_¥ötf_d©a
 {

550 
≠r_vf‹m©ãr_buff_t
 
	mvbuff
;

551 
≠r_fûe_t
 *
	mÂå
;

552 *
	mbuf
;

555 
	$fûe_¥ötf_Êush
(
≠r_vf‹m©ãr_buff_t
 *
buff
)

557 
≠r_fûe_¥ötf_d©a
 *
d©a
 = (≠r_fûe_¥ötf_d©®*)
buff
;

559 i‡(
	`≠r_fûe_wrôe_fuŒ
(
d©a
->
Âå
, d©a->
buf
,

560 
d©a
->
vbuff
.
cuΩos
 - d©a->
buf
, 
NULL
)) {

564 
d©a
->
vbuff
.
cuΩos
 = d©a->
buf
;

566 
	}
}

568 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_fûe_¥ötf
(
≠r_fûe_t
 *
Âå
,

569 c⁄° *
f‹m©
, ...)

571 
≠r_fûe_¥ötf_d©a
 
d©a
;

572 
va_li°
 
≠
;

573 
cou¡
;

575 
d©a
.
buf
 = 
	`mÆloc
(
HUGE_STRING_LEN
);

576 i‡(
d©a
.
buf
 =
NULL
) {

579 
d©a
.
vbuff
.
cuΩos
 = d©a.
buf
;

580 
d©a
.
vbuff
.
ídpos
 = d©a.
buf
 + 
HUGE_STRING_LEN
;

581 
d©a
.
Âå
 = fptr;

582 
	`va_°¨t
(
≠
, 
f‹m©
);

583 
cou¡
 = 
	`≠r_vf‹m©ãr
(
fûe_¥ötf_Êush
,

584 (
≠r_vf‹m©ãr_buff_t
 *)&
d©a
, 
f‹m©
, 
≠
);

586 i‡(
cou¡
 >0Ë
	`fûe_¥ötf_Êush
((
≠r_vf‹m©ãr_buff_t
 *)&
d©a
);

588 
	`va_íd
(
≠
);

590 
	`‰ì
(
d©a
.
buf
);

591  
cou¡
;

592 
	}
}

	@file_io/win32/seek.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

22 
≠r_°©us_t
 
	$£çå
(
≠r_fûe_t
 *
thefûe
, 
≠r_off_t
 
pos
 )

24 
≠r_off_t
 
√wbuÂos
;

25 
≠r_°©us_t
 
rv
;

26 
DWORD
 
rc
;

28 i‡(
thefûe
->
dúe˘i⁄
 == 1) {

30 
rv
 = 
	`≠r_fûe_Êush
(
thefûe
);

31 i‡(
rv
 !
APR_SUCCESS
)

32  
rv
;

33 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

34 
thefûe
->
dúe˘i⁄
 = 0;

40 
√wbuÂos
 = 
pos
 - (
thefûe
->
fûePå
 -Åhefûe->
d©aRód
);

42 i‡(
√wbuÂos
 >0 &&ÇewbuÂo†<(
≠r_off_t
)
thefûe
->
d©aRód
) {

43 
thefûe
->
buÂos
 = (
≠r_size_t
)
√wbuÂos
;

44 
rv
 = 
APR_SUCCESS
;

46 
DWORD
 
ofÊo
 = (DWORD)
pos
;

47 
LONG
 
offhi
 = (LONG)(
pos
 >> 32);

48 
rc
 = 
	`SëFûePoöãr
(
thefûe
->
fûeh™d
, 
ofÊo
, &
offhi
, 
FILE_BEGIN
);

50 i‡(
rc
 =(
DWORD
)-1)

56 
rv
 = 
	`≠r_gë_os_îr‹
();

58 
rv
 = 
APR_SUCCESS
;

60 i‡(
rv
 =
APR_SUCCESS
) {

61 
rv
 = 
APR_SUCCESS
;

62 
thefûe
->
eof_hô
 = 0;

63 
thefûe
->
buÂos
 =Åhefûe->
d©aRód
 = 0;

64 
thefûe
->
fûePå
 = 
pos
;

68  
rv
;

69 
	}
}

72 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_£ek
(
≠r_fûe_t
 *
thefûe
, 
≠r_£ek_whîe_t
 
whîe
, 
≠r_off_t
 *
off£t
)

74 
≠r_föfo_t
 
föfo
;

75 
≠r_°©us_t
 
rc
 = 
APR_SUCCESS
;

77 
thefûe
->
eof_hô
 = 0;

79 i‡(
thefûe
->
buf„ªd
) {

80 
whîe
) {

81 
APR_SET
:

82 
rc
 = 
	`£çå
(
thefûe
, *
off£t
);

85 
APR_CUR
:

86 
rc
 = 
	`£çå
(
thefûe
,Åhefûe->
fûePå
 -Åhefûe->
d©aRód


87 + 
thefûe
->
buÂos
 + *
off£t
);

90 
APR_END
:

91 
rc
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_SIZE
, 
thefûe
);

92 i‡(
rc
 =
APR_SUCCESS
)

93 
rc
 = 
	`£çå
(
thefûe
, 
föfo
.
size
 + *
off£t
);

97  
APR_EINVAL
;

100 *
off£t
 = 
thefûe
->
fûePå
 -Åhefûe->
d©aRód
 +Åhefûe->
buÂos
;

101  
rc
;

106 i‡(
thefûe
->
pOvîœµed
 ||Åhefûe->
Êags
 & 
APR_FOPEN_XTHREAD
) {

107 
whîe
) {

108 
APR_SET
:

109 
thefûe
->
fûePå
 = *
off£t
;

112 
APR_CUR
:

113 
thefûe
->
fûePå
 +*
off£t
;

116 
APR_END
:

117 
rc
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_SIZE
, 
thefûe
);

118 i‡(
rc
 =
APR_SUCCESS
 && 
föfo
.
size
 + *
off£t
 >= 0)

119 
thefûe
->
fûePå
 = 
föfo
.
size
 + *
off£t
;

123  
APR_EINVAL
;

125 *
off£t
 = 
thefûe
->
fûePå
;

126  
rc
;

129 
DWORD
 
howmove
;

130 
DWORD
 
ofÊo
 = (DWORD)*
off£t
;

131 
DWORD
 
offhi
 = (DWORD)(*
off£t
 >> 32);

133 
whîe
) {

134 
APR_SET
:

135 
howmove
 = 
FILE_BEGIN
; ;

136 
APR_CUR
:

137 
howmove
 = 
FILE_CURRENT
; ;

138 
APR_END
:

139 
howmove
 = 
FILE_END
; ;

141  
APR_EINVAL
;

143 
ofÊo
 = 
	`SëFûePoöãr
(
thefûe
->
fûeh™d
, (
LONG
)offlo,

144 (
LONG
*)&
offhi
, 
howmove
);

145 i‡(
ofÊo
 == 0xFFFFFFFF)

146 
rc
 = 
	`≠r_gë_os_îr‹
();

148 
rc
 = 
APR_SUCCESS
;

150 i‡(
rc
 =
APR_SUCCESS
)

151 *
off£t
 = ((
≠r_off_t
)
offhi
 << 32Ë| 
ofÊo
;

152  
rc
;

154 
	}
}

157 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_fûe_åunc
(
≠r_fûe_t
 *
thefûe
, 
≠r_off_t
 
off£t
)

159 
≠r_°©us_t
 
rv
;

160 
DWORD
 
ofÊo
 = (DWORD)
off£t
;

161 
LONG
 
offhi
 = (LONG)(
off£t
 >> 32);

162 
DWORD
 
rc
;

164 
rc
 = 
	`SëFûePoöãr
(
thefûe
->
fûeh™d
, 
ofÊo
, &
offhi
, 
FILE_BEGIN
);

165 i‡(
rc
 == 0xFFFFFFFF)

166 i‡((
rv
 = 
	`≠r_gë_os_îr‹
()Ë!
APR_SUCCESS
)

167  
rv
;

169 i‡(!
	`SëEndOfFûe
(
thefûe
->
fûeh™d
))

170  
	`≠r_gë_os_îr‹
();

172 i‡(
thefûe
->
buf„ªd
) {

173  
	`£çå
(
thefûe
, 
off£t
);

176  
APR_SUCCESS
;

177 
	}
}

	@include/apr_allocator.h

17 #i‚de‡
APR_ALLOCATOR_H


18 
	#APR_ALLOCATOR_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_î∫o.h
"

27 
	#APR_WANT_MEMFUNC


	)

28 
	~"≠r_w™t.h
"

30 #ifde‡
__˝lu•lus


41 
≠r_Æloˇt‹_t
 
	t≠r_Æloˇt‹_t
;

43 
≠r_memnode_t
 
	t≠r_memnode_t
;

54 
	s≠r_memnode_t
 {

55 
≠r_memnode_t
 *
√xt
;

56 
≠r_memnode_t
 **
ªf
;

57 
≠r_uöt32_t
 
ödex
;

58 
≠r_uöt32_t
 
‰ì_ödex
;

59 *
fú°_avaû
;

60 *
ídp
;

64 
	#APR_MEMNODE_T_SIZE
 
	`APR_ALIGN_DEFAULT
((
≠r_memnode_t
))

	)

67 
	#APR_ALLOCATOR_MAX_FREE_UNLIMITED
 0

	)

74 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_Æloˇt‹_¸óã
(
≠r_Æloˇt‹_t
 **
Æloˇt‹
)

75 
__©åibuã__
((
n⁄nuŒ
(1)));

83 
APR_DECLARE
(Ë
≠r_Æloˇt‹_de°roy
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

84 
__©åibuã__
((
n⁄nuŒ
(1)));

92 
APR_DECLARE
(
≠r_memnode_t
 *Ë
≠r_Æloˇt‹_Æloc
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

93 
≠r_size_t
 
size
)

94 
__©åibuã__
((
n⁄nuŒ
(1)));

103 
APR_DECLARE
(Ë
≠r_Æloˇt‹_‰ì
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

104 
≠r_memnode_t
 *
memnode
)

105 
__©åibuã__
((
n⁄nuŒ
(1,2)));

107 
	~"≠r_poﬁs.h
"

120 
APR_DECLARE
(Ë
≠r_Æloˇt‹_ow√r_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

121 
≠r_poﬁ_t
 *
poﬁ
)

122 
__©åibuã__
((
n⁄nuŒ
(1)));

128 
APR_DECLARE
(
≠r_poﬁ_t
 *Ë
≠r_Æloˇt‹_ow√r_gë
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

129 
__©åibuã__
((
n⁄nuŒ
(1)));

137 
APR_DECLARE
(Ë
≠r_Æloˇt‹_max_‰ì_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

138 
≠r_size_t
 
size
)

139 
__©åibuã__
((
n⁄nuŒ
(1)));

141 
	~"≠r_thªad_muãx.h
"

143 #i‡
APR_HAS_THREADS


149 
APR_DECLARE
(Ë
≠r_Æloˇt‹_muãx_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

150 
≠r_thªad_muãx_t
 *
muãx
)

151 
__©åibuã__
((
n⁄nuŒ
(1)));

157 
APR_DECLARE
(
≠r_thªad_muãx_t
 *Ë
≠r_Æloˇt‹_muãx_gë
(

158 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

159 
__©åibuã__
((
n⁄nuŒ
(1)));

165 #ifde‡
__˝lu•lus


	@include/apr_atomic.h

17 #i‚de‡
APR_ATOMIC_H


18 
	#APR_ATOMIC_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

28 #ifde‡
__˝lu•lus


47 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_©omic_öô
(
≠r_poﬁ_t
 *
p
);

59 
APR_DECLARE
(
≠r_uöt32_t
Ë
≠r_©omic_ªad32
(vﬁ©ûê≠r_uöt32_à*
mem
);

66 
APR_DECLARE
(Ë
≠r_©omic_£t32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
);

74 
APR_DECLARE
(
≠r_uöt32_t
Ë
≠r_©omic_add32
(vﬁ©ûê≠r_uöt32_à*
mem
,á¥_uöt32_à
vÆ
);

81 
APR_DECLARE
(Ë
≠r_©omic_sub32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
,á¥_uöt32_à
vÆ
);

88 
APR_DECLARE
(
≠r_uöt32_t
Ë
≠r_©omic_öc32
(vﬁ©ûê≠r_uöt32_à*
mem
);

95 
APR_DECLARE
(Ë
≠r_©omic_dec32
(vﬁ©ûê
≠r_uöt32_t
 *
mem
);

105 
APR_DECLARE
(
≠r_uöt32_t
Ë
≠r_©omic_ˇs32
(vﬁ©ûê≠r_uöt32_à*
mem
,á¥_uöt32_à
wôh
,

106 
≠r_uöt32_t
 
cmp
);

114 
APR_DECLARE
(
≠r_uöt32_t
Ë
≠r_©omic_xchg32
(vﬁ©ûê≠r_uöt32_à*
mem
,á¥_uöt32_à
vÆ
);

124 
APR_DECLARE
(*Ë
≠r_©omic_ˇ•å
(vﬁ©ûê**
mem
, *
wôh
, c⁄° *
cmp
);

132 
APR_DECLARE
(*Ë
≠r_©omic_xchg±r
(vﬁ©ûê**
mem
, *
wôh
);

136 #ifde‡
__˝lu•lus


	@include/apr_dso.h

17 #i‚de‡
APR_DSO_DOT_H


18 
	#APR_DSO_DOT_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

29 #ifde‡
__˝lu•lus


39 #i‡
APR_HAS_DSO
 || 
deföed
(
DOXYGEN
)

44 
≠r_dso_h™dÀ_t
 
	t≠r_dso_h™dÀ_t
;

49 * 
	t≠r_dso_h™dÀ_sym_t
;

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_dso_lﬂd
(
≠r_dso_h™dÀ_t
 **
ªs_h™dÀ
,

60 c⁄° *
∑th
, 
≠r_poﬁ_t
 *
˘x
);

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_dso_u∆ﬂd
(
≠r_dso_h™dÀ_t
 *
h™dÀ
);

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_dso_sym
(
≠r_dso_h™dÀ_sym_t
 *
ªssym
,

75 
≠r_dso_h™dÀ_t
 *
h™dÀ
,

76 c⁄° *
sym«me
);

84 
	$APR_DECLARE
(c⁄° *Ë
	`≠r_dso_îr‹
(
≠r_dso_h™dÀ_t
 *
dso
, *
buf
, 
≠r_size_t
 
bufsize
);

90 #ifde‡
__˝lu•lus


91 
	}
}

	@include/apr_env.h

17 #i‚de‡
APR_ENV_H


18 
	#APR_ENV_H


	)

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_poﬁs.h
"

26 #ifde‡
__˝lu•lus


42 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_ív_gë
(**
vÆue
, c⁄° *
ívv¨
,

43 
≠r_poﬁ_t
 *
poﬁ
);

51 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_ív_£t
(c⁄° *
ívv¨
, c⁄° *
vÆue
,

52 
≠r_poﬁ_t
 *
poﬁ
);

59 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_ív_dñëe
(c⁄° *
ívv¨
, 
≠r_poﬁ_t
 *
poﬁ
);

63 #ifde‡
__˝lu•lus


	@include/apr_errno.h

17 #i‚de‡
APR_ERRNO_H


18 
	#APR_ERRNO_H


	)

25 
	~"≠r.h
"

27 #i‡
APR_HAVE_ERRNO_H


28 
	~<î∫o.h
>

31 #ifde‡
__˝lu•lus


44 
	t≠r_°©us_t
;

52 
APR_DECLARE
(*Ë
≠r_°ªº‹
(
≠r_°©us_t
 
°©code
, *
buf
,

53 
≠r_size_t
 
bufsize
);

55 #i‡
deföed
(
DOXYGEN
)

64 
	#APR_FROM_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É + 
APR_OS_START_SYSERR
)

	)

75 
	#APR_TO_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É - 
APR_OS_START_SYSERR
)

	)

117 
	#APR_OS_START_ERROR
 20000

	)

123 
	#APR_OS_ERRSPACE_SIZE
 50000

	)

132 
	#APR_UTIL_ERRSPACE_SIZE
 20000

	)

136 
	#APR_OS_START_STATUS
 (
APR_OS_START_ERROR
 + 
APR_OS_ERRSPACE_SIZE
)

	)

141 
	#APR_UTIL_START_STATUS
 (
APR_OS_START_STATUS
 + \

142 (
APR_OS_ERRSPACE_SIZE
 - 
APR_UTIL_ERRSPACE_SIZE
))

	)

164 
	#APR_OS_START_USERERR
 (
APR_OS_START_STATUS
 + 
APR_OS_ERRSPACE_SIZE
)

	)

169 
	#APR_OS_START_USEERR
 
APR_OS_START_USERERR


	)

174 
	#APR_OS_START_CANONERR
 (
APR_OS_START_USERERR
 \

175 + (
APR_OS_ERRSPACE_SIZE
 * 10))

	)

180 
	#APR_OS_START_EAIERR
 (
APR_OS_START_CANONERR
 + 
APR_OS_ERRSPACE_SIZE
)

	)

185 
	#APR_OS_START_SYSERR
 (
APR_OS_START_EAIERR
 + 
APR_OS_ERRSPACE_SIZE
)

	)

225 
	#APR_SUCCESS
 0

	)

288 
	#APR_ENOSTAT
 (
APR_OS_START_ERROR
 + 1)

	)

290 
	#APR_ENOPOOL
 (
APR_OS_START_ERROR
 + 2)

	)

293 
	#APR_EBADDATE
 (
APR_OS_START_ERROR
 + 4)

	)

295 
	#APR_EINVALSOCK
 (
APR_OS_START_ERROR
 + 5)

	)

297 
	#APR_ENOPROC
 (
APR_OS_START_ERROR
 + 6)

	)

299 
	#APR_ENOTIME
 (
APR_OS_START_ERROR
 + 7)

	)

301 
	#APR_ENODIR
 (
APR_OS_START_ERROR
 + 8)

	)

303 
	#APR_ENOLOCK
 (
APR_OS_START_ERROR
 + 9)

	)

305 
	#APR_ENOPOLL
 (
APR_OS_START_ERROR
 + 10)

	)

307 
	#APR_ENOSOCKET
 (
APR_OS_START_ERROR
 + 11)

	)

309 
	#APR_ENOTHREAD
 (
APR_OS_START_ERROR
 + 12)

	)

311 
	#APR_ENOTHDKEY
 (
APR_OS_START_ERROR
 + 13)

	)

313 
	#APR_EGENERAL
 (
APR_OS_START_ERROR
 + 14)

	)

315 
	#APR_ENOSHMAVAIL
 (
APR_OS_START_ERROR
 + 15)

	)

317 
	#APR_EBADIP
 (
APR_OS_START_ERROR
 + 16)

	)

319 
	#APR_EBADMASK
 (
APR_OS_START_ERROR
 + 17)

	)

322 
	#APR_EDSOOPEN
 (
APR_OS_START_ERROR
 + 19)

	)

324 
	#APR_EABSOLUTE
 (
APR_OS_START_ERROR
 + 20)

	)

326 
	#APR_ERELATIVE
 (
APR_OS_START_ERROR
 + 21)

	)

328 
	#APR_EINCOMPLETE
 (
APR_OS_START_ERROR
 + 22)

	)

330 
	#APR_EABOVEROOT
 (
APR_OS_START_ERROR
 + 23)

	)

332 
	#APR_EBADPATH
 (
APR_OS_START_ERROR
 + 24)

	)

334 
	#APR_EPATHWILD
 (
APR_OS_START_ERROR
 + 25)

	)

336 
	#APR_ESYMNOTFOUND
 (
APR_OS_START_ERROR
 + 26)

	)

338 
	#APR_EPROC_UNKNOWN
 (
APR_OS_START_ERROR
 + 27)

	)

340 
	#APR_ENOTENOUGHENTROPY
 (
APR_OS_START_ERROR
 + 28)

	)

359 
	#APR_STATUS_IS_ENOSTAT
(
s
Ë((sË=
APR_ENOSTAT
)

	)

365 
	#APR_STATUS_IS_ENOPOOL
(
s
Ë((sË=
APR_ENOPOOL
)

	)

367 
	#APR_STATUS_IS_EBADDATE
(
s
Ë((sË=
APR_EBADDATE
)

	)

369 
	#APR_STATUS_IS_EINVALSOCK
(
s
Ë((sË=
APR_EINVALSOCK
)

	)

371 
	#APR_STATUS_IS_ENOPROC
(
s
Ë((sË=
APR_ENOPROC
)

	)

373 
	#APR_STATUS_IS_ENOTIME
(
s
Ë((sË=
APR_ENOTIME
)

	)

375 
	#APR_STATUS_IS_ENODIR
(
s
Ë((sË=
APR_ENODIR
)

	)

377 
	#APR_STATUS_IS_ENOLOCK
(
s
Ë((sË=
APR_ENOLOCK
)

	)

379 
	#APR_STATUS_IS_ENOPOLL
(
s
Ë((sË=
APR_ENOPOLL
)

	)

381 
	#APR_STATUS_IS_ENOSOCKET
(
s
Ë((sË=
APR_ENOSOCKET
)

	)

383 
	#APR_STATUS_IS_ENOTHREAD
(
s
Ë((sË=
APR_ENOTHREAD
)

	)

385 
	#APR_STATUS_IS_ENOTHDKEY
(
s
Ë((sË=
APR_ENOTHDKEY
)

	)

387 
	#APR_STATUS_IS_EGENERAL
(
s
Ë((sË=
APR_EGENERAL
)

	)

389 
	#APR_STATUS_IS_ENOSHMAVAIL
(
s
Ë((sË=
APR_ENOSHMAVAIL
)

	)

391 
	#APR_STATUS_IS_EBADIP
(
s
Ë((sË=
APR_EBADIP
)

	)

393 
	#APR_STATUS_IS_EBADMASK
(
s
Ë((sË=
APR_EBADMASK
)

	)

399 #i‡
deföed
(
WIN32
)

400 
	#APR_STATUS_IS_EDSOOPEN
(
s
Ë((sË=
APR_EDSOOPEN
 \

401 || 
	`APR_TO_OS_ERROR
(
s
Ë=
ERROR_MOD_NOT_FOUND
)

	)

403 
	#APR_STATUS_IS_EDSOOPEN
(
s
Ë((sË=
APR_EDSOOPEN
)

	)

406 
	#APR_STATUS_IS_EABSOLUTE
(
s
Ë((sË=
APR_EABSOLUTE
)

	)

408 
	#APR_STATUS_IS_ERELATIVE
(
s
Ë((sË=
APR_ERELATIVE
)

	)

410 
	#APR_STATUS_IS_EINCOMPLETE
(
s
Ë((sË=
APR_EINCOMPLETE
)

	)

412 
	#APR_STATUS_IS_EABOVEROOT
(
s
Ë((sË=
APR_EABOVEROOT
)

	)

414 
	#APR_STATUS_IS_EBADPATH
(
s
Ë((sË=
APR_EBADPATH
)

	)

416 
	#APR_STATUS_IS_EPATHWILD
(
s
Ë((sË=
APR_EPATHWILD
)

	)

420 #i‡
deföed
(
WIN32
)

421 
	#APR_STATUS_IS_ESYMNOTFOUND
(
s
Ë((sË=
APR_ESYMNOTFOUND
 \

422 || 
	`APR_TO_OS_ERROR
(
s
Ë=
ERROR_PROC_NOT_FOUND
)

	)

424 
	#APR_STATUS_IS_ESYMNOTFOUND
(
s
Ë((sË=
APR_ESYMNOTFOUND
)

	)

427 
	#APR_STATUS_IS_EPROC_UNKNOWN
(
s
Ë((sË=
APR_EPROC_UNKNOWN
)

	)

429 
	#APR_STATUS_IS_ENOTENOUGHENTROPY
(
s
Ë((sË=
APR_ENOTENOUGHENTROPY
)

	)

438 
	#APR_INCHILD
 (
APR_OS_START_STATUS
 + 1)

	)

440 
	#APR_INPARENT
 (
APR_OS_START_STATUS
 + 2)

	)

442 
	#APR_DETACH
 (
APR_OS_START_STATUS
 + 3)

	)

444 
	#APR_NOTDETACH
 (
APR_OS_START_STATUS
 + 4)

	)

446 
	#APR_CHILD_DONE
 (
APR_OS_START_STATUS
 + 5)

	)

448 
	#APR_CHILD_NOTDONE
 (
APR_OS_START_STATUS
 + 6)

	)

450 
	#APR_TIMEUP
 (
APR_OS_START_STATUS
 + 7)

	)

452 
	#APR_INCOMPLETE
 (
APR_OS_START_STATUS
 + 8)

	)

457 
	#APR_BADCH
 (
APR_OS_START_STATUS
 + 12)

	)

459 
	#APR_BADARG
 (
APR_OS_START_STATUS
 + 13)

	)

461 
	#APR_EOF
 (
APR_OS_START_STATUS
 + 14)

	)

463 
	#APR_NOTFOUND
 (
APR_OS_START_STATUS
 + 15)

	)

468 
	#APR_ANONYMOUS
 (
APR_OS_START_STATUS
 + 19)

	)

470 
	#APR_FILEBASED
 (
APR_OS_START_STATUS
 + 20)

	)

472 
	#APR_KEYBASED
 (
APR_OS_START_STATUS
 + 21)

	)

474 
	#APR_EINIT
 (
APR_OS_START_STATUS
 + 22)

	)

476 
	#APR_ENOTIMPL
 (
APR_OS_START_STATUS
 + 23)

	)

478 
	#APR_EMISMATCH
 (
APR_OS_START_STATUS
 + 24)

	)

480 
	#APR_EBUSY
 (
APR_OS_START_STATUS
 + 25)

	)

492 
	#APR_STATUS_IS_INCHILD
(
s
Ë((sË=
APR_INCHILD
)

	)

499 
	#APR_STATUS_IS_INPARENT
(
s
Ë((sË=
APR_INPARENT
)

	)

506 
	#APR_STATUS_IS_DETACH
(
s
Ë((sË=
APR_DETACH
)

	)

513 
	#APR_STATUS_IS_NOTDETACH
(
s
Ë((sË=
APR_NOTDETACH
)

	)

520 
	#APR_STATUS_IS_CHILD_DONE
(
s
Ë((sË=
APR_CHILD_DONE
)

	)

527 
	#APR_STATUS_IS_CHILD_NOTDONE
(
s
Ë((sË=
APR_CHILD_NOTDONE
)

	)

534 
	#APR_STATUS_IS_TIMEUP
(
s
Ë((sË=
APR_TIMEUP
)

	)

542 
	#APR_STATUS_IS_INCOMPLETE
(
s
Ë((sË=
APR_INCOMPLETE
)

	)

552 
	#APR_STATUS_IS_BADCH
(
s
Ë((sË=
APR_BADCH
)

	)

560 
	#APR_STATUS_IS_BADARG
(
s
Ë((sË=
APR_BADARG
)

	)

567 
	#APR_STATUS_IS_EOF
(
s
Ë((sË=
APR_EOF
)

	)

574 
	#APR_STATUS_IS_NOTFOUND
(
s
Ë((sË=
APR_NOTFOUND
)

	)

584 
	#APR_STATUS_IS_ANONYMOUS
(
s
Ë((sË=
APR_ANONYMOUS
)

	)

591 
	#APR_STATUS_IS_FILEBASED
(
s
Ë((sË=
APR_FILEBASED
)

	)

598 
	#APR_STATUS_IS_KEYBASED
(
s
Ë((sË=
APR_KEYBASED
)

	)

606 
	#APR_STATUS_IS_EINIT
(
s
Ë((sË=
APR_EINIT
)

	)

615 
	#APR_STATUS_IS_ENOTIMPL
(
s
Ë((sË=
APR_ENOTIMPL
)

	)

622 
	#APR_STATUS_IS_EMISMATCH
(
s
Ë((sË=
APR_EMISMATCH
)

	)

628 
	#APR_STATUS_IS_EBUSY
(
s
Ë((sË=
APR_EBUSY
)

	)

638 #ifde‡
EACCES


639 
	#APR_EACCES
 
EACCES


	)

641 
	#APR_EACCES
 (
APR_OS_START_CANONERR
 + 1)

	)

645 #ifde‡
EEXIST


646 
	#APR_EEXIST
 
EEXIST


	)

648 
	#APR_EEXIST
 (
APR_OS_START_CANONERR
 + 2)

	)

652 #ifde‡
ENAMETOOLONG


653 
	#APR_ENAMETOOLONG
 
ENAMETOOLONG


	)

655 
	#APR_ENAMETOOLONG
 (
APR_OS_START_CANONERR
 + 3)

	)

659 #ifde‡
ENOENT


660 
	#APR_ENOENT
 
ENOENT


	)

662 
	#APR_ENOENT
 (
APR_OS_START_CANONERR
 + 4)

	)

666 #ifde‡
ENOTDIR


667 
	#APR_ENOTDIR
 
ENOTDIR


	)

669 
	#APR_ENOTDIR
 (
APR_OS_START_CANONERR
 + 5)

	)

673 #ifde‡
ENOSPC


674 
	#APR_ENOSPC
 
ENOSPC


	)

676 
	#APR_ENOSPC
 (
APR_OS_START_CANONERR
 + 6)

	)

680 #ifde‡
ENOMEM


681 
	#APR_ENOMEM
 
ENOMEM


	)

683 
	#APR_ENOMEM
 (
APR_OS_START_CANONERR
 + 7)

	)

687 #ifde‡
EMFILE


688 
	#APR_EMFILE
 
EMFILE


	)

690 
	#APR_EMFILE
 (
APR_OS_START_CANONERR
 + 8)

	)

694 #ifde‡
ENFILE


695 
	#APR_ENFILE
 
ENFILE


	)

697 
	#APR_ENFILE
 (
APR_OS_START_CANONERR
 + 9)

	)

701 #ifde‡
EBADF


702 
	#APR_EBADF
 
EBADF


	)

704 
	#APR_EBADF
 (
APR_OS_START_CANONERR
 + 10)

	)

708 #ifde‡
EINVAL


709 
	#APR_EINVAL
 
EINVAL


	)

711 
	#APR_EINVAL
 (
APR_OS_START_CANONERR
 + 11)

	)

715 #ifde‡
ESPIPE


716 
	#APR_ESPIPE
 
ESPIPE


	)

718 
	#APR_ESPIPE
 (
APR_OS_START_CANONERR
 + 12)

	)

725 #ifde‡
EAGAIN


726 
	#APR_EAGAIN
 
EAGAIN


	)

727 #ñi‡
deföed
(
EWOULDBLOCK
)

728 
	#APR_EAGAIN
 
EWOULDBLOCK


	)

730 
	#APR_EAGAIN
 (
APR_OS_START_CANONERR
 + 13)

	)

734 #ifde‡
EINTR


735 
	#APR_EINTR
 
EINTR


	)

737 
	#APR_EINTR
 (
APR_OS_START_CANONERR
 + 14)

	)

741 #ifde‡
ENOTSOCK


742 
	#APR_ENOTSOCK
 
ENOTSOCK


	)

744 
	#APR_ENOTSOCK
 (
APR_OS_START_CANONERR
 + 15)

	)

748 #ifde‡
ECONNREFUSED


749 
	#APR_ECONNREFUSED
 
ECONNREFUSED


	)

751 
	#APR_ECONNREFUSED
 (
APR_OS_START_CANONERR
 + 16)

	)

755 #ifde‡
EINPROGRESS


756 
	#APR_EINPROGRESS
 
EINPROGRESS


	)

758 
	#APR_EINPROGRESS
 (
APR_OS_START_CANONERR
 + 17)

	)

766 #ifde‡
ECONNABORTED


767 
	#APR_ECONNABORTED
 
ECONNABORTED


	)

769 
	#APR_ECONNABORTED
 (
APR_OS_START_CANONERR
 + 18)

	)

773 #ifde‡
ECONNRESET


774 
	#APR_ECONNRESET
 
ECONNRESET


	)

776 
	#APR_ECONNRESET
 (
APR_OS_START_CANONERR
 + 19)

	)

781 #ifde‡
ETIMEDOUT


782 
	#APR_ETIMEDOUT
 
ETIMEDOUT


	)

784 
	#APR_ETIMEDOUT
 (
APR_OS_START_CANONERR
 + 20)

	)

788 #ifde‡
EHOSTUNREACH


789 
	#APR_EHOSTUNREACH
 
EHOSTUNREACH


	)

791 
	#APR_EHOSTUNREACH
 (
APR_OS_START_CANONERR
 + 21)

	)

795 #ifde‡
ENETUNREACH


796 
	#APR_ENETUNREACH
 
ENETUNREACH


	)

798 
	#APR_ENETUNREACH
 (
APR_OS_START_CANONERR
 + 22)

	)

802 #ifde‡
EFTYPE


803 
	#APR_EFTYPE
 
EFTYPE


	)

805 
	#APR_EFTYPE
 (
APR_OS_START_CANONERR
 + 23)

	)

809 #ifde‡
EPIPE


810 
	#APR_EPIPE
 
EPIPE


	)

812 
	#APR_EPIPE
 (
APR_OS_START_CANONERR
 + 24)

	)

816 #ifde‡
EXDEV


817 
	#APR_EXDEV
 
EXDEV


	)

819 
	#APR_EXDEV
 (
APR_OS_START_CANONERR
 + 25)

	)

823 #ifde‡
ENOTEMPTY


824 
	#APR_ENOTEMPTY
 
ENOTEMPTY


	)

826 
	#APR_ENOTEMPTY
 (
APR_OS_START_CANONERR
 + 26)

	)

830 #ifde‡
EAFNOSUPPORT


831 
	#APR_EAFNOSUPPORT
 
EAFNOSUPPORT


	)

833 
	#APR_EAFNOSUPPORT
 (
APR_OS_START_CANONERR
 + 27)

	)

838 #i‡
deföed
(
OS2
Ë&& !deföed(
DOXYGEN
)

840 
	#APR_FROM_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É + 
APR_OS_START_SYSERR
)

	)

841 
	#APR_TO_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É - 
APR_OS_START_SYSERR
)

	)

843 
	#INCL_DOSERRORS


	)

844 
	#INCL_DOS


	)

857 
	#≠r_gë_√tos_îr‹
(Ë(
	`APR_FROM_OS_ERROR
(
î∫o
))

	)

858 
	#≠r_£t_√tos_îr‹
(
e
Ë(
î∫o
 = 
	`APR_TO_OS_ERROR
”))

	)

862 
	#APR_OS2_STATUS
(
e
Ë(
	`APR_FROM_OS_ERROR
”))

	)

867 
	#SOCBASEERR
 10000

	)

868 
	#SOCEPERM
 (
SOCBASEERR
+1Ë

	)

869 
	#SOCESRCH
 (
SOCBASEERR
+3Ë

	)

870 
	#SOCEINTR
 (
SOCBASEERR
+4Ë

	)

871 
	#SOCENXIO
 (
SOCBASEERR
+6Ë

	)

872 
	#SOCEBADF
 (
SOCBASEERR
+9Ë

	)

873 
	#SOCEACCES
 (
SOCBASEERR
+13Ë

	)

874 
	#SOCEFAULT
 (
SOCBASEERR
+14Ë

	)

875 
	#SOCEINVAL
 (
SOCBASEERR
+22Ë

	)

876 
	#SOCEMFILE
 (
SOCBASEERR
+24Ë

	)

877 
	#SOCEPIPE
 (
SOCBASEERR
+32Ë

	)

878 
	#SOCEOS2ERR
 (
SOCBASEERR
+100Ë

	)

879 
	#SOCEWOULDBLOCK
 (
SOCBASEERR
+35Ë

	)

880 
	#SOCEINPROGRESS
 (
SOCBASEERR
+36Ë

	)

881 
	#SOCEALREADY
 (
SOCBASEERR
+37Ë

	)

882 
	#SOCENOTSOCK
 (
SOCBASEERR
+38Ë

	)

883 
	#SOCEDESTADDRREQ
 (
SOCBASEERR
+39Ë

	)

884 
	#SOCEMSGSIZE
 (
SOCBASEERR
+40Ë

	)

885 
	#SOCEPROTOTYPE
 (
SOCBASEERR
+41Ë

	)

886 
	#SOCENOPROTOOPT
 (
SOCBASEERR
+42Ë

	)

887 
	#SOCEPROTONOSUPPORT
 (
SOCBASEERR
+43Ë

	)

888 
	#SOCESOCKTNOSUPPORT
 (
SOCBASEERR
+44Ë

	)

889 
	#SOCEOPNOTSUPP
 (
SOCBASEERR
+45Ë

	)

890 
	#SOCEPFNOSUPPORT
 (
SOCBASEERR
+46Ë

	)

891 
	#SOCEAFNOSUPPORT
 (
SOCBASEERR
+47Ë

	)

892 
	#SOCEADDRINUSE
 (
SOCBASEERR
+48Ë

	)

893 
	#SOCEADDRNOTAVAIL
 (
SOCBASEERR
+49Ë

	)

894 
	#SOCENETDOWN
 (
SOCBASEERR
+50Ë

	)

895 
	#SOCENETUNREACH
 (
SOCBASEERR
+51Ë

	)

896 
	#SOCENETRESET
 (
SOCBASEERR
+52Ë

	)

897 
	#SOCECONNABORTED
 (
SOCBASEERR
+53Ë

	)

898 
	#SOCECONNRESET
 (
SOCBASEERR
+54Ë

	)

899 
	#SOCENOBUFS
 (
SOCBASEERR
+55Ë

	)

900 
	#SOCEISCONN
 (
SOCBASEERR
+56Ë

	)

901 
	#SOCENOTCONN
 (
SOCBASEERR
+57Ë

	)

902 
	#SOCESHUTDOWN
 (
SOCBASEERR
+58Ë

	)

903 
	#SOCETOOMANYREFS
 (
SOCBASEERR
+59Ë

	)

904 
	#SOCETIMEDOUT
 (
SOCBASEERR
+60Ë

	)

905 
	#SOCECONNREFUSED
 (
SOCBASEERR
+61Ë

	)

906 
	#SOCELOOP
 (
SOCBASEERR
+62Ë

	)

907 
	#SOCENAMETOOLONG
 (
SOCBASEERR
+63Ë

	)

908 
	#SOCEHOSTDOWN
 (
SOCBASEERR
+64Ë

	)

909 
	#SOCEHOSTUNREACH
 (
SOCBASEERR
+65Ë

	)

910 
	#SOCENOTEMPTY
 (
SOCBASEERR
+66Ë

	)

913 
	#APR_STATUS_IS_EACCES
(
s
Ë((sË=
APR_EACCES
 \

914 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ACCESS_DENIED
 \

915 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_SHARING_VIOLATION
)

	)

916 
	#APR_STATUS_IS_EEXIST
(
s
Ë((sË=
APR_EEXIST
 \

917 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_OPEN_FAILED
 \

918 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILE_EXISTS
 \

919 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ALREADY_EXISTS
 \

920 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ACCESS_DENIED
)

	)

921 
	#APR_STATUS_IS_ENAMETOOLONG
(
s
Ë((sË=
APR_ENAMETOOLONG
 \

922 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILENAME_EXCED_RANGE
 \

923 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCENAMETOOLONG
)

	)

924 
	#APR_STATUS_IS_ENOENT
(
s
Ë((sË=
APR_ENOENT
 \

925 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILE_NOT_FOUND
 \

926 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_PATH_NOT_FOUND
 \

927 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NO_MORE_FILES
 \

928 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_OPEN_FAILED
)

	)

929 
	#APR_STATUS_IS_ENOTDIR
(
s
Ë((sË=
APR_ENOTDIR
)

	)

930 
	#APR_STATUS_IS_ENOSPC
(
s
Ë((sË=
APR_ENOSPC
 \

931 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DISK_FULL
)

	)

932 
	#APR_STATUS_IS_ENOMEM
(
s
Ë((sË=
APR_ENOMEM
)

	)

933 
	#APR_STATUS_IS_EMFILE
(
s
Ë((sË=
APR_EMFILE
 \

934 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_TOO_MANY_OPEN_FILES
)

	)

935 
	#APR_STATUS_IS_ENFILE
(
s
Ë((sË=
APR_ENFILE
)

	)

936 
	#APR_STATUS_IS_EBADF
(
s
Ë((sË=
APR_EBADF
 \

937 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_HANDLE
)

	)

938 
	#APR_STATUS_IS_EINVAL
(
s
Ë((sË=
APR_EINVAL
 \

939 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_PARAMETER
 \

940 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_FUNCTION
)

	)

941 
	#APR_STATUS_IS_ESPIPE
(
s
Ë((sË=
APR_ESPIPE
 \

942 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NEGATIVE_SEEK
)

	)

943 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
 \

944 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NO_DATA
 \

945 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEWOULDBLOCK
 \

946 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_LOCK_VIOLATION
)

	)

947 
	#APR_STATUS_IS_EINTR
(
s
Ë((sË=
APR_EINTR
 \

948 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEINTR
)

	)

949 
	#APR_STATUS_IS_ENOTSOCK
(
s
Ë((sË=
APR_ENOTSOCK
 \

950 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCENOTSOCK
)

	)

951 
	#APR_STATUS_IS_ECONNREFUSED
(
s
Ë((sË=
APR_ECONNREFUSED
 \

952 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCECONNREFUSED
)

	)

953 
	#APR_STATUS_IS_EINPROGRESS
(
s
Ë((sË=
APR_EINPROGRESS
 \

954 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEINPROGRESS
)

	)

955 
	#APR_STATUS_IS_ECONNABORTED
(
s
Ë((sË=
APR_ECONNABORTED
 \

956 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCECONNABORTED
)

	)

957 
	#APR_STATUS_IS_ECONNRESET
(
s
Ë((sË=
APR_ECONNRESET
 \

958 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCECONNRESET
)

	)

960 
	#APR_STATUS_IS_ETIMEDOUT
(
s
Ë((sË=
APR_ETIMEDOUT
 \

961 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCETIMEDOUT
)

	)

962 #unde‡
APR_STATUS_IS_TIMEUP


963 
	#APR_STATUS_IS_TIMEUP
(
s
Ë((sË=
APR_TIMEUP
 \

964 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCETIMEDOUT
)

	)

965 
	#APR_STATUS_IS_EHOSTUNREACH
(
s
Ë((sË=
APR_EHOSTUNREACH
 \

966 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEHOSTUNREACH
)

	)

967 
	#APR_STATUS_IS_ENETUNREACH
(
s
Ë((sË=
APR_ENETUNREACH
 \

968 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCENETUNREACH
)

	)

969 
	#APR_STATUS_IS_EFTYPE
(
s
Ë((sË=
APR_EFTYPE
)

	)

970 
	#APR_STATUS_IS_EPIPE
(
s
Ë((sË=
APR_EPIPE
 \

971 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BROKEN_PIPE
 \

972 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEPIPE
)

	)

973 
	#APR_STATUS_IS_EXDEV
(
s
Ë((sË=
APR_EXDEV
 \

974 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NOT_SAME_DEVICE
)

	)

975 
	#APR_STATUS_IS_ENOTEMPTY
(
s
Ë((sË=
APR_ENOTEMPTY
 \

976 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DIR_NOT_EMPTY
 \

977 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ACCESS_DENIED
)

	)

978 
	#APR_STATUS_IS_EAFNOSUPPORT
(
s
Ë((sË=
APR_AFNOSUPPORT
 \

979 || (
s
Ë=
APR_OS_START_SYSERR
 + 
SOCEAFNOSUPPORT
)

	)

1010 #ñi‡
deföed
(
WIN32
Ë&& !deföed(
DOXYGEN
)

1012 
	#APR_FROM_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É + 
APR_OS_START_SYSERR
)

	)

1013 
	#APR_TO_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É - 
APR_OS_START_SYSERR
)

	)

1015 
	#≠r_gë_os_îr‹
(Ë(
	`APR_FROM_OS_ERROR
(
	`GëLa°Eº‹
()))

	)

1016 
	#≠r_£t_os_îr‹
(
e
Ë(
	`SëLa°Eº‹
(
	`APR_TO_OS_ERROR
”)))

	)

1020 
	#≠r_gë_√tos_îr‹
(Ë(
	`APR_FROM_OS_ERROR
(
	`WSAGëLa°Eº‹
()))

	)

1021 
	#≠r_£t_√tos_îr‹
(
e
Ë(
	`WSASëLa°Eº‹
(
	`APR_TO_OS_ERROR
”)))

	)

1024 
	#APR_STATUS_IS_EACCES
(
s
Ë((sË=
APR_EACCES
 \

1025 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ACCESS_DENIED
 \

1026 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_CANNOT_MAKE
 \

1027 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_CURRENT_DIRECTORY
 \

1028 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DRIVE_LOCKED
 \

1029 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FAIL_I24
 \

1030 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_LOCK_VIOLATION
 \

1031 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_LOCK_FAILED
 \

1032 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NOT_LOCKED
 \

1033 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NETWORK_ACCESS_DENIED
 \

1034 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_SHARING_VIOLATION
)

	)

1035 
	#APR_STATUS_IS_EEXIST
(
s
Ë((sË=
APR_EEXIST
 \

1036 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILE_EXISTS
 \

1037 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ALREADY_EXISTS
)

	)

1038 
	#APR_STATUS_IS_ENAMETOOLONG
(
s
Ë((sË=
APR_ENAMETOOLONG
 \

1039 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILENAME_EXCED_RANGE
 \

1040 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAENAMETOOLONG
)

	)

1041 
	#APR_STATUS_IS_ENOENT
(
s
Ë((sË=
APR_ENOENT
 \

1042 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILE_NOT_FOUND
 \

1043 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_PATH_NOT_FOUND
 \

1044 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_OPEN_FAILED
 \

1045 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NO_MORE_FILES
)

	)

1046 
	#APR_STATUS_IS_ENOTDIR
(
s
Ë((sË=
APR_ENOTDIR
 \

1047 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_PATH_NOT_FOUND
 \

1048 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BAD_NETPATH
 \

1049 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BAD_NET_NAME
 \

1050 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BAD_PATHNAME
 \

1051 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_DRIVE
 \

1052 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DIRECTORY
)

	)

1053 
	#APR_STATUS_IS_ENOSPC
(
s
Ë((sË=
APR_ENOSPC
 \

1054 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DISK_FULL
)

	)

1055 
	#APR_STATUS_IS_ENOMEM
(
s
Ë((sË=
APR_ENOMEM
 \

1056 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_ARENA_TRASHED
 \

1057 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NOT_ENOUGH_MEMORY
 \

1058 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_BLOCK
 \

1059 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NOT_ENOUGH_QUOTA
 \

1060 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_OUTOFMEMORY
)

	)

1061 
	#APR_STATUS_IS_EMFILE
(
s
Ë((sË=
APR_EMFILE
 \

1062 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_TOO_MANY_OPEN_FILES
)

	)

1063 
	#APR_STATUS_IS_ENFILE
(
s
Ë((sË=
APR_ENFILE
)

	)

1064 
	#APR_STATUS_IS_EBADF
(
s
Ë((sË=
APR_EBADF
 \

1065 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_HANDLE
 \

1066 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_TARGET_HANDLE
)

	)

1067 
	#APR_STATUS_IS_EINVAL
(
s
Ë((sË=
APR_EINVAL
 \

1068 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_ACCESS
 \

1069 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_DATA
 \

1070 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_FUNCTION
 \

1071 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_HANDLE
 \

1072 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_PARAMETER
 \

1073 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NEGATIVE_SEEK
)

	)

1074 
	#APR_STATUS_IS_ESPIPE
(
s
Ë((sË=
APR_ESPIPE
 \

1075 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_SEEK_ON_DEVICE
 \

1076 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NEGATIVE_SEEK
)

	)

1077 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
 \

1078 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NO_DATA
 \

1079 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NO_PROC_SLOTS
 \

1080 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NESTING_NOT_ALLOWED
 \

1081 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_MAX_THRDS_REACHED
 \

1082 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_LOCK_VIOLATION
 \

1083 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEWOULDBLOCK
)

	)

1084 
	#APR_STATUS_IS_EINTR
(
s
Ë((sË=
APR_EINTR
 \

1085 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEINTR
)

	)

1086 
	#APR_STATUS_IS_ENOTSOCK
(
s
Ë((sË=
APR_ENOTSOCK
 \

1087 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAENOTSOCK
)

	)

1088 
	#APR_STATUS_IS_ECONNREFUSED
(
s
Ë((sË=
APR_ECONNREFUSED
 \

1089 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNREFUSED
)

	)

1090 
	#APR_STATUS_IS_EINPROGRESS
(
s
Ë((sË=
APR_EINPROGRESS
 \

1091 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEINPROGRESS
)

	)

1092 
	#APR_STATUS_IS_ECONNABORTED
(
s
Ë((sË=
APR_ECONNABORTED
 \

1093 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNABORTED
)

	)

1094 
	#APR_STATUS_IS_ECONNRESET
(
s
Ë((sË=
APR_ECONNRESET
 \

1095 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NETNAME_DELETED
 \

1096 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNRESET
)

	)

1098 
	#APR_STATUS_IS_ETIMEDOUT
(
s
Ë((sË=
APR_ETIMEDOUT
 \

1099 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAETIMEDOUT
 \

1100 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WAIT_TIMEOUT
)

	)

1101 #unde‡
APR_STATUS_IS_TIMEUP


1102 
	#APR_STATUS_IS_TIMEUP
(
s
Ë((sË=
APR_TIMEUP
 \

1103 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAETIMEDOUT
 \

1104 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WAIT_TIMEOUT
)

	)

1105 
	#APR_STATUS_IS_EHOSTUNREACH
(
s
Ë((sË=
APR_EHOSTUNREACH
 \

1106 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEHOSTUNREACH
)

	)

1107 
	#APR_STATUS_IS_ENETUNREACH
(
s
Ë((sË=
APR_ENETUNREACH
 \

1108 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAENETUNREACH
)

	)

1109 
	#APR_STATUS_IS_EFTYPE
(
s
Ë((sË=
APR_EFTYPE
 \

1110 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_EXE_MACHINE_TYPE_MISMATCH
 \

1111 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_DLL
 \

1112 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_MODULETYPE
 \

1113 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BAD_EXE_FORMAT
 \

1114 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_INVALID_EXE_SIGNATURE
 \

1115 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_FILE_CORRUPT
 \

1116 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BAD_FORMAT
)

	)

1117 
	#APR_STATUS_IS_EPIPE
(
s
Ë((sË=
APR_EPIPE
 \

1118 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_BROKEN_PIPE
)

	)

1119 
	#APR_STATUS_IS_EXDEV
(
s
Ë((sË=
APR_EXDEV
 \

1120 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_NOT_SAME_DEVICE
)

	)

1121 
	#APR_STATUS_IS_ENOTEMPTY
(
s
Ë((sË=
APR_ENOTEMPTY
 \

1122 || (
s
Ë=
APR_OS_START_SYSERR
 + 
ERROR_DIR_NOT_EMPTY
)

	)

1123 
	#APR_STATUS_IS_EAFNOSUPPORT
(
s
Ë((sË=
APR_EAFNOSUPPORT
 \

1124 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEAFNOSUPPORT
)

	)

1126 #ñi‡
deföed
(
NETWARE
Ë&& deföed(
USE_WINSOCK
Ë&& !deföed(
DOXYGEN
)

1128 
	#APR_FROM_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É + 
APR_OS_START_SYSERR
)

	)

1129 
	#APR_TO_OS_ERROR
(
e
Ë” =0 ? 
APR_SUCCESS
 :É - 
APR_OS_START_SYSERR
)

	)

1131 
	#≠r_gë_os_îr‹
(Ë(
î∫o
)

	)

1132 
	#≠r_£t_os_îr‹
(
e
Ë(
î∫o
 = (e))

	)

1135 
	#≠r_gë_√tos_îr‹
(Ë(
	`APR_FROM_OS_ERROR
(
	`WSAGëLa°Eº‹
()))

	)

1136 
	#≠r_£t_√tos_îr‹
(
e
Ë(
	`WSASëLa°Eº‹
(
	`APR_TO_OS_ERROR
”)))

	)

1139 
	#APR_STATUS_IS_EACCES
(
s
Ë((sË=
APR_EACCES
)

	)

1140 
	#APR_STATUS_IS_EEXIST
(
s
Ë((sË=
APR_EEXIST
)

	)

1141 
	#APR_STATUS_IS_ENAMETOOLONG
(
s
Ë((sË=
APR_ENAMETOOLONG
)

	)

1142 
	#APR_STATUS_IS_ENOENT
(
s
Ë((sË=
APR_ENOENT
)

	)

1143 
	#APR_STATUS_IS_ENOTDIR
(
s
Ë((sË=
APR_ENOTDIR
)

	)

1144 
	#APR_STATUS_IS_ENOSPC
(
s
Ë((sË=
APR_ENOSPC
)

	)

1145 
	#APR_STATUS_IS_ENOMEM
(
s
Ë((sË=
APR_ENOMEM
)

	)

1146 
	#APR_STATUS_IS_EMFILE
(
s
Ë((sË=
APR_EMFILE
)

	)

1147 
	#APR_STATUS_IS_ENFILE
(
s
Ë((sË=
APR_ENFILE
)

	)

1148 
	#APR_STATUS_IS_EBADF
(
s
Ë((sË=
APR_EBADF
)

	)

1149 
	#APR_STATUS_IS_EINVAL
(
s
Ë((sË=
APR_EINVAL
)

	)

1150 
	#APR_STATUS_IS_ESPIPE
(
s
Ë((sË=
APR_ESPIPE
)

	)

1152 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
 \

1153 || (
s
Ë=
EWOULDBLOCK
 \

1154 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEWOULDBLOCK
)

	)

1155 
	#APR_STATUS_IS_EINTR
(
s
Ë((sË=
APR_EINTR
 \

1156 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEINTR
)

	)

1157 
	#APR_STATUS_IS_ENOTSOCK
(
s
Ë((sË=
APR_ENOTSOCK
 \

1158 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAENOTSOCK
)

	)

1159 
	#APR_STATUS_IS_ECONNREFUSED
(
s
Ë((sË=
APR_ECONNREFUSED
 \

1160 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNREFUSED
)

	)

1161 
	#APR_STATUS_IS_EINPROGRESS
(
s
Ë((sË=
APR_EINPROGRESS
 \

1162 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEINPROGRESS
)

	)

1163 
	#APR_STATUS_IS_ECONNABORTED
(
s
Ë((sË=
APR_ECONNABORTED
 \

1164 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNABORTED
)

	)

1165 
	#APR_STATUS_IS_ECONNRESET
(
s
Ë((sË=
APR_ECONNRESET
 \

1166 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAECONNRESET
)

	)

1168 
	#APR_STATUS_IS_ETIMEDOUT
(
s
Ë((sË=
APR_ETIMEDOUT
 \

1169 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAETIMEDOUT
 \

1170 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WAIT_TIMEOUT
)

	)

1171 #unde‡
APR_STATUS_IS_TIMEUP


1172 
	#APR_STATUS_IS_TIMEUP
(
s
Ë((sË=
APR_TIMEUP
 \

1173 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAETIMEDOUT
 \

1174 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WAIT_TIMEOUT
)

	)

1175 
	#APR_STATUS_IS_EHOSTUNREACH
(
s
Ë((sË=
APR_EHOSTUNREACH
 \

1176 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEHOSTUNREACH
)

	)

1177 
	#APR_STATUS_IS_ENETUNREACH
(
s
Ë((sË=
APR_ENETUNREACH
 \

1178 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAENETUNREACH
)

	)

1179 
	#APR_STATUS_IS_ENETDOWN
(
s
Ë((sË=
APR_OS_START_SYSERR
 + 
WSAENETDOWN
)

	)

1180 
	#APR_STATUS_IS_EFTYPE
(
s
Ë((sË=
APR_EFTYPE
)

	)

1181 
	#APR_STATUS_IS_EPIPE
(
s
Ë((sË=
APR_EPIPE
)

	)

1182 
	#APR_STATUS_IS_EXDEV
(
s
Ë((sË=
APR_EXDEV
)

	)

1183 
	#APR_STATUS_IS_ENOTEMPTY
(
s
Ë((sË=
APR_ENOTEMPTY
)

	)

1184 
	#APR_STATUS_IS_EAFNOSUPPORT
(
s
Ë((sË=
APR_EAFNOSUPPORT
 \

1185 || (
s
Ë=
APR_OS_START_SYSERR
 + 
WSAEAFNOSUPPORT
)

	)

1192 
	#APR_FROM_OS_ERROR
(
e
Ë”)

	)

1193 
	#APR_TO_OS_ERROR
(
e
Ë”)

	)

1195 
	#≠r_gë_os_îr‹
(Ë(
î∫o
)

	)

1196 
	#≠r_£t_os_îr‹
(
e
Ë(
î∫o
 = (e))

	)

1200 
	#≠r_gë_√tos_îr‹
(Ë(
î∫o
)

	)

1201 
	#≠r_£t_√tos_îr‹
(
e
Ë(
î∫o
 = (e))

	)

1209 
	#APR_STATUS_IS_EACCES
(
s
Ë((sË=
APR_EACCES
)

	)

1211 
	#APR_STATUS_IS_EEXIST
(
s
Ë((sË=
APR_EEXIST
)

	)

1213 
	#APR_STATUS_IS_ENAMETOOLONG
(
s
Ë((sË=
APR_ENAMETOOLONG
)

	)

1220 #ifde‡
EMVSCATLG


1221 
	#APR_STATUS_IS_ENOENT
(
s
Ë((sË=
APR_ENOENT
 \

1222 || (
s
Ë=
EMVSCATLG
)

	)

1224 
	#APR_STATUS_IS_ENOENT
(
s
Ë((sË=
APR_ENOENT
)

	)

1227 
	#APR_STATUS_IS_ENOTDIR
(
s
Ë((sË=
APR_ENOTDIR
)

	)

1229 #ifde‡
EDQUOT


1230 
	#APR_STATUS_IS_ENOSPC
(
s
Ë((sË=
APR_ENOSPC
 \

1231 || (
s
Ë=
EDQUOT
)

	)

1233 
	#APR_STATUS_IS_ENOSPC
(
s
Ë((sË=
APR_ENOSPC
)

	)

1236 
	#APR_STATUS_IS_ENOMEM
(
s
Ë((sË=
APR_ENOMEM
)

	)

1238 
	#APR_STATUS_IS_EMFILE
(
s
Ë((sË=
APR_EMFILE
)

	)

1240 
	#APR_STATUS_IS_ENFILE
(
s
Ë((sË=
APR_ENFILE
)

	)

1242 
	#APR_STATUS_IS_EBADF
(
s
Ë((sË=
APR_EBADF
)

	)

1244 
	#APR_STATUS_IS_EINVAL
(
s
Ë((sË=
APR_EINVAL
)

	)

1246 
	#APR_STATUS_IS_ESPIPE
(
s
Ë((sË=
APR_ESPIPE
)

	)

1249 #i‡!
deföed
(
EWOULDBLOCK
Ë|| !deföed(
EAGAIN
)

1250 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
)

	)

1251 #ñi‡(
EWOULDBLOCK
 =
EAGAIN
)

1252 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
)

	)

1254 
	#APR_STATUS_IS_EAGAIN
(
s
Ë((sË=
APR_EAGAIN
 \

1255 || (
s
Ë=
EWOULDBLOCK
)

	)

1259 
	#APR_STATUS_IS_EINTR
(
s
Ë((sË=
APR_EINTR
)

	)

1261 
	#APR_STATUS_IS_ENOTSOCK
(
s
Ë((sË=
APR_ENOTSOCK
)

	)

1263 
	#APR_STATUS_IS_ECONNREFUSED
(
s
Ë((sË=
APR_ECONNREFUSED
)

	)

1265 
	#APR_STATUS_IS_EINPROGRESS
(
s
Ë((sË=
APR_EINPROGRESS
)

	)

1278 #ifde‡
EPROTO


1279 
	#APR_STATUS_IS_ECONNABORTED
(
s
Ë((sË=
APR_ECONNABORTED
 \

1280 || (
s
Ë=
EPROTO
)

	)

1282 
	#APR_STATUS_IS_ECONNABORTED
(
s
Ë((sË=
APR_ECONNABORTED
)

	)

1286 
	#APR_STATUS_IS_ECONNRESET
(
s
Ë((sË=
APR_ECONNRESET
)

	)

1289 
	#APR_STATUS_IS_ETIMEDOUT
(
s
Ë((sË=
APR_ETIMEDOUT
)

	)

1291 
	#APR_STATUS_IS_EHOSTUNREACH
(
s
Ë((sË=
APR_EHOSTUNREACH
)

	)

1293 
	#APR_STATUS_IS_ENETUNREACH
(
s
Ë((sË=
APR_ENETUNREACH
)

	)

1295 
	#APR_STATUS_IS_EFTYPE
(
s
Ë((sË=
APR_EFTYPE
)

	)

1297 
	#APR_STATUS_IS_EPIPE
(
s
Ë((sË=
APR_EPIPE
)

	)

1299 
	#APR_STATUS_IS_EXDEV
(
s
Ë((sË=
APR_EXDEV
)

	)

1301 
	#APR_STATUS_IS_ENOTEMPTY
(
s
Ë((sË=
APR_ENOTEMPTY
 || \

1302 (
s
Ë=
APR_EEXIST
)

	)

1304 
	#APR_STATUS_IS_EAFNOSUPPORT
(
s
Ë((sË=
APR_EAFNOSUPPORT
)

	)

1311 #ifde‡
__˝lu•lus


	@include/apr_escape.h

20 #i‚de‡
APR_ESCAPE_H


21 
	#APR_ESCAPE_H


	)

22 
	~"≠r.h
"

23 
	~"≠r_gíîÆ.h
"

24 #ifde‡
__˝lu•lus


43 
	#APR_ESCAPE_STRING
 (-1)

	)

57 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_shñl
(*
esˇ≥d
, c⁄° *
°r
,

58 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
);

72 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_shñl
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

73 
__©åibuã__
((
n⁄nuŒ
(1)));

92 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_u√sˇ≥_uæ
(*
esˇ≥d
, c⁄° *
uæ
,

93 
≠r_ssize_t
 
¶í
, c⁄° *
f‹bid
, c⁄° *
ª£rved
, 
∂us
,

94 
≠r_size_t
 *
Àn
);

112 
APR_DECLARE
(c⁄° *Ë
≠r_pu√sˇ≥_uæ
(
≠r_poﬁ_t
 *
p
, c⁄° *
uæ
,

113 c⁄° *
f‹bid
, c⁄° *
ª£rved
, 
∂us
)

114 
__©åibuã__
((
n⁄nuŒ
(1)));

126 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_∑th_£gmít
(*
esˇ≥d
,

127 c⁄° *
°r
, 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
);

137 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_∑th_£gmít
(
≠r_poﬁ_t
 *
p
,

138 c⁄° *
°r
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

159 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_∑th
(*
esˇ≥d
, c⁄° *
∑th
,

160 
≠r_ssize_t
 
¶í
, 
∑πül
, 
≠r_size_t
 *
Àn
);

180 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_∑th
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

181 
∑πül
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

194 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_uæícoded
(*
esˇ≥d
, c⁄° *
°r
,

195 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
);

206 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_uæícoded
(
≠r_poﬁ_t
 *
p
,

207 c⁄° *
°r
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

225 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_ítôy
(*
esˇ≥d
, c⁄° *
°r
,

226 
≠r_ssize_t
 
¶í
, 
tﬂsc
, 
≠r_size_t
 *
Àn
);

239 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_ítôy
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

240 
tﬂsc
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

257 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_u√sˇ≥_ítôy
(*
u√sˇ≥d
, c⁄° *
°r
,

258 
≠r_ssize_t
 
¶í
, 
≠r_size_t
 *
Àn
);

272 
APR_DECLARE
(c⁄° *Ë
≠r_pu√sˇ≥_ítôy
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

273 
__©åibuã__
((
n⁄nuŒ
(1)));

294 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_echo
(*
esˇ≥d
, c⁄° *
°r
,

295 
≠r_ssize_t
 
¶í
, 
quŸe
, 
≠r_size_t
 *
Àn
);

314 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_echo
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

315 
quŸe
);

326 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_esˇ≥_hex
(*
de°
, c⁄° *
§c
,

327 
≠r_size_t
 
§˛í
, 
cﬁ⁄
,á¥_size_à*
Àn
);

339 
APR_DECLARE
(c⁄° *Ë
≠r_≥sˇ≥_hex
(
≠r_poﬁ_t
 *
p
, c⁄° *
§c
,

340 
≠r_size_t
 
¶í
, 
cﬁ⁄
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

352 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_u√sˇ≥_hex
(*
de°
, c⁄° *
°r
,

353 
≠r_ssize_t
 
¶í
, 
cﬁ⁄
, 
≠r_size_t
 *
Àn
);

366 
APR_DECLARE
(c⁄° *Ë
≠r_pu√sˇ≥_hex
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
,

367 
cﬁ⁄
, 
≠r_size_t
 *
Àn
);

370 #ifde‡
__˝lu•lus


	@include/apr_file_info.h

17 #i‚de‡
APR_FILE_INFO_H


18 
	#APR_FILE_INFO_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_u£r.h
"

27 
	~"≠r_poﬁs.h
"

28 
	~"≠r_èbÀs.h
"

29 
	~"≠r_time.h
"

30 
	~"≠r_î∫o.h
"

32 #i‡
APR_HAVE_SYS_UIO_H


33 
	~<sys/uio.h
>

36 #ifde‡
__˝lu•lus


63 
APR_NOFILE
 = 0,

64 
APR_REG
,

65 
APR_DIR
,

66 
APR_CHR
,

67 
APR_BLK
,

68 
APR_PIPE
,

69 
APR_LNK
,

70 
APR_SOCK
,

71 
APR_UNKFILE
 = 127

72 } 
	t≠r_fûëy≥_e
;

79 
	#APR_FPROT_USETID
 0x8000

	)

80 
	#APR_FPROT_UREAD
 0x0400

	)

81 
	#APR_FPROT_UWRITE
 0x0200

	)

82 
	#APR_FPROT_UEXECUTE
 0x0100

	)

84 
	#APR_FPROT_GSETID
 0x4000

	)

85 
	#APR_FPROT_GREAD
 0x0040

	)

86 
	#APR_FPROT_GWRITE
 0x0020

	)

87 
	#APR_FPROT_GEXECUTE
 0x0010

	)

89 
	#APR_FPROT_WSTICKY
 0x2000

	)

90 
	#APR_FPROT_WREAD
 0x0004

	)

91 
	#APR_FPROT_WWRITE
 0x0002

	)

92 
	#APR_FPROT_WEXECUTE
 0x0001

	)

94 
	#APR_FPROT_OS_DEFAULT
 0x0FFF

	)

97 
	#APR_FPROT_FILE_SOURCE_PERMS
 0x1000

	)

100 
	#APR_USETID
 
APR_FPROT_USETID


	)

101 
	#APR_UREAD
 
APR_FPROT_UREAD


	)

102 
	#APR_UWRITE
 
APR_FPROT_UWRITE


	)

103 
	#APR_UEXECUTE
 
APR_FPROT_UEXECUTE


	)

104 
	#APR_GSETID
 
APR_FPROT_GSETID


	)

105 
	#APR_GREAD
 
APR_FPROT_GREAD


	)

106 
	#APR_GWRITE
 
APR_FPROT_GWRITE


	)

107 
	#APR_GEXECUTE
 
APR_FPROT_GEXECUTE


	)

108 
	#APR_WSTICKY
 
APR_FPROT_WSTICKY


	)

109 
	#APR_WREAD
 
APR_FPROT_WREAD


	)

110 
	#APR_WWRITE
 
APR_FPROT_WWRITE


	)

111 
	#APR_WEXECUTE
 
APR_FPROT_WEXECUTE


	)

112 
	#APR_OS_DEFAULT
 
APR_FPROT_OS_DEFAULT


	)

113 
	#APR_FILE_SOURCE_PERMS
 
APR_FPROT_FILE_SOURCE_PERMS


	)

121 
≠r_dú_t
 
	t≠r_dú_t
;

125 
≠r_öt32_t
 
	t≠r_fûïîms_t
;

126 #i‡(
deföed
 
WIN32
Ë|| (deföed 
NETWARE
)

130 
≠r_uöt32_t
 
	t≠r_dev_t
;

135 
dev_t
 
	t≠r_dev_t
;

143 
≠r_föfo_t
 
	t≠r_föfo_t
;

145 
	#APR_FINFO_LINK
 0x00000001

	)

146 
	#APR_FINFO_MTIME
 0x00000010

	)

147 
	#APR_FINFO_CTIME
 0x00000020

	)

148 
	#APR_FINFO_ATIME
 0x00000040

	)

149 
	#APR_FINFO_SIZE
 0x00000100

	)

150 
	#APR_FINFO_CSIZE
 0x00000200

	)

151 
	#APR_FINFO_DEV
 0x00001000

	)

152 
	#APR_FINFO_INODE
 0x00002000

	)

153 
	#APR_FINFO_NLINK
 0x00004000

	)

154 
	#APR_FINFO_TYPE
 0x00008000

	)

155 
	#APR_FINFO_USER
 0x00010000

	)

156 
	#APR_FINFO_GROUP
 0x00020000

	)

157 
	#APR_FINFO_UPROT
 0x00100000

	)

158 
	#APR_FINFO_GPROT
 0x00200000

	)

159 
	#APR_FINFO_WPROT
 0x00400000

	)

160 
	#APR_FINFO_ICASE
 0x01000000

	)

161 
	#APR_FINFO_NAME
 0x02000000

	)

163 
	#APR_FINFO_MIN
 0x00008170

	)

164 
	#APR_FINFO_IDENT
 0x00003000

	)

165 
	#APR_FINFO_OWNER
 0x00030000

	)

166 
	#APR_FINFO_PROT
 0x00700000

	)

167 
	#APR_FINFO_NORM
 0x0073b170

	)

168 
	#APR_FINFO_DIRENT
 0x02000000

	)

174 
	s≠r_föfo_t
 {

176 
≠r_poﬁ_t
 *
poﬁ
;

179 
≠r_öt32_t
 
vÆid
;

181 
≠r_fûïîms_t
 
¥Ÿe˘i⁄
;

186 
≠r_fûëy≥_e
 
fûëy≥
;

188 
≠r_uid_t
 
u£r
;

190 
≠r_gid_t
 
group
;

192 
≠r_öo_t
 
öode
;

194 
≠r_dev_t
 
devi˚
;

196 
≠r_öt32_t
 
∆ök
;

198 
≠r_off_t
 
size
;

200 
≠r_off_t
 
csize
;

202 
≠r_time_t
 
©ime
;

204 
≠r_time_t
 
mtime
;

206 
≠r_time_t
 
˘ime
;

208 c⁄° *
‚ame
;

210 c⁄° *
«me
;

212 
≠r_fûe_t
 *
fûeh™d
;

229 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_°©
(
≠r_föfo_t
 *
föfo
, c⁄° *
‚ame
,

230 
≠r_öt32_t
 
w™ãd
, 
≠r_poﬁ_t
 *
poﬁ
);

244 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_›í
(
≠r_dú_t
 **
√w_dú
,

245 c⁄° *
dú«me
,

246 
≠r_poﬁ_t
 *
poﬁ
);

252 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_˛o£
(
≠r_dú_t
 *
thedú
);

267 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_ªad
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

268 
≠r_dú_t
 *
thedú
);

274 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_ªwöd
(
≠r_dú_t
 *
thedú
);

287 
	#APR_FILEPATH_NOTABOVEROOT
 0x01

	)

290 
	#APR_FILEPATH_SECUREROOTTEST
 0x02

	)

295 
	#APR_FILEPATH_SECUREROOT
 0x03

	)

298 
	#APR_FILEPATH_NOTRELATIVE
 0x04

	)

301 
	#APR_FILEPATH_NOTABSOLUTE
 0x08

	)

305 
	#APR_FILEPATH_NATIVE
 0x10

	)

311 
	#APR_FILEPATH_TRUENAME
 0x20

	)

336 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_roŸ
(c⁄° **
roŸ∑th
,

337 c⁄° **
fûï©h
,

338 
≠r_öt32_t
 
Êags
,

339 
≠r_poﬁ_t
 *
p
);

354 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_mîge
(**
√w∑th
,

355 c⁄° *
roŸ∑th
,

356 c⁄° *
add∑th
,

357 
≠r_öt32_t
 
Êags
,

358 
≠r_poﬁ_t
 *
p
);

369 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_li°_•lô
(
≠r_¨øy_hódî_t
 **
∑thñts
,

370 c⁄° *
li°°r
,

371 
≠r_poﬁ_t
 *
p
);

382 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_li°_mîge
(**
li°°r
,

383 
≠r_¨øy_hódî_t
 *
∑thñts
,

384 
≠r_poﬁ_t
 *
p
);

393 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_gë
(**
∑th
, 
≠r_öt32_t
 
Êags
,

394 
≠r_poﬁ_t
 *
p
);

401 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_£t
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
p
);

404 
	#APR_FILEPATH_ENCODING_UNKNOWN
 0

	)

407 
	#APR_FILEPATH_ENCODING_LOCALE
 1

	)

410 
	#APR_FILEPATH_ENCODING_UTF8
 2

	)

419 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûï©h_ícodög
(*
°yÀ
, 
≠r_poﬁ_t
 *
p
);

424 #ifde‡
__˝lu•lus


	@include/apr_file_io.h

17 #i‚de‡
APR_FILE_IO_H


18 
	#APR_FILE_IO_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_time.h
"

28 
	~"≠r_î∫o.h
"

29 
	~"≠r_fûe_öfo.h
"

30 
	~"≠r_öhîô.h
"

32 
	#APR_WANT_STDIO


	)

33 
	#APR_WANT_IOVEC


	)

34 
	~"≠r_w™t.h
"

36 #ifde‡
__˝lu•lus


54 
	#APR_FOPEN_READ
 0x00001

	)

55 
	#APR_FOPEN_WRITE
 0x00002

	)

56 
	#APR_FOPEN_CREATE
 0x00004

	)

57 
	#APR_FOPEN_APPEND
 0x00008

	)

58 
	#APR_FOPEN_TRUNCATE
 0x00010

	)

60 
	#APR_FOPEN_BINARY
 0x00020

	)

63 
	#APR_FOPEN_EXCL
 0x00040

	)

65 
	#APR_FOPEN_BUFFERED
 0x00080

	)

66 
	#APR_FOPEN_DELONCLOSE
 0x00100

	)

67 
	#APR_FOPEN_XTHREAD
 0x00200

	)

70 
	#APR_FOPEN_SHARELOCK
 0x00400

	)

74 
	#APR_FOPEN_NOCLEANUP
 0x00800

	)

79 
	#APR_FOPEN_SENDFILE_ENABLED
 0x01000

	)

82 
	#APR_FOPEN_LARGEFILE
 0x04000

	)

85 
	#APR_FOPEN_SPARSE
 0x08000

	)

88 
	#APR_FOPEN_NONBLOCK
 0x40000

	)

93 
	#APR_READ
 
APR_FOPEN_READ


	)

94 
	#APR_WRITE
 
APR_FOPEN_WRITE


	)

95 
	#APR_CREATE
 
APR_FOPEN_CREATE


	)

96 
	#APR_APPEND
 
APR_FOPEN_APPEND


	)

97 
	#APR_TRUNCATE
 
APR_FOPEN_TRUNCATE


	)

98 
	#APR_BINARY
 
APR_FOPEN_BINARY


	)

99 
	#APR_EXCL
 
APR_FOPEN_EXCL


	)

100 
	#APR_BUFFERED
 
APR_FOPEN_BUFFERED


	)

101 
	#APR_DELONCLOSE
 
APR_FOPEN_DELONCLOSE


	)

102 
	#APR_XTHREAD
 
APR_FOPEN_XTHREAD


	)

103 
	#APR_SHARELOCK
 
APR_FOPEN_SHARELOCK


	)

104 
	#APR_FILE_NOCLEANUP
 
APR_FOPEN_NOCLEANUP


	)

105 
	#APR_SENDFILE_ENABLED
 
APR_FOPEN_SENDFILE_ENABLED


	)

106 
	#APR_LARGEFILE
 
APR_FOPEN_LARGEFILE


	)

145 
	#APR_SET
 
SEEK_SET


	)

147 
	#APR_CUR
 
SEEK_CUR


	)

149 
	#APR_END
 
SEEK_END


	)

158 
	#APR_FILE_ATTR_READONLY
 0x01

	)

159 
	#APR_FILE_ATTR_EXECUTABLE
 0x02

	)

160 
	#APR_FILE_ATTR_HIDDEN
 0x04

	)

167 #i‡
deföed
(
DOXYGEN
)

168 
	#APR_MAX_IOVEC_SIZE
 1024

	)

170 #ñi‡
deföed
(
IOV_MAX
)

171 
	#APR_MAX_IOVEC_SIZE
 
IOV_MAX


	)

172 #ñi‡
deföed
(
MAX_IOVEC
)

173 
	#APR_MAX_IOVEC_SIZE
 
MAX_IOVEC


	)

175 
	#APR_MAX_IOVEC_SIZE
 1024

	)

180 
≠r_uöt32_t
 
	t≠r_fûóârs_t
;

183 
	t≠r_£ek_whîe_t
;

188 
≠r_fûe_t
 
	t≠r_fûe_t
;

196 
	#APR_FLOCK_SHARED
 1

	)

202 
	#APR_FLOCK_EXCLUSIVE
 2

	)

207 
	#APR_FLOCK_TYPEMASK
 0x000F

	)

208 
	#APR_FLOCK_NONBLOCK
 0x0010

	)

252 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í
(
≠r_fûe_t
 **
√wf
, c⁄° *
‚ame
,

253 
≠r_öt32_t
 
Êag
, 
≠r_fûïîms_t
 
≥rm
,

254 
≠r_poﬁ_t
 *
poﬁ
);

260 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_˛o£
(
≠r_fûe_t
 *
fûe
);

269 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
);

280 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_ª«me
(c⁄° *
‰om_∑th
,

281 c⁄° *
to_∑th
,

282 
≠r_poﬁ_t
 *
poﬁ
);

290 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_lök
(c⁄° *
‰om_∑th
,

291 c⁄° *
to_∑th
);

305 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_c›y
(c⁄° *
‰om_∑th
,

306 c⁄° *
to_∑th
,

307 
≠r_fûïîms_t
 
≥rms
,

308 
≠r_poﬁ_t
 *
poﬁ
);

321 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_≠≥nd
(c⁄° *
‰om_∑th
,

322 c⁄° *
to_∑th
,

323 
≠r_fûïîms_t
 
≥rms
,

324 
≠r_poﬁ_t
 *
poﬁ
);

331 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_eof
(
≠r_fûe_t
 *
Âå
);

348 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_°dîr
(
≠r_fûe_t
 **
thefûe
,

349 
≠r_poﬁ_t
 *
poﬁ
);

358 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_°dout
(
≠r_fûe_t
 **
thefûe
,

359 
≠r_poﬁ_t
 *
poﬁ
);

368 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_°dö
(
≠r_fûe_t
 **
thefûe
,

369 
≠r_poﬁ_t
 *
poﬁ
);

388 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_Êags_°dîr
(
≠r_fûe_t
 **
thefûe
,

389 
≠r_öt32_t
 
Êags
,

390 
≠r_poﬁ_t
 *
poﬁ
);

409 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_Êags_°dout
(
≠r_fûe_t
 **
thefûe
,

410 
≠r_öt32_t
 
Êags
,

411 
≠r_poﬁ_t
 *
poﬁ
);

430 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_›í_Êags_°dö
(
≠r_fûe_t
 **
thefûe
,

431 
≠r_öt32_t
 
Êags
,

432 
≠r_poﬁ_t
 *
poﬁ
);

451 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_ªad
(
≠r_fûe_t
 *
thefûe
, *
buf
,

452 
≠r_size_t
 *
nbyãs
);

469 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_wrôe
(
≠r_fûe_t
 *
thefûe
, c⁄° *
buf
,

470 
≠r_size_t
 *
nbyãs
);

487 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_wrôev
(
≠r_fûe_t
 *
thefûe
,

488 c⁄° 
iovec
 *
vec
,

489 
≠r_size_t
 
nvec
,á¥_size_à*
nbyãs
);

511 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_ªad_fuŒ
(
≠r_fûe_t
 *
thefûe
, *
buf
,

512 
≠r_size_t
 
nbyãs
,

513 
≠r_size_t
 *
byãs_ªad
);

535 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_wrôe_fuŒ
(
≠r_fûe_t
 *
thefûe
,

536 c⁄° *
buf
,

537 
≠r_size_t
 
nbyãs
,

538 
≠r_size_t
 *
byãs_wrôãn
);

554 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_wrôev_fuŒ
(
≠r_fûe_t
 *
thefûe
,

555 c⁄° 
iovec
 *
vec
,

556 
≠r_size_t
 
nvec
,

557 
≠r_size_t
 *
nbyãs
);

563 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_putc
(
ch
, 
≠r_fûe_t
 *
thefûe
);

570 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_gëc
(*
ch
, 
≠r_fûe_t
 *
thefûe
);

577 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_ungëc
(
ch
, 
≠r_fûe_t
 *
thefûe
);

587 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_gës
(*
°r
, 
Àn
,

588 
≠r_fûe_t
 *
thefûe
);

595 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_puts
(c⁄° *
°r
, 
≠r_fûe_t
 *
thefûe
);

601 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_Êush
(
≠r_fûe_t
 *
thefûe
);

607 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_sync
(
≠r_fûe_t
 *
thefûe
);

613 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_d©async
(
≠r_fûe_t
 *
thefûe
);

622 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_dup
(
≠r_fûe_t
 **
√w_fûe
,

623 
≠r_fûe_t
 *
ﬁd_fûe
,

624 
≠r_poﬁ_t
 *
p
);

634 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_dup2
(
≠r_fûe_t
 *
√w_fûe
,

635 
≠r_fûe_t
 *
ﬁd_fûe
,

636 
≠r_poﬁ_t
 *
p
);

649 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_£èside
(
≠r_fûe_t
 **
√w_fûe
,

650 
≠r_fûe_t
 *
ﬁd_fûe
,

651 
≠r_poﬁ_t
 *
p
);

664 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_buf„r_£t
(
≠r_fûe_t
 *
thefûe
,

665 * 
buf„r
,

666 
≠r_size_t
 
bufsize
);

672 
APR_DECLARE
(
≠r_size_t
Ë
≠r_fûe_buf„r_size_gë
(
≠r_fûe_t
 *
thefûe
);

685 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_£ek
(
≠r_fûe_t
 *
thefûe
,

686 
≠r_£ek_whîe_t
 
whîe
,

687 
≠r_off_t
 *
off£t
);

702 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_pùe_¸óã
(
≠r_fûe_t
 **
ö
,

703 
≠r_fûe_t
 **
out
,

704 
≠r_poﬁ_t
 *
poﬁ
);

725 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_pùe_¸óã_ex
(
≠r_fûe_t
 **
ö
,

726 
≠r_fûe_t
 **
out
,

727 
≠r_öt32_t
 
blockög
,

728 
≠r_poﬁ_t
 *
poﬁ
);

736 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_«medpùe_¸óã
(c⁄° *
fûíame
,

737 
≠r_fûïîms_t
 
≥rm
,

738 
≠r_poﬁ_t
 *
poﬁ
);

745 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_pùe_timeout_gë
(
≠r_fûe_t
 *
thïùe
,

746 
≠r_öãrvÆ_time_t
 *
timeout
);

754 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_pùe_timeout_£t
(
≠r_fûe_t
 *
thïùe
,

755 
≠r_öãrvÆ_time_t
 
timeout
);

768 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_lock
(
≠r_fûe_t
 *
thefûe
, 
ty≥
);

774 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_u∆ock
(
≠r_fûe_t
 *
thefûe
);

783 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_«me_gë
(c⁄° **
√w_∑th
,

784 
≠r_fûe_t
 *
thefûe
);

792 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_d©a_gë
(**
d©a
, c⁄° *
key
,

793 
≠r_fûe_t
 *
fûe
);

802 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_d©a_£t
(
≠r_fûe_t
 *
fûe
, *
d©a
,

803 c⁄° *
key
,

804 
≠r_°©us_t
 (*
˛ónup
)(*));

813 
APR_DECLARE_NONSTD
(Ë
≠r_fûe_¥ötf
(
≠r_fûe_t
 *
Âå
,

814 c⁄° *
f‹m©
, ...)

815 
__©åibuã__
((
f‹m©
(
¥ötf
,2,3)));

829 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_≥rms_£t
(c⁄° *
‚ame
,

830 
≠r_fûïîms_t
 
≥rms
);

848 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_©ås_£t
(c⁄° *
‚ame
,

849 
≠r_fûóârs_t
 
©åibuãs
,

850 
≠r_fûóârs_t
 
©å_mask
,

851 
≠r_poﬁ_t
 *
poﬁ
);

861 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_mtime_£t
(c⁄° *
‚ame
,

862 
≠r_time_t
 
mtime
,

863 
≠r_poﬁ_t
 *
poﬁ
);

871 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_make
(c⁄° *
∑th
, 
≠r_fûïîms_t
 
≥rm
,

872 
≠r_poﬁ_t
 *
poﬁ
);

881 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_make_ªcursive
(c⁄° *
∑th
,

882 
≠r_fûïîms_t
 
≥rm
,

883 
≠r_poﬁ_t
 *
poﬁ
);

892 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_dú_ªmove
(c⁄° *
∑th
, 
≠r_poﬁ_t
 *
poﬁ
);

900 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_öfo_gë
(
≠r_föfo_t
 *
föfo
,

901 
≠r_öt32_t
 
w™ãd
,

902 
≠r_fûe_t
 *
thefûe
);

911 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_åunc
(
≠r_fûe_t
 *
Â
, 
≠r_off_t
 
off£t
);

918 
APR_DECLARE
(
≠r_öt32_t
Ë
≠r_fûe_Êags_gë
(
≠r_fûe_t
 *
f
);

923 
APR_POOL_DECLARE_ACCESSOR
(
fûe
);

929 
APR_DECLARE_INHERIT_SET
(
fûe
);

934 
APR_DECLARE_INHERIT_UNSET
(
fûe
);

953 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_fûe_mkãmp
(
≠r_fûe_t
 **
Â
, *
ãm∂
,

954 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
);

966 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_ãmp_dú_gë
(c⁄° **
ãmp_dú
,

967 
≠r_poﬁ_t
 *
p
);

971 #ifde‡
__˝lu•lus


	@include/apr_fnmatch.h

37 #i‚def 
_APR_FNMATCH_H_


38 
	#_APR_FNMATCH_H_


	)

45 
	~"≠r_î∫o.h
"

46 
	~"≠r_èbÀs.h
"

48 #ifde‡
__˝lu•lus


58 
	#APR_FNM_NOMATCH
 1

	)

60 
	#APR_FNM_NOESCAPE
 0x01

	)

61 
	#APR_FNM_PATHNAME
 0x02

	)

62 
	#APR_FNM_PERIOD
 0x04

	)

63 
	#APR_FNM_CASE_BLIND
 0x08

	)

122 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_‚m©ch
(c⁄° *
∑âîn
,

123 c⁄° *
°rögs
, 
Êags
);

130 
APR_DECLARE
(Ë
≠r_‚m©ch_ã°
(c⁄° *
∑âîn
);

139 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_m©ch_glob
(c⁄° *
∑âîn
,

140 
≠r_¨øy_hódî_t
 **
ªsu…
,

141 
≠r_poﬁ_t
 *
p
);

145 #ifde‡
__˝lu•lus


	@include/apr_general.h

17 #i‚de‡
APR_GENERAL_H


18 
	#APR_GENERAL_H


	)

28 
	~"≠r.h
"

29 
	~"≠r_poﬁs.h
"

30 
	~"≠r_î∫o.h
"

32 #i‡
APR_HAVE_SIGNAL_H


33 
	~<sig«l.h
>

36 #ifde‡
__˝lu•lus


50 #i‚de‡
FALSE


51 
	#FALSE
 0

	)

54 #i‚de‡
TRUE


55 
	#TRUE
 (!
FALSE
)

	)

59 
	#APR_ASCII_BLANK
 '\040'

	)

61 
	#APR_ASCII_CR
 '\015'

	)

63 
	#APR_ASCII_LF
 '\012'

	)

65 
	#APR_ASCII_TAB
 '\011'

	)

68 
	t≠r_signum_t
;

79 #i‡
deföed
(
CRAY
Ë|| (deföed(
__¨m
Ë&& !(deföed(
LINUX
Ë|| deföed(
__FªeBSD__
)))

80 #ifde‡
__STDC__


81 
	#APR_OFFSET
(
p_ty≥
,
fõld
Ë
	`_Off£tof
’_ty≥,fõld)

	)

83 #ifde‡
CRAY2


84 
	#APR_OFFSET
(
p_ty≥
,
fõld
) \

85 (()*(()&(((
p_ty≥
)
NULL
)->
fõld
)))

	)

89 
	#APR_OFFSET
(
p_ty≥
,
fõld
Ë(()&((’_ty≥)
NULL
)->fõld))

	)

95 
	#APR_OFFSET
(
p_ty≥
,
fõld
) \

96 ((Ë(((*Ë(&(((
p_ty≥
)
NULL
)->
fõld
))Ë- ((*ËNULL)))

	)

106 #i‡
deföed
(
off£tof
Ë&& !deföed(
__˝lu•lus
)

107 
	#APR_OFFSETOF
(
s_ty≥
,
fõld
Ë
	`off£tof
(s_ty≥,fõld)

	)

109 
	#APR_OFFSETOF
(
s_ty≥
,
fõld
Ë
	`APR_OFFSET
(s_ty≥*,fõld)

	)

112 #i‚de‡
DOXYGEN


117 #i‡(!
APR_HAVE_STRCASECMP
Ë&& (
APR_HAVE_STRICMP
)

118 
	#°rˇ£cmp
(
s1
, 
s2
Ë
	`°ricmp
(s1, s2)

	)

119 #ñi‡(!
APR_HAVE_STRCASECMP
)

120 
°rˇ£cmp
(c⁄° *
a
, c⁄° *
b
);

123 #i‡(!
APR_HAVE_STRNCASECMP
Ë&& (
APR_HAVE_STRNICMP
)

124 
	#°∫ˇ£cmp
(
s1
, 
s2
, 
n
Ë
	`°∫icmp
(s1, s2,Ç)

	)

125 #ñi‡(!
APR_HAVE_STRNCASECMP
)

126 
°∫ˇ£cmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
n
);

136 
	#APR_ALIGN
(
size
, 
bound¨y
) \

137 (((
size
Ë+ ((
bound¨y
Ë- 1)Ë& ~((bound¨yË- 1))

	)

140 
	#APR_ALIGN_DEFAULT
(
size
Ë
	`APR_ALIGN
(size, 8)

	)

148 #i‚de‡
APR_STRINGIFY


150 
	#APR_STRINGIFY
(
n
Ë
	`APR_STRINGIFY_HELPER
“)

	)

152 
	#APR_STRINGIFY_HELPER
(
n
Ë#n

	)

155 #i‡(!
APR_HAVE_MEMMOVE
)

156 
	#memmove
(
a
,
b
,
c
Ë
	`bc›y
(b,a,c)

	)

159 #i‡(!
APR_HAVE_MEMCHR
)

160 *
memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

177 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_öôülize
();

191 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_≠p_öôülize
(*
¨gc
,

192 c⁄° * c⁄° * *
¨gv
,

193 c⁄° * c⁄° * *
ív
);

205 
APR_DECLARE_NONSTD
(Ë
≠r_ãrmö©e
();

216 
APR_DECLARE
(Ë
≠r_ãrmö©e2
();

225 #i‡
APR_HAS_RANDOM
 || 
deföed
(
DOXYGEN
)

233 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gíî©e_øndom_byãs
(* 
buf
,

234 
≠r_size_t
 
Àngth
);

239 #ifde‡
__˝lu•lus


	@include/apr_getopt.h

17 #i‚de‡
APR_GETOPT_H


18 
	#APR_GETOPT_H


	)

25 
	~"≠r_poﬁs.h
"

27 #ifde‡
__˝lu•lus


42 (
≠r_gë›t_îr_‚_t
)(*
	t¨g
, c⁄° *
	tîr
, ...);

45 
≠r_gë›t_t
 
	t≠r_gë›t_t
;

50 
	s≠r_gë›t_t
 {

52 
≠r_poﬁ_t
 *
c⁄t
;

54 
≠r_gë›t_îr_‚_t
 *
îr‚
;

56 *
îørg
;

58 
öd
;

60 
›t
;

62 
ª£t
;

64 
¨gc
;

66 c⁄° **
¨gv
;

68 c⁄°* 
∂a˚
;

70 
öãæóve
;

72 
skù_°¨t
;

74 
skù_íd
;

78 
≠r_gë›t_›ti⁄_t
 
	t≠r_gë›t_›ti⁄_t
;

83 
	s≠r_gë›t_›ti⁄_t
 {

85 c⁄° *
«me
;

87 
›tch
;

89 
has_¨g
;

91 c⁄° *
des¸ùti⁄
;

103 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gë›t_öô
(
≠r_gë›t_t
 **
os
, 
≠r_poﬁ_t
 *
c⁄t
,

104 
¨gc
, c⁄° * c⁄° *
¨gv
);

122 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gë›t
(
≠r_gë›t_t
 *
os
, c⁄° *
›ts
,

123 *
›ti⁄_ch
, c⁄° **
›ti⁄_¨g
);

150 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gë›t_l⁄g
(
≠r_gë›t_t
 *
os
,

151 c⁄° 
≠r_gë›t_›ti⁄_t
 *
›ts
,

152 *
›ti⁄_ch
,

153 c⁄° **
›ti⁄_¨g
);

156 #ifde‡
__˝lu•lus


	@include/apr_global_mutex.h

17 #i‚de‡
APR_GLOBAL_MUTEX_H


18 
	#APR_GLOBAL_MUTEX_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_¥oc_muãx.h
"

27 
	~"≠r_poﬁs.h
"

28 
	~"≠r_î∫o.h
"

29 #i‡
APR_PROC_MUTEX_IS_GLOBAL


30 
	~"≠r_¥oc_muãx.h
"

33 #ifde‡
__˝lu•lus


43 #i‡!
APR_PROC_MUTEX_IS_GLOBAL
 || 
deföed
(
DOXYGEN
)

46 
≠r_globÆ_muãx_t
 
	t≠r_globÆ_muãx_t
;

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_¸óã
(
≠r_globÆ_muãx_t
 **
muãx
,

75 c⁄° *
‚ame
,

76 
≠r_lockmech_e
 
mech
,

77 
≠r_poﬁ_t
 *
poﬁ
);

90 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_chûd_öô
(

91 
≠r_globÆ_muãx_t
 **
muãx
,

92 c⁄° *
‚ame
,

93 
≠r_poﬁ_t
 *
poﬁ
);

100 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_lock
(
≠r_globÆ_muãx_t
 *
muãx
);

109 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_åylock
(
≠r_globÆ_muãx_t
 *
muãx
);

115 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_u∆ock
(
≠r_globÆ_muãx_t
 *
muãx
);

121 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_globÆ_muãx_de°roy
(
≠r_globÆ_muãx_t
 *
muãx
);

127 
	$APR_DECLARE
(c⁄° *Ë
	`≠r_globÆ_muãx_lockfûe
(
≠r_globÆ_muãx_t
 *
muãx
);

135 
	$APR_DECLARE
(c⁄° *Ë
	`≠r_globÆ_muãx_«me
(
≠r_globÆ_muãx_t
 *
muãx
);

141 
	`APR_POOL_DECLARE_ACCESSOR
(
globÆ_muãx
);

150 
	#≠r_globÆ_muãx_t
 
≠r_¥oc_muãx_t


	)

151 
	#≠r_globÆ_muãx_¸óã
 
≠r_¥oc_muãx_¸óã


	)

152 
	#≠r_globÆ_muãx_chûd_öô
 
≠r_¥oc_muãx_chûd_öô


	)

153 
	#≠r_globÆ_muãx_lock
 
≠r_¥oc_muãx_lock


	)

154 
	#≠r_globÆ_muãx_åylock
 
≠r_¥oc_muãx_åylock


	)

155 
	#≠r_globÆ_muãx_u∆ock
 
≠r_¥oc_muãx_u∆ock


	)

156 
	#≠r_globÆ_muãx_de°roy
 
≠r_¥oc_muãx_de°roy


	)

157 
	#≠r_globÆ_muãx_lockfûe
 
≠r_¥oc_muãx_lockfûe


	)

158 
	#≠r_globÆ_muãx_«me
 
≠r_¥oc_muãx_«me


	)

159 
	#≠r_globÆ_muãx_poﬁ_gë
 
≠r_¥oc_muãx_poﬁ_gë


	)

165 #ifde‡
__˝lu•lus


166 
	}
}

	@include/apr_hash.h

17 #i‚de‡
APR_HASH_H


18 
	#APR_HASH_H


	)

25 
	~"≠r_poﬁs.h
"

27 #ifde‡
__˝lu•lus


47 
	#APR_HASH_KEY_STRING
 (-1)

	)

52 
≠r_hash_t
 
	t≠r_hash_t
;

57 
≠r_hash_ödex_t
 
	t≠r_hash_ödex_t
;

65 (*
	t≠r_hashfunc_t
)(c⁄° *
	tkey
, 
	t≠r_ssize_t
 *
	tkÀn
);

70 
APR_DECLARE_NONSTD
(Ë
≠r_hashfunc_deÁu…
(c⁄° *
key
,

71 
≠r_ssize_t
 *
kÀn
);

78 
APR_DECLARE
(
≠r_hash_t
 *Ë
≠r_hash_make
(
≠r_poﬁ_t
 *
poﬁ
);

86 
APR_DECLARE
(
≠r_hash_t
 *Ë
≠r_hash_make_cu°om
(
≠r_poﬁ_t
 *
poﬁ
,

87 
≠r_hashfunc_t
 
hash_func
);

96 
APR_DECLARE
(
≠r_hash_t
 *Ë
≠r_hash_c›y
(
≠r_poﬁ_t
 *
poﬁ
,

97 c⁄° 
≠r_hash_t
 *
h
);

107 
APR_DECLARE
(Ë
≠r_hash_£t
(
≠r_hash_t
 *
ht
, c⁄° *
key
,

108 
≠r_ssize_t
 
kÀn
, c⁄° *
vÆ
);

117 
APR_DECLARE
(*Ë
≠r_hash_gë
(
≠r_hash_t
 *
ht
, c⁄° *
key
,

118 
≠r_ssize_t
 
kÀn
);

147 
APR_DECLARE
(
≠r_hash_ödex_t
 *Ë
≠r_hash_fú°
(
≠r_poﬁ_t
 *
p
, 
≠r_hash_t
 *
ht
);

155 
APR_DECLARE
(
≠r_hash_ödex_t
 *Ë
≠r_hash_√xt
◊¥_hash_ödex_à*
hi
);

166 
APR_DECLARE
(Ë
≠r_hash_this
(
≠r_hash_ödex_t
 *
hi
, c⁄° **
key
,

167 
≠r_ssize_t
 *
kÀn
, **
vÆ
);

174 
APR_DECLARE
(c⁄° *Ë
≠r_hash_this_key
(
≠r_hash_ödex_t
 *
hi
);

181 
APR_DECLARE
(
≠r_ssize_t
Ë
≠r_hash_this_key_Àn
(
≠r_hash_ödex_t
 *
hi
);

188 
APR_DECLARE
(*Ë
≠r_hash_this_vÆ
(
≠r_hash_ödex_t
 *
hi
);

195 
APR_DECLARE
(Ë
≠r_hash_cou¡
(
≠r_hash_t
 *
ht
);

201 
APR_DECLARE
(Ë
≠r_hash_˛ór
(
≠r_hash_t
 *
ht
);

212 
APR_DECLARE
(
≠r_hash_t
 *Ë
≠r_hash_ovîœy
(
≠r_poﬁ_t
 *
p
,

213 c⁄° 
≠r_hash_t
 *
ovîœy
,

214 c⁄° 
≠r_hash_t
 *
ba£
);

230 
APR_DECLARE
(
≠r_hash_t
 *Ë
≠r_hash_mîge
(
≠r_poﬁ_t
 *
p
,

231 c⁄° 
≠r_hash_t
 *
h1
,

232 c⁄° 
≠r_hash_t
 *
h2
,

233 * (*
mîgî
)(
≠r_poﬁ_t
 *
p
,

234 c⁄° *
key
,

235 
≠r_ssize_t
 
kÀn
,

236 c⁄° *
h1_vÆ
,

237 c⁄° *
h2_vÆ
,

238 c⁄° *
d©a
),

239 c⁄° *
d©a
);

252 (
≠r_hash_do_ˇŒback_‚_t
)(*
	tªc
, c⁄° *
	tkey
,

253 
	t≠r_ssize_t
 
	tkÀn
,

254 c⁄° *
	tvÆue
);

268 
APR_DECLARE
(Ë
≠r_hash_do
(
≠r_hash_do_ˇŒback_‚_t
 *
comp
,

269 *
ªc
, c⁄° 
≠r_hash_t
 *
ht
);

274 
APR_POOL_DECLARE_ACCESSOR
(
hash
);

278 #ifde‡
__˝lu•lus


	@include/apr_inherit.h

17 #i‚de‡
APR_INHERIT_H


18 
	#APR_INHERIT_H


	)

35 
	#APR_DECLARE_INHERIT_SET
(
ty≥
) \

36 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
ty≥
##
	`_öhîô_£t
( \

37 
≠r_
##
ty≥
##
_t
 *
the
##ty≥)

	)

47 
	#APR_DECLARE_INHERIT_UNSET
(
ty≥
) \

48 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
ty≥
##
	`_öhîô_un£t
( \

49 
≠r_
##
ty≥
##
_t
 *
the
##ty≥)

	)

	@include/apr_lib.h

17 #i‚de‡
APR_LIB_H


18 
	#APR_LIB_H


	)

28 
	~"≠r.h
"

29 
	~"≠r_î∫o.h
"

31 #i‡
APR_HAVE_CTYPE_H


32 
	~<˘y≥.h
>

34 #i‡
APR_HAVE_STDARG_H


35 
	~<°d¨g.h
>

38 #ifde‡
__˝lu•lus


52 
	#HUGE_STRING_LEN
 8192

	)

59 
≠r_vf‹m©ãr_buff_t
 
	t≠r_vf‹m©ãr_buff_t
;

64 
	s≠r_vf‹m©ãr_buff_t
 {

66 *
cuΩos
;

68 *
ídpos
;

84 
APR_DECLARE
(c⁄° *Ë
≠r_fûï©h_«me_gë
(c⁄° *
∑th«me
);

92 #ifde‡
WIN32


93 
	#≠r_kûÕg
(
x
, 
y
)

	)

95 #ifde‡
NO_KILLPG


96 
	#≠r_kûÕg
(
x
, 
y
Ë(
	`kûl
 (-(x), (y)))

	)

98 
	#≠r_kûÕg
(
x
, 
y
Ë(
	`kûÕg
 ((x), (y)))

	)

174 
APR_DECLARE
(Ë
≠r_vf‹m©ãr
((*
Êush_func
)(
≠r_vf‹m©ãr_buff_t
 *
b
),

175 
≠r_vf‹m©ãr_buff_t
 *
c
, c⁄° *
fmt
,

176 
va_li°
 
≠
);

189 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_∑ssw‹d_gë
(c⁄° *
¥om±
, *
pwbuf
,

190 
≠r_size_t
 *
bufsize
);

203 
	#≠r_iß um
(
c
Ë(
	`iß um
((()(c))))

	)

205 
	#≠r_ißÕha
(
c
Ë(
	`ißÕha
((()(c))))

	)

207 
	#≠r_is˙ål
(
c
Ë(
	`is˙ål
((()(c))))

	)

209 
	#≠r_isdigô
(
c
Ë(
	`isdigô
((()(c))))

	)

211 
	#≠r_isgøph
(
c
Ë(
	`isgøph
((()(c))))

	)

213 
	#≠r_i¶owî
(
c
Ë(
	`i¶owî
((()(c))))

	)

215 #ifde‡
ißscii


216 
	#≠r_ißscii
(
c
Ë(
	`ißscii
((()(c))))

	)

218 
	#≠r_ißscii
(
c
Ë(((cË& ~0x7f)==0)

	)

221 
	#≠r_i•röt
(
c
Ë(
	`i•röt
((()(c))))

	)

223 
	#≠r_i•un˘
(
c
Ë(
	`i•un˘
((()(c))))

	)

225 
	#≠r_is•a˚
(
c
Ë(
	`is•a˚
((()(c))))

	)

227 
	#≠r_isuµî
(
c
Ë(
	`isuµî
((()(c))))

	)

229 
	#≠r_isxdigô
(
c
Ë(
	`isxdigô
((()(c))))

	)

231 
	#≠r_tﬁowî
(
c
Ë(
	`tﬁowî
((()(c))))

	)

233 
	#≠r_touµî
(
c
Ë(
	`touµî
((()(c))))

	)

237 #ifde‡
__˝lu•lus


	@include/apr_mmap.h

17 #i‚de‡
APR_MMAP_H


18 
	#APR_MMAP_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

28 
	~"≠r_rög.h
"

29 
	~"≠r_fûe_io.h
"

31 #ifde‡
BEOS


32 
	~<kî√l/OS.h
>

35 #ifde‡
__˝lu•lus


46 
	#APR_MMAP_READ
 1

	)

48 
	#APR_MMAP_WRITE
 2

	)

51 
≠r_mm≠_t
 
	t≠r_mm≠_t
;

62 
	s≠r_mm≠_t
 {

64 
≠r_poﬁ_t
 *
˙txt
;

65 #ifde‡
BEOS


67 
¨ó_id
 
¨ó
;

69 #ifde‡
WIN32


71 
HANDLE
 
mh™dÀ
;

73 *
mv
;

75 
≠r_off_t
 
p°¨t
;

76 
≠r_size_t
 
psize
;

77 
≠r_off_t
 
poff£t
;

80 *
mm
;

82 
≠r_size_t
 
size
;

85 
APR_RING_ENTRY
(
≠r_mm≠_t
Ë
lök
;

88 #i‡
APR_HAS_MMAP
 || 
deföed
(
DOXYGEN
)

95 #ifde‡
MMAP_THRESHOLD


96 
	#APR_MMAP_THRESHOLD
 
MMAP_THRESHOLD


	)

98 #ifde‡
SUNOS4


99 
	#APR_MMAP_THRESHOLD
 (8*1024)

	)

101 
	#APR_MMAP_THRESHOLD
 1

	)

108 #ifde‡
MMAP_LIMIT


109 
	#APR_MMAP_LIMIT
 
MMAP_LIMIT


	)

111 
	#APR_MMAP_LIMIT
 (4*1024*1024)

	)

115 
	#APR_MMAP_CANDIDATE
(
fûñígth
) \

116 ((
fûñígth
 >
APR_MMAP_THRESHOLD
Ë&& (fûñígth < 
APR_MMAP_LIMIT
))

	)

133 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mm≠_¸óã
(
≠r_mm≠_t
 **
√wmm≠
,

134 
≠r_fûe_t
 *
fûe
, 
≠r_off_t
 
off£t
,

135 
≠r_size_t
 
size
, 
≠r_öt32_t
 
Êag
,

136 
≠r_poﬁ_t
 *
˙txt
);

144 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mm≠_dup
(
≠r_mm≠_t
 **
√w_mm≠
,

145 
≠r_mm≠_t
 *
ﬁd_mm≠
,

146 
≠r_poﬁ_t
 *
p
);

152 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mm≠_dñëe
(
≠r_mm≠_t
 *
mm
);

160 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mm≠_off£t
(**
addr
, 
≠r_mm≠_t
 *
mm
,

161 
≠r_off_t
 
off£t
);

167 #ifde‡
__˝lu•lus


	@include/apr_network_io.h

17 #i‚de‡
APR_NETWORK_IO_H


18 
	#APR_NETWORK_IO_H


	)

24 
	~"≠r.h
"

25 
	~"≠r_poﬁs.h
"

26 
	~"≠r_fûe_io.h
"

27 
	~"≠r_î∫o.h
"

28 
	~"≠r_öhîô.h
"

30 #i‡
APR_HAVE_NETINET_IN_H


31 
	~<√töë/ö.h
>

34 #ifde‡
__˝lu•lus


44 #i‚de‡
APR_MAX_SECS_TO_LINGER


46 
	#APR_MAX_SECS_TO_LINGER
 30

	)

49 #i‚de‡
APRMAXHOSTLEN


51 
	#APRMAXHOSTLEN
 256

	)

54 #i‚de‡
APR_ANYADDR


56 
	#APR_ANYADDR
 "0.0.0.0"

	)

63 
	#APR_SO_LINGER
 1

	)

64 
	#APR_SO_KEEPALIVE
 2

	)

65 
	#APR_SO_DEBUG
 4

	)

66 
	#APR_SO_NONBLOCK
 8

	)

67 
	#APR_SO_REUSEADDR
 16

	)

68 
	#APR_SO_SNDBUF
 64

	)

69 
	#APR_SO_RCVBUF
 128

	)

70 
	#APR_SO_DISCONNECTED
 256

	)

71 
	#APR_TCP_NODELAY
 512

	)

74 
	#APR_TCP_NOPUSH
 1024

	)

75 
	#APR_RESET_NODELAY
 2048

	)

81 
	#APR_INCOMPLETE_READ
 4096

	)

92 
	#APR_INCOMPLETE_WRITE
 8192

	)

95 
	#APR_IPV6_V6ONLY
 16384

	)

98 
	#APR_TCP_DEFER_ACCEPT
 32768

	)

102 
	#APR_SO_BROADCAST
 65536

	)

109 
APR_SHUTDOWN_READ
,

110 
APR_SHUTDOWN_WRITE
,

111 
APR_SHUTDOWN_READWRITE


112 } 
	t≠r_shutdown_how_e
;

114 
	#APR_IPV4_ADDR_OK
 0x01

	)

115 
	#APR_IPV6_ADDR_OK
 0x02

	)

117 #i‡(!
APR_HAVE_IN_ADDR
)

122 
	sö_addr
 {

123 
≠r_uöt32_t
 
s_addr
;

131 #ifde‡
INADDR_NONE


132 
	#APR_INADDR_NONE
 
INADDR_NONE


	)

134 
	#APR_INADDR_NONE
 ((Ë0xffffffff)

	)

142 
	#APR_INET
 
AF_INET


	)

146 #ifde‡
AF_UNSPEC


147 
	#APR_UNSPEC
 
AF_UNSPEC


	)

149 
	#APR_UNSPEC
 0

	)

151 #i‡
APR_HAVE_IPV6


156 
	#APR_INET6
 
AF_INET6


	)

163 
	#APR_PROTO_TCP
 6

	)

164 
	#APR_PROTO_UDP
 17

	)

165 
	#APR_PROTO_SCTP
 132

	)

173 
APR_LOCAL
,

174 
APR_REMOTE


175 } 
	t≠r_öãrÁ˚_e
;

182 #i‡
APR_HAVE_INET_ADDR


183 
	#≠r_öë_addr
 
öë_addr


	)

184 #ñi‡
APR_HAVE_INET_NETWORK


189 
	#≠r_öë_addr
 
öë_√tw‹k


	)

193 
≠r_sockë_t
 
	t≠r_sockë_t
;

197 
≠r_hdå_t
 
	t≠r_hdå_t
;

199 
ö_addr
 
	t≠r_ö_addr_t
;

201 
≠r_ùsub√t_t
 
	t≠r_ùsub√t_t
;

204 
≠r_uöt16_t
 
	t≠r_p‹t_t
;

209 
≠r_sockaddr_t
 
	t≠r_sockaddr_t
;

213 
	s≠r_sockaddr_t
 {

215 
≠r_poﬁ_t
 *
poﬁ
;

217 *
ho°«me
;

219 *
£rv«me
;

221 
≠r_p‹t_t
 
p‹t
;

223 
≠r_öt32_t
 
Ámûy
;

225 
≠r_sockÀn_t
 
ßÀn
;

227 
ùaddr_Àn
;

230 
addr_°r_Àn
;

233 *
ùaddr_±r
;

236 
≠r_sockaddr_t
 *
√xt
;

240 
sockaddr_ö
 
sö
;

241 #i‡
APR_HAVE_IPV6


243 
sockaddr_ö6
 
sö6
;

245 #i‡
APR_HAVE_SA_STORAGE


248 
sockaddr_°‹age
 
ßs
;

250 } 
ß
;

253 #i‡
APR_HAS_SENDFILE


259 
	#APR_SENDFILE_DISCONNECT_SOCKET
 1

	)

263 
	s≠r_hdå_t
 {

265 
iovec
* 
hódîs
;

267 
numhódîs
;

269 
iovec
* 
åaûîs
;

271 
numåaûîs
;

287 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_¸óã
(
≠r_sockë_t
 **
√w_sock
,

288 
Ámûy
, 
ty≥
,

289 
¥Ÿocﬁ
,

290 
≠r_poﬁ_t
 *
c⁄t
);

305 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_shutdown
(
≠r_sockë_t
 *
thesockë
,

306 
≠r_shutdown_how_e
 
how
);

312 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_˛o£
(
≠r_sockë_t
 *
thesockë
);

321 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_böd
(
≠r_sockë_t
 *
sock
,

322 
≠r_sockaddr_t
 *
ß
);

331 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_li°í
(
≠r_sockë_t
 *
sock
,

332 
≠r_öt32_t
 
backlog
);

345 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_ac˚±
(
≠r_sockë_t
 **
√w_sock
,

346 
≠r_sockë_t
 *
sock
,

347 
≠r_poﬁ_t
 *
c⁄√˘i⁄_poﬁ
);

355 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_c⁄√˘
(
≠r_sockë_t
 *
sock
,

356 
≠r_sockaddr_t
 *
ß
);

370 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_©ªadeof
(
≠r_sockë_t
 *
sock
,

371 *
©ªadeof
);

396 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockaddr_öfo_gë
(
≠r_sockaddr_t
 **
ß
,

397 c⁄° *
ho°«me
,

398 
≠r_öt32_t
 
Ámûy
,

399 
≠r_p‹t_t
 
p‹t
,

400 
≠r_öt32_t
 
Êags
,

401 
≠r_poﬁ_t
 *
p
);

409 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gë«meöfo
(**
ho°«me
,

410 
≠r_sockaddr_t
 *
ß
,

411 
≠r_öt32_t
 
Êags
);

443 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_∑r£_addr_p‹t
(**
addr
,

444 **
sc›e_id
,

445 
≠r_p‹t_t
 *
p‹t
,

446 c⁄° *
°r
,

447 
≠r_poﬁ_t
 *
p
);

457 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gëho°«me
(*
buf
, 
Àn
, 
≠r_poﬁ_t
 *
c⁄t
);

465 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_d©a_gë
(**
d©a
, c⁄° *
key
,

466 
≠r_sockë_t
 *
sock
);

475 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_d©a_£t
(
≠r_sockë_t
 *
sock
, *
d©a
,

476 c⁄° *
key
,

477 
≠r_°©us_t
 (*
˛ónup
)(*));

496 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_£nd
(
≠r_sockë_t
 *
sock
, c⁄° *
buf
,

497 
≠r_size_t
 *
Àn
);

517 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_£ndv
(
≠r_sockë_t
 *
sock
,

518 c⁄° 
iovec
 *
vec
,

519 
≠r_öt32_t
 
nvec
, 
≠r_size_t
 *
Àn
);

528 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_£ndto
(
≠r_sockë_t
 *
sock
,

529 
≠r_sockaddr_t
 *
whîe
,

530 
≠r_öt32_t
 
Êags
, c⁄° *
buf
,

531 
≠r_size_t
 *
Àn
);

546 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_ªcv‰om
(
≠r_sockaddr_t
 *
‰om
,

547 
≠r_sockë_t
 *
sock
,

548 
≠r_öt32_t
 
Êags
, *
buf
,

549 
≠r_size_t
 *
Àn
);

551 #i‡
APR_HAS_SENDFILE
 || 
deföed
(
DOXYGEN
)

571 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
,

572 
≠r_fûe_t
 *
fûe
,

573 
≠r_hdå_t
 *
hdå
,

574 
≠r_off_t
 *
off£t
,

575 
≠r_size_t
 *
Àn
,

576 
≠r_öt32_t
 
Êags
);

599 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_ªcv
(
≠r_sockë_t
 *
sock
,

600 *
buf
, 
≠r_size_t
 *
Àn
);

624 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_›t_£t
(
≠r_sockë_t
 *
sock
,

625 
≠r_öt32_t
 
›t
,á¥_öt32_à
⁄
);

638 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_timeout_£t
(
≠r_sockë_t
 *
sock
,

639 
≠r_öãrvÆ_time_t
 
t
);

660 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_›t_gë
(
≠r_sockë_t
 *
sock
,

661 
≠r_öt32_t
 
›t
,á¥_öt32_à*
⁄
);

668 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_timeout_gë
(
≠r_sockë_t
 *
sock
,

669 
≠r_öãrvÆ_time_t
 *
t
);

677 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_©m¨k
(
≠r_sockë_t
 *
sock
,

678 *
©m¨k
);

688 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_addr_gë
(
≠r_sockaddr_t
 **
ß
,

689 
≠r_öãrÁ˚_e
 
which
,

690 
≠r_sockë_t
 *
sock
);

699 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockaddr_ù_gë
(**
addr
,

700 
≠r_sockaddr_t
 *
sockaddr
);

707 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockaddr_ù_gëbuf
(*
buf
, 
≠r_size_t
 
buÊí
,

708 
≠r_sockaddr_t
 *
sockaddr
);

720 
APR_DECLARE
(Ë
≠r_sockaddr_equÆ
(c⁄° 
≠r_sockaddr_t
 *
addr1
,

721 c⁄° 
≠r_sockaddr_t
 *
addr2
);

731 
APR_DECLARE
(Ë
≠r_sockaddr_is_wûdˇrd
(c⁄° 
≠r_sockaddr_t
 *
addr
);

738 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_ty≥_gë
(
≠r_sockë_t
 *
sock
,

739 *
ty≥
);

746 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gë£rvby«me
(
≠r_sockaddr_t
 *
sockaddr
,

747 c⁄° *
£rv«me
);

756 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_ùsub√t_¸óã
(
≠r_ùsub√t_t
 **
ùsub
,

757 c⁄° *
ù°r
,

758 c⁄° *
mask_‹_numbôs
,

759 
≠r_poﬁ_t
 *
p
);

768 
APR_DECLARE
(Ë
≠r_ùsub√t_ã°
(
≠r_ùsub√t_t
 *
ùsub
, 
≠r_sockaddr_t
 *
ß
);

770 #i‡
APR_HAS_SO_ACCEPTFILTER
 || 
deföed
(
DOXYGEN
)

780 
≠r_°©us_t
 
≠r_sockë_ac˚±_fûãr
(
≠r_sockë_t
 *
sock
, *
«me
,

781 *
¨gs
);

789 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sockë_¥Ÿocﬁ_gë
(
≠r_sockë_t
 *
sock
,

790 *
¥Ÿocﬁ
);

795 
APR_POOL_DECLARE_ACCESSOR
(
sockë
);

800 
APR_DECLARE_INHERIT_SET
(
sockë
);

805 
APR_DECLARE_INHERIT_UNSET
(
sockë
);

821 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mˇ°_joö
(
≠r_sockë_t
 *
sock
,

822 
≠r_sockaddr_t
 *
joö
,

823 
≠r_sockaddr_t
 *
iÁ˚
,

824 
≠r_sockaddr_t
 *
sour˚
);

836 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mˇ°_Àave
(
≠r_sockë_t
 *
sock
,

837 
≠r_sockaddr_t
 *
addr
,

838 
≠r_sockaddr_t
 *
iÁ˚
,

839 
≠r_sockaddr_t
 *
sour˚
);

848 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mˇ°_h›s
(
≠r_sockë_t
 *
sock
,

849 
≠r_byã_t
 
âl
);

856 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mˇ°_lo›back
(
≠r_sockë_t
 *
sock
,

857 
≠r_byã_t
 
›t
);

865 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_mˇ°_öãrÁ˚
(
≠r_sockë_t
 *
sock
,

866 
≠r_sockaddr_t
 *
iÁ˚
);

872 #ifde‡
__˝lu•lus


	@include/apr_poll.h

17 #i‚de‡
APR_POLL_H


18 
	#APR_POLL_H


	)

23 
	~"≠r.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_î∫o.h
"

26 
	~"≠r_öhîô.h
"

27 
	~"≠r_fûe_io.h
"

28 
	~"≠r_√tw‹k_io.h
"

30 #i‡
APR_HAVE_NETINET_IN_H


31 
	~<√töë/ö.h
>

34 #ifde‡
__˝lu•lus


47 
	#APR_POLLIN
 0x001

	)

48 
	#APR_POLLPRI
 0x002

	)

49 
	#APR_POLLOUT
 0x004

	)

50 
	#APR_POLLERR
 0x010

	)

51 
	#APR_POLLHUP
 0x020

	)

52 
	#APR_POLLNVAL
 0x040

	)

57 
	#APR_POLLSET_THREADSAFE
 0x001

	)

60 
	#APR_POLLSET_NOCOPY
 0x002

	)

63 
	#APR_POLLSET_WAKEABLE
 0x004

	)

66 
	#APR_POLLSET_NODEFAULT
 0x010

	)

75 
APR_POLLSET_DEFAULT
,

76 
APR_POLLSET_SELECT
,

77 
APR_POLLSET_KQUEUE
,

78 
APR_POLLSET_PORT
,

79 
APR_POLLSET_EPOLL
,

80 
APR_POLLSET_POLL
,

81 
APR_POLLSET_AIO_MSGQ


82 } 
	t≠r_pﬁl£t_mëhod_e
;

86 
APR_NO_DESC
,

87 
APR_POLL_SOCKET
,

88 
APR_POLL_FILE
,

89 
APR_POLL_LASTDESC


90 } 
	t≠r_d©©y≥_e
 ;

94 
≠r_fûe_t
 *
f
;

95 
≠r_sockë_t
 *
s
;

96 } 
	t≠r_des¸ùt‹
;

99 
≠r_pﬁlfd_t
 
	t≠r_pﬁlfd_t
;

102 
	s≠r_pﬁlfd_t
 {

103 
≠r_poﬁ_t
 *
p
;

104 
≠r_d©©y≥_e
 
desc_ty≥
;

105 
≠r_öt16_t
 
ªqevíts
;

106 
≠r_öt16_t
 
π√víts
;

107 
≠r_des¸ùt‹
 
desc
;

108 *
˛õ¡_d©a
;

117 
≠r_pﬁl£t_t
 
	t≠r_pﬁl£t_t
;

148 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 **
pﬁl£t
,

149 
≠r_uöt32_t
 
size
,

150 
≠r_poﬁ_t
 *
p
,

151 
≠r_uöt32_t
 
Êags
);

185 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_¸óã_ex
(
≠r_pﬁl£t_t
 **
pﬁl£t
,

186 
≠r_uöt32_t
 
size
,

187 
≠r_poﬁ_t
 *
p
,

188 
≠r_uöt32_t
 
Êags
,

189 
≠r_pﬁl£t_mëhod_e
 
mëhod
);

195 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_de°roy
(
≠r_pﬁl£t_t
 *
pﬁl£t
);

223 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

224 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
);

244 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

245 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
);

265 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

266 
≠r_öãrvÆ_time_t
 
timeout
,

267 
≠r_öt32_t
 *
num
,

268 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
);

276 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl£t_wakeup
(
≠r_pﬁl£t_t
 *
pﬁl£t
);

294 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁl
(
≠r_pﬁlfd_t
 *
≠r£t
, 
≠r_öt32_t
 
numsock
,

295 
≠r_öt32_t
 *
nsds
,

296 
≠r_öãrvÆ_time_t
 
timeout
);

302 
APR_DECLARE
(c⁄° *Ë
≠r_pﬁl£t_mëhod_«me
(
≠r_pﬁl£t_t
 *
pﬁl£t
);

308 
APR_DECLARE
(c⁄° *Ë
≠r_pﬁl_mëhod_de‚ame
();

311 
≠r_pﬁlcb_t
 
	t≠r_pﬁlcb_t
;

323 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 **
pﬁlcb
,

324 
≠r_uöt32_t
 
size
,

325 
≠r_poﬁ_t
 *
p
,

326 
≠r_uöt32_t
 
Êags
);

341 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁlcb_¸óã_ex
(
≠r_pﬁlcb_t
 **
pﬁlcb
,

342 
≠r_uöt32_t
 
size
,

343 
≠r_poﬁ_t
 *
p
,

344 
≠r_uöt32_t
 
Êags
,

345 
≠r_pﬁl£t_mëhod_e
 
mëhod
);

364 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

365 
≠r_pﬁlfd_t
 *
des¸ùt‹
);

374 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

375 
≠r_pﬁlfd_t
 *
des¸ùt‹
);

383 
≠r_°©us_t
 (*
	t≠r_pﬁlcb_cb_t
)(*
	tb©⁄
, 
	t≠r_pﬁlfd_t
 *
	tdes¸ùt‹
);

399 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

400 
≠r_öãrvÆ_time_t
 
timeout
,

401 
≠r_pﬁlcb_cb_t
 
func
,

402 *
b©⁄
);

406 #ifde‡
__˝lu•lus


	@include/apr_pools.h

17 #i‚de‡
APR_POOLS_H


18 
	#APR_POOLS_H


	)

43 
	~"≠r.h
"

44 
	~"≠r_î∫o.h
"

45 
	~"≠r_gíîÆ.h
"

46 
	#APR_WANT_MEMFUNC


	)

47 
	~"≠r_w™t.h
"

49 #ifde‡
__˝lu•lus


60 
≠r_poﬁ_t
 
	t≠r_poﬁ_t
;

81 
	#APR_POOL_DECLARE_ACCESSOR
(
ty≥
) \

82 
	`APR_DECLARE
(
≠r_poﬁ_t
 *Ë
≠r_
##
ty≥
##
_poﬁ_gë
 \

83 (c⁄° 
≠r_
##
ty≥
##
_t
 *
the
##ty≥)

	)

91 
	#APR_POOL_IMPLEMENT_ACCESSOR
(
ty≥
) \

92 
	`APR_DECLARE
(
≠r_poﬁ_t
 *Ë
≠r_
##
ty≥
##
_poﬁ_gë
 \

93 (c⁄° 
≠r_
##
ty≥
##
_t
 *
the
##type) \

94 {  
the
##
ty≥
->
poﬁ
; }

	)

132 #i‡
deföed
(
APR_POOL_DEBUG
)

134 #i‡(
APR_POOL_DEBUG
 - APR_POOL_DEBUG -1 == 1)

135 #unde‡
APR_POOL_DEBUG


136 
	#APR_POOL_DEBUG
 1

	)

139 
	#APR_POOL_DEBUG
 0

	)

143 
	#APR_POOL__FILE_LINE__
 
__FILE__
 ":" 
	`APR_STRINGIFY
(
__LINE__
)

	)

148 (*
≠r_ab‹tfunc_t
)(
	tªtcode
);

164 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_öôülize
();

172 
APR_DECLARE
(Ë
≠r_poﬁ_ãrmö©e
();

179 
	~"≠r_Æloˇt‹.h
"

196 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

197 
≠r_poﬁ_t
 *
∑ª¡
,

198 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

199 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

200 
__©åibuã__
((
n⁄nuŒ
(1)));

206 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_c‹e_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

207 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

208 
≠r_Æloˇt‹_t
 *
Æloˇt‹
);

226 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_unm™aged_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

227 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

228 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

229 
__©åibuã__
((
n⁄nuŒ
(1)));

247 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

248 
≠r_poﬁ_t
 *
∑ª¡
,

249 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

250 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

251 c⁄° *
fûe_löe
)

252 
__©åibuã__
((
n⁄nuŒ
(1)));

254 #i‡
APR_POOL_DEBUG


255 
	#≠r_poﬁ_¸óã_ex
(
√wpoﬁ
, 
∑ª¡
, 
ab‹t_‚
, 
Æloˇt‹
) \

256 
	`≠r_poﬁ_¸óã_ex_debug
(
√wpoﬁ
, 
∑ª¡
, 
ab‹t_‚
, 
Æloˇt‹
, \

257 
APR_POOL__FILE_LINE__
)

	)

264 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_c‹e_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

265 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

266 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

267 c⁄° *
fûe_löe
);

284 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_unm™aged_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

285 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

286 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

287 c⁄° *
fûe_löe
)

288 
__©åibuã__
((
n⁄nuŒ
(1)));

290 #i‡
APR_POOL_DEBUG


291 
	#≠r_poﬁ_¸óã_c‹e_ex
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
) \

292 
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
, \

293 
APR_POOL__FILE_LINE__
)

	)

295 
	#≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
) \

296 
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
, \

297 
APR_POOL__FILE_LINE__
)

	)

313 #i‡
deföed
(
DOXYGEN
)

314 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã
(
≠r_poﬁ_t
 **
√wpoﬁ
,

315 
≠r_poﬁ_t
 *
∑ª¡
);

317 #i‡
APR_POOL_DEBUG


318 
	#≠r_poﬁ_¸óã
(
√wpoﬁ
, 
∑ª¡
) \

319 
	`≠r_poﬁ_¸óã_ex_debug
(
√wpoﬁ
, 
∑ª¡
, 
NULL
, NULL, \

320 
APR_POOL__FILE_LINE__
)

	)

322 
	#≠r_poﬁ_¸óã
(
√wpoﬁ
, 
∑ª¡
) \

323 
	`≠r_poﬁ_¸óã_ex
(
√wpoﬁ
, 
∑ª¡
, 
NULL
, NULL)

	)

331 #i‡
deföed
(
DOXYGEN
)

332 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_c‹e
(
≠r_poﬁ_t
 **
√wpoﬁ
);

333 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_¸óã_unm™aged
(
≠r_poﬁ_t
 **
√wpoﬁ
);

335 #i‡
APR_POOL_DEBUG


336 
	#≠r_poﬁ_¸óã_c‹e
(
√wpoﬁ
) \

337 
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
NULL
, NULL, \

338 
APR_POOL__FILE_LINE__
)

	)

339 
	#≠r_poﬁ_¸óã_unm™aged
(
√wpoﬁ
) \

340 
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
NULL
, NULL, \

341 
APR_POOL__FILE_LINE__
)

	)

343 
	#≠r_poﬁ_¸óã_c‹e
(
√wpoﬁ
) \

344 
	`≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
NULL
, NULL)

	)

345 
	#≠r_poﬁ_¸óã_unm™aged
(
√wpoﬁ
) \

346 
	`≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
NULL
, NULL)

	)

354 
APR_DECLARE
(
≠r_Æloˇt‹_t
 *Ë
≠r_poﬁ_Æloˇt‹_gë
(
≠r_poﬁ_t
 *
poﬁ
)

355 
__©åibuã__
((
n⁄nuŒ
(1)));

365 
APR_DECLARE
(Ë
≠r_poﬁ_˛ór
(
≠r_poﬁ_t
 *
p
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

380 
APR_DECLARE
(Ë
≠r_poﬁ_˛ór_debug
(
≠r_poﬁ_t
 *
p
,

381 c⁄° *
fûe_löe
)

382 
__©åibuã__
((
n⁄nuŒ
(1)));

384 #i‡
APR_POOL_DEBUG


385 
	#≠r_poﬁ_˛ór
(
p
) \

386 
	`≠r_poﬁ_˛ór_debug
(
p
, 
APR_POOL__FILE_LINE__
)

	)

395 
APR_DECLARE
(Ë
≠r_poﬁ_de°roy
(
≠r_poﬁ_t
 *
p
Ë
__©åibuã__
((
n⁄nuŒ
(1)));

410 
APR_DECLARE
(Ë
≠r_poﬁ_de°roy_debug
(
≠r_poﬁ_t
 *
p
,

411 c⁄° *
fûe_löe
)

412 
__©åibuã__
((
n⁄nuŒ
(1)));

414 #i‡
APR_POOL_DEBUG


415 
	#≠r_poﬁ_de°roy
(
p
) \

416 
	`≠r_poﬁ_de°roy_debug
(
p
, 
APR_POOL__FILE_LINE__
)

	)

430 
APR_DECLARE
(*Ë
≠r_∑Œoc
(
≠r_poﬁ_t
 *
p
, 
≠r_size_t
 
size
)

431 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

432 
__©åibuã__
((
Æloc_size
(2)))

434 
__©åibuã__
((
n⁄nuŒ
(1)));

444 
APR_DECLARE
(*Ë
≠r_∑Œoc_debug
(
≠r_poﬁ_t
 *
p
, 
≠r_size_t
 
size
,

445 c⁄° *
fûe_löe
)

446 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

447 
__©åibuã__
((
Æloc_size
(2)))

449 
__©åibuã__
((
n⁄nuŒ
(1)));

451 #i‡
APR_POOL_DEBUG


452 
	#≠r_∑Œoc
(
p
, 
size
) \

453 
	`≠r_∑Œoc_debug
(
p
, 
size
, 
APR_POOL__FILE_LINE__
)

	)

462 #i‡
deföed
(
DOXYGEN
)

463 
APR_DECLARE
(*Ë
≠r_pˇŒoc
(
≠r_poﬁ_t
 *
p
, 
≠r_size_t
 
size
);

464 #ñi‡!
APR_POOL_DEBUG


465 
	#≠r_pˇŒoc
(
p
, 
size
Ë
	`mem£t
(
	`≠r_∑Œoc
’, size), 0, size)

	)

476 
APR_DECLARE
(*Ë
≠r_pˇŒoc_debug
(
≠r_poﬁ_t
 *
p
, 
≠r_size_t
 
size
,

477 c⁄° *
fûe_löe
)

478 
__©åibuã__
((
n⁄nuŒ
(1)));

480 #i‡
APR_POOL_DEBUG


481 
	#≠r_pˇŒoc
(
p
, 
size
) \

482 
	`≠r_pˇŒoc_debug
(
p
, 
size
, 
APR_POOL__FILE_LINE__
)

	)

498 
APR_DECLARE
(Ë
≠r_poﬁ_ab‹t_£t
(
≠r_ab‹tfunc_t
 
ab‹tfunc
,

499 
≠r_poﬁ_t
 *
poﬁ
)

500 
__©åibuã__
((
n⁄nuŒ
(2)));

507 
APR_DECLARE
(
≠r_ab‹tfunc_t
Ë
≠r_poﬁ_ab‹t_gë
(
≠r_poﬁ_t
 *
poﬁ
)

508 
__©åibuã__
((
n⁄nuŒ
(1)));

515 
APR_DECLARE
(
≠r_poﬁ_t
 *Ë
≠r_poﬁ_∑ª¡_gë
◊¥_poﬁ_à*
poﬁ
)

516 
__©åibuã__
((
n⁄nuŒ
(1)));

529 
APR_DECLARE
(Ë
≠r_poﬁ_is_™˚°‹
(
≠r_poﬁ_t
 *
a
,á¥_poﬁ_à*
b
);

536 
APR_DECLARE
(Ë
≠r_poﬁ_èg
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
èg
)

537 
__©åibuã__
((
n⁄nuŒ
(1)));

563 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_u£rd©a_£t
(c⁄° *
d©a
,

564 c⁄° *
key
,

565 
≠r_°©us_t
 (*
˛ónup
)(*),

566 
≠r_poﬁ_t
 *
poﬁ
)

567 
__©åibuã__
((
n⁄nuŒ
(2,4)));

588 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_u£rd©a_£ä
(

589 c⁄° *
d©a
, c⁄° *
key
,

590 
≠r_°©us_t
 (*
˛ónup
)(*),

591 
≠r_poﬁ_t
 *
poﬁ
)

592 
__©åibuã__
((
n⁄nuŒ
(2,4)));

600 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_u£rd©a_gë
(**
d©a
, c⁄° *
key
,

601 
≠r_poﬁ_t
 *
poﬁ
)

602 
__©åibuã__
((
n⁄nuŒ
(1,2,3)));

628 
APR_DECLARE
(Ë
≠r_poﬁ_˛ónup_ªgi°î
(

629 
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

630 
≠r_°©us_t
 (*
∂aö_˛ónup
)(*),

631 
≠r_°©us_t
 (*
chûd_˛ónup
)(*))

632 
__©åibuã__
((
n⁄nuŒ
(3,4)));

646 
APR_DECLARE
(Ë
≠r_poﬁ_¥e_˛ónup_ªgi°î
(

647 
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

648 
≠r_°©us_t
 (*
∂aö_˛ónup
)(*))

649 
__©åibuã__
((
n⁄nuŒ
(3)));

663 
APR_DECLARE
(Ë
≠r_poﬁ_˛ónup_kûl
(
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

664 
≠r_°©us_t
 (*
˛ónup
)(*))

665 
__©åibuã__
((
n⁄nuŒ
(3)));

679 
APR_DECLARE
(Ë
≠r_poﬁ_chûd_˛ónup_£t
(

680 
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

681 
≠r_°©us_t
 (*
∂aö_˛ónup
)(*),

682 
≠r_°©us_t
 (*
chûd_˛ónup
)(*))

683 
__©åibuã__
((
n⁄nuŒ
(3,4)));

696 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_poﬁ_˛ónup_run
(
≠r_poﬁ_t
 *
p
, *
d©a
,

697 
≠r_°©us_t
 (*
˛ónup
)(*))

698 
__©åibuã__
((
n⁄nuŒ
(3)));

707 
APR_DECLARE_NONSTD
(
≠r_°©us_t
Ë
≠r_poﬁ_˛ónup_nuŒ
(*
d©a
);

715 
APR_DECLARE
(Ë
≠r_poﬁ_˛ónup_f‹_exec
();

761 #i‡
APR_POOL_DEBUG
 || 
deföed
(
DOXYGEN
)

767 
APR_DECLARE
(Ë
≠r_poﬁ_joö
(
≠r_poﬁ_t
 *
p
,á¥_poﬁ_à*
sub
)

768 
__©åibuã__
((
n⁄nuŒ
(2)));

775 
APR_DECLARE
(
≠r_poﬁ_t
 *Ë
≠r_poﬁ_föd
(c⁄° *
mem
);

783 
APR_DECLARE
(
≠r_size_t
Ë
≠r_poﬁ_num_byãs
(
≠r_poﬁ_t
 *
p
, 
ªcur£
)

784 
__©åibuã__
((
n⁄nuŒ
(1)));

791 
APR_DECLARE
(Ë
≠r_poﬁ_lock
(
≠r_poﬁ_t
 *
poﬁ
, 
Êag
);

797 #ifde‡
≠r_poﬁ_joö


798 #unde‡
≠r_poﬁ_joö


800 
	#≠r_poﬁ_joö
(
a
,
b
)

	)

802 #ifde‡
≠r_poﬁ_lock


803 #unde‡
≠r_poﬁ_lock


805 
	#≠r_poﬁ_lock
(
poﬁ
, 
lock
)

	)

811 #ifde‡
__˝lu•lus


	@include/apr_portable.h

21 #i‚de‡
APR_PORTABLE_H


22 
	#APR_PORTABLE_H


	)

28 
	~"≠r.h
"

29 
	~"≠r_poﬁs.h
"

30 
	~"≠r_thªad_¥oc.h
"

31 
	~"≠r_fûe_io.h
"

32 
	~"≠r_√tw‹k_io.h
"

33 
	~"≠r_î∫o.h
"

34 
	~"≠r_globÆ_muãx.h
"

35 
	~"≠r_¥oc_muãx.h
"

36 
	~"≠r_time.h
"

37 
	~"≠r_dso.h
"

38 
	~"≠r_shm.h
"

40 #i‡
APR_HAVE_DIRENT_H


41 
	~<dúít.h
>

43 #i‡
APR_HAVE_FCNTL_H


44 
	~<f˙é.h
>

46 #i‡
APR_HAVE_PTHREAD_H


47 
	~<±hªad.h
>

50 #ifde‡
__˝lu•lus


60 #ifde‡
WIN32


62 
HANDLE
 
	t≠r_os_fûe_t
;

63 
HANDLE
 
	t≠r_os_dú_t
;

64 
SOCKET
 
	t≠r_os_sock_t
;

65 
HANDLE
 
	t≠r_os_¥oc_muãx_t
;

66 
HANDLE
 
	t≠r_os_thªad_t
;

67 
HANDLE
 
	t≠r_os_¥oc_t
;

68 
DWORD
 
	t≠r_os_thªadkey_t
;

69 
FILETIME
 
	t≠r_os_imp_time_t
;

70 
SYSTEMTIME
 
	t≠r_os_exp_time_t
;

71 
HANDLE
 
	t≠r_os_dso_h™dÀ_t
;

72 
HANDLE
 
	t≠r_os_shm_t
;

74 #ñi‡
deföed
(
OS2
)

75 
HFILE
 
	t≠r_os_fûe_t
;

76 
HDIR
 
	t≠r_os_dú_t
;

77 
	t≠r_os_sock_t
;

78 
HMTX
 
	t≠r_os_¥oc_muãx_t
;

79 
TID
 
	t≠r_os_thªad_t
;

80 
PID
 
	t≠r_os_¥oc_t
;

81 
PULONG
 
	t≠r_os_thªadkey_t
;

82 
timevÆ
 
	t≠r_os_imp_time_t
;

83 
tm
 
	t≠r_os_exp_time_t
;

84 
HMODULE
 
	t≠r_os_dso_h™dÀ_t
;

85 * 
	t≠r_os_shm_t
;

87 #ñi‡
deföed
(
__BEOS__
)

88 
	~<kî√l/OS.h
>

89 
	~<kî√l/image.h
>

91 
	s≠r_os_¥oc_muãx_t
 {

92 
£m_id
 
	m£m
;

93 
öt32
 
	mbí
;

96 
	t≠r_os_fûe_t
;

97 
DIR
 
	t≠r_os_dú_t
;

98 
	t≠r_os_sock_t
;

99 
≠r_os_¥oc_muãx_t
 
	t≠r_os_¥oc_muãx_t
;

100 
thªad_id
 
	t≠r_os_thªad_t
;

101 
thªad_id
 
	t≠r_os_¥oc_t
;

102 
	t≠r_os_thªadkey_t
;

103 
timevÆ
 
	t≠r_os_imp_time_t
;

104 
tm
 
	t≠r_os_exp_time_t
;

105 
image_id
 
	t≠r_os_dso_h™dÀ_t
;

106 * 
	t≠r_os_shm_t
;

108 #ñi‡
deföed
(
NETWARE
)

109 
	t≠r_os_fûe_t
;

110 
DIR
 
	t≠r_os_dú_t
;

111 
	t≠r_os_sock_t
;

112 
NXMuãx_t
 
	t≠r_os_¥oc_muãx_t
;

113 
NXThªadId_t
 
	t≠r_os_thªad_t
;

114 
	t≠r_os_¥oc_t
;

115 
NXKey_t
 
	t≠r_os_thªadkey_t
;

116 
timevÆ
 
	t≠r_os_imp_time_t
;

117 
tm
 
	t≠r_os_exp_time_t
;

118 * 
	t≠r_os_dso_h™dÀ_t
;

119 * 
	t≠r_os_shm_t
;

127 
	s≠r_os_¥oc_muãx_t
 {

128 #i‡
APR_HAS_SYSVSEM_SERIALIZE
 || 
APR_HAS_FCNTL_SERIALIZE
 || 
APR_HAS_FLOCK_SERIALIZE


130 
	m¸os•roc
;

132 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


134 
±hªad_muãx_t
 *
	m±hªad_öãΩroc
;

136 #i‡
APR_HAS_THREADS


138 #i‡
APR_USE_PTHREAD_SERIALIZE


140 
±hªad_muãx_t
 *
	möå≠roc
;

145 
	t≠r_os_fûe_t
;

146 
DIR
 
	t≠r_os_dú_t
;

147 
	t≠r_os_sock_t
;

148 
≠r_os_¥oc_muãx_t
 
	t≠r_os_¥oc_muãx_t
;

151 #i‡
APR_HAS_THREADS
 && 
APR_HAVE_PTHREAD_H


152 
±hªad_t
 
	t≠r_os_thªad_t
;

153 
±hªad_key_t
 
	t≠r_os_thªadkey_t
;

156 
pid_t
 
	t≠r_os_¥oc_t
;

157 
timevÆ
 
	t≠r_os_imp_time_t
;

158 
tm
 
	t≠r_os_exp_time_t
;

162 #i‡
deföed
(
HPUX
Ë|| deföed(
HPUX10
Ë|| deföed(
HPUX11
)

163 
	~<dl.h
>

164 
shl_t
 
	t≠r_os_dso_h™dÀ_t
;

165 #ñi‡
deföed
(
DARWIN
)

166 
	~<mach-o/dyld.h
>

167 
NSModuÀ
 
	t≠r_os_dso_h™dÀ_t
;

169 * 
	t≠r_os_dso_h™dÀ_t
;

171 * 
	t≠r_os_shm_t
;

183 
	s≠r_os_sock_öfo_t
 {

184 
≠r_os_sock_t
 *
	gos_sock
;

185 
sockaddr
 *
	gloˇl
;

186 
sockaddr
 *
	gªmŸe
;

187 
	gÁmûy
;

188 
	gty≥
;

189 
	g¥Ÿocﬁ
;

192 
≠r_os_sock_öfo_t
 
	t≠r_os_sock_öfo_t
;

194 #i‡
APR_PROC_MUTEX_IS_GLOBAL
 || 
deföed
(
DOXYGEN
)

196 
	#≠r_os_globÆ_muãx_t
 
≠r_os_¥oc_muãx_t


	)

198 
	#≠r_os_globÆ_muãx_gë
 
≠r_os_¥oc_muãx_gë


	)

203 
	s≠r_os_globÆ_muãx_t
 {

204 
≠r_poﬁ_t
 *
	gpoﬁ
;

205 
≠r_¥oc_muãx_t
 *
	g¥oc_muãx
;

206 #i‡
APR_HAS_THREADS


207 
≠r_thªad_muãx_t
 *
	gthªad_muãx
;

210 
≠r_os_globÆ_muãx_t
 
	t≠r_os_globÆ_muãx_t
;

212 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_globÆ_muãx_gë
(
≠r_os_globÆ_muãx_t
 *
o•muãx
,

213 
≠r_globÆ_muãx_t
 *
pmuãx
);

224 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_fûe_gë
(
≠r_os_fûe_t
 *
thefûe
,

225 
≠r_fûe_t
 *
fûe
);

232 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_dú_gë
(
≠r_os_dú_t
 **
thedú
,

233 
≠r_dú_t
 *
dú
);

240 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_sock_gë
(
≠r_os_sock_t
 *
thesock
,

241 
≠r_sockë_t
 *
sock
);

248 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

249 
≠r_¥oc_muãx_t
 *
pmuãx
);

256 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_exp_time_gë
(
≠r_os_exp_time_t
 **
o°ime
,

257 
≠r_time_exp_t
 *
≠πime
);

264 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_imp_time_gë
(
≠r_os_imp_time_t
 **
o°ime
,

265 
≠r_time_t
 *
≠πime
);

272 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_shm_gë
(
≠r_os_shm_t
 *
osshm
,

273 
≠r_shm_t
 *
shm
);

275 #i‡
APR_HAS_THREADS
 || 
deföed
(
DOXYGEN
)

285 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
,

286 
≠r_thªad_t
 *
thd
);

293 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
,

294 
≠r_thªadkey_t
 *
key
);

302 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
,

303 
≠r_os_thªad_t
 *
thëhd
,

304 
≠r_poﬁ_t
 *
c⁄t
);

312 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

313 
≠r_os_thªadkey_t
 *
thekey
,

314 
≠r_poﬁ_t
 *
c⁄t
);

318 
APR_DECLARE
(
≠r_os_thªad_t
Ë
≠r_os_thªad_cuºít
();

326 
APR_DECLARE
(Ë
≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,

327 
≠r_os_thªad_t
 
tid2
);

341 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_fûe_put
(
≠r_fûe_t
 **
fûe
,

342 
≠r_os_fûe_t
 *
thefûe
,

343 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
c⁄t
);

353 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_pùe_put
(
≠r_fûe_t
 **
fûe
,

354 
≠r_os_fûe_t
 *
thefûe
,

355 
≠r_poﬁ_t
 *
c⁄t
);

367 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_pùe_put_ex
(
≠r_fûe_t
 **
fûe
,

368 
≠r_os_fûe_t
 *
thefûe
,

369 
ªgi°î_˛ónup
,

370 
≠r_poﬁ_t
 *
c⁄t
);

378 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_dú_put
(
≠r_dú_t
 **
dú
,

379 
≠r_os_dú_t
 *
thedú
,

380 
≠r_poﬁ_t
 *
c⁄t
);

390 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_sock_put
(
≠r_sockë_t
 **
sock
,

391 
≠r_os_sock_t
 *
thesock
,

392 
≠r_poﬁ_t
 *
c⁄t
);

404 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_sock_make
(
≠r_sockë_t
 **
≠r_sock
,

405 
≠r_os_sock_öfo_t
 *
os_sock_öfo
,

406 
≠r_poﬁ_t
 *
c⁄t
);

414 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

415 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

416 
≠r_poﬁ_t
 *
c⁄t
);

424 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_imp_time_put
(
≠r_time_t
 *
≠πime
,

425 
≠r_os_imp_time_t
 **
o°ime
,

426 
≠r_poﬁ_t
 *
c⁄t
);

434 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_exp_time_put
(
≠r_time_exp_t
 *
≠πime
,

435 
≠r_os_exp_time_t
 **
o°ime
,

436 
≠r_poﬁ_t
 *
c⁄t
);

447 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_shm_put
(
≠r_shm_t
 **
shm
,

448 
≠r_os_shm_t
 *
osshm
,

449 
≠r_poﬁ_t
 *
c⁄t
);

452 #i‡
APR_HAS_DSO
 || 
deföed
(
DOXYGEN
)

463 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_dso_h™dÀ_put
(
≠r_dso_h™dÀ_t
 **
dso
,

464 
≠r_os_dso_h™dÀ_t
 
thedso
,

465 
≠r_poﬁ_t
 *
poﬁ
);

472 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_dso_h™dÀ_gë
(
≠r_os_dso_h™dÀ_t
 *
dso
,

473 
≠r_dso_h™dÀ_t
 *
≠rdso
);

479 #i‡
APR_HAS_OS_UUID


483 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_os_uuid_gë
(*
uuid_d©a
);

491 
APR_DECLARE
(c⁄° *Ë
≠r_os_deÁu…_ícodög
(
≠r_poﬁ_t
 *
poﬁ
);

500 
APR_DECLARE
(c⁄° *Ë
≠r_os_loˇÀ_ícodög
(
≠r_poﬁ_t
 *
poﬁ
);

504 #ifde‡
__˝lu•lus


	@include/apr_proc_mutex.h

17 #i‚de‡
APR_PROC_MUTEX_H


18 
	#APR_PROC_MUTEX_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

29 #ifde‡
__˝lu•lus


45 
APR_LOCK_FCNTL
,

46 
APR_LOCK_FLOCK
,

47 
APR_LOCK_SYSVSEM
,

48 
APR_LOCK_PROC_PTHREAD
,

49 
APR_LOCK_POSIXSEM
,

50 
APR_LOCK_DEFAULT


51 } 
	t≠r_lockmech_e
;

54 
≠r_¥oc_muãx_t
 
	t≠r_¥oc_muãx_t
;

79 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

80 c⁄° *
‚ame
,

81 
≠r_lockmech_e
 
mech
,

82 
≠r_poﬁ_t
 *
poﬁ
);

95 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

96 c⁄° *
‚ame
,

97 
≠r_poﬁ_t
 *
poﬁ
);

104 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
);

113 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
);

119 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
);

125 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
);

133 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_muãx_˛ónup
(*
muãx
);

140 
APR_DECLARE
(c⁄° *Ë
≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
);

147 
APR_DECLARE
(c⁄° *Ë
≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
);

152 
APR_DECLARE
(c⁄° *Ë
≠r_¥oc_muãx_de‚ame
();

158 
APR_POOL_DECLARE_ACCESSOR
(
¥oc_muãx
);

162 #ifde‡
__˝lu•lus


	@include/apr_random.h

17 #i‚de‡
APR_RANDOM_H


18 
	#APR_RANDOM_H


	)

25 
	~"≠r_poﬁs.h
"

26 
	~"≠r_thªad_¥oc.h
"

28 #ifde‡
__˝lu•lus


38 
≠r_¸y±o_hash_t
 
	t≠r_¸y±o_hash_t
;

40 
	t≠r_¸y±o_hash_öô_t
(
	t≠r_¸y±o_hash_t
 *
	thash
);

41 
	t≠r_¸y±o_hash_add_t
(
	t≠r_¸y±o_hash_t
 *
	thash
, c⁄° *
	td©a
,

42 
	t≠r_size_t
 
	tbyãs
);

43 
	t≠r_¸y±o_hash_föish_t
(
	t≠r_¸y±o_hash_t
 *
	thash
,

44 *
	tªsu…
);

48 
	s≠r_¸y±o_hash_t
 {

49 
≠r_¸y±o_hash_öô_t
 *
öô
;

50 
≠r_¸y±o_hash_add_t
 *
add
;

51 
≠r_¸y±o_hash_föish_t
 *
föish
;

52 
≠r_size_t
 
size
;

53 *
d©a
;

60 
APR_DECLARE
(
≠r_¸y±o_hash_t
 *Ë
≠r_¸y±o_sha256_√w
(
≠r_poﬁ_t
 *
p
);

63 
≠r_øndom_t
 
	t≠r_øndom_t
;

73 
APR_DECLARE
(Ë
≠r_øndom_öô
(
≠r_øndom_t
 *
g
, 
≠r_poﬁ_t
 *
p
,

74 
≠r_¸y±o_hash_t
 *
poﬁ_hash
,

75 
≠r_¸y±o_hash_t
 *
key_hash
,

76 
≠r_¸y±o_hash_t
 *
¥ng_hash
);

81 
APR_DECLARE
(
≠r_øndom_t
 *Ë
≠r_øndom_°™d¨d_√w
(
≠r_poﬁ_t
 *
p
);

89 
APR_DECLARE
(Ë
≠r_øndom_add_íå›y
(
≠r_øndom_t
 *
g
,

90 c⁄° *
íå›y_
,

91 
≠r_size_t
 
byãs
);

98 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_øndom_ö£cuª_byãs
(
≠r_øndom_t
 *
g
,

99 *
øndom
,

100 
≠r_size_t
 
byãs
);

108 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_øndom_£cuª_byãs
(
≠r_øndom_t
 *
g
,

109 *
øndom
,

110 
≠r_size_t
 
byãs
);

116 
APR_DECLARE
(Ë
≠r_øndom_b¨rõr
(
≠r_øndom_t
 *
g
);

123 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_øndom_£cuª_ªady
(
≠r_øndom_t
 *
r
);

130 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_øndom_ö£cuª_ªady
(
≠r_øndom_t
 *
r
);

145 
APR_DECLARE
(Ë
≠r_øndom_a·î_f‹k
(
≠r_¥oc_t
 *
¥oc
);

149 #ifde‡
__˝lu•lus


	@include/apr_ring.h

27 #i‚de‡
APR_RING_H


28 
	#APR_RING_H


	)

38 
	~"≠r_gíîÆ.h
"

70 
	#APR_RING_ENTRY
(
ñem
) \

72 
ñem
 * vﬁ©ûê
√xt
; \

73 
ñem
 * vﬁ©ûê
¥ev
; \

74 }

	)

91 
	#APR_RING_HEAD
(
hód
, 
ñem
) \

92 
	shód
 { \

93 
ñem
 * vﬁ©ûê
√xt
; \

94 
ñem
 * vﬁ©ûê
¥ev
; \

95 }

	)

159 
	#APR_RING_SENTINEL
(
hp
, 
ñem
, 
lök
) \

160 (
ñem
 *)((*)(&(
hp
)->
√xt
Ë- 
	`APR_OFFSETOF
(ñem, 
lök
))

	)

166 
	#APR_RING_FIRST
(
hp
Ë(hp)->
√xt


	)

171 
	#APR_RING_LAST
(
hp
Ë(hp)->
¥ev


	)

177 
	#APR_RING_NEXT
(
ï
, 
lök
Ë”p)->lök.
√xt


	)

183 
	#APR_RING_PREV
(
ï
, 
lök
Ë”p)->lök.
¥ev


	)

192 
	#APR_RING_INIT
(
hp
, 
ñem
, 
lök
) do { \

193 
	`APR_RING_FIRST
((
hp
)Ë
	`APR_RING_SENTINEL
((hp), 
ñem
, 
lök
); \

194 
	`APR_RING_LAST
((
hp
)Ë
	`APR_RING_SENTINEL
((hp), 
ñem
, 
lök
); \

195 } 0)

	)

204 
	#APR_RING_EMPTY
(
hp
, 
ñem
, 
lök
) \

205 (
	`APR_RING_FIRST
((
hp
)Ë=
	`APR_RING_SENTINEL
((hp), 
ñem
, 
lök
))

	)

212 
	#APR_RING_ELEM_INIT
(
ï
, 
lök
) do { \

213 
	`APR_RING_NEXT
((
ï
), 
lök
) = (ep); \

214 
	`APR_RING_PREV
((
ï
), 
lök
) = (ep); \

215 } 0)

	)

228 
	#APR_RING_SPLICE_BEFORE
(
Àp
, 
ï1
, 
ïN
, 
lök
) do { \

229 
	`APR_RING_NEXT
((
ïN
), 
lök
Ë(
Àp
); \

230 
	`APR_RING_PREV
((
ï1
), 
lök
ËAPR_RING_PREV((
Àp
),Üink); \

231 
	`APR_RING_NEXT
(
	`APR_RING_PREV
((
Àp
), 
lök
),ÜökË(
ï1
); \

232 
	`APR_RING_PREV
((
Àp
), 
lök
Ë(
ïN
); \

233 } 0)

	)

245 
	#APR_RING_SPLICE_AFTER
(
Àp
, 
ï1
, 
ïN
, 
lök
) do { \

246 
	`APR_RING_PREV
((
ï1
), 
lök
Ë(
Àp
); \

247 
	`APR_RING_NEXT
((
ïN
), 
lök
ËAPR_RING_NEXT((
Àp
),Üink); \

248 
	`APR_RING_PREV
(
	`APR_RING_NEXT
((
Àp
), 
lök
),ÜökË(
ïN
); \

249 
	`APR_RING_NEXT
((
Àp
), 
lök
Ë(
ï1
); \

250 } 0)

	)

261 
	#APR_RING_INSERT_BEFORE
(
Àp
, 
√p
, 
lök
) \

262 
	`APR_RING_SPLICE_BEFORE
((
Àp
), (
√p
), (√p), 
lök
)

	)

273 
	#APR_RING_INSERT_AFTER
(
Àp
, 
√p
, 
lök
) \

274 
	`APR_RING_SPLICE_AFTER
((
Àp
), (
√p
), (√p), 
lök
)

	)

286 
	#APR_RING_SPLICE_HEAD
(
hp
, 
ï1
, 
ïN
, 
ñem
, 
lök
) \

287 
	`APR_RING_SPLICE_AFTER
(
	`APR_RING_SENTINEL
((
hp
), 
ñem
, 
lök
), \

288 (
ï1
), (
ïN
), 
lök
)

	)

299 
	#APR_RING_SPLICE_TAIL
(
hp
, 
ï1
, 
ïN
, 
ñem
, 
lök
) \

300 
	`APR_RING_SPLICE_BEFORE
(
	`APR_RING_SENTINEL
((
hp
), 
ñem
, 
lök
), \

301 (
ï1
), (
ïN
), 
lök
)

	)

311 
	#APR_RING_INSERT_HEAD
(
hp
, 
√p
, 
ñem
, 
lök
) \

312 
	`APR_RING_SPLICE_HEAD
((
hp
), (
√p
), (√p), 
ñem
, 
lök
)

	)

322 
	#APR_RING_INSERT_TAIL
(
hp
, 
√p
, 
ñem
, 
lök
) \

323 
	`APR_RING_SPLICE_TAIL
((
hp
), (
√p
), (√p), 
ñem
, 
lök
)

	)

332 
	#APR_RING_CONCAT
(
h1
, 
h2
, 
ñem
, 
lök
) do { \

333 i‡(!
	`APR_RING_EMPTY
((
h2
), 
ñem
, 
lök
)) { \

334 
	`APR_RING_SPLICE_BEFORE
(
	`APR_RING_SENTINEL
((
h1
), 
ñem
, 
lök
), \

335 
	`APR_RING_FIRST
((
h2
)), \

336 
	`APR_RING_LAST
((
h2
)), 
lök
); \

337 
	`APR_RING_INIT
((
h2
), 
ñem
, 
lök
); \

339 } 0)

	)

348 
	#APR_RING_PREPEND
(
h1
, 
h2
, 
ñem
, 
lök
) do { \

349 i‡(!
	`APR_RING_EMPTY
((
h2
), 
ñem
, 
lök
)) { \

350 
	`APR_RING_SPLICE_AFTER
(
	`APR_RING_SENTINEL
((
h1
), 
ñem
, 
lök
), \

351 
	`APR_RING_FIRST
((
h2
)), \

352 
	`APR_RING_LAST
((
h2
)), 
lök
); \

353 
	`APR_RING_INIT
((
h2
), 
ñem
, 
lök
); \

355 } 0)

	)

364 
	#APR_RING_UNSPLICE
(
ï1
, 
ïN
, 
lök
) do { \

365 
	`APR_RING_NEXT
(
	`APR_RING_PREV
((
ï1
), 
lök
),Üink) = \

366 
	`APR_RING_NEXT
((
ïN
), 
lök
); \

367 
	`APR_RING_PREV
(
	`APR_RING_NEXT
((
ïN
), 
lök
),Üink) = \

368 
	`APR_RING_PREV
((
ï1
), 
lök
); \

369 } 0)

	)

377 
	#APR_RING_REMOVE
(
ï
, 
lök
) \

378 
	`APR_RING_UNSPLICE
((
ï
), (ï), 
lök
)

	)

387 
	#APR_RING_FOREACH
(
ï
, 
hód
, 
ñem
, 
lök
) \

388 
ï
 = 
	`APR_RING_FIRST
(
hód
); \

389 
ï
 !
	`APR_RING_SENTINEL
(
hód
, 
ñem
, 
lök
); \

390 
ï
 = 
	`APR_RING_NEXT
”p, 
lök
))

	)

400 
	#APR_RING_FOREACH_SAFE
(
ï1
, 
ï2
, 
hód
, 
ñem
, 
lök
) \

401 
ï1
 = 
	`APR_RING_FIRST
(
hód
), 
ï2
 = 
	`APR_RING_NEXT
”p1, 
lök
); \

402 
ï1
 !
	`APR_RING_SENTINEL
(
hód
, 
ñem
, 
lök
); \

403 
ï1
 = 
ï2
,Ép2 = 
	`APR_RING_NEXT
”p1, 
lök
))

	)

407 #ifde‡
APR_RING_DEBUG


408 
	~<°dio.h
>

409 
	~<as£π.h
>

411 
	#APR_RING_CHECK_ONE
(
msg
, 
±r
) \

412 
	`Ârötf
(
°dîr
, "*** %†%p\n", 
msg
, 
±r
)

	)

414 
	#APR_RING_CHECK
(
hp
, 
ñem
, 
lök
, 
msg
) \

415 
	`APR_RING_CHECK_ELEM
(
	`APR_RING_SENTINEL
(
hp
, 
ñem
, 
lök
),ÉÀm,Üök, 
msg
)

	)

417 
	#APR_RING_CHECK_ELEM
(
ï
, 
ñem
, 
lök
, 
msg
) do { \

418 
ñem
 *
°¨t
 = (
ï
); \

419 
ñem
 *
hîe
 = 
°¨t
; \

420 
	`Ârötf
(
°dîr
, "***Ñög check sèπ -- %s\n", 
msg
); \

422 
	`Ârötf
(
°dîr
, "\ãÀm %p\n", 
hîe
); \

423 
	`Ârötf
(
°dîr
, "\telem->next %p\n", \

424 
	`APR_RING_NEXT
(
hîe
, 
lök
)); \

425 
	`Ârötf
(
°dîr
, "\telem->prev %p\n", \

426 
	`APR_RING_PREV
(
hîe
, 
lök
)); \

427 
	`Ârötf
(
°dîr
, "\telem->next->prev %p\n", \

428 
	`APR_RING_PREV
(
	`APR_RING_NEXT
(
hîe
, 
lök
),Üink)); \

429 
	`Ârötf
(
°dîr
, "\telem->prev->next %p\n", \

430 
	`APR_RING_NEXT
(
	`APR_RING_PREV
(
hîe
, 
lök
),Üink)); \

431 i‡(
	`APR_RING_PREV
(
	`APR_RING_NEXT
(
hîe
, 
lök
),Üink) != here) { \

432 
	`Ârötf
(
°dîr
, "\t***Élem->next->prev !=Élem\n"); \

435 i‡(
	`APR_RING_NEXT
(
	`APR_RING_PREV
(
hîe
, 
lök
),Üink) != here) { \

436 
	`Ârötf
(
°dîr
, "\t***Élem->prev->next !=Élem\n"); \

439 
hîe
 = 
	`APR_RING_NEXT
(hîe, 
lök
); \

440 } 
hîe
 !
°¨t
); \

441 
	`Ârötf
(
°dîr
, "***Ñing checkÉnd\n"); \

442 } 0)

	)

444 
	#APR_RING_CHECK_CONSISTENCY
(
hp
, 
ñem
, 
lök
) \

445 
	`APR_RING_CHECK_ELEM_CONSISTENCY
(
	`APR_RING_SENTINEL
(
hp
, 
ñem
, 
lök
),\

446 
ñem
, 
lök
)

	)

448 
	#APR_RING_CHECK_ELEM_CONSISTENCY
(
ï
, 
ñem
, 
lök
) do { \

449 
ñem
 *
°¨t
 = (
ï
); \

450 
ñem
 *
hîe
 = 
°¨t
; \

452 
	`as£π
(
	`APR_RING_PREV
(
	`APR_RING_NEXT
(
hîe
, 
lök
),Üink) == here); \

453 
	`as£π
(
	`APR_RING_NEXT
(
	`APR_RING_PREV
(
hîe
, 
lök
),Üink) == here); \

454 
hîe
 = 
	`APR_RING_NEXT
(hîe, 
lök
); \

455 } 
hîe
 !
°¨t
); \

456 } 0)

	)

465 
	#APR_RING_CHECK_ONE
(
msg
, 
±r
)

	)

476 
	#APR_RING_CHECK
(
hp
, 
ñem
, 
lök
, 
msg
)

	)

486 
	#APR_RING_CHECK_CONSISTENCY
(
hp
, 
ñem
, 
lök
)

	)

497 
	#APR_RING_CHECK_ELEM
(
ï
, 
ñem
, 
lök
, 
msg
)

	)

508 
	#APR_RING_CHECK_ELEM_CONSISTENCY
(
ï
, 
ñem
, 
lök
)

	)

	@include/apr_shm.h

17 #i‚de‡
APR_SHM_H


18 
	#APR_SHM_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

29 #ifde‡
__˝lu•lus


43 
≠r_shm_t
 
	t≠r_shm_t
;

69 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_¸óã
(
≠r_shm_t
 **
m
,

70 
≠r_size_t
 
ªqsize
,

71 c⁄° *
fûíame
,

72 
≠r_poﬁ_t
 *
poﬁ
);

77 
	#APR_SHM_NS_LOCAL
 1

	)

84 
	#APR_SHM_NS_GLOBAL
 2

	)

114 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_¸óã_ex
(
≠r_shm_t
 **
m
,

115 
≠r_size_t
 
ªqsize
,

116 c⁄° *
fûíame
,

117 
≠r_poﬁ_t
 *
poﬁ
,

118 
≠r_öt32_t
 
Êags
);

135 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_ªmove
(c⁄° *
fûíame
,

136 
≠r_poﬁ_t
 *
poﬁ
);

142 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_de°roy
(
≠r_shm_t
 *
m
);

153 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_©èch
(
≠r_shm_t
 **
m
,

154 c⁄° *
fûíame
,

155 
≠r_poﬁ_t
 *
poﬁ
);

167 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_©èch_ex
(
≠r_shm_t
 **
m
,

168 c⁄° *
fûíame
,

169 
≠r_poﬁ_t
 *
poﬁ
,

170 
≠r_öt32_t
 
Êags
);

177 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_shm_dëach
(
≠r_shm_t
 *
m
);

188 
APR_DECLARE
(*Ë
≠r_shm_ba£addr_gë
(c⁄° 
≠r_shm_t
 *
m
);

195 
APR_DECLARE
(
≠r_size_t
Ë
≠r_shm_size_gë
(c⁄° 
≠r_shm_t
 *
m
);

200 
APR_POOL_DECLARE_ACCESSOR
(
shm
);

204 #ifde‡
__˝lu•lus


	@include/apr_signal.h

17 #i‚de‡
APR_SIGNAL_H


18 
	#APR_SIGNAL_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

28 #i‡
APR_HAVE_SIGNAL_H


29 
	~<sig«l.h
>

32 #ifde‡
__˝lu•lus


42 #i‡
APR_HAVE_SIGACTION
 || 
deföed
(
DOXYGEN
)

44 #i‡
deföed
(
DARWIN
Ë&& !deföed(
__˝lu•lus
Ë&& !deföed(
_ANSI_SOURCE
)

48 #unde‡
SIG_DFL


49 #unde‡
SIG_IGN


50 #unde‡
SIG_ERR


51 
	#SIG_DFL
 ((*)())0

	)

52 
	#SIG_IGN
 ((*)())1

	)

53 
	#SIG_ERR
 ((*)())-1

	)

57 
	t≠r_sigfunc_t
();

64 
	$APR_DECLARE
(
≠r_sigfunc_t
 *Ë
	`≠r_sig«l
(
signo
,á¥_sigfunc_à* 
func
);

66 #i‡
	`deföed
(
SIG_IGN
Ë&& !deföed(
SIG_ERR
)

67 
	#SIG_ERR
 ((
≠r_sigfunc_t
 *Ë-1)

	)

71 
	#≠r_sig«l
(
a
, 
b
Ë
	`sig«l
◊, b)

	)

80 
	`APR_DECLARE
(c⁄° *Ë
	`≠r_sig«l_des¸ùti⁄_gë
(
signum
);

87 
	`≠r_sig«l_öô
(
≠r_poﬁ_t
 *
pglobÆ
);

94 
	`APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_sig«l_block
(
signum
);

101 
	`APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_sig«l_unblock
(
signum
);

105 #ifde‡
__˝lu•lus


106 
	}
}

	@include/apr_skiplist.h

17 #i‚de‡
_APR_SKIPLIST_P_H


18 
	#_APR_SKIPLIST_P_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~<°dlib.h
>

27 (*
	t≠r_skùli°_com∑ª
) (*, *);

28 (*
	t≠r_skùli°_‰ìfunc
) (*);

30 
≠r_skùli°
;

31 
≠r_skùli°node
;

33 
≠r_skùli°node
 
	t≠r_skùli°node
;

34 
≠r_skùli°
 
	t≠r_skùli°
;

36 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_Æloc
(
≠r_skùli°
 *
¶
, 
size_t
 
size
);

38 
	$APR_DECLARE
(Ë
	`≠r_skùli°_‰ì
(
≠r_skùli°
 *
¶
, *
mem
);

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_skùli°_öô
(
≠r_skùli°
 **
¶
, 
≠r_poﬁ_t
 *
p
);

42 
	$APR_DECLARE
(Ë
	`≠r_skùli°_£t_com∑ª
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_com∑ª
,

43 
≠r_skùli°_com∑ª
);

45 
	$APR_DECLARE
(Ë
	`≠r_skùli°_add_ödex
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_com∑ª
,

46 
≠r_skùli°_com∑ª
);

48 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	`≠r_skùli°_gëli°
(
≠r_skùli°
 *
¶
);

50 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_föd_com∑ª
(
≠r_skùli°
 *
¶
,

51 *
d©a
,

52 
≠r_skùli°node
 **
ôî
,

53 
≠r_skùli°_com∑ª
 
func
);

55 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_föd
(
≠r_skùli°
 *
¶
, *
d©a
, 
≠r_skùli°node
 **
ôî
);

57 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_√xt
(
≠r_skùli°
 *
¶
, 
≠r_skùli°node
 **
ôî
);

59 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_¥evious
(
≠r_skùli°
 *
¶
, 
≠r_skùli°node
 **
ôî
);

62 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	`≠r_skùli°_ö£π_com∑ª
(
≠r_skùli°
 *
¶
,

63 *
d©a
, 
≠r_skùli°_com∑ª
 
comp
);

65 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	`≠r_skùli°_ö£π
(
≠r_skùli°
* 
¶
, *
d©a
);

67 
	$APR_DECLARE
(Ë
	`≠r_skùli°_ªmove_com∑ª
(
≠r_skùli°
 *
¶
, *
d©a
,

68 
≠r_skùli°_‰ìfunc
 
my‰ì
, 
≠r_skùli°_com∑ª
 
comp
);

70 
	$APR_DECLARE
(Ë
	`≠r_skùli°_ªmove
(
≠r_skùli°
 *
¶
, *
d©a
, 
≠r_skùli°_‰ìfunc
 
my‰ì
);

72 
	$APR_DECLARE
(Ë
	`≠r_skùli°_ªmove_Æl
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_‰ìfunc
 
my‰ì
);

74 
	$APR_DECLARE
(Ë
	`≠r_skùli°_de°roy
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_‰ìfunc
 
my‰ì
);

76 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_p›
(
≠r_skùli°
 *
a
, 
≠r_skùli°_‰ìfunc
 
my‰ì
);

78 
	$APR_DECLARE
(*Ë
	`≠r_skùli°_≥ek
(
≠r_skùli°
 *
a
);

80 
	$APR_DECLARE
(
≠r_skùli°
 *Ë
	`≠r_skùli°_mîge
◊¥_skùli° *
¶1
,á¥_skùli° *
¶2
);

	@include/apr_strings.h

40 #i‚de‡
APR_STRINGS_H


41 
	#APR_STRINGS_H


	)

48 
	~"≠r.h
"

49 
	~"≠r_î∫o.h
"

50 
	~"≠r_poﬁs.h
"

51 
	#APR_WANT_IOVEC


	)

52 
	~"≠r_w™t.h
"

54 #i‡
APR_HAVE_STDARG_H


55 
	~<°d¨g.h
>

58 #ifde‡
__˝lu•lus


76 
APR_DECLARE
(Ë
≠r_°∫©cmp
(c⁄° *
a
, c⁄° *
b
);

87 
APR_DECLARE
(Ë
≠r_°∫©ˇ£cmp
(c⁄° *
a
, c⁄° *
b
);

95 
APR_DECLARE
(*Ë
≠r_p°rdup
(
≠r_poﬁ_t
 *
p
, c⁄° *
s
);

109 
APR_DECLARE
(*Ë
≠r_p°rmemdup
(
≠r_poﬁ_t
 *
p
, c⁄° *
s
, 
≠r_size_t
 
n
)

110 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

111 
__©åibuã__
((
Æloc_size
(3)))

125 
APR_DECLARE
(*Ë
≠r_p°∫dup
(
≠r_poﬁ_t
 *
p
, c⁄° *
s
, 
≠r_size_t
 
n
);

135 
APR_DECLARE
(*Ë
≠r_pmemdup
(
≠r_poﬁ_t
 *
p
, c⁄° *
m
, 
≠r_size_t
 
n
)

136 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

137 
__©åibuã__
((
Æloc_size
(3)))

147 
APR_DECLARE_NONSTD
(*Ë
≠r_p°rˇt
(
≠r_poﬁ_t
 *
p
, ...)

148 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

149 
__©åibuã__
((
£¡öñ
))

161 
APR_DECLARE
(*Ë
≠r_p°rˇtv
(
≠r_poﬁ_t
 *
p
, c⁄° 
iovec
 *
vec
,

162 
≠r_size_t
 
nvec
,á¥_size_à*
nbyãs
);

172 
APR_DECLARE
(*Ë
≠r_pv•rötf
(
≠r_poﬁ_t
 *
p
, c⁄° *
fmt
, 
va_li°
 
≠
);

182 
APR_DECLARE_NONSTD
(*Ë
≠r_p•rötf
(
≠r_poﬁ_t
 *
p
, c⁄° *
fmt
, ...)

183 
__©åibuã__
((
f‹m©
(
¥ötf
,2,3)));

207 
APR_DECLARE
(*Ë
≠r_˝y°∫
(*
d°
, c⁄° *
§c
,

208 
≠r_size_t
 
d°_size
);

217 
APR_DECLARE
(*Ë
≠r_cﬁœp£_•a˚s
(*
de°
, c⁄° *
§c
);

226 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_tokíize_to_¨gv
(c⁄° *
¨g_°r
,

227 ***
¨gv_out
,

228 
≠r_poﬁ_t
 *
tokí_c⁄ãxt
);

241 
APR_DECLARE
(*Ë
≠r_°πok
(*
°r
, c⁄° *
£p
, **
œ°
);

273 
APR_DECLARE_NONSTD
(Ë
≠r_¢¥ötf
(*
buf
, 
≠r_size_t
 
Àn
,

274 c⁄° *
f‹m©
, ...)

275 
__©åibuã__
((
f‹m©
(
¥ötf
,3,4)));

285 
APR_DECLARE
(Ë
≠r_v¢¥ötf
(*
buf
, 
≠r_size_t
 
Àn
, c⁄° *
f‹m©
,

286 
va_li°
 
≠
);

295 
APR_DECLARE
(*Ë
≠r_ôﬂ
(
≠r_poﬁ_t
 *
p
, 
n
);

303 
APR_DECLARE
(*Ë
≠r_…ﬂ
(
≠r_poﬁ_t
 *
p
, 
n
);

311 
APR_DECLARE
(*Ë
≠r_off_t_tﬂ
(
≠r_poﬁ_t
 *
p
, 
≠r_off_t
 
n
);

329 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_°πoff
(
≠r_off_t
 *
off£t
, c⁄° *
buf
,

330 **
íd
, 
ba£
);

347 
APR_DECLARE
(
≠r_öt64_t
Ë
≠r_°πoi64
(c⁄° *
buf
, **
íd
, 
ba£
);

356 
APR_DECLARE
(
≠r_öt64_t
Ë
≠r_©oi64
(c⁄° *
buf
);

366 
APR_DECLARE
(*Ë
≠r_°rfsize
(
≠r_off_t
 
size
, *
buf
);

370 #ifde‡
__˝lu•lus


	@include/apr_support.h

17 #i‚de‡
APR_SUPPORT_H


18 
	#APR_SUPPORT_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_√tw‹k_io.h
"

27 
	~"≠r_fûe_io.h
"

29 #ifde‡
__˝lu•lus


48 
≠r_°©us_t
 
≠r_waô_f‹_io_‹_timeout
(
≠r_fûe_t
 *
f
, 
≠r_sockë_t
 *
s
,

49 
f‹_ªad
);

53 #ifde‡
__˝lu•lus


	@include/apr_tables.h

17 #i‚de‡
APR_TABLES_H


18 
	#APR_TABLES_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

28 #i‡
APR_HAVE_STDARG_H


29 
	~<°d¨g.h
>

32 #ifde‡
__˝lu•lus


56 
≠r_èbÀ_t
 
	t≠r_èbÀ_t
;

59 
≠r_¨øy_hódî_t
 
	t≠r_¨øy_hódî_t
;

62 
	s≠r_¨øy_hódî_t
 {

64 
≠r_poﬁ_t
 *
poﬁ
;

66 
ñt_size
;

68 
√…s
;

70 
«Œoc
;

72 *
ñts
;

78 
≠r_èbÀ_íåy_t
 
	t≠r_èbÀ_íåy_t
;

81 
	s≠r_èbÀ_íåy_t
 {

83 *
key
;

87 *
vÆ
;

90 
≠r_uöt32_t
 
key_checksum
;

98 
APR_DECLARE
(c⁄° 
≠r_¨øy_hódî_t
 *Ë
≠r_èbÀ_ñts
(c⁄° 
≠r_èbÀ_t
 *
t
);

105 
APR_DECLARE
(Ë
≠r_is_em±y_èbÀ
(c⁄° 
≠r_èbÀ_t
 *
t
);

112 
APR_DECLARE
(Ë
≠r_is_em±y_¨øy
(c⁄° 
≠r_¨øy_hódî_t
 *
a
);

121 
APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
≠r_¨øy_make
(
≠r_poﬁ_t
 *
p
,

122 
√…s
, 
ñt_size
);

131 
APR_DECLARE
(*Ë
≠r_¨øy_push
(
≠r_¨øy_hódî_t
 *
¨r
);

141 
	#APR_ARRAY_IDX
(
¨y
,
i
,
ty≥
Ë((—y≥ *)◊ry)->
ñts
)[i])

	)

150 
	#APR_ARRAY_PUSH
(
¨y
,
ty≥
Ë(*(—y≥ *)
	`≠r_¨øy_push
◊ry)))

	)

158 
APR_DECLARE
(*Ë
≠r_¨øy_p›
(
≠r_¨øy_hódî_t
 *
¨r
);

166 
APR_DECLARE
(Ë
≠r_¨øy_˛ór
(
≠r_¨øy_hódî_t
 *
¨r
);

174 
APR_DECLARE
(Ë
≠r_¨øy_ˇt
(
≠r_¨øy_hódî_t
 *
d°
,

175 c⁄° 
≠r_¨øy_hódî_t
 *
§c
);

186 
APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
≠r_¨øy_c›y
(
≠r_poﬁ_t
 *
p
,

187 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
);

196 
APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
≠r_¨øy_c›y_hdr
(
≠r_poﬁ_t
 *
p
,

197 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
);

206 
APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
≠r_¨øy_≠≥nd
(
≠r_poﬁ_t
 *
p
,

207 c⁄° 
≠r_¨øy_hódî_t
 *
fú°
,

208 c⁄° 
≠r_¨øy_hódî_t
 *
£c⁄d
);

221 
APR_DECLARE
(*Ë
≠r_¨øy_p°rˇt
(
≠r_poﬁ_t
 *
p
,

222 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
,

223 c⁄° 
£p
);

232 
APR_DECLARE
(
≠r_èbÀ_t
 *Ë
≠r_èbÀ_make
(
≠r_poﬁ_t
 *
p
, 
√…s
);

241 
APR_DECLARE
(
≠r_èbÀ_t
 *Ë
≠r_èbÀ_c›y
(
≠r_poﬁ_t
 *
p
,

242 c⁄° 
≠r_èbÀ_t
 *
t
);

252 
APR_DECLARE
(
≠r_èbÀ_t
 *Ë
≠r_èbÀ_˛⁄e
(
≠r_poﬁ_t
 *
p
,

253 c⁄° 
≠r_èbÀ_t
 *
t
);

259 
APR_DECLARE
(Ë
≠r_èbÀ_˛ór
(
≠r_èbÀ_t
 *
t
);

268 
APR_DECLARE
(c⁄° *Ë
≠r_èbÀ_gë
(c⁄° 
≠r_èbÀ_t
 *
t
, c⁄° *
key
);

279 
APR_DECLARE
(c⁄° *Ë
≠r_èbÀ_gëm
(
≠r_poﬁ_t
 *
p
, c⁄° 
≠r_èbÀ_t
 *
t
,

280 c⁄° *
key
);

291 
APR_DECLARE
(Ë
≠r_èbÀ_£t
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

292 c⁄° *
vÆ
);

304 
APR_DECLARE
(Ë
≠r_èbÀ_£ä
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

305 c⁄° *
vÆ
);

312 
APR_DECLARE
(Ë
≠r_èbÀ_un£t
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
);

323 
APR_DECLARE
(Ë
≠r_èbÀ_mîge
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

324 c⁄° *
vÆ
);

335 
APR_DECLARE
(Ë
≠r_èbÀ_mîgí
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

336 c⁄° *
vÆ
);

347 
APR_DECLARE
(Ë
≠r_èbÀ_add
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

348 c⁄° *
vÆ
);

360 
APR_DECLARE
(Ë
≠r_èbÀ_addn
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

361 c⁄° *
vÆ
);

370 
APR_DECLARE
(
≠r_èbÀ_t
 *Ë
≠r_èbÀ_ovîœy
(
≠r_poﬁ_t
 *
p
,

371 c⁄° 
≠r_èbÀ_t
 *
ovîœy
,

372 c⁄° 
≠r_èbÀ_t
 *
ba£
);

384 (
≠r_èbÀ_do_ˇŒback_‚_t
)(*
	tªc
, c⁄° *
	tkey
,

385 c⁄° *
	tvÆue
);

406 
APR_DECLARE_NONSTD
(Ë
≠r_èbÀ_do
(
≠r_èbÀ_do_ˇŒback_‚_t
 *
comp
,

407 *
ªc
, c⁄° 
≠r_èbÀ_t
 *
t
, ...)

408 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

409 
__©åibuã__
((
£¡öñ
))

432 
APR_DECLARE
(Ë
≠r_èbÀ_vdo
(
≠r_èbÀ_do_ˇŒback_‚_t
 *
comp
,

433 *
ªc
, c⁄° 
≠r_èbÀ_t
 *
t
, 
va_li°
 
vp
);

436 
	#APR_OVERLAP_TABLES_SET
 (0)

	)

438 
	#APR_OVERLAP_TABLES_MERGE
 (1)

	)

478 
APR_DECLARE
(Ë
≠r_èbÀ_ovîœp
(
≠r_èbÀ_t
 *
a
, c⁄°á¥_èbÀ_à*
b
,

479 
Êags
);

491 
APR_DECLARE
(Ë
≠r_èbÀ_com¥ess
(
≠r_èbÀ_t
 *
t
, 
Êags
);

495 #ifde‡
__˝lu•lus


	@include/apr_thread_cond.h

17 #i‚de‡
APR_THREAD_COND_H


18 
	#APR_THREAD_COND_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

28 
	~"≠r_time.h
"

29 
	~"≠r_thªad_muãx.h
"

31 #ifde‡
__˝lu•lus


35 #i‡
APR_HAS_THREADS
 || 
deföed
(
DOXYGEN
)

44 
≠r_thªad_c⁄d_t
 
	t≠r_thªad_c⁄d_t
;

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

60 
≠r_poﬁ_t
 *
poﬁ
);

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

78 
≠r_thªad_muãx_t
 *
muãx
);

96 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

97 
≠r_thªad_muãx_t
 *
muãx
,

98 
≠r_öãrvÆ_time_t
 
timeout
);

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
);

117 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
);

123 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
);

129 
	`APR_POOL_DECLARE_ACCESSOR
(
thªad_c⁄d
);

135 #ifde‡
__˝lu•lus


136 
	}
}

	@include/apr_thread_mutex.h

17 #i‚de‡
APR_THREAD_MUTEX_H


18 
	#APR_THREAD_MUTEX_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_î∫o.h
"

28 #ifde‡
__˝lu•lus


32 #i‡
APR_HAS_THREADS
 || 
deföed
(
DOXYGEN
)

41 
≠r_thªad_muãx_t
 
	t≠r_thªad_muãx_t
;

43 
	#APR_THREAD_MUTEX_DEFAULT
 0x0

	)

44 
	#APR_THREAD_MUTEX_NESTED
 0x1

	)

45 
	#APR_THREAD_MUTEX_UNNESTED
 0x2

	)

48 
	~"≠r_poﬁs.h
"

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

66 
Êags
,

67 
≠r_poﬁ_t
 *
poﬁ
);

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
);

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
);

88 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
);

94 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
);

100 
	`APR_POOL_DECLARE_ACCESSOR
(
thªad_muãx
);

106 #ifde‡
__˝lu•lus


107 
	}
}

	@include/apr_thread_proc.h

17 #i‚de‡
APR_THREAD_PROC_H


18 
	#APR_THREAD_PROC_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_fûe_io.h
"

27 
	~"≠r_poﬁs.h
"

28 
	~"≠r_î∫o.h
"

30 #i‡
APR_HAVE_STRUCT_RLIMIT


31 
	~<sys/time.h
>

32 
	~<sys/ªsour˚.h
>

35 #ifde‡
__˝lu•lus


46 
APR_SHELLCMD
,

47 
APR_PROGRAM
,

48 
APR_PROGRAM_ENV
,

49 
APR_PROGRAM_PATH
,

50 
APR_SHELLCMD_ENV


53 } 
	t≠r_cmdty≥_e
;

56 
APR_WAIT
,

57 
APR_NOWAIT


58 } 
	t≠r_waô_how_e
;

66 
APR_PROC_EXIT
 = 1,

67 
APR_PROC_SIGNAL
 = 2,

68 
APR_PROC_SIGNAL_CORE
 = 4

69 } 
	t≠r_exô_why_e
;

72 
	#APR_PROC_CHECK_EXIT
(
x
Ë(x & 
APR_PROC_EXIT
)

	)

74 
	#APR_PROC_CHECK_SIGNALED
(
x
Ë(x & 
APR_PROC_SIGNAL
)

	)

76 
	#APR_PROC_CHECK_CORE_DUMP
(
x
Ë(x & 
APR_PROC_SIGNAL_CORE
)

	)

79 
	#APR_NO_PIPE
 0

	)

81 
	#APR_FULL_BLOCK
 1

	)

83 
	#APR_FULL_NONBLOCK
 2

	)

85 
	#APR_PARENT_BLOCK
 3

	)

87 
	#APR_CHILD_BLOCK
 4

	)

89 
	#APR_NO_FILE
 8

	)

92 
	#APR_READ_BLOCK
 3

	)

94 
	#APR_WRITE_BLOCK
 4

	)

99 
	#APR_NO_FILE
 8

	)

102 
	#APR_LIMIT_CPU
 0

	)

104 
	#APR_LIMIT_MEM
 1

	)

106 
	#APR_LIMIT_NPROC
 2

	)

108 
	#APR_LIMIT_NOFILE
 3

	)

114 
	#APR_OC_REASON_DEATH
 0

	)

116 
	#APR_OC_REASON_UNWRITABLE
 1

	)

117 
	#APR_OC_REASON_RESTART
 2

	)

121 
	#APR_OC_REASON_UNREGISTER
 3

	)

124 
	#APR_OC_REASON_LOST
 4

	)

126 
	#APR_OC_REASON_RUNNING
 5

	)

133 
	s≠r_¥oc_t
 {

135 
pid_t
 
pid
;

137 
≠r_fûe_t
 *
ö
;

139 
≠r_fûe_t
 *
out
;

141 
≠r_fûe_t
 *
îr
;

142 #i‡
APR_HAS_PROC_INVOKED
 || 
deföed
(
DOXYGEN
)

150 *
övoked
;

152 #i‡
deföed
(
WIN32
Ë|| deföed(
DOXYGEN
)

159 
HANDLE
 
h¥oc
;

161 } 
	t≠r_¥oc_t
;

173 (
≠r_chûd_îr‚_t
)(
	t≠r_poﬁ_t
 *
	t¥oc
, 
	t≠r_°©us_t
 
	tîr
,

174 c⁄° *
	tdes¸ùti⁄
);

177 
≠r_thªad_t
 
	t≠r_thªad_t
;

180 
≠r_thªad©å_t
 
	t≠r_thªad©å_t
;

183 
≠r_¥oˇâr_t
 
	t≠r_¥oˇâr_t
;

186 
≠r_thªad_⁄˚_t
 
	t≠r_thªad_⁄˚_t
;

189 
≠r_thªadkey_t
 
	t≠r_thªadkey_t
;

192 
≠r_Ÿhî_chûd_ªc_t
 
	t≠r_Ÿhî_chûd_ªc_t
;

197 *(
	tAPR_THREAD_FUNC
 *
	t≠r_thªad_°¨t_t
)(
	t≠r_thªad_t
*, *);

200 
APR_KILL_NEVER
,

203 
APR_KILL_ALWAYS
,

204 
APR_KILL_AFTER_TIMEOUT
,

205 
APR_JUST_WAIT
,

206 
APR_KILL_ONLY_ONCE


207 } 
	t≠r_kûl_c⁄dôi⁄s_e
;

211 #i‡
APR_HAS_THREADS


218 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w_©å
,

219 
≠r_poﬁ_t
 *
c⁄t
);

226 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
,

227 
≠r_öt32_t
 
⁄
);

235 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
);

242 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

243 
≠r_size_t
 
°acksize
);

255 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

256 
≠r_size_t
 
gu¨dsize
);

266 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w_thªad
,

267 
≠r_thªad©å_t
 *
©å
,

268 
≠r_thªad_°¨t_t
 
func
,

269 *
d©a
, 
≠r_poﬁ_t
 *
c⁄t
);

276 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_exô
(
≠r_thªad_t
 *
thd
,

277 
≠r_°©us_t
 
ªtvÆ
);

284 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_joö
◊¥_°©us_à*
ªtvÆ
,

285 
≠r_thªad_t
 *
thd
);

290 
APR_DECLARE
(Ë
≠r_thªad_yõld
();

298 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

299 
≠r_poﬁ_t
 *
p
);

310 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

311 (*
func
)());

317 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
);

325 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
,

326 
≠r_thªad_t
 *
thªad
);

335 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

336 
≠r_°©us_t
 (*
˛ónup
) (*),

337 
≠r_thªad_t
 *
thªad
);

345 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

346 (*
de°
)(*),

347 
≠r_poﬁ_t
 *
c⁄t
);

354 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_¥iv©e_gë
(**
√w_mem
,

355 
≠r_thªadkey_t
 *
key
);

362 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_¥iv©e_£t
(*
¥iv
,

363 
≠r_thªadkey_t
 *
key
);

369 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
);

377 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
,

378 
≠r_thªadkey_t
 *
thªadkey
);

387 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_thªadkey_d©a_£t
(*
d©a
, c⁄° *
key
,

388 
≠r_°©us_t
 (*
˛ónup
) (*),

389 
≠r_thªadkey_t
 *
thªadkey
);

398 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w_©å
,

399 
≠r_poﬁ_t
 *
c⁄t
);

415 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

416 
≠r_öt32_t
 
ö
,á¥_öt32_à
out
,

417 
≠r_öt32_t
 
îr
);

434 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
,

435 
≠r_fûe_t
 *
chûd_ö
,

436 
≠r_fûe_t
 *
∑ª¡_ö
);

451 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
,

452 
≠r_fûe_t
 *
chûd_out
,

453 
≠r_fûe_t
 *
∑ª¡_out
);

468 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
,

469 
≠r_fûe_t
 *
chûd_îr
,

470 
≠r_fûe_t
 *
∑ª¡_îr
);

479 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
,

480 c⁄° *
dú
);

493 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

494 
≠r_cmdty≥_e
 
cmd
);

501 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
,

502 
≠r_öt32_t
 
dëach
);

504 #i‡
APR_HAVE_STRUCT_RLIMIT


517 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_limô_£t
(
≠r_¥oˇâr_t
 *
©å
,

518 
≠r_öt32_t
 
wh©
,

519 
æimô
 *
limô
);

533 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

534 
≠r_chûd_îr‚_t
 *
îr‚
);

548 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

549 
≠r_öt32_t
 
chk
);

558 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

559 
≠r_öt32_t
 
addr•a˚
);

569 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

570 c⁄° *
u£∫ame
,

571 c⁄° *
∑ssw‹d
);

578 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

579 c⁄° *
grou≤ame
);

582 #i‡
APR_HAS_FORK


591 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_f‹k
(
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
c⁄t
);

610 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
√w_¥oc
,

611 c⁄° *
¥og«me
,

612 c⁄° * c⁄° *
¨gs
,

613 c⁄° * c⁄° *
ív
,

614 
≠r_¥oˇâr_t
 *
©å
,

615 
≠r_poﬁ_t
 *
poﬁ
);

643 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

644 *
exôcode
, 
≠r_exô_why_e
 *
exôwhy
,

645 
≠r_waô_how_e
 
waôhow
);

673 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

674 *
exôcode
,

675 
≠r_exô_why_e
 *
exôwhy
,

676 
≠r_waô_how_e
 
waôhow
,

677 
≠r_poﬁ_t
 *
p
);

679 
	#APR_PROC_DETACH_FOREGROUND
 0

	)

680 
	#APR_PROC_DETACH_DAEMONIZE
 1

	)

688 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_dëach
(
d´m⁄ize
);

707 
APR_DECLARE
(Ë
≠r_¥oc_Ÿhî_chûd_ªgi°î
(
≠r_¥oc_t
 *
¥oc
,

708 (*
maöã«n˚
Ë(
ªas⁄
,

710 
°©us
),

711 *
d©a
, 
≠r_fûe_t
 *
wrôe_fd
,

712 
≠r_poﬁ_t
 *
p
);

723 
APR_DECLARE
(Ë
≠r_¥oc_Ÿhî_chûd_uƒegi°î
(*
d©a
);

745 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_Ÿhî_chûd_Æît
(
≠r_¥oc_t
 *
¥oc
,

746 
ªas⁄
,

747 
°©us
);

756 
APR_DECLARE
(Ë
≠r_¥oc_Ÿhî_chûd_ª‰esh
(
≠r_Ÿhî_chûd_ªc_t
 *
o¸
,

757 
ªas⁄
);

765 
APR_DECLARE
(Ë
≠r_¥oc_Ÿhî_chûd_ª‰esh_Æl
(
ªas⁄
);

772 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_¥oc_kûl
(
≠r_¥oc_t
 *
¥oc
, 
sig
);

787 
APR_DECLARE
(Ë
≠r_poﬁ_nŸe_sub¥o˚ss
(
≠r_poﬁ_t
 *
a
, 
≠r_¥oc_t
 *
¥oc
,

788 
≠r_kûl_c⁄dôi⁄s_e
 
how
);

790 #i‡
APR_HAS_THREADS


792 #i‡(
APR_HAVE_SIGWAIT
 || 
APR_HAVE_SIGSUSPEND
Ë&& !
deföed
(
OS2
)

798 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_£tup_sig«l_thªad
();

807 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_sig«l_thªad
((*
sig«l_h™dÀr
)(
signum
));

815 
APR_POOL_DECLARE_ACCESSOR
(
thªad
);

821 #ifde‡
__˝lu•lus


	@include/apr_thread_rwlock.h

17 #i‚de‡
APR_THREAD_RWLOCK_H


18 
	#APR_THREAD_RWLOCK_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

29 #ifde‡
__˝lu•lus


33 #i‡
APR_HAS_THREADS


42 
≠r_thªad_rwlock_t
 
	t≠r_thªad_rwlock_t
;

60 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

61 
≠r_poﬁ_t
 *
poﬁ
);

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
);

80 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
);

89 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
);

100 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
);

107 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
);

113 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
);

119 
	`APR_POOL_DECLARE_ACCESSOR
(
thªad_rwlock
);

125 #ifde‡
__˝lu•lus


126 
	}
}

	@include/apr_time.h

17 #i‚de‡
APR_TIME_H


18 
	#APR_TIME_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_poﬁs.h
"

27 
	~"≠r_î∫o.h
"

29 #ifde‡
__˝lu•lus


40 
APR_DECLARE_DATA
 c⁄° 
≠r_m⁄th_¢ames
[12][4];

42 
APR_DECLARE_DATA
 c⁄° 
≠r_day_¢ames
[7][4];

46 
≠r_öt64_t
 
	t≠r_time_t
;

50 
	#APR_TIME_C
(
vÆ
Ë
	`APR_INT64_C
(vÆ)

	)

53 
	#APR_TIME_T_FMT
 
APR_INT64_T_FMT


	)

56 
≠r_öt64_t
 
	t≠r_öãrvÆ_time_t
;

58 
≠r_öt32_t
 
	t≠r_sh‹t_öãrvÆ_time_t
;

61 
	#APR_USEC_PER_SEC
 
	`APR_TIME_C
(1000000)

	)

64 
	#≠r_time_£c
(
time
Ë(—imeË/ 
APR_USEC_PER_SEC
)

	)

67 
	#≠r_time_u£c
(
time
Ë(—imeË% 
APR_USEC_PER_SEC
)

	)

70 
	#≠r_time_m£c
(
time
Ë((—imeË/ 1000Ë% 1000)

	)

73 
	#≠r_time_as_m£c
(
time
Ë(—imeË/ 1000)

	)

76 
	#≠r_time_‰om_m£c
(
m£c
Ë((
≠r_time_t
)(m£cË* 1000)

	)

79 
	#≠r_time_‰om_£c
(
£c
Ë((
≠r_time_t
)(£cË* 
APR_USEC_PER_SEC
)

	)

82 
	#≠r_time_make
(
£c
, 
u£c
Ë((
≠r_time_t
)(£cË* 
APR_USEC_PER_SEC
 \

83 + (
≠r_time_t
)(
u£c
))

	)

88 
APR_DECLARE
(
≠r_time_t
Ë
≠r_time_now
();

91 
≠r_time_exp_t
 
	t≠r_time_exp_t
;

98 
	s≠r_time_exp_t
 {

100 
≠r_öt32_t
 
	gtm_u£c
;

102 
≠r_öt32_t
 
	gtm_£c
;

104 
≠r_öt32_t
 
	gtm_mö
;

106 
≠r_öt32_t
 
	gtm_hour
;

108 
≠r_öt32_t
 
	gtm_mday
;

110 
≠r_öt32_t
 
	gtm_m⁄
;

112 
≠r_öt32_t
 
	gtm_yór
;

114 
≠r_öt32_t
 
	gtm_wday
;

116 
≠r_öt32_t
 
	gtm_yday
;

118 
≠r_öt32_t
 
	gtm_isd°
;

120 
≠r_öt32_t
 
	gtm_gmtoff
;

128 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_™si_put
(
≠r_time_t
 *
ªsu…
,

129 
time_t
 
öput
);

138 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_exp_tz
(
≠r_time_exp_t
 *
ªsu…
,

139 
≠r_time_t
 
öput
,

140 
≠r_öt32_t
 
offs
);

147 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_exp_gmt
(
≠r_time_exp_t
 *
ªsu…
,

148 
≠r_time_t
 
öput
);

155 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_exp_…
(
≠r_time_exp_t
 *
ªsu…
,

156 
≠r_time_t
 
öput
);

164 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_exp_gë
(
≠r_time_t
 *
ªsu…
,

165 
≠r_time_exp_t
 *
öput
);

173 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_time_exp_gmt_gë
(
≠r_time_t
 *
ªsu…
,

174 
≠r_time_exp_t
 *
öput
);

181 
APR_DECLARE
(Ë
≠r_¶ìp
(
≠r_öãrvÆ_time_t
 
t
);

184 
	#APR_RFC822_DATE_LEN
 (30)

	)

193 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_rfc822_d©e
(*
d©e_°r
, 
≠r_time_t
 
t
);

196 
	#APR_CTIME_LEN
 (25)

	)

207 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_˘ime
(*
d©e_°r
, 
≠r_time_t
 
t
);

217 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_°r·ime
(*
s
, 
≠r_size_t
 *
ªtsize
,

218 
≠r_size_t
 
max
, c⁄° *
f‹m©
,

219 
≠r_time_exp_t
 *
tm
);

227 
APR_DECLARE
(Ë
≠r_time_˛ock_húes
(
≠r_poﬁ_t
 *
p
);

231 #ifde‡
__˝lu•lus


	@include/apr_user.h

17 #i‚de‡
APR_USER_H


18 
	#APR_USER_H


	)

25 
	~"≠r.h
"

26 
	~"≠r_î∫o.h
"

27 
	~"≠r_poﬁs.h
"

29 #ifde‡
__˝lu•lus


42 #ifde‡
WIN32


43 
PSID
 
	t≠r_uid_t
;

45 
uid_t
 
	t≠r_uid_t
;

51 #ifde‡
WIN32


52 
PSID
 
	t≠r_gid_t
;

54 
gid_t
 
	t≠r_gid_t
;

57 #i‡
APR_HAS_USER


66 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_uid_cuºít
(
≠r_uid_t
 *
u£rid
,

67 
≠r_gid_t
 *
groupid
,

68 
≠r_poﬁ_t
 *
p
);

77 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_uid_«me_gë
(**
u£∫ame
, 
≠r_uid_t
 
u£rid
,

78 
≠r_poﬁ_t
 *
p
);

88 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_uid_gë
(
≠r_uid_t
 *
u£rid
, 
≠r_gid_t
 *
groupid
,

89 c⁄° *
u£∫ame
, 
≠r_poﬁ_t
 *
p
);

98 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_uid_homï©h_gë
(**
dú«me
,

99 c⁄° *
u£∫ame
,

100 
≠r_poﬁ_t
 *
p
);

110 #i‡
deföed
(
WIN32
)

111 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_uid_com∑ª
(
≠r_uid_t
 
À·
,á¥_uid_à
right
);

113 
	#≠r_uid_com∑ª
(
À·
,
right
Ë((÷e·Ë=‘ight)Ë? 
APR_SUCCESS
 : 
APR_EMISMATCH
)

	)

123 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gid_«me_gë
(**
grou≤ame
,

124 
≠r_gid_t
 
groupid
, 
≠r_poﬁ_t
 *
p
);

133 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gid_gë
(
≠r_gid_t
 *
groupid
,

134 c⁄° *
grou≤ame
, 
≠r_poﬁ_t
 *
p
);

144 #i‡
deföed
(
WIN32
)

145 
APR_DECLARE
(
≠r_°©us_t
Ë
≠r_gid_com∑ª
(
≠r_gid_t
 
À·
,á¥_gid_à
right
);

147 
	#≠r_gid_com∑ª
(
À·
,
right
Ë((÷e·Ë=‘ight)Ë? 
APR_SUCCESS
 : 
APR_EMISMATCH
)

	)

154 #ifde‡
__˝lu•lus


	@include/apr_version.h

17 #i‚de‡
APR_VERSION_H


18 
	#APR_VERSION_H


	)

41 
	#APR_COPYRIGHT
 "Copyright (c) 2013 The Apache Software " \

42 "Found©i⁄ o∏ô†li˚ns‹s,á†≠∂iˇbÀ."

	)

53 
	#APR_MAJOR_VERSION
 1

	)

59 
	#APR_MINOR_VERSION
 5

	)

65 
	#APR_PATCH_VERSION
 0

	)

86 
	#APR_VERSION_AT_LEAST
(
maj‹
,
mö‹
,
∑tch
) \

87 (((
maj‹
Ë< 
APR_MAJOR_VERSION
) \

88 || ((
maj‹
Ë=
APR_MAJOR_VERSION
 && (
mö‹
Ë< 
APR_MINOR_VERSION
) \

89 || ((
maj‹
Ë=
APR_MAJOR_VERSION
 && (
mö‹
Ë=
APR_MINOR_VERSION
 && (
∑tch
Ë<
APR_PATCH_VERSION
))

	)

91 #i‡
deföed
(
APR_IS_DEV_VERSION
Ë|| deföed(
DOXYGEN
)

93 #i‚de‡
APR_IS_DEV_STRING


94 
	#APR_IS_DEV_STRING
 "-dev"

	)

97 
	#APR_IS_DEV_STRING
 ""

	)

101 #i‚de‡
APR_STRINGIFY


103 
	#APR_STRINGIFY
(
n
Ë
	`APR_STRINGIFY_HELPER
“)

	)

105 
	#APR_STRINGIFY_HELPER
(
n
Ë#n

	)

109 
	#APR_VERSION_STRING
 \

110 
	`APR_STRINGIFY
(
APR_MAJOR_VERSION
) "." \

111 
	`APR_STRINGIFY
(
APR_MINOR_VERSION
) "." \

112 
	`APR_STRINGIFY
(
APR_PATCH_VERSION
) \

113 
APR_IS_DEV_STRING


	)

117 
	#APR_VERSION_STRING_CSV
 
APR_MAJOR_VERSION
 ##, \

118 ##
APR_MINOR_VERSION
 ##, \

119 ##
APR_PATCH_VERSION


	)

122 #i‚de‡
APR_VERSION_ONLY


130 
	~"≠r.h
"

132 #ifde‡
__˝lu•lus


141 
maj‹
;

142 
mö‹
;

143 
∑tch
;

144 
is_dev
;

145 } 
	t≠r_vîsi⁄_t
;

153 
APR_DECLARE
(Ë
≠r_vîsi⁄
(
≠r_vîsi⁄_t
 *
pv¢
);

156 
APR_DECLARE
(c⁄° *Ë
≠r_vîsi⁄_°rög
();

158 #ifde‡
__˝lu•lus


	@include/apr_want.h

17 
	~"≠r.h
"

46 #ifde‡
APR_WANT_STRFUNC


48 #i‡
APR_HAVE_STRING_H


49 
	~<°rög.h
>

51 #i‡
APR_HAVE_STRINGS_H


52 
	~<°rögs.h
>

55 #unde‡
APR_WANT_STRFUNC


60 #ifde‡
APR_WANT_MEMFUNC


62 #i‡
APR_HAVE_STRING_H


63 
	~<°rög.h
>

66 #unde‡
APR_WANT_MEMFUNC


71 #ifde‡
APR_WANT_STDIO


73 #i‡
APR_HAVE_STDIO_H


74 
	~<°dio.h
>

77 #unde‡
APR_WANT_STDIO


82 #ifde‡
APR_WANT_IOVEC


84 #i‡
APR_HAVE_IOVEC


86 #i‡
APR_HAVE_SYS_UIO_H


87 
	~<sys/uio.h
>

92 #i‚de‡
APR_IOVEC_DEFINED


93 
	#APR_IOVEC_DEFINED


	)

94 
	siovec


96 *
	miov_ba£
;

97 
size_t
 
	miov_Àn
;

103 #unde‡
APR_WANT_IOVEC


108 #ifde‡
APR_WANT_BYTEFUNC


114 #i‡
APR_HAVE_NETINET_IN_H


115 
	~<√töë/ö.h
>

117 #i‡
APR_HAVE_ARPA_INET_H


118 
	~<¨∑/öë.h
>

121 #unde‡
APR_WANT_BYTEFUNC


	@include/arch/aix/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAS_DSO


28 *
dl›í
(c⁄° *
∑th
, 
mode
);

29 *
dlsym
(*
h™dÀ
, c⁄° *
symbﬁ
);

30 c⁄° *
dÀº‹
();

31 
dl˛o£
(*
h™dÀ
);

33 
	s≠r_dso_h™dÀ_t
 {

34 
≠r_poﬁ_t
 *
	mpoﬁ
;

35 *
	mh™dÀ
;

36 c⁄° *
	mîr‹msg
;

	@include/arch/apr_private_common.h

21 #i‚de‡
APR_PRIVATE_COMMON_H


22 
	#APR_PRIVATE_COMMON_H


	)

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_èbÀs.h
"

27 
≠r_°©us_t
 
≠r_fûï©h_li°_•lô_im∂
(
≠r_¨øy_hódî_t
 **
∑thñts
,

28 c⁄° *
li°°r
,

29 
£∑øt‹
,

30 
≠r_poﬁ_t
 *
p
);

32 
≠r_°©us_t
 
≠r_fûï©h_li°_mîge_im∂
(**
li°°r
,

33 
≠r_¨øy_hódî_t
 *
∑thñts
,

34 
£∑øt‹
,

35 
≠r_poﬁ_t
 *
p
);

38 
	#APR_INT_TRUNC_CAST
 

	)

39 
	#APR_UINT32_TRUNC_CAST
 
≠r_uöt32_t


	)

	@include/arch/beos/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_dso.h
"

25 
	~"≠r.h
"

26 
	~<kî√l/image.h
>

27 
	~<°rög.h
>

29 #i‡
APR_HAS_DSO


31 
	s≠r_dso_h™dÀ_t
 {

32 
image_id
 
	mh™dÀ
;

33 
≠r_poﬁ_t
 *
	mpoﬁ
;

34 c⁄° *
	mîr‹msg
;

	@include/arch/beos/apr_arch_proc_mutex.h

17 #i‚de‡
PROC_MUTEX_H


18 
	#PROC_MUTEX_H


	)

20 
	~"≠r_poﬁs.h
"

21 
	~"≠r_¥oc_muãx.h
"

22 
	~"≠r_fûe_io.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_lib.h
"

25 
	~"≠r_p‹èbÀ.h
"

27 
	s≠r_¥oc_muãx_t
 {

28 
≠r_poﬁ_t
 *
	mpoﬁ
;

31 
£m_id
 
	mLock
;

32 
öt32
 
	mLockCou¡
;

	@include/arch/beos/apr_arch_thread_cond.h

17 #i‚de‡
THREAD_COND_H


18 
	#THREAD_COND_H


	)

20 
	~<kî√l/OS.h
>

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_thªad_c⁄d.h
"

23 
	~"≠r_fûe_io.h
"

24 
	~"≠r_gíîÆ.h
"

25 
	~"≠r_lib.h
"

26 
	~"≠r_p‹èbÀ.h
"

27 
	~"≠r_rög.h
"

29 
	swaôî_t
 {

30 
APR_RING_ENTRY
(
waôî_t
Ë
	mlök
;

31 
£m_id
 
	m£m
;

34 
	s≠r_thªad_c⁄d_t
 {

35 
≠r_poﬁ_t
 *
	mpoﬁ
;

36 
£m_id
 
	mlock
;

37 
≠r_thªad_muãx_t
 *
	mc⁄dlock
;

38 
thªad_id
 
	mow√r
;

40 
APR_RING_HEAD
(
a˘ive_li°
, 
waôî_t
Ë
	mÆi°
;

42 
APR_RING_HEAD
(
‰ì_li°
, 
waôî_t
Ë
	mÊi°
;

	@include/arch/beos/apr_arch_thread_mutex.h

17 #i‚de‡
THREAD_MUTEX_H


18 
	#THREAD_MUTEX_H


	)

20 
	~<kî√l/OS.h
>

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_thªad_muãx.h
"

23 
	~"≠r_fûe_io.h
"

24 
	~"≠r_gíîÆ.h
"

25 
	~"≠r_lib.h
"

26 
	~"≠r_p‹èbÀ.h
"

28 
	s≠r_thªad_muãx_t
 {

29 
≠r_poﬁ_t
 *
	mpoﬁ
;

32 
£m_id
 
	mLock
;

33 
öt32
 
	mLockCou¡
;

36 
	m√°ed
;

37 
≠r_os_thªad_t
 
	mow√r
;

38 
	mow√r_ªf
;

	@include/arch/beos/apr_arch_thread_rwlock.h

17 #i‚de‡
THREAD_RWLOCK_H


18 
	#THREAD_RWLOCK_H


	)

20 
	~<kî√l/OS.h
>

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_thªad_rwlock.h
"

23 
	~"≠r_fûe_io.h
"

24 
	~"≠r_gíîÆ.h
"

25 
	~"≠r_lib.h
"

26 
	~"≠r_p‹èbÀ.h
"

28 
	s≠r_thªad_rwlock_t
 {

29 
≠r_poﬁ_t
 *
	mpoﬁ
;

32 
£m_id
 
	mLock
;

33 
öt32
 
	mLockCou¡
;

35 
£m_id
 
	mRód
;

36 
öt32
 
	mRódCou¡
;

37 
£m_id
 
	mWrôe
;

38 
öt32
 
	mWrôeCou¡
;

39 
öt32
 
	mNe°ed
;

41 
thªad_id
 
	mwrôî
;

	@include/arch/beos/apr_arch_threadproc.h

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_thªad_¥oc.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_p‹èbÀ.h
"

23 
	~<kî√l/OS.h
>

24 
	~<sig«l.h
>

25 
	~<°rög.h
>

26 
	~<sys/waô.h
>

27 
	~<image.h
>

29 #i‚de‡
THREAD_PROC_H


30 
	#THREAD_PROC_H


	)

32 
	#SHELL_PATH
 "/bö/sh"

	)

34 
	#PTHREAD_CANCEL_AYNCHRONOUS
 
CANCEL_ASYNCH
;

	)

35 
	#PTHREAD_CANCEL_DEFERRED
 
CANCEL_DEFER
;

	)

37 
	#PTHREAD_CANCEL_ENABLE
 
CANCEL_ENABLE
;

	)

38 
	#PTHREAD_CANCEL_DISABLE
 
CANCEL_DISABLE
;

	)

40 
	#BEOS_MAX_DATAKEYS
 128

	)

42 
	s≠r_thªad_t
 {

43 
≠r_poﬁ_t
 *
	mpoﬁ
;

44 
thªad_id
 
	mtd
;

45 *
	md©a
;

46 
≠r_thªad_°¨t_t
 
	mfunc
;

47 
≠r_°©us_t
 
	mexôvÆ
;

50 
	s≠r_thªad©å_t
 {

51 
≠r_poﬁ_t
 *
	mpoﬁ
;

52 
öt32
 
	m©å
;

53 
	mdëached
;

54 
	mjoöabÀ
;

57 
	s≠r_thªadkey_t
 {

58 
≠r_poﬁ_t
 *
	mpoﬁ
;

59 
öt32
 
	mkey
;

62 
	sbeos_¥iv©e_d©a
 {

63 c⁄° ** 
	md©a
;

64 
	mcou¡
;

65 vﬁ©ûê
thªad_id
 
	mtd
;

68 
	sbeos_key
 {

69 
	massig√d
;

70 
	mcou¡
;

71 
£m_id
 
	mlock
;

72 
öt32
 
	mbí_lock
;

73 (* 
	mde°ru˘‹
) (*);

76 
	s≠r_¥oˇâr_t
 {

77 
≠r_poﬁ_t
 *
	mpoﬁ
;

78 
≠r_fûe_t
 *
	m∑ª¡_ö
;

79 
≠r_fûe_t
 *
	mchûd_ö
;

80 
≠r_fûe_t
 *
	m∑ª¡_out
;

81 
≠r_fûe_t
 *
	mchûd_out
;

82 
≠r_fûe_t
 *
	m∑ª¡_îr
;

83 
≠r_fûe_t
 *
	mchûd_îr
;

84 *
	mcuºdú
;

85 
≠r_öt32_t
 
	mcmdty≥
;

86 
≠r_öt32_t
 
	mdëached
;

89 
	s≠r_thªad_⁄˚_t
 {

90 
£m_id
 
	m£m
;

91 
	mhô
;

	@include/arch/netware/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 
	~<dlf˙.h
>

28 
sym_li°
 
	tsym_li°
;

30 
	ssym_li°
 {

31 
sym_li°
 *
	m√xt
;

32 *
	msymbﬁ
;

35 
	s≠r_dso_h™dÀ_t
 {

36 
≠r_poﬁ_t
 *
	mpoﬁ
;

37 *
	mh™dÀ
;

38 c⁄° *
	mîr‹msg
;

39 
sym_li°
 *
	msymbﬁs
;

40 *
	m∑th
;

	@include/arch/netware/apr_arch_file_io.h

17 #i‚de‡
FILE_IO_H


18 
	#FILE_IO_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_èbÀs.h
"

24 
	~"≠r_fûe_io.h
"

25 
	~"≠r_fûe_öfo.h
"

26 
	~"≠r_î∫o.h
"

27 
	~"≠r_lib.h
"

28 
	~"≠r_pﬁl.h
"

31 #i‡
APR_HAVE_FCNTL_H


32 
	~<f˙é.h
>

34 #i‡
APR_HAVE_SYS_TYPES_H


35 
	~<sys/ty≥s.h
>

37 #i‡
APR_HAVE_ERRNO_H


38 
	~<î∫o.h
>

40 #i‡
APR_HAVE_STRING_H


41 
	~<°rög.h
>

43 #i‡
APR_HAVE_STRINGS_H


44 
	~<°rögs.h
>

46 #i‡
APR_HAVE_DIRENT_H


47 
	~<dúít.h
>

49 #ifde‡
HAVE_SYS_STAT_H


50 
	~<sys/°©.h
>

52 #i‡
APR_HAVE_UNISTD_H


53 
	~<uni°d.h
>

55 #i‡
APR_HAVE_STDIO_H


56 
	~<°dio.h
>

58 #i‡
APR_HAVE_STDLIB_H


59 
	~<°dlib.h
>

61 #i‡
APR_HAVE_SYS_UIO_H


62 
	~<sys/uio.h
>

64 #i‡
APR_HAVE_SYS_TIME_H


65 
	~<sys/time.h
>

68 
	~<fsio.h
>

72 
	#APR_FILE_DEFAULT_BUFSIZE
 4096

	)

74 
	#APR_FILE_BUFSIZE
 
APR_FILE_DEFAULT_BUFSIZE


	)

76 #i‡
APR_HAS_THREADS


77 
	#fûe_lock
(
f
) do { \

78 i‡((
f
)->
thlock
) \

79 
	`≠r_thªad_muãx_lock
((
f
)->
thlock
); \

80 } 0)

	)

81 
	#fûe_u∆ock
(
f
) do { \

82 i‡((
f
)->
thlock
) \

83 
	`≠r_thªad_muãx_u∆ock
((
f
)->
thlock
); \

84 } 0)

	)

86 
	#fûe_lock
(
f
Ëdÿ{} 0)

	)

87 
	#fûe_u∆ock
(
f
Ëdÿ{} 0)

	)

90 #i‡
APR_HAS_LARGE_FILES


91 
	#l£ek
(
f
,
o
,
w
Ë
	`l£ek64
(f,o,w)

	)

92 
	#·runˇã
(
f
,
l
Ë
	`·runˇã64
(f,l)

	)

95 
°©
 
	t°ru˘_°©
;

97 
	s≠r_fûe_t
 {

98 
≠r_poﬁ_t
 *
	mpoﬁ
;

99 
	mfûedes
;

100 *
	m‚ame
;

101 
≠r_öt32_t
 
	mÊags
;

102 
	meof_hô
;

103 
	mis_pùe
;

104 
≠r_öãrvÆ_time_t
 
	mtimeout
;

105 
	mbuf„ªd
;

106 íum {
	mBLK_UNKNOWN
, 
	mBLK_OFF
, 
	mBLK_ON
 } 
	mblockög
;

107 
	mungëch¨
;

110 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

113 *
	mbuf„r
;

114 
≠r_size_t
 
	mbuÂos
;

115 
≠r_size_t
 
	mbufsize
;

116 
≠r_off_t
 
	md©aRód
;

117 
	mdúe˘i⁄
;

118 
≠r_off_t
 
	mfûePå
;

119 #i‡
APR_HAS_THREADS


120 
≠r_thªad_muãx_t
 *
	mthlock
;

124 
	s≠r_dú_t
 {

125 
≠r_poﬁ_t
 *
	mpoﬁ
;

126 *
	mdú«me
;

127 
DIR
 *
	mdú°ru˘
;

128 
dúít
 *
	míåy
;

131 
≠r_°©_íåy_t
 
	t≠r_°©_íåy_t
;

133 
	s≠r_°©_íåy_t
 {

134 
°©
 
	möfo
;

135 *
	mˇ£dName
;

136 
≠r_time_t
 
	mexpúe
;

137 
NXP©hCtx_t
 
	m∑thCtx
;

140 
	#MAX_SERVER_NAME
 64

	)

141 
	#MAX_VOLUME_NAME
 64

	)

142 
	#MAX_PATH_NAME
 256

	)

143 
	#MAX_FILE_NAME
 256

	)

145 
	#DRIVE_ONLY
 1

	)

151 
≠r_°©us_t
 
fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
);

158 
≠r_°©us_t
 
fûï©h_has_drive
(c⁄° *
roŸ∑th
, 
⁄ly
, 
≠r_poﬁ_t
 *
p
);

163 
≠r_°©us_t
 
fûï©h_com∑ª_drive
(c⁄° *
∑th1
, c⁄° *
∑th2
, 
≠r_poﬁ_t
 *
p
);

165 
≠r_°©us_t
 
≠r_unix_fûe_˛ónup
(*);

166 
≠r_°©us_t
 
≠r_unix_chûd_fûe_˛ónup
(*);

168 
mode_t
 
≠r_unix_≥rms2mode
(
≠r_fûïîms_t
 
≥rms
);

169 
≠r_fûïîms_t
 
≠r_unix_mode2≥rms
(
mode_t
 
mode
);

171 
≠r_°©us_t
 
≠r_fûe_Êush_locked
(
≠r_fûe_t
 *
thefûe
);

172 
≠r_°©us_t
 
≠r_fûe_öfo_gë_locked
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

173 
≠r_fûe_t
 *
thefûe
);

	@include/arch/netware/apr_arch_global_mutex.h

17 #i‚de‡
GLOBAL_MUTEX_H


18 
	#GLOBAL_MUTEX_H


	)

20 
	~"≠r_globÆ_muãx.h
"

21 
	~"≠r_thªad_muãx.h
"

23 
	s≠r_globÆ_muãx_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
≠r_thªad_muãx_t
 *
	mmuãx
;

	@include/arch/netware/apr_arch_internal_time.h

17 #i‚de‡
TIME_INTERNAL_H


18 
	#TIME_INTERNAL_H


	)

20 
	~"≠r.h
"

22 
	#TZONE
 (*
	`___timez⁄e
())

	)

24 
≠r_√tw¨e_£tup_time
();

	@include/arch/netware/apr_arch_networkio.h

17 #i‚de‡
NETWORK_IO_H


19 #ifde‡
USE_WINSOCK


25 
	~<../wö32/≠r_¨ch_√tw‹kio.h
>

27 
	~<../unix/≠r_¨ch_√tw‹kio.h
>

	@include/arch/netware/apr_arch_pre_nw.h

16 #i‚de‡
__¥e_nw__


17 
	#__¥e_nw__


	)

19 
	~<°döt.h
>

21 #i‚de‡
__GNUC__


22 #¥agm®
¥ecompûe_èrgë
 "precomp.mch"

25 
	#NETWARE


	)

27 
	#N_PLAT_NLM


	)

29 
	#FAR


	)

30 
	#Ár


	)

34 
	#cde˛


	)

38 #i‚de‡
__GNUC__


39 #i‚de‡
DOXYGEN


40 #i‡(
__›ti⁄
(
˝lu•lus
Ë&& __›ti⁄(
wch¨_ty≥
))

41 
	#_WCHAR_T


	)

47 
	#DECIMAL_DIG
 17

	)

50 #i‚de‡
__öt64


51 
	#__öt64
 

	)

	@include/arch/netware/apr_arch_proc_mutex.h

17 #i‚de‡
PROC_MUTEX_H


18 
	#PROC_MUTEX_H


	)

20 
	~"≠r_¥oc_muãx.h
"

21 
	~"≠r_thªad_muãx.h
"

23 
	s≠r_¥oc_muãx_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
≠r_thªad_muãx_t
 *
	mmuãx
;

	@include/arch/netware/apr_arch_thread_cond.h

17 #i‚de‡
THREAD_COND_H


18 
	#THREAD_COND_H


	)

20 
	~"≠r_thªad_c⁄d.h
"

21 
	~<nks/synch.h
>

23 
	s≠r_thªad_c⁄d_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
NXC⁄d_t
 *
	mc⁄d
;

	@include/arch/netware/apr_arch_thread_mutex.h

17 #i‚de‡
THREAD_MUTEX_H


18 
	#THREAD_MUTEX_H


	)

20 
	~"≠r_thªad_muãx.h
"

21 
	~<nks/synch.h
>

23 
	s≠r_thªad_muãx_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
NXMuãx_t
 *
	mmuãx
;

	@include/arch/netware/apr_arch_thread_rwlock.h

17 #i‚de‡
THREAD_RWLOCK_H


18 
	#THREAD_RWLOCK_H


	)

20 
	~"≠r_thªad_rwlock.h
"

21 
	~<nks/synch.h
>

23 
	s≠r_thªad_rwlock_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
NXRwLock_t
 *
	mrwlock
;

	@include/arch/netware/apr_arch_threadproc.h

17 
	~"≠r.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_fûe_io.h
"

21 
	~<sys/waô.h
>

23 #i‚de‡
THREAD_PROC_H


24 
	#THREAD_PROC_H


	)

26 
	#SHELL_PATH
 ""

	)

27 
	#APR_DEFAULT_STACK_SIZE
 65536

	)

29 
	s≠r_thªad_t
 {

30 
≠r_poﬁ_t
 *
	mpoﬁ
;

31 
NXC⁄ãxt_t
 
	m˘x
;

32 
NXThªadId_t
 
	mtd
;

33 *
	mthªad_«me
;

34 
≠r_öt32_t
 
	mˇn˚l
;

35 
≠r_öt32_t
 
	mˇn˚l_how
;

36 *
	md©a
;

37 
≠r_thªad_°¨t_t
 
	mfunc
;

38 
≠r_°©us_t
 
	mexôvÆ
;

41 
	s≠r_thªad©å_t
 {

42 
≠r_poﬁ_t
 *
	mpoﬁ
;

43 
≠r_size_t
 
	m°ack_size
;

44 
≠r_öt32_t
 
	mdëach
;

45 *
	mthªad_«me
;

48 
	s≠r_thªadkey_t
 {

49 
≠r_poﬁ_t
 *
	mpoﬁ
;

50 
NXKey_t
 
	mkey
;

53 
	s≠r_¥oˇâr_t
 {

54 
≠r_poﬁ_t
 *
	mpoﬁ
;

55 
≠r_fûe_t
 *
	m∑ª¡_ö
;

56 
≠r_fûe_t
 *
	mchûd_ö
;

57 
≠r_fûe_t
 *
	m∑ª¡_out
;

58 
≠r_fûe_t
 *
	mchûd_out
;

59 
≠r_fûe_t
 *
	m∑ª¡_îr
;

60 
≠r_fûe_t
 *
	mchûd_îr
;

61 *
	mcuºdú
;

62 
≠r_öt32_t
 
	mcmdty≥
;

63 
≠r_öt32_t
 
	mdëached
;

64 
≠r_öt32_t
 
	maddr•a˚
;

67 
	s≠r_thªad_⁄˚_t
 {

68 
	mvÆue
;

	@include/arch/netware/apr_private.h

23 #ifde‡
NETWARE


25 #i‚de‡
APR_PRIVATE_H


26 
	#APR_PRIVATE_H


	)

31 
	~<≠r.h
>

34 
	~<ndkvîs.h
>

37 
	~<Æloˇ.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<°ddef.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<time.h
>

44 
	~<libøry.h
>

45 
	~<√tw¨e.h
>

50 
	#HAVE_DLFCN_H
 1

	)

51 
	#HAVE_LIMITS_H
 1

	)

52 
	#HAVE_SIGNAL_H
 1

	)

53 
	#HAVE_STDDEF_H
 1

	)

54 
	#HAVE_STDLIB_H
 1

	)

55 #i‚de‡
USE_WINSOCK


56 
	#HAVE_SYS_SELECT_H
 1

	)

57 
	#HAVE_WRITEV
 1

	)

59 
	#HAVE_SYS_STAT_H
 1

	)

60 
	#HAVE_SYS_MMAN_H
 1

	)

61 
	#HAVE_FCNTL_H
 1

	)

62 
	#HAVE_ICONV_H
 1

	)

63 
	#HAVE_UTIME_H
 1

	)

65 
	#HAVE_STRICMP
 1

	)

66 
	#HAVE_STRNICMP
 1

	)

67 
	#HAVE_STRDUP
 1

	)

68 
	#HAVE_STRSTR
 1

	)

69 
	#HAVE_MEMCHR
 1

	)

70 
	#HAVE_CALLOC
 1

	)

71 
	#HAVE_UTIME
 1

	)

73 
	#HAVE_GETENV
 1

	)

74 
	#HAVE_SETENV
 1

	)

75 
	#HAVE_UNSETENV
 1

	)

77 
	#HAVE_WRITEV
 1

	)

79 
	#HAVE_GETPASS_R
 1

	)

84 #i‡(
CURRENT_NDK_THRESHOLD
 < 709060000)

85 
	#gë∑ss_r
 
gë∑ssw‹d


	)

90 #ifde‡
NW_BUILD_IPV6


91 
	#HAVE_GETADDRINFO
 1

	)

92 
	#HAVE_GETNAMEINFO
 1

	)

103 #i‡(
CURRENT_NDK_THRESHOLD
 < 306030000)

104 
	#SIGKILL
 11

	)

105 
	#SIGALRM
 13

	)

106 
	#SIGCHLD
 14

	)

107 
	#SIGCONT
 15

	)

108 
	#SIGHUP
 16

	)

109 
	#SIGPIPE
 17

	)

110 
	#SIGQUIT
 18

	)

111 
	#SIGSTOP
 19

	)

112 
	#SIGTSTP
 20

	)

113 
	#SIGTTIN
 21

	)

114 
	#SIGTTOU
 22

	)

115 
	#SIGUSR1
 23

	)

116 
	#SIGUSR2
 24

	)

119 
	#SIGTRAP
 25

	)

120 
	#SIGIOT
 26

	)

121 
	#SIGSTKFLT
 28

	)

122 
	#SIGURG
 29

	)

123 
	#SIGXCPU
 30

	)

124 
	#SIGXFSZ
 31

	)

125 
	#SIGVTALRM
 32

	)

126 
	#SIGPROF
 33

	)

127 
	#SIGWINCH
 34

	)

128 
	#SIGIO
 35

	)

130 #i‡(
CURRENT_NDK_THRESHOLD
 < 406230000)

131 #unde‡
SA_NOCLDSTOP


132 
	#SA_NOCLDSTOP
 0x00000001

	)

134 #i‚de‡
SIGBUS


135 
	#SIGBUS
 
SIGSEGV


	)

138 
	#_gëch
 
gëch¨a˘î


	)

140 
	#SIZEOF_SHORT
 2

	)

141 
	#SIZEOF_INT
 4

	)

142 
	#SIZEOF_LONGLONG
 8

	)

143 
	#SIZEOF_CHAR
 1

	)

144 
	#SIZEOF_SSIZE_T
 
SIZEOF_INT


	)

146 
√tw¨e_poﬁ_¥oc_˛ónup
();

150 
ªgi°î_NLM
(*
NLMH™dÀ
);

151 
uƒegi°î_NLM
(*
NLMH™dÀ
);

154 
gLibId
;

155 *
gLibH™dÀ
;

157 
	s≠p_d©a
 {

158 
	möôülized
;

159 * 
	mgPoﬁ
;

160 * 
	mgs_aHooksToS‹t
;

161 * 
	mgs_phO±i⁄ÆHooks
;

162 * 
	mgs_phO±i⁄ÆFun˘i⁄s
;

163 * 
	mgs_∆mh™dÀ
;

164 
πag_t
 
	mgs_°¨tup_πag
;

165 
πag_t
 
	mgs_sockë_πag
;

166 
πag_t
 
	mgs_lookup_πag
;

167 
πag_t
 
	mgs_evít_πag
;

168 
πag_t
 
	mgs_p˝_πag
;

169 * 
	mgs_ld≠_xªf_lock
;

170 * 
	mgs_xªf_hód
;

171 } 
	tAPP_DATA
;

173 
£tGlobÆPoﬁ
(*
d©a
);

174 * 
gëGlobÆPoﬁ
();

175 
£tSètCache
(*
d©a
);

176 * 
gëSètCache
();

181 #unde‡
mÆloc


182 
	#mÆloc
(
x
Ë
	`libøry_mÆloc
(
gLibH™dÀ
,x)

	)

183 #i‚de‡
__MWERKS__


184 
	#_Æloˇ
 
Æloˇ


	)

188 
	#APR_INT64_STRFN
 
°πﬁl


	)

190 #i‡
APR_HAS_LARGE_FILES


191 
	#APR_OFF_T_STRFN
 
°πﬁl


	)

193 
	#APR_OFF_T_STRFN
 
°πﬁ


	)

197 
	#APR_DWORD_MAX
 0xFFFFFFFFUL

	)

202 
	~"../≠r_¥iv©e_comm⁄.h
"

	@include/arch/os2/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAS_DSO


28 
	s≠r_dso_h™dÀ_t
 {

29 
≠r_poﬁ_t
 *
	mc⁄t
;

30 
HMODULE
 
	mh™dÀ
;

31 
≠r_°©us_t
 
	mlﬂd_îr‹
;

32 *
	mÁûed_moduÀ
;

	@include/arch/os2/apr_arch_file_io.h

17 #i‚de‡
FILE_IO_H


18 
	#FILE_IO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_thªad_muãx.h
"

23 
	~"≠r_fûe_io.h
"

24 
	~"≠r_fûe_öfo.h
"

25 
	~"≠r_î∫o.h
"

26 
	~"≠r_pﬁl.h
"

32 #unde‡
HAVE_MKSTEMP


34 
	#APR_FILE_DEFAULT_BUFSIZE
 4096

	)

35 
	#APR_FILE_BUFSIZE
 
APR_FILE_DEFAULT_BUFSIZE


	)

37 
	s≠r_fûe_t
 {

38 
≠r_poﬁ_t
 *
	mpoﬁ
;

39 
HFILE
 
	mfûedes
;

40 * 
	m‚ame
;

41 
	mis›í
;

42 
	mbuf„ªd
;

43 
	meof_hô
;

44 
≠r_öt32_t
 
	mÊags
;

45 
	mtimeout
;

46 
	mpùe
;

47 
HEV
 
	mpùeSem
;

48 íum { 
	mBLK_UNKNOWN
, 
	mBLK_OFF
, 
	mBLK_ON
 } 
	mblockög
;

51 *
	mbuf„r
;

52 
≠r_size_t
 
	mbufsize
;

53 
≠r_size_t
 
	mbuÂos
;

54 
	md©aRód
;

55 
	mdúe˘i⁄
;

56 
	mfûePå
;

57 
≠r_thªad_muãx_t
 *
	mmuãx
;

61 
	s≠r_dú_t
 {

62 
≠r_poﬁ_t
 *
	mpoﬁ
;

63 *
	mdú«me
;

64 
ULONG
 
	mh™dÀ
;

65 
FILEFINDBUF3
 
	míåy
;

66 
	mvÆidíåy
;

69 
≠r_°©us_t
 
≠r_fûe_˛ónup
(*);

70 
≠r_°©us_t
 
≠r_os2_time_to_≠r_time
(
≠r_time_t
 *
ªsu…
, 
FDATE
 
os2d©e
,

71 
FTIME
 
os2time
);

72 
≠r_°©us_t
 
≠r_≠r_time_to_os2_time
(
FDATE
 *
os2d©e
, 
FTIME
 *
os2time
,

73 
≠r_time_t
 
≠πime
);

76 c⁄° 
c_is_‚ch¨
[256];

78 
	#IS_FNCHAR
(
c
Ë
c_is_‚ch¨
[()c]

	)

80 
≠r_°©us_t
 
fûï©h_roŸ_ã°
(*
∑th
, 
≠r_poﬁ_t
 *
p
);

81 
≠r_°©us_t
 
fûï©h_drive_gë
(**
roŸ∑th
, 
drive
,

82 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
);

83 
≠r_°©us_t
 
fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
);

	@include/arch/os2/apr_arch_inherit.h

17 #i‚de‡
INHERIT_H


18 
	#INHERIT_H


	)

20 
	~"≠r_öhîô.h
"

22 
	#APR_INHERIT
 (1 << 24Ë

	)

24 
	#APR_IMPLEMENT_INHERIT_SET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

25 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_£t
◊¥_##«me##
_t
 *
the
##name) \

27 
rv
; \

28 
ULONG
 
°©e
; \

29 i‡(((
rv
 = 
	`DosQuîyFHSèã
(
©å
->
∑ª¡_îr
->
fûedes
, &
°©e
)) \

31 ((
rv
 = 
	`DosSëFHSèã
(
©å
->
∑ª¡_îr
->
fûedes
, \

32 
°©e
 & ~
OPEN_FLAGS_NOINHERIT
)) != 0)) \

33  
	`APR_FROM_OS_ERROR
(
rv
); \

34  
APR_SUCCESS
; \

35 }

	)

37 
	#APR_IMPLEMENT_INHERIT_UNSET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

38 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_un£t
◊¥_##«me##
_t
 *
the
##name)\

40 
rv
; \

41 
ULONG
 
°©e
; \

42 i‡(((
rv
 = 
	`DosQuîyFHSèã
(
©å
->
∑ª¡_îr
->
fûedes
, &
°©e
)) \

44 ((
rv
 = 
	`DosSëFHSèã
(
©å
->
∑ª¡_îr
->
fûedes
, \

45 
°©e
 | 
OPEN_FLAGS_NOINHERIT
)) != 0)) \

46  
	`APR_FROM_OS_ERROR
(
rv
); \

47  
APR_SUCCESS
; \

48 }

	)

	@include/arch/os2/apr_arch_networkio.h

17 #i‚de‡
NETWORK_IO_H


18 
	#NETWORK_IO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_√tw‹k_io.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_¨ch_os2ˇŒs.h
"

24 
	~"≠r_pﬁl.h
"

26 #i‡
APR_HAVE_NETDB_H


27 
	~<√tdb.h
>

30 
sock_u£rd©a_t
 
	tsock_u£rd©a_t
;

31 
	ssock_u£rd©a_t
 {

32 
sock_u£rd©a_t
 *
	m√xt
;

33 c⁄° *
	mkey
;

34 *
	md©a
;

37 
	s≠r_sockë_t
 {

38 
≠r_poﬁ_t
 *
	mpoﬁ
;

39 
	msockëdes
;

40 
	mty≥
;

41 
	m¥Ÿocﬁ
;

42 
≠r_sockaddr_t
 *
	mloˇl_addr
;

43 
≠r_sockaddr_t
 *
	mªmŸe_addr
;

44 
≠r_öãrvÆ_time_t
 
	mtimeout
;

45 
	mn⁄block
;

46 
	mloˇl_p‹t_unknown
;

47 
	mloˇl_öãrÁ˚_unknown
;

48 
	mªmŸe_addr_unknown
;

49 
≠r_öt32_t
 
	m›ti⁄s
;

50 
≠r_öt32_t
 
	möhîô
;

51 
sock_u£rd©a_t
 *
	mu£rd©a
;

54 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

58 
	#SOCBASEERR
 10000

	)

59 
	#SOCEPERM
 (
SOCBASEERR
+1Ë

	)

60 
	#SOCESRCH
 (
SOCBASEERR
+3Ë

	)

61 
	#SOCEINTR
 (
SOCBASEERR
+4Ë

	)

62 
	#SOCENXIO
 (
SOCBASEERR
+6Ë

	)

63 
	#SOCEBADF
 (
SOCBASEERR
+9Ë

	)

64 
	#SOCEACCES
 (
SOCBASEERR
+13Ë

	)

65 
	#SOCEFAULT
 (
SOCBASEERR
+14Ë

	)

66 
	#SOCEINVAL
 (
SOCBASEERR
+22Ë

	)

67 
	#SOCEMFILE
 (
SOCBASEERR
+24Ë

	)

68 
	#SOCEPIPE
 (
SOCBASEERR
+32Ë

	)

69 
	#SOCEOS2ERR
 (
SOCBASEERR
+100Ë

	)

71 c⁄° *
≠r_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
);

72 
≠r_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

73 
≠r_sockaddr_v¨s_£t
(
≠r_sockaddr_t
 *, , 
≠r_p‹t_t
);

	@include/arch/os2/apr_arch_os2calls.h

17 
	~"≠r_î∫o.h
"

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sockë.h
>

21 (*
≠r_os2_sockë
)(, , );

22 (*
≠r_os2_£À˘
)(*, , , , );

23 (*
≠r_os2_sock_î∫o
)();

24 (*
≠r_os2_ac˚±
)(, 
sockaddr
 *, *);

25 (*
≠r_os2_böd
)(, 
sockaddr
 *, );

26 (*
≠r_os2_c⁄√˘
)(, 
sockaddr
 *, );

27 (*
≠r_os2_gë≥î«me
)(, 
sockaddr
 *, *);

28 (*
≠r_os2_gësock«me
)(, 
sockaddr
 *, *);

29 (*
≠r_os2_gësock›t
)(, , , *, *);

30 (*
≠r_os2_io˘l
)(, , 
ˇddr_t
, );

31 (*
≠r_os2_li°í
)(, );

32 (*
≠r_os2_ªcv
)(, *, , );

33 (*
≠r_os2_£nd
)(, const *, , );

34 (*
≠r_os2_£tsock›t
)(, , , *, );

35 (*
≠r_os2_shutdown
)(, );

36 (*
≠r_os2_so˛o£
)();

37 (*
≠r_os2_wrôev
)(, 
iovec
 *, );

38 (*
≠r_os2_£ndto
)(, c⁄° *, , , c⁄° 
sockaddr
 *, );

39 (*
≠r_os2_ªcv‰om
)(, *, , , 
sockaddr
 *, *);

41 
	#sockë
 
≠r_os2_sockë


	)

42 
	#£À˘
 
≠r_os2_£À˘


	)

43 
	#sock_î∫o
 
≠r_os2_sock_î∫o


	)

44 
	#ac˚±
 
≠r_os2_ac˚±


	)

45 
	#böd
 
≠r_os2_böd


	)

46 
	#c⁄√˘
 
≠r_os2_c⁄√˘


	)

47 
	#gë≥î«me
 
≠r_os2_gë≥î«me


	)

48 
	#gësock«me
 
≠r_os2_gësock«me


	)

49 
	#gësock›t
 
≠r_os2_gësock›t


	)

50 
	#io˘l
 
≠r_os2_io˘l


	)

51 
	#li°í
 
≠r_os2_li°í


	)

52 
	#ªcv
 
≠r_os2_ªcv


	)

53 
	#£nd
 
≠r_os2_£nd


	)

54 
	#£tsock›t
 
≠r_os2_£tsock›t


	)

55 
	#shutdown
 
≠r_os2_shutdown


	)

56 
	#so˛o£
 
≠r_os2_so˛o£


	)

57 
	#wrôev
 
≠r_os2_wrôev


	)

58 
	#£ndto
 
≠r_os2_£ndto


	)

59 
	#ªcv‰om
 
≠r_os2_ªcv‰om


	)

	@include/arch/os2/apr_arch_proc_mutex.h

17 #i‚de‡
PROC_MUTEX_H


18 
	#PROC_MUTEX_H


	)

20 
	~"≠r_¥oc_muãx.h
"

21 
	~"≠r_fûe_io.h
"

23 
	s≠r_¥oc_muãx_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
HMTX
 
	mhMuãx
;

26 
TID
 
	mow√r
;

27 
	mlock_cou¡
;

	@include/arch/os2/apr_arch_thread_cond.h

17 #i‚de‡
THREAD_COND_H


18 
	#THREAD_COND_H


	)

20 
	~"≠r_thªad_c⁄d.h
"

21 
	~"≠r_fûe_io.h
"

23 
	s≠r_thªad_c⁄d_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

	@include/arch/os2/apr_arch_thread_mutex.h

17 #i‚de‡
THREAD_MUTEX_H


18 
	#THREAD_MUTEX_H


	)

20 
	~"≠r_thªad_muãx.h
"

21 
	~"≠r_fûe_io.h
"

23 
	s≠r_thªad_muãx_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
HMTX
 
	mhMuãx
;

	@include/arch/os2/apr_arch_thread_rwlock.h

17 #i‚de‡
THREAD_RWLOCK_H


18 
	#THREAD_RWLOCK_H


	)

20 
	~"≠r_thªad_rwlock.h
"

21 
	~"≠r_fûe_io.h
"

23 
	s≠r_thªad_rwlock_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
	mªadîs
;

26 
HMTX
 
	mwrôe_lock
;

27 
HEV
 
	mªad_d⁄e
;

	@include/arch/os2/apr_arch_threadproc.h

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_fûe_io.h
"

20 #i‚de‡
THREAD_PROC_H


21 
	#THREAD_PROC_H


	)

23 
	#APR_THREADATTR_DETACHED
 1

	)

25 
	#SHELL_PATH
 "cmd.exe"

	)

26 
	#APR_THREAD_STACKSIZE
 65536

	)

28 
	s≠r_thªad©å_t
 {

29 
≠r_poﬁ_t
 *
	mpoﬁ
;

30 
	m©å
;

31 
≠r_size_t
 
	m°acksize
;

34 
	s≠r_thªad_t
 {

35 
≠r_poﬁ_t
 *
	mpoﬁ
;

36 
≠r_thªad©å_t
 *
	m©å
;

37 
	mtid
;

38 
≠r_thªad_°¨t_t
 
	mfunc
;

39 *
	md©a
;

40 
≠r_°©us_t
 
	mexôvÆ
;

43 
	s≠r_thªadkey_t
 {

44 
≠r_poﬁ_t
 *
	mpoﬁ
;

45 *
	mkey
;

48 
	s≠r_¥oˇâr_t
 {

49 
≠r_poﬁ_t
 *
	mpoﬁ
;

50 
≠r_fûe_t
 *
	m∑ª¡_ö
;

51 
≠r_fûe_t
 *
	mchûd_ö
;

52 
≠r_fûe_t
 *
	m∑ª¡_out
;

53 
≠r_fûe_t
 *
	mchûd_out
;

54 
≠r_fûe_t
 *
	m∑ª¡_îr
;

55 
≠r_fûe_t
 *
	mchûd_îr
;

56 *
	mcuºdú
;

57 
≠r_öt32_t
 
	mcmdty≥
;

58 
≠r_öt32_t
 
	mdëached
;

61 
	s≠r_thªad_⁄˚_t
 {

62 
	m£m
;

63 
	mhô
;

	@include/arch/os390/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAS_DSO


28 
	~<dŒ.h
>

30 
	s≠r_dso_h™dÀ_t
 {

31 
dŒh™dÀ
 *
	mh™dÀ
;

32 
	mÁûög_î∫o
;

34 
≠r_poﬁ_t
 *
	mpoﬁ
;

	@include/arch/unix/apr_arch_atomic.h

17 #i‚de‡
ATOMIC_H


18 
	#ATOMIC_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_©omic.h
"

23 
	~"≠r_thªad_muãx.h
"

25 #i‡
deföed
(
USE_ATOMICS_GENERIC
)

27 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__STRICT_ANSI__
)

30 
	#USE_ATOMICS_GENERIC


	)

31 #ñi‡
HAVE_ATOMIC_BUILTINS


32 
	#USE_ATOMICS_BUILTINS


	)

33 #ñi‡
deföed
(
SOLARIS2
) && SOLARIS2 >= 10

34 
	#USE_ATOMICS_SOLARIS


	)

35 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__i386__
Ë|| deföed(
__x86_64__
))

36 
	#USE_ATOMICS_IA32


	)

37 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__PPC__
Ë|| deföed(
__µc__
))

38 
	#USE_ATOMICS_PPC


	)

39 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__s390__
Ë|| deföed(
__s390x__
))

40 
	#USE_ATOMICS_S390


	)

42 
	#USE_ATOMICS_GENERIC


	)

	@include/arch/unix/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAS_DSO


28 #ifde‡
HAVE_MACH_O_DYLD_H


29 
	~<mach-o/dyld.h
>

32 #ifde‡
HAVE_DLFCN_H


33 
	~<dlf˙.h
>

36 #ifde‡
HAVE_DL_H


37 
	~<dl.h
>

40 #i‚de‡
RTLD_NOW


41 
	#RTLD_NOW
 1

	)

44 #i‚de‡
RTLD_GLOBAL


45 
	#RTLD_GLOBAL
 0

	)

48 #i‡(
deföed
(
__Døg⁄Fly__
) ||\

49 
deföed
(
__FªeBSD__
) ||\

50 
deföed
(
__O≥nBSD__
) ||\

51 
deföed
(
__NëBSD__
ËË&& !
	$deföed
(
__ELF__
)

52 
	#DLSYM_NEEDS_UNDERSCORE


	)

55 
	s≠r_dso_h™dÀ_t
 {

56 
≠r_poﬁ_t
 *
poﬁ
;

57 *
h™dÀ
;

58 c⁄° *
îr‹msg
;

	@include/arch/unix/apr_arch_file_io.h

17 #i‚de‡
FILE_IO_H


18 
	#FILE_IO_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_èbÀs.h
"

24 
	~"≠r_fûe_io.h
"

25 
	~"≠r_fûe_öfo.h
"

26 
	~"≠r_î∫o.h
"

27 
	~"≠r_lib.h
"

28 
	~"≠r_thªad_muãx.h
"

29 #i‚de‡
WAITIO_USES_POLL


30 
	~"≠r_pﬁl.h
"

34 #i‡
APR_HAVE_FCNTL_H


35 
	~<f˙é.h
>

37 #i‡
APR_HAVE_SYS_TYPES_H


38 
	~<sys/ty≥s.h
>

40 #i‡
APR_HAVE_ERRNO_H


41 
	~<î∫o.h
>

43 #i‡
APR_HAVE_STRING_H


44 
	~<°rög.h
>

46 #i‡
APR_HAVE_STRINGS_H


47 
	~<°rögs.h
>

49 #i‡
APR_HAVE_DIRENT_H


50 
	~<dúít.h
>

52 #ifde‡
HAVE_SYS_STAT_H


53 
	~<sys/°©.h
>

55 #i‡
APR_HAVE_UNISTD_H


56 
	~<uni°d.h
>

58 #i‡
APR_HAVE_STDIO_H


59 
	~<°dio.h
>

61 #i‡
APR_HAVE_STDLIB_H


62 
	~<°dlib.h
>

64 #i‡
APR_HAVE_SYS_UIO_H


65 
	~<sys/uio.h
>

67 #i‡
APR_HAVE_SYS_TIME_H


68 
	~<sys/time.h
>

70 #ifde‡
BEOS


71 
	~<kî√l/OS.h
>

74 #ifde‡
HAVE_SYS_PARAM_H


75 
	~<sys/∑øm.h
>

78 #i‡
BEOS_BONE


79 #i‚de‡
BONE7


81 
	~<sys/sockë.h
>

84 
	~<sys/io˘l.h
>

89 
	#APR_FILE_DEFAULT_BUFSIZE
 4096

	)

91 
	#APR_FILE_BUFSIZE
 
APR_FILE_DEFAULT_BUFSIZE


	)

93 
	s≠r_fûe_t
 {

94 
≠r_poﬁ_t
 *
	mpoﬁ
;

95 
	mfûedes
;

96 *
	m‚ame
;

97 
≠r_öt32_t
 
	mÊags
;

98 
	meof_hô
;

99 
	mis_pùe
;

100 
≠r_öãrvÆ_time_t
 
	mtimeout
;

101 
	mbuf„ªd
;

102 íum {
	mBLK_UNKNOWN
, 
	mBLK_OFF
, 
	mBLK_ON
 } 
	mblockög
;

103 
	mungëch¨
;

104 #i‚de‡
WAITIO_USES_POLL


106 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

109 *
	mbuf„r
;

110 
≠r_size_t
 
	mbuÂos
;

111 
≠r_size_t
 
	mbufsize
;

112 
	md©aRód
;

113 
	mdúe˘i⁄
;

114 
≠r_off_t
 
	mfûePå
;

115 #i‡
APR_HAS_THREADS


116 
≠r_thªad_muãx_t
 *
	mthlock
;

120 #i‡
APR_HAS_THREADS


121 
	#fûe_lock
(
f
) do { \

122 i‡((
f
)->
thlock
) \

123 
	`≠r_thªad_muãx_lock
((
f
)->
thlock
); \

124 } 0)

	)

125 
	#fûe_u∆ock
(
f
) do { \

126 i‡((
f
)->
thlock
) \

127 
	`≠r_thªad_muãx_u∆ock
((
f
)->
thlock
); \

128 } 0)

	)

130 
	#fûe_lock
(
f
Ëdÿ{} 0)

	)

131 
	#fûe_u∆ock
(
f
Ëdÿ{} 0)

	)

134 #i‡
APR_HAS_LARGE_FILES
 && 
deföed
(
_LARGEFILE64_SOURCE
)

135 
	#°©
(
f
,
b
Ë
	`°©64
(f,b)

	)

136 
	#l°©
(
f
,
b
Ë
	`l°©64
(f,b)

	)

137 
	#f°©
(
f
,
b
Ë
	`f°©64
(f,b)

	)

138 
	#l£ek
(
f
,
o
,
w
Ë
	`l£ek64
(f,o,w)

	)

139 
	#·runˇã
(
f
,
l
Ë
	`·runˇã64
(f,l)

	)

140 
°©64
 
	t°ru˘_°©
;

142 
°©
 
	t°ru˘_°©
;

146 #i‡
APR_HAS_THREADS
 && 
deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
) \

147 && !
deföed
(
READDIR_IS_THREAD_SAFE
Ë&& 
	$deföed
(
HAVE_READDIR64_R
)

148 
	#APR_USE_READDIR64_R


	)

151 
	s≠r_dú_t
 {

152 
≠r_poﬁ_t
 *
poﬁ
;

153 *
dú«me
;

154 
DIR
 *
dú°ru˘
;

155 #ifde‡
APR_USE_READDIR64_R


156 
dúít64
 *
íåy
;

158 
dúít
 *
íåy
;

162 
≠r_°©us_t
 
	`≠r_unix_fûe_˛ónup
(*);

163 
≠r_°©us_t
 
	`≠r_unix_chûd_fûe_˛ónup
(*);

165 
mode_t
 
	`≠r_unix_≥rms2mode
(
≠r_fûïîms_t
 
≥rms
);

166 
≠r_fûïîms_t
 
	`≠r_unix_mode2≥rms
(
mode_t
 
mode
);

168 
≠r_°©us_t
 
	`≠r_fûe_Êush_locked
(
≠r_fûe_t
 *
thefûe
);

169 
≠r_°©us_t
 
	`≠r_fûe_öfo_gë_locked
(
≠r_föfo_t
 *
föfo
, 
≠r_öt32_t
 
w™ãd
,

170 
≠r_fûe_t
 *
thefûe
);

	@include/arch/unix/apr_arch_global_mutex.h

17 #i‚de‡
GLOBAL_MUTEX_H


18 
	#GLOBAL_MUTEX_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_globÆ_muãx.h
"

25 
	~"≠r_¨ch_¥oc_muãx.h
"

26 
	~"≠r_¨ch_thªad_muãx.h
"

28 
	s≠r_globÆ_muãx_t
 {

29 
≠r_poﬁ_t
 *
	mpoﬁ
;

30 
≠r_¥oc_muãx_t
 *
	m¥oc_muãx
;

31 #i‡
APR_HAS_THREADS


32 
≠r_thªad_muãx_t
 *
	mthªad_muãx
;

	@include/arch/unix/apr_arch_inherit.h

17 #i‚de‡
INHERIT_H


18 
	#INHERIT_H


	)

20 
	~"≠r_öhîô.h
"

22 
	#APR_INHERIT
 (1 << 24Ë

	)

24 
	#APR_IMPLEMENT_INHERIT_SET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

25 
≠r_°©us_t
 
≠r_
##
«me
##
	`_öhîô_£t
◊¥_##«me##
_t
 *
the
##name) \

27 i‡(
the
##
«me
->
Êag
 & 
APR_FOPEN_NOCLEANUP
) \

28  
APR_EINVAL
; \

29 i‡(!(
the
##
«me
->
Êag
 & 
APR_INHERIT
)) { \

30 
Êags
 = 
	`f˙é
(
the
##
«me
->«me##
des
, 
F_GETFD
); \

31 i‡(
Êags
 == -1) \

32  
î∫o
; \

33 
Êags
 &~(
FD_CLOEXEC
); \

34 i‡(
	`f˙é
(
the
##
«me
->«me##
des
, 
F_SETFD
, 
Êags
) == -1) \

35  
î∫o
; \

36 
the
##
«me
->
Êag
 |
APR_INHERIT
; \

37 
	`≠r_poﬁ_chûd_˛ónup_£t
(
the
##
«me
->
poﬁ
, \

38 (*)
the
##
«me
, \

39 
˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
); \

41  
APR_SUCCESS
; \

42 }

	)

44 
	#APR_IMPLEMENT_INHERIT_UNSET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

45 
≠r_°©us_t
 
≠r_
##
«me
##
	`_öhîô_un£t
◊¥_##«me##
_t
 *
the
##name) \

47 i‡(
the
##
«me
->
Êag
 & 
APR_FOPEN_NOCLEANUP
) \

48  
APR_EINVAL
; \

49 i‡(
the
##
«me
->
Êag
 & 
APR_INHERIT
) { \

50 
Êags
; \

51 i‡((
Êags
 = 
	`f˙é
(
the
##
«me
->«me##
des
, 
F_GETFD
)) == -1) \

52  
î∫o
; \

53 
Êags
 |
FD_CLOEXEC
; \

54 i‡(
	`f˙é
(
the
##
«me
->«me##
des
, 
F_SETFD
, 
Êags
) == -1) \

55  
î∫o
; \

56 
the
##
«me
->
Êag
 &~
APR_INHERIT
; \

57 
	`≠r_poﬁ_chûd_˛ónup_£t
(
the
##
«me
->
poﬁ
, \

58 (*)
the
##
«me
, \

59 
˛ónup
, cleanup); \

61  
APR_SUCCESS
; \

62 }

	)

	@include/arch/unix/apr_arch_internal_time.h

17 #i‚de‡
TIME_INTERNAL_H


18 
	#TIME_INTERNAL_H


	)

20 
	~"≠r.h
"

22 
≠r_unix_£tup_time
();

	@include/arch/unix/apr_arch_misc.h

17 #i‚de‡
MISC_H


18 
	#MISC_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¥iv©e.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_gë›t.h
"

26 
	~"≠r_thªad_¥oc.h
"

27 
	~"≠r_fûe_io.h
"

28 
	~"≠r_î∫o.h
"

29 
	~"≠r_gë›t.h
"

31 #i‡
APR_HAVE_STDIO_H


32 
	~<°dio.h
>

34 #i‡
APR_HAVE_SIGNAL_H


35 
	~<sig«l.h
>

37 #i‡
APR_HAVE_PTHREAD_H


38 
	~<±hªad.h
>

41 #i‡
APR_HAVE_STDLIB_H


42 
	~<°dlib.h
>

44 #i‡
APR_HAVE_STRING_H


45 
	~<°rög.h
>

48 #ifde‡
BEOS


49 
	~<kî√l/OS.h
>

52 
	s≠r_Ÿhî_chûd_ªc_t
 {

53 
≠r_poﬁ_t
 *
	mp
;

54 
≠r_Ÿhî_chûd_ªc_t
 *
	m√xt
;

55 
≠r_¥oc_t
 *
	m¥oc
;

56 (*
	mmaöã«n˚
) (, *, );

57 *
	md©a
;

58 
≠r_os_fûe_t
 
	mwrôe_fd
;

61 #i‡
deföed
(
WIN32
Ë|| deföed(
NETWARE
)

62 
	#WSAHighByã
 2

	)

63 
	#WSALowByã
 0

	)

	@include/arch/unix/apr_arch_networkio.h

17 #i‚de‡
NETWORK_IO_H


18 
	#NETWORK_IO_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_√tw‹k_io.h
"

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_gíîÆ.h
"

25 
	~"≠r_lib.h
"

26 #i‚de‡
WAITIO_USES_POLL


27 
	~"≠r_pﬁl.h
"

31 #i‡
APR_HAVE_SYS_TYPES_H


32 
	~<sys/ty≥s.h
>

34 #i‡
APR_HAVE_SYS_UIO_H


35 
	~<sys/uio.h
>

37 #ifde‡
HAVE_SYS_SELECT_H


38 
	~<sys/£À˘.h
>

40 #i‡
APR_HAVE_ERRNO_H


41 
	~<î∫o.h
>

43 #i‡
APR_HAVE_SYS_TIME_H


44 
	~<sys/time.h
>

46 #i‡
APR_HAVE_UNISTD_H


47 
	~<uni°d.h
>

49 #i‡
APR_HAVE_STRING_H


50 
	~<°rög.h
>

52 #i‡
APR_HAVE_NETINET_TCP_H


53 
	~<√töë/t˝.h
>

55 #i‡
APR_HAVE_NETINET_SCTP_UIO_H


56 
	~<√töë/s˘p_uio.h
>

58 #i‡
APR_HAVE_NETINET_SCTP_H


59 
	~<√töë/s˘p.h
>

61 #i‡
APR_HAVE_NETINET_IN_H


62 
	~<√töë/ö.h
>

64 #i‡
APR_HAVE_ARPA_INET_H


65 
	~<¨∑/öë.h
>

67 #i‡
APR_HAVE_SYS_SOCKET_H


68 
	~<sys/sockë.h
>

70 #i‡
APR_HAVE_SYS_SOCKIO_H


71 
	~<sys/sockio.h
>

73 #i‡
APR_HAVE_NETDB_H


74 
	~<√tdb.h
>

76 #i‡
APR_HAVE_FCNTL_H


77 
	~<f˙é.h
>

79 #i‡
APR_HAVE_SYS_SENDFILE_H


80 
	~<sys/£ndfûe.h
>

82 #i‡
APR_HAVE_SYS_IOCTL_H


83 
	~<sys/io˘l.h
>

87 #i‚de‡
HAVE_POLLIN


88 
	#POLLIN
 1

	)

89 
	#POLLPRI
 2

	)

90 
	#POLLOUT
 4

	)

91 
	#POLLERR
 8

	)

92 
	#POLLHUP
 16

	)

93 
	#POLLNVAL
 32

	)

96 
sock_u£rd©a_t
 
	tsock_u£rd©a_t
;

97 
	ssock_u£rd©a_t
 {

98 
sock_u£rd©a_t
 *
	m√xt
;

99 c⁄° *
	mkey
;

100 *
	md©a
;

103 
	s≠r_sockë_t
 {

104 
≠r_poﬁ_t
 *
	mpoﬁ
;

105 
	msockëdes
;

106 
	mty≥
;

107 
	m¥Ÿocﬁ
;

108 
≠r_sockaddr_t
 *
	mloˇl_addr
;

109 
≠r_sockaddr_t
 *
	mªmŸe_addr
;

110 
≠r_öãrvÆ_time_t
 
	mtimeout
;

111 #i‚de‡
HAVE_POLL


112 
	mc⁄√˘ed
;

114 
	mloˇl_p‹t_unknown
;

115 
	mloˇl_öãrÁ˚_unknown
;

116 
	mªmŸe_addr_unknown
;

117 
≠r_öt32_t
 
	m›ti⁄s
;

118 
≠r_öt32_t
 
	möhîô
;

119 
sock_u£rd©a_t
 *
	mu£rd©a
;

120 #i‚de‡
WAITIO_USES_POLL


122 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

126 c⁄° *
≠r_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
);

127 
≠r_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

128 
≠r_sockaddr_v¨s_£t
(
≠r_sockaddr_t
 *, , 
≠r_p‹t_t
);

130 
	#≠r_is_›ti⁄_£t
(
skt
, 
›ti⁄
) \

131 (((
skt
)->
›ti⁄s
 & (
›ti⁄
)Ë=(›ti⁄))

	)

133 
	#≠r_£t_›ti⁄
(
skt
, 
›ti⁄
, 
⁄
) \

135 i‡(
⁄
) \

136 (
skt
)->
›ti⁄s
 |(
›ti⁄
); \

138 (
skt
)->
›ti⁄s
 &~(
›ti⁄
); \

139 } 0)

	)

	@include/arch/unix/apr_arch_poll_private.h

17 #i‚de‡
APR_ARCH_POLL_PRIVATE_H


18 
	#APR_ARCH_POLL_PRIVATE_H


	)

20 #i‡
HAVE_POLL_H


21 
	~<pﬁl.h
>

24 #i‡
HAVE_SYS_POLL_H


25 
	~<sys/pﬁl.h
>

28 #ifde‡
HAVE_PORT_CREATE


29 
	~<p‹t.h
>

30 
	~<sys/p‹t_im∂.h
>

33 #ifde‡
HAVE_KQUEUE


34 
	~<sys/ty≥s.h
>

35 
	~<sys/evít.h
>

36 
	~<sys/time.h
>

39 #ifde‡
HAVE_EPOLL


40 
	~<sys/ïﬁl.h
>

43 #ifde‡
NETWARE


44 
	#HAS_SOCKETS
(
dt
Ë(dà=
APR_POLL_SOCKET
Ë? 1 : 0

	)

45 
	#HAS_PIPES
(
dt
Ë(dà=
APR_POLL_FILE
Ë? 1 : 0

	)

48 #i‡
deföed
(
HAVE_AIO_H
Ë&& deföed(
HAVE_AIO_MSGQ
)

49 
	#_AIO_OS390


	)

50 
	~<aio.h
>

54 #ifde‡
HAVE_KQUEUE


55 
	#POLLSET_USES_KQUEUE


	)

56 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_KQUEUE


	)

57 #ñi‡
deföed
(
HAVE_PORT_CREATE
)

58 
	#POLLSET_USES_PORT


	)

59 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_PORT


	)

60 #ñi‡
deföed
(
HAVE_EPOLL
)

61 
	#POLLSET_USES_EPOLL


	)

62 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_EPOLL


	)

63 #ñi‡
deföed
(
HAVE_AIO_MSGQ
)

64 
	#POLLSET_USES_AIO_MSGQ


	)

65 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_AIO_MSGQ


	)

66 #ñi‡
deföed
(
HAVE_POLL
)

67 
	#POLLSET_USES_POLL


	)

68 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_POLL


	)

70 
	#POLLSET_USES_SELECT


	)

71 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_SELECT


	)

74 #ifde‡
WIN32


75 
	#POLL_USES_SELECT


	)

76 #unde‡
POLLSET_DEFAULT_METHOD


77 
	#POLLSET_DEFAULT_METHOD
 
APR_POLLSET_SELECT


	)

79 #ifde‡
HAVE_POLL


80 
	#POLL_USES_POLL


	)

82 
	#POLL_USES_SELECT


	)

86 #i‡
deföed
(
POLLSET_USES_KQUEUE
Ë|| deföed(
POLLSET_USES_EPOLL
Ë|| deföed(
POLLSET_USES_PORT
Ë|| deföed(
POLLSET_USES_AIO_MSGQ
)

88 
	~"≠r_rög.h
"

90 #i‡
APR_HAS_THREADS


91 
	~"≠r_thªad_muãx.h
"

92 
	#pﬁl£t_lock_rögs
() \

93 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_THREADSAFE
) \

94 
	`≠r_thªad_muãx_lock
(
pﬁl£t
->
p
->
rög_lock
);

	)

95 
	#pﬁl£t_u∆ock_rögs
() \

96 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_THREADSAFE
) \

97 
	`≠r_thªad_muãx_u∆ock
(
pﬁl£t
->
p
->
rög_lock
);

	)

99 
	#pﬁl£t_lock_rögs
()

	)

100 
	#pﬁl£t_u∆ock_rögs
()

	)

103 
pfd_ñem_t
 
	tpfd_ñem_t
;

105 
	spfd_ñem_t
 {

106 
APR_RING_ENTRY
(
pfd_ñem_t
Ë
	mlök
;

107 
≠r_pﬁlfd_t
 
	mpfd
;

108 #ifde‡
HAVE_PORT_CREATE


109 
	m⁄_quîy_rög
;

115 
≠r_pﬁl£t_¥iv©e_t
 
	t≠r_pﬁl£t_¥iv©e_t
;

116 
≠r_pﬁl£t_¥ovidî_t
 
	t≠r_pﬁl£t_¥ovidî_t
;

117 
≠r_pﬁlcb_¥ovidî_t
 
	t≠r_pﬁlcb_¥ovidî_t
;

119 
	s≠r_pﬁl£t_t


121 
≠r_poﬁ_t
 *
	mpoﬁ
;

122 
≠r_uöt32_t
 
	m√…s
;

123 
≠r_uöt32_t
 
	m«Œoc
;

124 
≠r_uöt32_t
 
	mÊags
;

126 
≠r_fûe_t
 *
	mwakeup_pùe
[2];

127 
≠r_pﬁlfd_t
 
	mwakeup_pfd
;

128 
≠r_pﬁl£t_¥iv©e_t
 *
	mp
;

129 
≠r_pﬁl£t_¥ovidî_t
 *
	m¥ovidî
;

133 #i‡
deföed
(
HAVE_EPOLL
)

134 
ïﬁl_evít
 *
	mïﬁl
;

136 #i‡
deföed
(
HAVE_PORT_CREATE
)

137 
p‹t_evít_t
 *
	mp‹t
;

139 #i‡
deföed
(
HAVE_KQUEUE
)

140 
kevít
 *
	mke
;

142 #i‡
deföed
(
HAVE_POLL
)

143 
pﬁlfd
 *
	mps
;

145 *
	mundef
;

146 } 
	t≠r_pﬁlcb_p£t
;

148 
	s≠r_pﬁlcb_t
 {

149 
≠r_poﬁ_t
 *
	mpoﬁ
;

150 
≠r_uöt32_t
 
	m√…s
;

151 
≠r_uöt32_t
 
	m«Œoc
;

152 
	mfd
;

153 
≠r_pﬁlcb_p£t
 
	mpﬁl£t
;

154 
≠r_pﬁlfd_t
 **
	mc›y£t
;

155 
≠r_pﬁlcb_¥ovidî_t
 *
	m¥ovidî
;

158 
	s≠r_pﬁl£t_¥ovidî_t
 {

159 
≠r_°©us_t
 (*
¸óã
)(
	m≠r_pﬁl£t_t
 *, 
	m≠r_uöt32_t
, 
	m≠r_poﬁ_t
 *,ápr_uint32_t);

160 
≠r_°©us_t
 (*
add
)(
	m≠r_pﬁl£t_t
 *, c⁄° 
	m≠r_pﬁlfd_t
 *);

161 
≠r_°©us_t
 (*
ªmove
)(
	m≠r_pﬁl£t_t
 *, c⁄° 
	m≠r_pﬁlfd_t
 *);

162 
≠r_°©us_t
 (*
pﬁl
)(
	m≠r_pﬁl£t_t
 *, 
	m≠r_öãrvÆ_time_t
, 
	m≠r_öt32_t
 *, c⁄° 
	m≠r_pﬁlfd_t
 **);

163 
≠r_°©us_t
 (*
˛ónup
)(
	m≠r_pﬁl£t_t
 *);

164 c⁄° *
	m«me
;

167 
	s≠r_pﬁlcb_¥ovidî_t
 {

168 
≠r_°©us_t
 (*
¸óã
)(
	m≠r_pﬁlcb_t
 *, 
	m≠r_uöt32_t
, 
	m≠r_poﬁ_t
 *,ápr_uint32_t);

169 
≠r_°©us_t
 (*
add
)(
	m≠r_pﬁlcb_t
 *, 
	m≠r_pﬁlfd_t
 *);

170 
≠r_°©us_t
 (*
ªmove
)(
	m≠r_pﬁlcb_t
 *, 
	m≠r_pﬁlfd_t
 *);

171 
≠r_°©us_t
 (*
pﬁl
)(
	m≠r_pﬁlcb_t
 *, 
	m≠r_öãrvÆ_time_t
, 
	m≠r_pﬁlcb_cb_t
, *);

172 c⁄° *
	m«me
;

176 
≠r_pﬁl£t_døö_wakeup_pùe
(
≠r_pﬁl£t_t
 *
pﬁl£t
);

	@include/arch/unix/apr_arch_proc_mutex.h

17 #i‚de‡
PROC_MUTEX_H


18 
	#PROC_MUTEX_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_¥oc_muãx.h
"

25 
	~"≠r_poﬁs.h
"

26 
	~"≠r_p‹èbÀ.h
"

27 
	~"≠r_fûe_io.h
"

28 
	~"≠r_¨ch_fûe_io.h
"

31 #i‡
APR_HAVE_SYS_TYPES_H


32 
	~<sys/ty≥s.h
>

34 #i‡
APR_HAVE_STDIO_H


35 
	~<°dio.h
>

37 #i‡
APR_HAVE_FCNTL_H


38 
	~<f˙é.h
>

41 #ifde‡
HAVE_SYS_IPC_H


42 
	~<sys/ùc.h
>

44 #ifde‡
HAVE_SYS_SEM_H


45 
	~<sys/£m.h
>

47 #ifde‡
HAVE_SYS_FILE_H


48 
	~<sys/fûe.h
>

50 #i‡
APR_HAVE_STDLIB_H


51 
	~<°dlib.h
>

53 #i‡
APR_HAVE_UNISTD_H


54 
	~<uni°d.h
>

56 #i‡
APR_HAVE_STRING_H


57 
	~<°rög.h
>

59 #ifde‡
HAVE_SYS_MMAN_H


60 
	~<sys/mm™.h
>

62 #i‡
APR_HAVE_PTHREAD_H


63 
	~<±hªad.h
>

65 #i‡
APR_HAVE_SEMAPHORE_H


66 
	~<£m≠h‹e.h
>

70 
	s≠r_¥oc_muãx_unix_lock_mëhods_t
 {

71 
	mÊags
;

72 
≠r_°©us_t
 (*
¸óã
)(
	m≠r_¥oc_muãx_t
 *, const *);

73 
≠r_°©us_t
 (*
acquúe
)(
	m≠r_¥oc_muãx_t
 *);

74 
≠r_°©us_t
 (*
åyacquúe
)(
	m≠r_¥oc_muãx_t
 *);

75 
≠r_°©us_t
 (*
ªÀa£
)(
	m≠r_¥oc_muãx_t
 *);

76 
≠r_°©us_t
 (*
˛ónup
)(*);

77 
≠r_°©us_t
 (*
chûd_öô
)(
	m≠r_¥oc_muãx_t
 **, 
	m≠r_poﬁ_t
 *, const *);

78 c⁄° *
	m«me
;

80 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	t≠r_¥oc_muãx_unix_lock_mëhods_t
;

83 
	#APR_PROCESS_LOCK_MECH_IS_GLOBAL
 1

	)

85 #i‡!
APR_HAVE_UNION_SEMUN
 && 
deföed
(
APR_HAS_SYSVSEM_SERIALIZE
)

86 
	u£mun
 {

87 
	mvÆ
;

88 
£mid_ds
 *
	mbuf
;

89 *
	m¨øy
;

93 
	s≠r_¥oc_muãx_t
 {

94 
≠r_poﬁ_t
 *
	mpoﬁ
;

95 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 *
	mmëh
;

96 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 *
	möãr_mëh
;

97 
	mcuº_locked
;

98 *
	m‚ame
;

99 #i‡
APR_HAS_SYSVSEM_SERIALIZE
 || 
APR_HAS_FCNTL_SERIALIZE
 || 
APR_HAS_FLOCK_SERIALIZE


100 
≠r_fûe_t
 *
	möãΩroc
;

102 #i‡
APR_HAS_POSIXSEM_SERIALIZE


103 
£m_t
 *
	mp£m_öãΩroc
;

105 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


106 
±hªad_muãx_t
 *
	m±hªad_öãΩroc
;

110 
≠r_¥oc_muãx_unix_£tup_lock
();

	@include/arch/unix/apr_arch_shm.h

17 #i‚de‡
SHM_H


18 
	#SHM_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_shm.h
"

25 
	~"≠r_poﬁs.h
"

26 
	~"≠r_fûe_io.h
"

27 
	~"≠r_√tw‹k_io.h
"

28 
	~"≠r_p‹èbÀ.h
"

30 #i‡
APR_HAVE_UNISTD_H


31 
	~<uni°d.h
>

33 #ifde‡
HAVE_SYS_MMAN_H


34 
	~<sys/mm™.h
>

36 #ifde‡
HAVE_SYS_IPC_H


37 
	~<sys/ùc.h
>

39 #ifde‡
HAVE_SYS_MUTEX_H


40 
	~<sys/muãx.h
>

42 #ifde‡
HAVE_SYS_SHM_H


43 
	~<sys/shm.h
>

45 #i‡!
deföed
(
SHM_R
)

46 
	#SHM_R
 0400

	)

48 #i‡!
deföed
(
SHM_W
)

49 
	#SHM_W
 0200

	)

51 #ifde‡
HAVE_SYS_FILE_H


52 
	~<sys/fûe.h
>

57 #i‚de‡
MAP_FAILED


58 
	#MAP_FAILED
 ((*)-1)

	)

61 
	s≠r_shm_t
 {

62 
≠r_poﬁ_t
 *
	mpoﬁ
;

63 *
	mba£
;

64 *
	mußbÀ
;

65 
≠r_size_t
 
	mªqsize
;

66 
≠r_size_t
 
	mªÆsize
;

67 c⁄° *
	mfûíame
;

68 #i‡
APR_USE_SHMEM_SHMGET
 || 
APR_USE_SHMEM_SHMGET_ANON


69 
	mshmid
;

	@include/arch/unix/apr_arch_thread_cond.h

17 #i‚de‡
THREAD_COND_H


18 
	#THREAD_COND_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_thªad_muãx.h
"

25 
	~"≠r_thªad_c⁄d.h
"

26 
	~"≠r_poﬁs.h
"

28 #i‡
APR_HAVE_PTHREAD_H


29 
	~<±hªad.h
>

34 #i‡
APR_HAS_THREADS


35 
	s≠r_thªad_c⁄d_t
 {

36 
≠r_poﬁ_t
 *
	mpoﬁ
;

37 
±hªad_c⁄d_t
 
	mc⁄d
;

	@include/arch/unix/apr_arch_thread_mutex.h

17 #i‚de‡
THREAD_MUTEX_H


18 
	#THREAD_MUTEX_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_thªad_muãx.h
"

24 
	~"≠r_p‹èbÀ.h
"

25 
	~"≠r_©omic.h
"

27 #i‡
APR_HAVE_PTHREAD_H


28 
	~<±hªad.h
>

31 #i‡
APR_HAS_THREADS


32 
	s≠r_thªad_muãx_t
 {

33 
≠r_poﬁ_t
 *
	mpoﬁ
;

34 
±hªad_muãx_t
 
	mmuãx
;

	@include/arch/unix/apr_arch_thread_rwlock.h

17 #i‚de‡
THREAD_RWLOCK_H


18 
	#THREAD_RWLOCK_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_thªad_rwlock.h
"

24 
	~"≠r_poﬁs.h
"

26 #i‡
APR_HAVE_PTHREAD_H


28 
	~<±hªad.h
>

31 #i‡
APR_HAS_THREADS


32 #ifde‡
HAVE_PTHREAD_RWLOCKS


34 
	s≠r_thªad_rwlock_t
 {

35 
≠r_poﬁ_t
 *
	mpoﬁ
;

36 
±hªad_rwlock_t
 
	mrwlock
;

41 
	s≠r_thªad_rwlock_t
 {

42 
≠r_poﬁ_t
 *
	mpoﬁ
;

	@include/arch/unix/apr_arch_threadproc.h

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_thªad_¥oc.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

24 #i‡
APR_HAVE_PTHREAD_H


25 
	~<±hªad.h
>

27 #ifde‡
HAVE_SYS_RESOURCE_H


28 
	~<sys/ªsour˚.h
>

30 #i‡
APR_HAVE_SIGNAL_H


31 
	~<sig«l.h
>

33 #i‡
APR_HAVE_STRING_H


34 
	~<°rög.h
>

36 #i‡
APR_HAVE_SYS_WAIT_H


37 
	~<sys/waô.h
>

39 #i‡
APR_HAVE_STRING_H


40 
	~<°rög.h
>

42 #ifde‡
HAVE_SCHED_H


43 
	~<sched.h
>

48 #i‚de‡
THREAD_PROC_H


49 
	#THREAD_PROC_H


	)

51 
	#SHELL_PATH
 "/bö/sh"

	)

53 #i‡
APR_HAS_THREADS


55 
	s≠r_thªad_t
 {

56 
≠r_poﬁ_t
 *
	mpoﬁ
;

57 
±hªad_t
 *
	mtd
;

58 *
	md©a
;

59 
≠r_thªad_°¨t_t
 
	mfunc
;

60 
≠r_°©us_t
 
	mexôvÆ
;

63 
	s≠r_thªad©å_t
 {

64 
≠r_poﬁ_t
 *
	mpoﬁ
;

65 
±hªad_©å_t
 
	m©å
;

68 
	s≠r_thªadkey_t
 {

69 
≠r_poﬁ_t
 *
	mpoﬁ
;

70 
±hªad_key_t
 
	mkey
;

73 
	s≠r_thªad_⁄˚_t
 {

74 
±hªad_⁄˚_t
 
	m⁄˚
;

79 
	s≠r_¥oˇâr_t
 {

80 
≠r_poﬁ_t
 *
	mpoﬁ
;

81 
≠r_fûe_t
 *
	m∑ª¡_ö
;

82 
≠r_fûe_t
 *
	mchûd_ö
;

83 
≠r_fûe_t
 *
	m∑ª¡_out
;

84 
≠r_fûe_t
 *
	mchûd_out
;

85 
≠r_fûe_t
 *
	m∑ª¡_îr
;

86 
≠r_fûe_t
 *
	mchûd_îr
;

87 *
	mcuºdú
;

88 
≠r_öt32_t
 
	mcmdty≥
;

89 
≠r_öt32_t
 
	mdëached
;

90 #ifde‡
RLIMIT_CPU


91 
æimô
 *
	mlimô_˝u
;

93 #i‡
deföed
 (
RLIMIT_DATA
Ë|| deföed (
RLIMIT_VMEM
Ë|| deföed(
RLIMIT_AS
)

94 
æimô
 *
	mlimô_mem
;

96 #ifde‡
RLIMIT_NPROC


97 
æimô
 *
	mlimô_≈roc
;

99 #ifde‡
RLIMIT_NOFILE


100 
æimô
 *
	mlimô_nofûe
;

102 
≠r_chûd_îr‚_t
 *
	mîr‚
;

103 
≠r_öt32_t
 
	mîrchk
;

104 
≠r_uid_t
 
	muid
;

105 
≠r_gid_t
 
	mgid
;

	@include/arch/win32/apr_arch_atime.h

17 #i‚de‡
ATIME_H


18 
	#ATIME_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_time.h
"

22 #i‡
APR_HAVE_TIME_H


23 
	~<time.h
>

26 
	s©ime_t
 {

27 
≠r_poﬁ_t
 *
	m˙txt
;

28 
≠r_time_t
 
	mcuºtime
;

29 
SYSTEMTIME
 *
	mex∂odedtime
;

36 
	#APR_DELTA_EPOCH_IN_USEC
 
	`APR_TIME_C
(11644473600000000);

	)

39 
APR_INLINE
 
	$FûeTimeToA¥Time
(
≠r_time_t
 *
ªsu…
, 
FILETIME
 *
öput
)

42 *
ªsu…
 = 
öput
->
dwHighD©eTime
;

43 *
ªsu…
 = (*result) << 32;

44 *
ªsu…
 |
öput
->
dwLowD©eTime
;

45 *
ªsu…
 /= 10;

46 *
ªsu…
 -
APR_DELTA_EPOCH_IN_USEC
;

48 
	}
}

51 
APR_INLINE
 
	$A¥TimeToFûeTime
(
LPFILETIME
 
p·
, 
≠r_time_t
 
t
)

53 
LONGLONG
 
Œ
;

54 
t
 +
APR_DELTA_EPOCH_IN_USEC
;

55 
Œ
 = 
t
 * 10;

56 
p·
->
dwLowD©eTime
 = (
DWORD
)
Œ
;

57 
p·
->
dwHighD©eTime
 = (
DWORD
Ë(
Œ
 >> 32);

59 
	}
}

	@include/arch/win32/apr_arch_dso.h

17 #i‚de‡
DSO_H


18 
	#DSO_H


	)

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAS_DSO


28 
	s≠r_dso_h™dÀ_t
 {

29 
≠r_poﬁ_t
 *
	mc⁄t
;

30 *
	mh™dÀ
;

31 
≠r_°©us_t
 
	mlﬂd_îr‹
;

	@include/arch/win32/apr_arch_file_io.h

17 #i‚de‡
FILE_IO_H


18 
	#FILE_IO_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_èbÀs.h
"

25 
	~"≠r_thªad_muãx.h
"

26 
	~"≠r_fûe_io.h
"

27 
	~"≠r_fûe_öfo.h
"

28 
	~"≠r_î∫o.h
"

29 
	~"≠r_¨ch_misc.h
"

30 
	~"≠r_pﬁl.h
"

32 #ifde‡
HAVE_SYS_STAT_H


33 
	~<sys/°©.h
>

35 #i‡
APR_HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

38 #ifde‡
HAVE_SYS_FCNTL_H


39 
	~<f˙é.h
>

41 #ifde‡
HAVE_TIME_H


42 
	~<time.h
>

44 #i‡
APR_HAVE_DIRENT_H


45 
	~<dúít.h
>

47 #ifde‡
HAVE_MALLOC_H


48 
	~<mÆloc.h
>

51 #i‡
APR_HAS_UNICODE_FS


52 
	~"¨ch/wö32/≠r_¨ch_utf8.h
"

53 
	~<wch¨.h
>

67 
≠r_°©us_t
 
utf8_to_unicode_∑th
(
≠r_wch¨_t
* 
d°°r
, 
≠r_size_t
 
d°ch¨s
,

68 c⁄° * 
§c°r
);

69 
≠r_°©us_t
 
unicode_to_utf8_∑th
(* 
d°°r
, 
≠r_size_t
 
d°ch¨s
,

70 c⁄° 
≠r_wch¨_t
* 
§c°r
);

81 *
ªs_«me_‰om_fûíame
(c⁄° *
fûe
, 
globÆ
, 
≠r_poﬁ_t
 *
poﬁ
);

83 
	#APR_FILE_MAX
 
MAX_PATH


	)

85 
	#APR_FILE_DEFAULT_BUFSIZE
 4096

	)

87 
	#APR_FILE_BUFSIZE
 
APR_FILE_DEFAULT_BUFSIZE


	)

90 #ifde‡
_MSC_VER


91 
	#S_IFIFO
 
_S_IFIFO


	)

92 
	#S_IFBLK
 0060000

	)

93 
	#S_IFLNK
 0120000

	)

94 
	#S_IFSOCK
 0140000

	)

95 
	#S_IFWHT
 0160000

	)

99 
	#APR_OPENINFO
 0x00100000

	)

100 
	#APR_OPENLINK
 0x00200000

	)

101 
	#APR_READCONTROL
 0x00400000

	)

102 
	#APR_WRITECONTROL
 0x00800000

	)

104 
	#APR_STDIN_FLAG
 0x02000000

	)

105 
	#APR_STDOUT_FLAG
 0x04000000

	)

106 
	#APR_STDERR_FLAG
 0x06000000

	)

107 
	#APR_STD_FLAGS
 (
APR_STDIN_FLAG
 | 
APR_STDOUT_FLAG
 | 
APR_STDERR_FLAG
)

	)

108 
	#APR_WRITEATTRS
 0x08000000

	)

112 #i‚de‡
FILE_ATTRIBUTE_DEVICE


113 
	#FILE_ATTRIBUTE_DEVICE
 0x00000040

	)

115 #i‚de‡
FILE_ATTRIBUTE_REPARSE_POINT


116 
	#FILE_ATTRIBUTE_REPARSE_POINT
 0x00000400

	)

118 #i‚de‡
FILE_FLAG_OPEN_NO_RECALL


119 
	#FILE_FLAG_OPEN_NO_RECALL
 0x00100000

	)

121 #i‚de‡
FILE_FLAG_OPEN_REPARSE_POINT


122 
	#FILE_FLAG_OPEN_REPARSE_POINT
 0x00200000

	)

124 #i‚de‡
TRUSTEE_IS_WELL_KNOWN_GROUP


125 
	#TRUSTEE_IS_WELL_KNOWN_GROUP
 5

	)

129 
	#APR_FINFO_WIN32_DIR
 (
APR_FINFO_NAME
 | 
APR_FINFO_TYPE
 \

130 | 
APR_FINFO_CTIME
 | 
APR_FINFO_ATIME
 \

131 | 
APR_FINFO_MTIME
 | 
APR_FINFO_SIZE
)

	)

134 
	#APR_FREADONLY
 0x10000000

	)

137 
fûlö_fûeöfo
(
≠r_föfo_t
 *
föfo
, 
WIN32_FILE_ATTRIBUTE_DATA
 *
wööfo
,

138 
byh™dÀ
, 
≠r_öt32_t
 
w™ãd
);

141 
≠r_°©us_t
 
m‹e_föfo
(
≠r_föfo_t
 *
föfo
, c⁄° *
ufûe
,

142 
≠r_öt32_t
 
w™ãd
, 
wh©fûe
);

145 
	#MORE_OF_HANDLE
 0

	)

146 
	#MORE_OF_FSPEC
 1

	)

147 
	#MORE_OF_WFSPEC
 2

	)

159 
	#fûedes
 
fûeh™d


	)

161 
	s≠r_fûe_t
 {

162 
≠r_poﬁ_t
 *
	mpoﬁ
;

163 
HANDLE
 
	mfûeh™d
;

164 
BOOLEAN
 
	mpùe
;

165 
OVERLAPPED
 *
	mpOvîœµed
;

166 
≠r_öãrvÆ_time_t
 
	mtimeout
;

167 
≠r_öt32_t
 
	mÊags
;

170 
≠r_föfo_t
 *
	mföfo
;

171 *
	m‚ame
;

172 
DWORD
 
	mdwFûeAâribuãs
;

173 
	meof_hô
;

174 
BOOLEAN
 
	mbuf„ªd
;

175 
	mungëch¨
;

176 
	m≠≥nd
;

179 *
	mbuf„r
;

180 
≠r_size_t
 
	mbuÂos
;

181 
≠r_size_t
 
	mbufsize
;

182 
≠r_size_t
 
	md©aRód
;

183 
	mdúe˘i⁄
;

184 
≠r_off_t
 
	mfûePå
;

185 
≠r_thªad_muãx_t
 *
	mmuãx
;

188 #i‡
APR_FILES_AS_SOCKETS


190 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

195 
	s≠r_dú_t
 {

196 
≠r_poﬁ_t
 *
	mpoﬁ
;

197 
HANDLE
 
	mdúh™d
;

198 
≠r_size_t
 
	mroŸÀn
;

199 *
	mdú«me
;

200 *
	m«me
;

202 #i‡
APR_HAS_UNICODE_FS


204 
WIN32_FIND_DATAW
 *
	míåy
;

205 } 
	mw
;

207 #i‡
APR_HAS_ANSI_FS


209 
WIN32_FIND_DATAA
 *
	míåy
;

210 } 
	mn
;

213 
	mbof
;

220 c⁄° 
≠r_c_is_‚ch¨
[256];

222 
	#IS_FNCHAR
(
c
Ë(
≠r_c_is_‚ch¨
[()(c)] & 1)

	)

223 
	#IS_SHCHAR
(
c
Ë((
≠r_c_is_‚ch¨
[()(c)] & 2Ë=2)

	)

231 
≠r_°©us_t
 
fûï©h_roŸ_ã°
(*
∑th
, 
≠r_poﬁ_t
 *
p
);

244 
≠r_°©us_t
 
fûï©h_drive_gë
(**
roŸ∑th
, 
drive
,

245 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
);

252 
≠r_°©us_t
 
fûï©h_roŸ_ˇ£
(**
roŸ∑th
, *
roŸ
, 
≠r_poﬁ_t
 *
p
);

255 
≠r_°©us_t
 
fûe_˛ónup
(*);

257 
≠r_°©us_t


258 
≠r_fûe_sockë_pùe_¸óã
(
≠r_fûe_t
 **
ö
,

259 
≠r_fûe_t
 **
out
,

260 
≠r_poﬁ_t
 *
p
);

262 
≠r_°©us_t


263 
≠r_fûe_sockë_pùe_˛o£
(
≠r_fûe_t
 *
fûe
);

	@include/arch/win32/apr_arch_inherit.h

17 #i‚de‡
INHERIT_H


18 
	#INHERIT_H


	)

20 
	~"≠r_öhîô.h
"

22 
	#APR_INHERIT
 (1 << 24Ë

	)

24 #i‡
APR_HAS_UNICODE_FS
 && 
APR_HAS_ANSI_FS


27 
	#APR_IMPLEMENT_INHERIT_SET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

28 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_£t
◊¥_##«me##
_t
 *
the
##name) \

30 
IF_WIN_OS_IS_UNICODE
 \

37 
ELSE_WIN_OS_IS_ANSI
 \

39 
HANDLE
 
ãmp
, 
h¥oc
 = 
	`GëCuºítPro˚ss
(); \

40 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
the
##
«me
->
fûeh™d
, \

41 
h¥oc
, &
ãmp
, 0, 
TRUE
, \

42 
DUPLICATE_SAME_ACCESS
)) \

43  
	`≠r_gë_os_îr‹
(); \

44 
	`Clo£H™dÀ
(
the
##
«me
->
fûeh™d
); \

45 
the
##
«me
->
fûeh™d
 = 
ãmp
; \

47  
APR_SUCCESS
; \

48 }

	)

50 
	#APR_IMPLEMENT_INHERIT_UNSET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

51 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_un£t
◊¥_##«me##
_t
 *
the
##name)\

53 
IF_WIN_OS_IS_UNICODE
 \

59 
ELSE_WIN_OS_IS_ANSI
 \

61 
HANDLE
 
ãmp
, 
h¥oc
 = 
	`GëCuºítPro˚ss
(); \

62 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
the
##
«me
->
fûeh™d
, \

63 
h¥oc
, &
ãmp
, 0, 
FALSE
, \

64 
DUPLICATE_SAME_ACCESS
)) \

65  
	`≠r_gë_os_îr‹
(); \

66 
	`Clo£H™dÀ
(
the
##
«me
->
fûeh™d
); \

67 
the
##
«me
->
fûeh™d
 = 
ãmp
; \

69  
APR_SUCCESS
; \

70 }

	)

72 #ñi‡
APR_HAS_ANSI_FS
 || 
deföed
(
_WIN32_WCE
)

74 
	#APR_IMPLEMENT_INHERIT_SET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

75 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_£t
◊¥_##«me##
_t
 *
the
##name) \

77 
HANDLE
 
ãmp
, 
h¥oc
 = 
	`GëCuºítPro˚ss
(); \

78 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
the
##
«me
->
fûeh™d
, \

79 
h¥oc
, &
ãmp
, 0, 
TRUE
, \

80 
DUPLICATE_SAME_ACCESS
)) \

81  
	`≠r_gë_os_îr‹
(); \

82 
	`Clo£H™dÀ
(
the
##
«me
->
fûeh™d
); \

83 
the
##
«me
->
fûeh™d
 = 
ãmp
; \

84  
APR_SUCCESS
; \

85 }

	)

87 
	#APR_IMPLEMENT_INHERIT_UNSET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

88 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_un£t
◊¥_##«me##
_t
 *
the
##name)\

90 
HANDLE
 
ãmp
, 
h¥oc
 = 
	`GëCuºítPro˚ss
(); \

91 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
the
##
«me
->
fûeh™d
, \

92 
h¥oc
, &
ãmp
, 0, 
FALSE
, \

93 
DUPLICATE_SAME_ACCESS
)) \

94  
	`≠r_gë_os_îr‹
(); \

95 
	`Clo£H™dÀ
(
the
##
«me
->
fûeh™d
); \

96 
the
##
«me
->
fûeh™d
 = 
ãmp
; \

97  
APR_SUCCESS
; \

98 }

	)

102 
	#APR_IMPLEMENT_INHERIT_SET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

103 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_£t
◊¥_##«me##
_t
 *
the
##name) \

105   
APR_SUCCESS
; \

110 }

	)

112 
	#APR_IMPLEMENT_INHERIT_UNSET
(
«me
, 
Êag
, 
poﬁ
, 
˛ónup
) \

113 
	`APR_DECLARE
(
≠r_°©us_t
Ë
≠r_
##
«me
##
	`_öhîô_un£t
◊¥_##«me##
_t
 *
the
##name)\

115   
APR_SUCCESS
; \

119 }

	)

	@include/arch/win32/apr_arch_misc.h

17 #i‚de‡
MISC_H


18 
	#MISC_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¥iv©e.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_gë›t.h
"

26 
	~"≠r_thªad_¥oc.h
"

27 
	~"≠r_fûe_io.h
"

28 
	~"≠r_î∫o.h
"

29 
	~"≠r_gë›t.h
"

31 #i‡
APR_HAVE_STDIO_H


32 
	~<°dio.h
>

34 #i‡
APR_HAVE_SIGNAL_H


35 
	~<sig«l.h
>

37 #i‡
APR_HAVE_PTHREAD_H


38 
	~<±hªad.h
>

40 #i‡
APR_HAVE_STDLIB_H


41 
	~<°dlib.h
>

43 #i‡
APR_HAVE_STRING_H


44 
	~<°rög.h
>

46 #i‚de‡
_WIN32_WCE


47 
	~<éhñp32.h
>

50 
	s≠r_Ÿhî_chûd_ªc_t
 {

51 
≠r_poﬁ_t
 *
	mp
;

52 
≠r_Ÿhî_chûd_ªc_t
 *
	m√xt
;

53 
≠r_¥oc_t
 *
	m¥oc
;

54 (*
	mmaöã«n˚
) (, *, );

55 *
	md©a
;

56 
≠r_os_fûe_t
 
	mwrôe_fd
;

59 
	#WSAHighByã
 2

	)

60 
	#WSALowByã
 0

	)

67 
APR_DECLARE_DATA
 
≠r_≠p_öô_com∂ëe
;

69 
≠r_wa°πﬂ°r
(c⁄° * c⁄° * *
ªèº
,

70 
wch¨_t
 c⁄° * c⁄° *
¨r
, 
¨gs
);

77 
	mAPR_WIN_UNK
 = 0,

78 
	mAPR_WIN_UNSUP
 = 1,

79 
	mAPR_WIN_95
 = 10,

80 
	mAPR_WIN_95_B
 = 11,

81 
	mAPR_WIN_95_OSR2
 = 12,

82 
	mAPR_WIN_98
 = 14,

83 
	mAPR_WIN_98_SE
 = 16,

84 
	mAPR_WIN_ME
 = 18,

86 
	mAPR_WIN_UNICODE
 = 20,

88 
	mAPR_WIN_CE_3
 = 23,

90 
	mAPR_WIN_NT
 = 30,

91 
	mAPR_WIN_NT_3_5
 = 35,

92 
	mAPR_WIN_NT_3_51
 = 36,

94 
	mAPR_WIN_NT_4
 = 40,

95 
	mAPR_WIN_NT_4_SP2
 = 42,

96 
	mAPR_WIN_NT_4_SP3
 = 43,

97 
	mAPR_WIN_NT_4_SP4
 = 44,

98 
	mAPR_WIN_NT_4_SP5
 = 45,

99 
	mAPR_WIN_NT_4_SP6
 = 46,

101 
	mAPR_WIN_2000
 = 50,

102 
	mAPR_WIN_2000_SP1
 = 51,

103 
	mAPR_WIN_2000_SP2
 = 52,

104 
	mAPR_WIN_XP
 = 60,

105 
	mAPR_WIN_XP_SP1
 = 61,

106 
	mAPR_WIN_XP_SP2
 = 62,

107 
	mAPR_WIN_2003
 = 70,

108 
	mAPR_WIN_VISTA
 = 80,

109 
	mAPR_WIN_7
 = 90

110 } 
	t≠r_o¶evñ_e
;

112 
APR_DECLARE_DATA
 
≠r_o¶evñ_e
 
≠r_os_Àvñ
;

114 
≠r_°©us_t
 
≠r_gë_o¶evñ
(
≠r_o¶evñ_e
 *);

126 #i‡
deföed
(
_WIN32_WCE
Ë|| deföed(
WINNT
)

127 
	#APR_HAS_ANSI_FS
 0

	)

129 
	#APR_HAS_ANSI_FS
 1

	)

136 #i‡
APR_HAS_ANSI_FS
 && 
APR_HAS_UNICODE_FS


137 
	#IF_WIN_OS_IS_UNICODE
 i‡(
≠r_os_Àvñ
 >
APR_WIN_UNICODE
)

	)

138 
	#ELSE_WIN_OS_IS_ANSI
 

	)

140 
	#IF_WIN_OS_IS_UNICODE


	)

141 
	#ELSE_WIN_OS_IS_ANSI


	)

144 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
_WIN32_WCE
)

145 
	~"¸tdbg.h
"

147 
APR_INLINE
 * 
	$≠r_mÆloc_dbg
(
size_t
 
size
, c⁄° * 
fûíame
,

148 
löíumbî
)

150  
	`_mÆloc_dbg
(
size
, 
_CRT_BLOCK
, 
fûíame
, 
löíumbî
);

151 
	}
}

153 
APR_INLINE
 * 
	$≠r_ªÆloc_dbg
(* 
u£rD©a
, 
size_t
 
√wSize
,

154 c⁄° * 
fûíame
, 
löíumbî
)

156  
	`_ªÆloc_dbg
(
u£rD©a
, 
√wSize
, 
_CRT_BLOCK
, 
fûíame
, 
löíumbî
);

157 
	}
}

161 
APR_INLINE
 * 
	$≠r_mÆloc_dbg
(
size_t
 
size
, c⁄° * 
fûíame
,

162 
löíumbî
)

164  
	`mÆloc
(
size
);

165 
	}
}

167 
APR_INLINE
 * 
	$≠r_ªÆloc_dbg
(* 
u£rD©a
, 
size_t
 
√wSize
,

168 c⁄° * 
fûíame
, 
löíumbî
)

170  
	`ªÆloc
(
u£rD©a
, 
√wSize
);

171 
	}
}

176 
	mDLL_WINBASEAPI
 = 0,

177 
	mDLL_WINADVAPI
 = 1,

178 
	mDLL_WINSOCKAPI
 = 2,

179 
	mDLL_WINSOCK2API
 = 3,

180 
	mDLL_SHSTDAPI
 = 4,

181 
	mDLL_NTDLL
 = 5,

182 
	mDLL_deföed
 = 6

183 } 
	t≠r_dŒtokí_e
;

185 
FARPROC
 
≠r_lﬂd_dŒ_func
(
≠r_dŒtokí_e
 
‚Lib
, *
‚Name
, 
‹döÆ
);

190 
	#APR_DECLARE_LATE_DLL_FUNC
(
lib
, 
ªây≥
, 
ˇŒty≥
, 
‚
, 
‹d
, 
¨gs
, 
«mes
) \

191 
	`ªây≥
 (
	tˇŒty≥
 *
	t≠r_wö≠i_Ât_
##
	t‚
Ë
	t¨gs
; \

192 
≠r_wö≠i_Ât_
##
‚
 
≠r_wö≠i_p‚_
##‚ = 
NULL
; \

193 
≠r_wö≠i_chk_
##
‚
 = 0; \

194 
APR_INLINE
 
≠r_wö≠i_ld_
##
	`‚
() \

195 { i‡(
≠r_wö≠i_p‚_
##
‚
)  1; \

196 i‡(
≠r_wö≠i_chk_
##
‚
 ++)  0; \

197 i‡(!
≠r_wö≠i_p‚_
##
‚
) \

198 
≠r_wö≠i_p‚_
##
‚
 = (
≠r_wö≠i_Ât_
##fn) \

199 
	`≠r_lﬂd_dŒ_func
(
lib
, #‚, 
‹d
); \

200 i‡(
≠r_wö≠i_p‚_
##
‚
)  1;  0; }; \

201 
APR_INLINE
 
ªây≥
 
≠r_wö≠i_
##
‚
 
¨gs
 \

202 { i‡(
≠r_wö≠i_ld_
##
	`‚
()) \

203  (*(
≠r_wö≠i_p‚_
##
‚
)Ë
«mes
; \

204 { 
	`SëLa°Eº‹
(
ERROR_INVALID_FUNCTION
);  0;} }; \

205 

	)

206 
	#APR_HAVE_LATE_DLL_FUNC
(
‚
Ë
≠r_wö≠i_ld_
##
	`‚
()

	)

227 #i‡!
deföed
(
_WIN32_WCE
Ë&& !deföed(
WINNT
)

230 #ifde‡
GëFûeAâribuãsExA


231 #unde‡
GëFûeAâribuãsExA


233 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
GëFûeAâribuãsExA
, 0, (

234 
IN
 
LPCSTR
 
ÕFûeName
,

235 
IN
 
GET_FILEEX_INFO_LEVELS
 
fInfoLevñId
,

236 
OUT
 
LPVOID
 
ÕFûeInf‹m©i⁄
),

237 (
ÕFûeName
, 
fInfoLevñId
, 
ÕFûeInf‹m©i⁄
));

238 
	#GëFûeAâribuãsExA
 
≠r_wö≠i_GëFûeAâribuãsExA


	)

239 #unde‡
GëFûeAâribuãsEx


240 
	#GëFûeAâribuãsEx
 
≠r_wö≠i_GëFûeAâribuãsExA


	)

242 #ifde‡
GëFûeAâribuãsExW


243 #unde‡
GëFûeAâribuãsExW


245 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
GëFûeAâribuãsExW
, 0, (

246 
IN
 
LPCWSTR
 
ÕFûeName
,

247 
IN
 
GET_FILEEX_INFO_LEVELS
 
fInfoLevñId
,

248 
OUT
 
LPVOID
 
ÕFûeInf‹m©i⁄
),

249 (
ÕFûeName
, 
fInfoLevñId
, 
ÕFûeInf‹m©i⁄
));

250 
	#GëFûeAâribuãsExW
 
≠r_wö≠i_GëFûeAâribuãsExW


	)

252 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
C™˚lIo
, 0, (

253 
IN
 
HANDLE
 
hFûe
),

254 (
hFûe
));

255 
	#C™˚lIo
 
≠r_wö≠i_C™˚lIo


	)

257 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
TryE¡îCrôiˇlSe˘i⁄
, 0, (

258 
LPCRITICAL_SECTION
 
ÕCrôiˇlSe˘i⁄
),

259 (
ÕCrôiˇlSe˘i⁄
));

260 
	#TryE¡îCrôiˇlSe˘i⁄
 
≠r_wö≠i_TryE¡îCrôiˇlSe˘i⁄


	)

262 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
SwôchToThªad
, 0, (

265 
	#SwôchToThªad
 
≠r_wö≠i_SwôchToThªad


	)

267 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINADVAPI
, 
BOOL
, 
WINAPI
, 
GëEf„˘iveRightsFromA˛W
, 0, (

268 
IN
 
PACL
 
∑˛
,

269 
IN
 
PTRUSTEE_W
 
pTru°ì
,

270 
OUT
 
PACCESS_MASK
 
pAc˚ssRights
),

271 (
∑˛
, 
pTru°ì
, 
pAc˚ssRights
));

272 
	#GëEf„˘iveRightsFromA˛W
 
≠r_wö≠i_GëEf„˘iveRightsFromA˛W


	)

274 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINADVAPI
, 
BOOL
, 
WINAPI
, 
GëNamedSecurôyInfoW
, 0, (

275 
IN
 
LPWSTR
 
pObje˘Name
,

276 
IN
 
SE_OBJECT_TYPE
 
Obje˘Ty≥
,

277 
IN
 
SECURITY_INFORMATION
 
SecurôyInfo
,

278 
OUT
 
PSID
 *
µsidOw√r
,

279 
OUT
 
PSID
 *
µsidGroup
,

280 
OUT
 
PACL
 *
µDa˛
,

281 
OUT
 
PACL
 *
µSa˛
,

282 
OUT
 
PSECURITY_DESCRIPTOR
 *
µSecurôyDes¸ùt‹
),

283 (
pObje˘Name
, 
Obje˘Ty≥
, 
SecurôyInfo
, 
µsidOw√r
, 
µsidGroup
,

284 
µDa˛
, 
µSa˛
, 
µSecurôyDes¸ùt‹
));

285 
	#GëNamedSecurôyInfoW
 
≠r_wö≠i_GëNamedSecurôyInfoW


	)

287 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINADVAPI
, 
BOOL
, 
WINAPI
, 
GëNamedSecurôyInfoA
, 0, (

288 
IN
 
LPSTR
 
pObje˘Name
,

289 
IN
 
SE_OBJECT_TYPE
 
Obje˘Ty≥
,

290 
IN
 
SECURITY_INFORMATION
 
SecurôyInfo
,

291 
OUT
 
PSID
 *
µsidOw√r
,

292 
OUT
 
PSID
 *
µsidGroup
,

293 
OUT
 
PACL
 *
µDa˛
,

294 
OUT
 
PACL
 *
µSa˛
,

295 
OUT
 
PSECURITY_DESCRIPTOR
 *
µSecurôyDes¸ùt‹
),

296 (
pObje˘Name
, 
Obje˘Ty≥
, 
SecurôyInfo
, 
µsidOw√r
, 
µsidGroup
,

297 
µDa˛
, 
µSa˛
, 
µSecurôyDes¸ùt‹
));

298 
	#GëNamedSecurôyInfoA
 
≠r_wö≠i_GëNamedSecurôyInfoA


	)

299 #unde‡
GëNamedSecurôyInfo


300 
	#GëNamedSecurôyInfo
 
≠r_wö≠i_GëNamedSecurôyInfoA


	)

302 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINADVAPI
, 
BOOL
, 
WINAPI
, 
GëSecurôyInfo
, 0, (

303 
IN
 
HANDLE
 
h™dÀ
,

304 
IN
 
SE_OBJECT_TYPE
 
Obje˘Ty≥
,

305 
IN
 
SECURITY_INFORMATION
 
SecurôyInfo
,

306 
OUT
 
PSID
 *
µsidOw√r
,

307 
OUT
 
PSID
 *
µsidGroup
,

308 
OUT
 
PACL
 *
µDa˛
,

309 
OUT
 
PACL
 *
µSa˛
,

310 
OUT
 
PSECURITY_DESCRIPTOR
 *
µSecurôyDes¸ùt‹
),

311 (
h™dÀ
, 
Obje˘Ty≥
, 
SecurôyInfo
, 
µsidOw√r
, 
µsidGroup
,

312 
µDa˛
, 
µSa˛
, 
µSecurôyDes¸ùt‹
));

313 
	#GëSecurôyInfo
 
≠r_wö≠i_GëSecurôyInfo


	)

315 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_SHSTDAPI
, 
LPWSTR
 *, 
WINAPI
, 
Comm™dLöeToArgvW
, 0, (

316 
LPCWSTR
 
ÕCmdLöe
,

317 *
pNumArgs
),

318 (
ÕCmdLöe
, 
pNumArgs
));

319 
	#Comm™dLöeToArgvW
 
≠r_wö≠i_Comm™dLöeToArgvW


	)

323 #i‡!
deföed
(
_WIN32_WCE
)

328 #ifde‡
GëCom¥es£dFûeSizeA


329 #unde‡
GëCom¥es£dFûeSizeA


331 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
DWORD
, 
WINAPI
, 
GëCom¥es£dFûeSizeA
, 0, (

332 
IN
 
LPCSTR
 
ÕFûeName
,

333 
OUT
 
LPDWORD
 
ÕFûeSizeHigh
),

334 (
ÕFûeName
, 
ÕFûeSizeHigh
));

335 
	#GëCom¥es£dFûeSizeA
 
≠r_wö≠i_GëCom¥es£dFûeSizeA


	)

336 #unde‡
GëCom¥es£dFûeSize


337 
	#GëCom¥es£dFûeSize
 
≠r_wö≠i_GëCom¥es£dFûeSizeA


	)

339 #ifde‡
GëCom¥es£dFûeSizeW


340 #unde‡
GëCom¥es£dFûeSizeW


342 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
DWORD
, 
WINAPI
, 
GëCom¥es£dFûeSizeW
, 0, (

343 
IN
 
LPCWSTR
 
ÕFûeName
,

344 
OUT
 
LPDWORD
 
ÕFûeSizeHigh
),

345 (
ÕFûeName
, 
ÕFûeSizeHigh
));

346 
	#GëCom¥es£dFûeSizeW
 
≠r_wö≠i_GëCom¥es£dFûeSizeW


	)

349 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_NTDLL
, 
LONG
, 
WINAPI
, 
NtQuîyTimîResﬁuti⁄
, 0, (

350 
ULONG
 *
pMaxRes
,

351 
ULONG
 *
pMöRes
,

352 
ULONG
 *
pCurRes
),

353 (
pMaxRes
, 
pMöRes
, 
pCurRes
));

354 
	#QuîyTimîResﬁuti⁄
 
≠r_wö≠i_NtQuîyTimîResﬁuti⁄


	)

356 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_NTDLL
, 
LONG
, 
WINAPI
, 
NtSëTimîResﬁuti⁄
, 0, (

357 
ULONG
 
ReqRes
,

358 
BOOL
 
Acquúe
,

359 
ULONG
 *
pNewRes
),

360 (
ReqRes
, 
Acquúe
, 
pNewRes
));

361 
	#SëTimîResﬁuti⁄
 
≠r_wö≠i_NtSëTimîResﬁuti⁄


	)

363 
	sPBI
 {

364 
LONG
 
	mExôSètus
;

365 
PVOID
 
	mPebBa£Addªss
;

366 
≠r_uöçå_t
 
	mAfföôyMask
;

367 
LONG
 
	mBa£Pri‹ôy
;

368 
≠r_uöçå_t
 
	mUniquePro˚ssId
;

369 
≠r_uöçå_t
 
	mInhîôedFromUniquePro˚ssId
;

370 } 
	tPBI
, *
	tPPBI
;

372 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_NTDLL
, 
LONG
, 
WINAPI
, 
NtQuîyInf‹m©i⁄Pro˚ss
, 0, (

373 
HANDLE
 
hPro˚ss
,

374 
INT
 
öfo
,

375 
PVOID
 
pPI
,

376 
ULONG
 
LíPI
,

377 
ULONG
 *
pSizePI
),

378 (
hPro˚ss
, 
öfo
, 
pPI
, 
LíPI
, 
pSizePI
));

379 
	#QuîyInf‹m©i⁄Pro˚ss
 
≠r_wö≠i_NtQuîyInf‹m©i⁄Pro˚ss


	)

381 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_NTDLL
, 
LONG
, 
WINAPI
, 
NtQuîyObje˘
, 0, (

382 
HANDLE
 
hObje˘
,

383 
INT
 
öfo
,

384 
PVOID
 
pOI
,

385 
ULONG
 
LíOI
,

386 
ULONG
 *
pSizeOI
),

387 (
hObje˘
, 
öfo
, 
pOI
, 
LíOI
, 
pSizeOI
));

388 
	#QuîyObje˘
 
≠r_wö≠i_NtQuîyObje˘


	)

390 
	sIOSB
 {

392 
UINT
 
	mSètus
;

393 
PVOID
 
	mª£rved
;

395 
≠r_uöçå_t
 
	mInf‹m©i⁄
;

396 } 
	tIOSB
, *
	tPIOSB
;

398 
	sFSI
 {

399 
LONGLONG
 
	mAŒoˇti⁄Size
;

400 
LONGLONG
 
	mEndOfFûe
;

401 
ULONG
 
	mNumbîOfLöks
;

402 
BOOL
 
	mDñëePídög
;

403 
BOOL
 
	mDúe˘‹y
;

404 } 
	tFSI
, *
	tPFSI
;

406 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_NTDLL
, 
LONG
, 
WINAPI
, 
ZwQuîyInf‹m©i⁄Fûe
, 0, (

407 
HANDLE
 
hObje˘
,

408 
PVOID
 
pIOSB
,

409 
PVOID
 
pFI
,

410 
ULONG
 
LíFI
,

411 
ULONG
 
öfo
),

412 (
hObje˘
, 
pIOSB
, 
pFI
, 
LíFI
, 
öfo
));

413 
	#ZwQuîyInf‹m©i⁄Fûe
 
≠r_wö≠i_ZwQuîyInf‹m©i⁄Fûe


	)

415 #ifde‡
Cª©eToﬁhñp32S«pshŸ


416 #unde‡
Cª©eToﬁhñp32S«pshŸ


418 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
HANDLE
, 
WINAPI
, 
Cª©eToﬁhñp32S«pshŸ
, 0, (

419 
DWORD
 
dwFœgs
,

420 
DWORD
 
th32Pro˚ssID
),

421 (
dwFœgs
, 
th32Pro˚ssID
));

422 
	#Cª©eToﬁhñp32S«pshŸ
 
≠r_wö≠i_Cª©eToﬁhñp32S«pshŸ


	)

424 #ifde‡
Pro˚ss32Fú°W


425 #unde‡
Pro˚ss32Fú°W


427 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
Pro˚ss32Fú°W
, 0, (

428 
HANDLE
 
hS«pshŸ
,

429 
LPPROCESSENTRY32W
 
Õ≥
),

430 (
hS«pshŸ
, 
Õ≥
));

431 
	#Pro˚ss32Fú°W
 
≠r_wö≠i_Pro˚ss32Fú°W


	)

433 #ifde‡
Pro˚ss32NextW


434 #unde‡
Pro˚ss32NextW


436 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
Pro˚ss32NextW
, 0, (

437 
HANDLE
 
hS«pshŸ
,

438 
LPPROCESSENTRY32W
 
Õ≥
),

439 (
hS«pshŸ
, 
Õ≥
));

440 
	#Pro˚ss32NextW
 
≠r_wö≠i_Pro˚ss32NextW


	)

442 #i‡!
deföed
(
POLLERR
)

444 
	#POLLRDNORM
 0x0100

	)

445 
	#POLLRDBAND
 0x0200

	)

446 
	#POLLIN
 (
POLLRDNORM
 | 
POLLRDBAND
)

	)

447 
	#POLLPRI
 0x0400

	)

449 
	#POLLWRNORM
 0x0010

	)

450 
	#POLLOUT
 (
POLLWRNORM
)

	)

451 
	#POLLWRBAND
 0x0020

	)

453 
	#POLLERR
 0x0001

	)

454 
	#POLLHUP
 0x0002

	)

455 
	#POLLNVAL
 0x0004

	)

457 
	spﬁlfd
 {

458 
SOCKET
 
	mfd
;

459 
SHORT
 
	mevíts
;

460 
SHORT
 
	mªvíts
;

462 } 
	tWSAPOLLFD
, *
	tPWSAPOLLFD
, 
	tFAR
 *
	tLPWSAPOLLFD
;

465 #ifde‡
WSAPﬁl


466 #unde‡
WSAPﬁl


468 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINSOCK2API
, , 
WSAAPI
, 
WSAPﬁl
, 0, (

469 
IN
 
OUT
 
LPWSAPOLLFD
 
fdAºay
,

470 
IN
 
ULONG
 
fds
,

471 
IN
 
INT
 
timeout
),

472 (
fdAºay
, 
fds
, 
timeout
));

473 
	#WSAPﬁl
 
≠r_wö≠i_WSAPﬁl


	)

474 
	#HAVE_POLL
 1

	)

476 #ifde‡
SëDŒDúe˘‹yW


477 #unde‡
SëDŒDúe˘‹yW


479 
APR_DECLARE_LATE_DLL_FUNC
(
DLL_WINBASEAPI
, 
BOOL
, 
WINAPI
, 
SëDŒDúe˘‹yW
, 0, (

480 
IN
 
LPCWSTR
 
ÕP©hName
),

481 (
ÕP©hName
));

482 
	#SëDŒDúe˘‹yW
 
≠r_wö≠i_SëDŒDúe˘‹yW


	)

	@include/arch/win32/apr_arch_networkio.h

17 #i‚de‡
NETWORK_IO_H


18 
	#NETWORK_IO_H


	)

20 
	~"≠r_√tw‹k_io.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_pﬁl.h
"

24 
sock_u£rd©a_t
 
	tsock_u£rd©a_t
;

25 
	ssock_u£rd©a_t
 {

26 
sock_u£rd©a_t
 *
	m√xt
;

27 c⁄° *
	mkey
;

28 *
	md©a
;

31 
	s≠r_sockë_t
 {

32 
≠r_poﬁ_t
 *
	mpoﬁ
;

33 
SOCKET
 
	msockëdes
;

34 
	mty≥
;

35 
	m¥Ÿocﬁ
;

36 
≠r_sockaddr_t
 *
	mloˇl_addr
;

37 
≠r_sockaddr_t
 *
	mªmŸe_addr
;

38 
	mtimeout_ms
;

39 
≠r_öãrvÆ_time_t
 
	mtimeout
;

40 
≠r_öt32_t
 
	mdisc⁄√˘ed
;

41 
	mloˇl_p‹t_unknown
;

42 
	mloˇl_öãrÁ˚_unknown
;

43 
	mªmŸe_addr_unknown
;

44 
≠r_öt32_t
 
	m›ti⁄s
;

45 
≠r_öt32_t
 
	möhîô
;

46 #i‡
APR_HAS_SENDFILE


51 
OVERLAPPED
 *
	movîœµed
;

53 
sock_u£rd©a_t
 *
	mu£rd©a
;

56 
≠r_pﬁl£t_t
 *
	mpﬁl£t
;

59 #ifde‡
_WIN32_WCE


60 #i‚de‡
WSABUF


61 
	s_WSABUF
 {

62 
u_l⁄g
 
	mÀn
;

63 
FAR
 * 
	mbuf
;

64 } 
	tWSABUF
, 
	tFAR
 * 
	tLPWSABUF
;

67 #ifde‡
_MSC_VER


68 
	#HAVE_STRUCT_IPMREQ


	)

72 
≠r_°©us_t
 
°©us_‰om_ªs_îr‹
();

74 c⁄° *
≠r_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
);

75 
≠r_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

76 
≠r_sockaddr_v¨s_£t
(
≠r_sockaddr_t
 *, , 
≠r_p‹t_t
);

78 
	#≠r_is_›ti⁄_£t
(
skt
, 
›ti⁄
) \

79 (((
skt
)->
›ti⁄s
 & (
›ti⁄
)Ë=(›ti⁄))

	)

81 
	#≠r_£t_›ti⁄
(
skt
, 
›ti⁄
, 
⁄
) \

83 i‡(
⁄
) \

84 (
skt
)->
›ti⁄s
 |(
›ti⁄
); \

86 (
skt
)->
›ti⁄s
 &~(
›ti⁄
); \

87 } 0)

	)

	@include/arch/win32/apr_arch_proc_mutex.h

17 #i‚de‡
PROC_MUTEX_H


18 
	#PROC_MUTEX_H


	)

20 
	~"≠r_¥oc_muãx.h
"

22 
	s≠r_¥oc_muãx_t
 {

23 
≠r_poﬁ_t
 *
	mpoﬁ
;

24 
HANDLE
 
	mh™dÀ
;

25 c⁄° *
	m‚ame
;

	@include/arch/win32/apr_arch_thread_cond.h

17 #i‚de‡
THREAD_COND_H


18 
	#THREAD_COND_H


	)

20 
	~"≠r_thªad_c⁄d.h
"

22 
	s≠r_thªad_c⁄d_t
 {

23 
≠r_poﬁ_t
 *
	mpoﬁ
;

24 
HANDLE
 
	m£m≠h‹e
;

25 
CRITICAL_SECTION
 
	mc£˘i⁄
;

26 
	mnum_waôög
;

27 
	mnum_wake
;

28 
	mgíî©i⁄
;

	@include/arch/win32/apr_arch_thread_mutex.h

17 #i‚de‡
THREAD_MUTEX_H


18 
	#THREAD_MUTEX_H


	)

20 
	~"≠r_poﬁs.h
"

22 
	ethªad_muãx_ty≥
 {

23 
	mthªad_muãx_¸ôiˇl_£˘i⁄
,

24 
	mthªad_muãx_u¬e°ed_evít
,

25 
	mthªad_muãx_√°ed_muãx


26 } 
	tthªad_muãx_ty≥
;

32 
	s≠r_thªad_muãx_t
 {

33 
≠r_poﬁ_t
 *
	mpoﬁ
;

34 
thªad_muãx_ty≥
 
	mty≥
;

35 
HANDLE
 
	mh™dÀ
;

36 
CRITICAL_SECTION
 
	m£˘i⁄
;

	@include/arch/win32/apr_arch_thread_rwlock.h

17 #i‚de‡
THREAD_RWLOCK_H


18 
	#THREAD_RWLOCK_H


	)

20 
	~"≠r_thªad_rwlock.h
"

22 
	s≠r_thªad_rwlock_t
 {

23 
≠r_poﬁ_t
 *
	mpoﬁ
;

24 
HANDLE
 
	mwrôe_muãx
;

25 
HANDLE
 
	mªad_evít
;

26 
LONG
 
	mªadîs
;

	@include/arch/win32/apr_arch_threadproc.h

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_fûe_io.h
"

21 #i‚de‡
THREAD_PROC_H


22 
	#THREAD_PROC_H


	)

24 
	#SHELL_PATH
 "cmd.exe"

	)

26 
	s≠r_thªad_t
 {

27 
≠r_poﬁ_t
 *
	mpoﬁ
;

28 
HANDLE
 
	mtd
;

29 
≠r_öt32_t
 
	mˇn˚l
;

30 
≠r_öt32_t
 
	mˇn˚l_how
;

31 *
	md©a
;

32 
≠r_thªad_°¨t_t
 
	mfunc
;

33 
≠r_°©us_t
 
	mexôvÆ
;

36 
	s≠r_thªad©å_t
 {

37 
≠r_poﬁ_t
 *
	mpoﬁ
;

38 
≠r_öt32_t
 
	mdëach
;

39 
≠r_size_t
 
	m°acksize
;

42 
	s≠r_thªadkey_t
 {

43 
≠r_poﬁ_t
 *
	mpoﬁ
;

44 
DWORD
 
	mkey
;

47 
	s≠r_¥oˇâr_t
 {

48 
≠r_poﬁ_t
 *
	mpoﬁ
;

49 
≠r_fûe_t
 *
	m∑ª¡_ö
;

50 
≠r_fûe_t
 *
	mchûd_ö
;

51 
≠r_fûe_t
 *
	m∑ª¡_out
;

52 
≠r_fûe_t
 *
	mchûd_out
;

53 
≠r_fûe_t
 *
	m∑ª¡_îr
;

54 
≠r_fûe_t
 *
	mchûd_îr
;

55 *
	mcuºdú
;

56 
≠r_öt32_t
 
	mcmdty≥
;

57 
≠r_öt32_t
 
	mdëached
;

58 
≠r_chûd_îr‚_t
 *
	mîr‚
;

59 
≠r_öt32_t
 
	mîrchk
;

60 #i‚de‡
_WIN32_WCE


61 
HANDLE
 
	mu£r_tokí
;

62 
LPSECURITY_ATTRIBUTES
 
	mß
;

63 
LPVOID
 
	msd
;

67 
	s≠r_thªad_⁄˚_t
 {

68 
	mvÆue
;

71 
≠r_°©us_t
 
≠r_thªad¥oc_öô
(
≠r_poﬁ_t
 *
poﬁ
);

	@include/arch/win32/apr_arch_utf8.h

17 #i‚de‡
UTF8_H


18 
	#UTF8_H


	)

20 
	~"≠r.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_î∫o.h
"

26 
≠r_uöt16_t
 
	t≠r_wch¨_t
;

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_c⁄v_utf8_to_ucs2
(c⁄° *
ö
,

38 
≠r_size_t
 *
öbyãs
,

39 
≠r_wch¨_t
 *
out
,

40 
≠r_size_t
 *
outw‹ds
);

51 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_c⁄v_ucs2_to_utf8
(c⁄° 
≠r_wch¨_t
 *
ö
,

52 
≠r_size_t
 *
öw‹ds
,

53 *
out
,

54 
≠r_size_t
 *
outbyãs
);

	@include/arch/win32/apr_dbg_win32_handles.h

17 #i‚de‡
APR_DBG_WIN32_HANDLES_H


18 
	#APR_DBG_WIN32_HANDLES_H


	)

20 #ifde‡
__˝lu•lus


56 
APR_DECLARE_NONSTD
(
HANDLE
Ë
≠r_dbg_log
(* 
‚
, HANDLE 
ha
, * 
Ê
, 
 
,

57 
nh
, ...);

59 
	#≠r_dbg_rv
(
‚
, 
¨gs
Ë(
	`≠r_dbg_log
(#‚,(‚Ë¨gs,
__FILE__
,
__LINE__
,0))

	)

61 
	#Clo£H™dÀ
(
h
) \

62 ((
BOOL
)
	`≠r_dbg_log
("CloseHandle", \

63 (
HANDLE
)(
Clo£H™dÀ
)(
h
), \

64 
__FILE__
,
__LINE__
,1, \

65 &(
h
),""))

	)

67 
	#Cª©eEvítA
(
sd
,
b1
,
b2
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eEvítA
,(sd,b1,b2,nm))

	)

68 
	#Cª©eEvítW
(
sd
,
b1
,
b2
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eEvítW
,(sd,b1,b2,nm))

	)

70 
	#Cª©eFûeA
(
nm
,
d1
,
d2
,
sd
,
d3
,
d4
,
h
Ë
	`≠r_dbg_rv
(
Cª©eFûeA
,“m,d1,d2,sd,d3,d4,h))

	)

71 
	#Cª©eFûeW
(
nm
,
d1
,
d2
,
sd
,
d3
,
d4
,
h
Ë
	`≠r_dbg_rv
(
Cª©eFûeW
,“m,d1,d2,sd,d3,d4,h))

	)

73 
	#Cª©eFûeM≠pögA
(
fh
,
sd
,
d1
,
d2
,
d3
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eFûeM≠pögA
,(fh,sd,d1,d2,d3,nm))

	)

74 
	#Cª©eFûeM≠pögW
(
fh
,
sd
,
d1
,
d2
,
d3
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eFûeM≠pögW
,(fh,sd,d1,d2,d3,nm))

	)

76 
	#Cª©eMuãxA
(
sd
,
b
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eMuãxA
,(sd,b,nm))

	)

77 
	#Cª©eMuãxW
(
sd
,
b
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eMuãxW
,(sd,b,nm))

	)

79 
	#Cª©eIoCom∂ëi⁄P‹t
(
h1
,
h2
,
pd1
,
d2
Ë
	`≠r_dbg_rv
(
Cª©eIoCom∂ëi⁄P‹t
,(h1,h2,pd1,d2))

	)

81 
	#Cª©eNamedPùeA
(
nm
,
d1
,
d2
,
d3
,
d4
,
d5
,
d6
,
sd
Ë
	`≠r_dbg_rv
(
Cª©eNamedPùeA
,“m,d1,d2,d3,d4,d5,d6,sd))

	)

82 
	#Cª©eNamedPùeW
(
nm
,
d1
,
d2
,
d3
,
d4
,
d5
,
d6
,
sd
Ë
	`≠r_dbg_rv
(
Cª©eNamedPùeW
,“m,d1,d2,d3,d4,d5,d6,sd))

	)

84 
	#Cª©ePùe
(
ph1
,
ph2
,
sd
,
d
) \

85 ((
BOOL
)
	`≠r_dbg_log
("CreatePipe", \

86 (
HANDLE
)(
Cª©ePùe
)(
ph1
,
ph2
,
sd
,
d
), \

87 
__FILE__
,
__LINE__
,2, \

88 (
ph1
),"hRead", \

89 (
ph2
),"hWrôe"))

	)

91 
	#Cª©ePro˚ssA
(
s1
,
s2
,
sd1
,
sd2
,
b
,
d1
,
s3
,
s4
,
pd2
,
hr
) \

92 ((
BOOL
)
	`≠r_dbg_log
("CreateProcessA", \

93 (
HANDLE
)(
Cª©ePro˚ssA
)(
s1
,
s2
,
sd1
,
sd2
,
b
,
d1
,
s3
,
s4
,
pd2
,
hr
), \

94 
__FILE__
,
__LINE__
,2, \

95 &((
hr
)->
hPro˚ss
),"hProcess", \

96 &((
hr
)->
hThªad
),"hThªad"))

	)

97 
	#Cª©ePro˚ssW
(
s1
,
s2
,
sd1
,
sd2
,
b
,
d1
,
s3
,
s4
,
pd2
,
hr
) \

98 ((
BOOL
)
	`≠r_dbg_log
("CreateProcessW", \

99 (
HANDLE
)(
Cª©ePro˚ssW
)(
s1
,
s2
,
sd1
,
sd2
,
b
,
d1
,
s3
,
s4
,
pd2
,
hr
), \

100 
__FILE__
,
__LINE__
,2, \

101 &((
hr
)->
hPro˚ss
),"hProcess", \

102 &((
hr
)->
hThªad
),"hThªad"))

	)

104 
	#Cª©eSem≠h‹eA
(
sd
,
d1
,
d2
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eSem≠h‹eA
,(sd,d1,d2,nm))

	)

105 
	#Cª©eSem≠h‹eW
(
sd
,
d1
,
d2
,
nm
Ë
	`≠r_dbg_rv
(
Cª©eSem≠h‹eW
,(sd,d1,d2,nm))

	)

107 
	#Cª©eThªad
(
sd
,
d1
,
‚
,
pv
,
d2
,
pd3
Ë
	`≠r_dbg_rv
(
Cª©eThªad
,(sd,d1,‚,pv,d2,pd3))

	)

109 
	#Dîegi°îEvítSour˚
(
h
) \

110 ((
BOOL
)
	`≠r_dbg_log
("DeregisterEventSource", \

111 (
HANDLE
)(
Dîegi°îEvítSour˚
)(
h
), \

112 
__FILE__
,
__LINE__
,1, \

113 &(
h
),""))

	)

115 
	#Du∂iˇãH™dÀ
(
h1
,
h2
,
h3
,
ph4
,
d1
,
b
,
d2
) \

116 ((
BOOL
)
	`≠r_dbg_log
("DuplicateHandle", \

117 (
HANDLE
)(
Du∂iˇãH™dÀ
)(
h1
,
h2
,
h3
,
ph4
,
d1
,
b
,
d2
), \

118 
__FILE__
,
__LINE__
,2, \

119 (
ph4
),((
h3
)==
	`GëCuºítPro˚ss
()) \

121 &(
h2
),((
h1
)==
	`GëCuºítPro˚ss
()) \

122 ? "Sour˚" : "EXTERN Sour˚"))

	)

124 
	#GëCuºítPro˚ss
() \

125 (
	`≠r_dbg_log
("GetCurrentProcess", \

126 (
GëCuºítPro˚ss
)(),
__FILE__
,
__LINE__
,0))

	)

128 
	#GëCuºítThªad
() \

129 (
	`≠r_dbg_log
("GetCurrentThread", \

130 (
GëCuºítThªad
)(),
__FILE__
,
__LINE__
,0))

	)

132 
	#GëModuÀH™dÀA
(
nm
Ë
	`≠r_dbg_rv
(
GëModuÀH™dÀA
,“m))

	)

133 
	#GëModuÀH™dÀW
(
nm
Ë
	`≠r_dbg_rv
(
GëModuÀH™dÀW
,“m))

	)

135 
	#GëStdH™dÀ
(
d
Ë
	`≠r_dbg_rv
(
GëStdH™dÀ
,(d))

	)

137 
	#LﬂdLibøryA
(
nm
Ë
	`≠r_dbg_rv
(
LﬂdLibøryA
,“m))

	)

138 
	#LﬂdLibøryW
(
nm
Ë
	`≠r_dbg_rv
(
LﬂdLibøryW
,“m))

	)

140 
	#LﬂdLibøryExA
(
nm
,
h
,
d
Ë
	`≠r_dbg_rv
(
LﬂdLibøryExA
,“m,h,d))

	)

141 
	#LﬂdLibøryExW
(
nm
,
h
,
d
Ë
	`≠r_dbg_rv
(
LﬂdLibøryExW
,“m,h,d))

	)

143 
	#O≥nEvítA
(
d
,
b
,
nm
Ë
	`≠r_dbg_rv
(
O≥nEvítA
,(d,b,nm))

	)

144 
	#O≥nEvítW
(
d
,
b
,
nm
Ë
	`≠r_dbg_rv
(
O≥nEvítW
,(d,b,nm))

	)

146 
	#O≥nFûeM≠pögA
(
d
,
b
,
nm
Ë
	`≠r_dbg_rv
(
O≥nFûeM≠pögA
,(d,b,nm))

	)

147 
	#O≥nFûeM≠pögW
(
d
,
b
,
nm
Ë
	`≠r_dbg_rv
(
O≥nFûeM≠pögW
,(d,b,nm))

	)

149 
	#Regi°îEvítSour˚A
(
s1
,
s2
Ë
	`≠r_dbg_rv
(
Regi°îEvítSour˚A
,(s1,s2))

	)

150 
	#Regi°îEvítSour˚W
(
s1
,
s2
Ë
	`≠r_dbg_rv
(
Regi°îEvítSour˚W
,(s1,s2))

	)

152 
	#SëEvít
(
h
) \

153 ((
BOOL
)
	`≠r_dbg_log
("SetEvent", \

154 (
HANDLE
)(
SëEvít
)(
h
), \

155 
__FILE__
,
__LINE__
,1, \

156 &(
h
),""))

	)

158 
	#SëStdH™dÀ
(
d
,
h
) \

159 ((
BOOL
)
	`≠r_dbg_log
("SetStdHandle", \

160 (
HANDLE
)(
SëStdH™dÀ
)(
d
,
h
), \

161 
__FILE__
,
__LINE__
,1,&(
h
),""))

	)

163 
	#sockë
(
i1
,
i2
,
i3
) \

164 ((
SOCKET
)
	`≠r_dbg_log
("socket", \

165 (
HANDLE
)(
sockë
)(
i1
,
i2
,
i3
), \

166 
__FILE__
,
__LINE__
,0))

	)

168 
	#WaôF‹SögÀObje˘
(
h
,
d
) \

169 ((
DWORD
)
	`≠r_dbg_log
("WaitForSingleObject", \

170 (
HANDLE
)(
WaôF‹SögÀObje˘
)(
h
,
d
), \

171 
__FILE__
,
__LINE__
,1,&(
h
),"Sig«Àd"))

	)

173 
	#WaôF‹SögÀObje˘Ex
(
h
,
d
,
b
) \

174 ((
DWORD
)
	`≠r_dbg_log
("WaitForSingleObjectEx", \

175 (
HANDLE
)(
WaôF‹SögÀObje˘Ex
)(
h
,
d
,
b
), \

176 
__FILE__
,
__LINE__
,1,&(
h
),"Sig«Àd"))

	)

178 
	#WaôF‹Mu…ùÀObje˘s
(
d1
,
ah
,
b
,
d2
) \

179 ((
DWORD
)
	`≠r_dbg_log
("WaitForMultipleObjects", \

180 (
HANDLE
)(
WaôF‹Mu…ùÀObje˘s
)(
d1
,
ah
,
b
,
d2
), \

181 
__FILE__
,
__LINE__
,1,
ah
,"Sig«Àd"))

	)

183 
	#WaôF‹Mu…ùÀObje˘sEx
(
d1
,
ah
,
b1
,
d2
,
b2
) \

184 ((
DWORD
)
	`≠r_dbg_log
("WaitForMultipleObjectsEx", \

185 (
HANDLE
)(
WaôF‹Mu…ùÀObje˘sEx
)(
d1
,
ah
,
b1
,
d2
,
b2
), \

186 
__FILE__
,
__LINE__
,1,
ah
,"Sig«Àd"))

	)

188 
	#WSASockëA
(
i1
,
i2
,
i3
,
pi
,
g
,
dw
) \

189 ((
SOCKET
)
	`≠r_dbg_log
("WSASocketA", \

190 (
HANDLE
)(
WSASockëA
)(
i1
,
i2
,
i3
,
pi
,
g
,
dw
), \

191 
__FILE__
,
__LINE__
,0))

	)

193 
	#WSASockëW
(
i1
,
i2
,
i3
,
pi
,
g
,
dw
) \

194 ((
SOCKET
)
	`≠r_dbg_log
("WSASocketW", \

195 (
HANDLE
)(
WSASockëW
)(
i1
,
i2
,
i3
,
pi
,
g
,
dw
), \

196 
__FILE__
,
__LINE__
,0))

	)

198 
	#˛o£sockë
(
sh
) \

199 (()
	`≠r_dbg_log
("closesocket", \

200 (
HANDLE
)(
˛o£sockë
)(
sh
), \

201 
__FILE__
,
__LINE__
,1,&(
sh
),""))

	)

203 
	#_begöthªad
(
‚
,
d
,
pv
) \

204 (()
	`≠r_dbg_log
("_beginthread", \

205 (
HANDLE
)(
_begöthªad
)(
‚
,
d
,
pv
), \

206 
__FILE__
,
__LINE__
,0))

	)

208 
	#_begöthªadex
(
sd
,
d1
,
‚
,
pv
,
d2
,
pd3
) \

209 (()
	`≠r_dbg_log
("_beginthreadex", \

210 (
HANDLE
)(
_begöthªadex
)(
sd
,
d1
,
‚
,
pv
,
d2
,
pd3
), \

211 
__FILE__
,
__LINE__
,0))

	)

213 #ifde‡
__˝lu•lus


	@include/arch/win32/apr_private.h

23 #ifde‡
WIN32


25 #i‚de‡
APR_PRIVATE_H


26 
	#APR_PRIVATE_H


	)

31 
	~"≠r.h
"

38 #i‚de‡
SW_HIDE


39 
	#SW_HIDE
 0

	)

46 #i‚de‡
_WIN32_WCE


47 
	#HAVE_ACLAPI
 1

	)

48 #ifde‡
__wty≥s_h__


49 
	~<acc˘æ.h
>

51 
	#__wty≥s_h__


	)

52 
	~<acc˘æ.h
>

53 #unde‡
__wty≥s_h__


56 
	#HAVE_ACLAPI
 0

	)

59 #i‡
APR_HAVE_SYS_TYPES_H


60 
	~<sys/ty≥s.h
>

62 #i‡
APR_HAVE_STDDEF_H


63 
	~<°ddef.h
>

65 
	~<°dio.h
>

66 #i‡
APR_HAVE_TIME_H


67 
	~<time.h
>

73 
	#HAVE_LIMITS_H
 1

	)

74 
	#HAVE_MALLOC_H
 1

	)

75 
	#HAVE_SIGNAL_H
 1

	)

77 
	#HAVE_STDLIB_H
 1

	)

79 
	#HAVE_STRICMP
 1

	)

80 
	#HAVE_STRNICMP
 1

	)

81 
	#HAVE_STRDUP
 1

	)

82 
	#HAVE_STRSTR
 1

	)

83 
	#HAVE_MEMCHR
 1

	)

85 
	#SIGHUP
 1

	)

87 
	#SIGQUIT
 3

	)

89 
	#SIGTRAP
 5

	)

90 
	#SIGIOT
 6

	)

91 
	#SIGBUS
 7

	)

93 
	#SIGKILL
 9

	)

94 
	#SIGUSR1
 10

	)

96 
	#SIGUSR2
 12

	)

97 
	#SIGPIPE
 13

	)

98 
	#SIGALRM
 14

	)

100 
	#SIGSTKFLT
 16

	)

101 
	#SIGCHLD
 17

	)

102 
	#SIGCONT
 18

	)

103 
	#SIGSTOP
 19

	)

104 
	#SIGTSTP
 20

	)

107 
	#SIGTTIN
 23

	)

108 
	#SIGTTOU
 24

	)

109 
	#SIGURG
 25

	)

110 
	#SIGXCPU
 26

	)

111 
	#SIGXFSZ
 27

	)

112 
	#SIGVTALRM
 28

	)

113 
	#SIGPROF
 29

	)

114 
	#SIGWINCH
 30

	)

115 
	#SIGIO
 31

	)

122 (
	tSigfunc
)();

124 
	#¶ìp
(
t
Ë
	`SÀï
(—Ë* 1000)

	)

126 
	#SIZEOF_SHORT
 2

	)

127 
	#SIZEOF_INT
 4

	)

128 
	#SIZEOF_LONGLONG
 8

	)

129 
	#SIZEOF_CHAR
 1

	)

130 
	#SIZEOF_SSIZE_T
 
SIZEOF_INT


	)

132 
__°dˇŒ
 
	`Sig«lH™dlög
(*);

133 
	`thªad_ªady
();

135 #i‡!
APR_HAVE_ERRNO_H


136 
APR_DECLARE_DATA
 
î∫o
;

137 
	#ENOSPC
 1

	)

140 #i‡
APR_HAVE_IPV6


141 
	#HAVE_GETADDRINFO
 1

	)

142 
	#HAVE_GETNAMEINFO
 1

	)

146 #i‡
_MSC_VER
 >1300 && 
_INTEGRAL_MAX_BITS
 >64 && !
	`deföed
(
_WIN32_WCE
)

147 
	#APR_INT64_STRFN
 
_°πoi64


	)

150 #i‡
APR_HAS_LARGE_FILES


151 #ifde‡
APR_INT64_STRFN


152 
	#APR_OFF_T_STRFN
 
APR_INT64_STRFN


	)

154 
	#APR_OFF_T_STRFN
 
≠r_°πoi64


	)

157 #i‡
	`deföed
(
_WIN32_WCE
)

158 
	#APR_OFF_T_STRFN
 
°πﬁ


	)

160 
	#APR_OFF_T_STRFN
 
°πoi


	)

165 
	#APR_DWORD_MAX
 0xFFFFFFFFUL

	)

170 
	~"../≠r_¥iv©e_comm⁄.h
"

	@locks/beos/proc_mutex.c

21 
	~"≠r_¨ch_¥oc_muãx.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_p‹èbÀ.h
"

25 
≠r_°©us_t
 
	$_¥oc_muãx_˛ónup
(* 
d©a
)

27 
≠r_¥oc_muãx_t
 *
lock
 = (≠r_¥oc_muãx_t*)
d©a
;

28 i‡(
lock
->
LockCou¡
 != 0) {

30 
	`©omic_add
(&
lock
->
LockCou¡
 , -1) > 1){

35 
	`ªÀa£_£m
 (
lock
->
Lock
);

38 
	`dñëe_£m
(
lock
->
Lock
);

39  
APR_SUCCESS
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

43 c⁄° *
‚ame
,

44 
≠r_lockmech_e
 
mech
,

45 
≠r_poﬁ_t
 *
poﬁ
)

47 
≠r_¥oc_muãx_t
 *
√w
;

48 
≠r_°©us_t
 
°©
 = 
APR_SUCCESS
;

50 i‡(
mech
 !
APR_LOCK_DEFAULT
) {

51  
APR_ENOTIMPL
;

54 
√w
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_proc_mutex_t));

55 i‡(
√w
 =
NULL
){

56  
APR_ENOMEM
;

59 i‡((
°©
 = 
	`¸óã_£m
(0, "APR_Lock")Ë< 
B_NO_ERROR
) {

60 
	`_¥oc_muãx_˛ónup
(
√w
);

61  
°©
;

63 
√w
->
LockCou¡
 = 0;

64 
√w
->
Lock
 = 
°©
;

65 
√w
->
poﬁ
 =Öool;

67 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w
->
poﬁ
, (*Íew, 
_¥oc_muãx_˛ónup
,

68 
≠r_poﬁ_˛ónup_nuŒ
);

70 (*
muãx
Ë
√w
;

71  
APR_SUCCESS
;

72 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

75 c⁄° *
‚ame
,

76 
≠r_poﬁ_t
 *
poﬁ
)

78  
APR_SUCCESS
;

79 
	}
}

81 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
)

83 
öt32
 
°©
;

85 i‡(
	`©omic_add
(&
muãx
->
LockCou¡
, 1) > 0) {

86 i‡((
°©
 = 
	`acquúe_£m
(
muãx
->
Lock
)Ë< 
B_NO_ERROR
) {

87 
	`©omic_add
(&
muãx
->
LockCou¡
, -1);

88  
°©
;

91  
APR_SUCCESS
;

92 
	}
}

94 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
)

96  
APR_ENOTIMPL
;

97 
	}
}

99 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
)

101 
öt32
 
°©
;

103 i‡(
	`©omic_add
(&
muãx
->
LockCou¡
, -1) > 1) {

104 i‡((
°©
 = 
	`ªÀa£_£m
(
muãx
->
Lock
)Ë< 
B_NO_ERROR
) {

105 
	`©omic_add
(&
muãx
->
LockCou¡
, 1);

106  
°©
;

109  
APR_SUCCESS
;

110 
	}
}

112 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
)

114 
≠r_°©us_t
 
°©
;

115 i‡((
°©
 = 
	`_¥oc_muãx_˛ónup
(
muãx
)Ë=
APR_SUCCESS
) {

116 
	`≠r_poﬁ_˛ónup_kûl
(
muãx
->
poﬁ
, muãx, 
_¥oc_muãx_˛ónup
);

117  
APR_SUCCESS
;

119  
°©
;

120 
	}
}

122 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_˛ónup
(*
muãx
)

124  
	`_¥oc_muãx_˛ónup
(
muãx
);

125 
	}
}

128 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
)

130  
NULL
;

131 
	}
}

133 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
)

136 
	}
}

138 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_de‚ame
()

141 
	}
}

143 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
¥oc_muãx
)

147 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

148 
≠r_¥oc_muãx_t
 *
pmuãx
)

150 
o•muãx
->
£m
 = 
pmuãx
->
Lock
;

151 
o•muãx
->
bí
 = 
pmuãx
->
LockCou¡
;

152  
APR_SUCCESS
;

153 
	}
}

155 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

156 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

157 
≠r_poﬁ_t
 *
poﬁ
)

159 i‡(
poﬁ
 =
NULL
) {

160  
APR_ENOPOOL
;

162 i‡((*
pmuãx
Ë=
NULL
) {

163 (*
pmuãx
Ë(
≠r_¥oc_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_proc_mutex_t));

164 (*
pmuãx
)->
poﬁ
 =Öool;

166 (*
pmuãx
)->
Lock
 = 
o•muãx
->
£m
;

167 (*
pmuãx
)->
LockCou¡
 = 
o•muãx
->
bí
;

168  
APR_SUCCESS
;

169 
	}
}

	@locks/beos/thread_cond.c

17 
	~"≠r_¨ch_thªad_muãx.h
"

18 
	~"≠r_¨ch_thªad_c⁄d.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

22 
≠r_°©us_t
 
	$thªad_c⁄d_˛ónup
(*
d©a
)

24 
waôî
 *
w
;

25 
≠r_thªad_c⁄d_t
 *
c⁄d
 = (≠r_thªad_c⁄d_à*)
d©a
;

27 
	`acquúe_£m
(
c⁄d
->
lock
);

28 
	`dñëe_£m
(
c⁄d
->
lock
);

30  
APR_SUCCESS
;

31 
	}
}

33 
waôî_t
 *
	$make_waôî
(
≠r_poﬁ_t
 *
poﬁ
)

35 
waôî_t
 *
w
 = (waiter_t*)

36 
	`≠r_∑Œoc
(
poﬁ
, (
waôî_t
));

37 i‡(
w
 =
NULL
)

38  
NULL
;

40 
w
->
£m
 = 
	`¸óã_£m
(0, "apr conditional waiter");

41 i‡(
w
->
£m
 < 0)

42  
NULL
;

44 
	`APR_RING_ELEM_INIT
(
w
, 
lök
);

46  
w
;

47 
	}
}

49 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

50 
≠r_poﬁ_t
 *
poﬁ
)

52 
≠r_thªad_c⁄d_t
 *
√w_c⁄d
;

53 
£m_id
 
rv
;

54 
i
;

56 
√w_c⁄d
 = (
≠r_thªad_c⁄d_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_cond_t));

58 i‡(
√w_c⁄d
 =
NULL
)

59  
APR_ENOMEM
;

61 i‡((
rv
 = 
	`¸óã_£m
(1, "≠∏c⁄dôi⁄ÆÜock")Ë< 
B_OK
)

62  
rv
;

64 
√w_c⁄d
->
lock
 = 
rv
;

65 
√w_c⁄d
->
poﬁ
 =Öool;

66 
	`APR_RING_INIT
(&
√w_c⁄d
->
Æi°
, 
waôî_t
, 
lök
);

67 
	`APR_RING_INIT
(&
√w_c⁄d
->
Êi°
, 
waôî_t
, 
lök
);

69 
i
=0;i < 10 ;i++) {

70 
waôî_t
 *
nw
 = 
	`make_waôî
(
poﬁ
);

71 
	`APR_RING_INSERT_TAIL
(&
√w_c⁄d
->
Êi°
, 
nw
, 
waôî_t
, 
lök
);

74 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_c⁄d
->
poﬁ
,

75 (*)
√w_c⁄d
, 
thªad_c⁄d_˛ónup
,

76 
≠r_poﬁ_˛ónup_nuŒ
);

78 *
c⁄d
 = 
√w_c⁄d
;

79  
APR_SUCCESS
;

80 
	}
}

83 
≠r_°©us_t
 
	$do_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
, 
≠r_thªad_muãx_t
 *
muãx
,

84 
timeout
)

86 
waôî_t
 *
waô
;

87 
thªad_id
 
˘h
 = 
	`föd_thªad
(
NULL
);

88 
≠r_°©us_t
 
rv
;

89 
Êags
 = 
B_RELATIVE_TIMEOUT
;

92 i‡(
muãx
->
ow√r
 !
˘h
) {

94  
APR_EINVAL
;

97 
	`acquúe_£m
(
c⁄d
->
lock
);

98 
waô
 = 
	`APR_RING_FIRST
(&
c⁄d
->
Êi°
);

99 i‡(
waô
)

100 
	`APR_RING_REMOVE
(
waô
, 
lök
);

102 
waô
 = 
	`make_waôî
(
c⁄d
->
poﬁ
);

103 
	`APR_RING_INSERT_TAIL
(&
c⁄d
->
Æi°
, 
waô
, 
waôî_t
, 
lök
);

104 
c⁄d
->
c⁄dlock
 = 
muãx
;

105 
	`ªÀa£_£m
(
c⁄d
->
lock
);

107 
	`≠r_thªad_muãx_u∆ock
(
c⁄d
->
c⁄dlock
);

109 i‡(
timeout
 == 0)

110 
Êags
 = 0;

112 
rv
 = 
	`acquúe_£m_ëc
(
waô
->
£m
, 1, 
Êags
, 
timeout
);

114 
	`≠r_thªad_muãx_lock
(
c⁄d
->
c⁄dlock
);

116 i‡(
rv
 !
B_OK
)

117 i‡(
rv
 =
B_TIMED_OUT
)

118  
APR_TIMEUP
;

119  
rv
;

121 
	`acquúe_£m
(
c⁄d
->
lock
);

122 
	`APR_RING_REMOVE
(
waô
, 
lök
);

123 
	`APR_RING_INSERT_TAIL
(&
c⁄d
->
Êi°
, 
waô
, 
waôî_t
, 
lök
);

124 
	`ªÀa£_£m
(
c⁄d
->
lock
);

126  
APR_SUCCESS
;

127 
	}
}

129 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

130 
≠r_thªad_muãx_t
 *
muãx
)

132  
	`do_waô
(
c⁄d
, 
muãx
, 0);

133 
	}
}

135 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

136 
≠r_thªad_muãx_t
 *
muãx
,

137 
≠r_öãrvÆ_time_t
 
timeout
)

139  
	`do_waô
(
c⁄d
, 
muãx
, 
timeout
);

140 
	}
}

142 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

144 
waôî_t
 *
wake
;

146 
	`acquúe_£m
(
c⁄d
->
lock
);

147 i‡(!
	`APR_RING_EMPTY
(&
c⁄d
->
Æi°
, 
waôî_t
, 
lök
)) {

148 
wake
 = 
	`APR_RING_FIRST
(&
c⁄d
->
Æi°
);

149 
	`APR_RING_REMOVE
(
wake
, 
lök
);

150 
	`ªÀa£_£m
(
wake
->
£m
);

151 
	`APR_RING_INSERT_TAIL
(&
c⁄d
->
Êi°
, 
wake
, 
waôî_t
, 
lök
);

153 
	`ªÀa£_£m
(
c⁄d
->
lock
);

155  
APR_SUCCESS
;

156 
	}
}

158 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

160 
waôî_t
 *
wake
;

162 
	`acquúe_£m
(
c⁄d
->
lock
);

163 ! 
	`APR_RING_EMPTY
(&
c⁄d
->
Æi°
, 
waôî_t
, 
lök
)) {

164 
wake
 = 
	`APR_RING_FIRST
(&
c⁄d
->
Æi°
);

165 
	`APR_RING_REMOVE
(
wake
, 
lök
);

166 
	`ªÀa£_£m
(
wake
->
£m
);

167 
	`APR_RING_INSERT_TAIL
(&
c⁄d
->
Êi°
, 
wake
, 
waôî_t
, 
lök
);

169 
	`ªÀa£_£m
(
c⁄d
->
lock
);

171  
APR_SUCCESS
;

172 
	}
}

174 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

176 
≠r_°©us_t
 
°©
;

177 i‡((
°©
 = 
	`thªad_c⁄d_˛ónup
(
c⁄d
)Ë=
APR_SUCCESS
) {

178 
	`≠r_poﬁ_˛ónup_kûl
(
c⁄d
->
poﬁ
, c⁄d, 
thªad_c⁄d_˛ónup
);

179  
APR_SUCCESS
;

181  
°©
;

182 
	}
}

184 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_c⁄d
)

	@locks/beos/thread_mutex.c

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_p‹èbÀ.h
"

25 
≠r_°©us_t
 
	$_thªad_muãx_˛ónup
(* 
d©a
)

27 
≠r_thªad_muãx_t
 *
lock
 = (≠r_thªad_muãx_t*)
d©a
;

28 i‡(
lock
->
LockCou¡
 != 0) {

30 
	`©omic_add
(&
lock
->
LockCou¡
 , -1) > 1){

35 
	`ªÀa£_£m
 (
lock
->
Lock
);

38 
	`dñëe_£m
(
lock
->
Lock
);

39  
APR_SUCCESS
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

43 
Êags
,

44 
≠r_poﬁ_t
 *
poﬁ
)

46 
≠r_thªad_muãx_t
 *
√w_m
;

47 
≠r_°©us_t
 
°©
 = 
APR_SUCCESS
;

49 
√w_m
 = (
≠r_thªad_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_mutex_t));

50 i‡(
√w_m
 =
NULL
){

51  
APR_ENOMEM
;

54 i‡((
°©
 = 
	`¸óã_£m
(0, "APR_Lock")Ë< 
B_NO_ERROR
) {

55 
	`_thªad_muãx_˛ónup
(
√w_m
);

56  
°©
;

58 
√w_m
->
LockCou¡
 = 0;

59 
√w_m
->
Lock
 = 
°©
;

60 
√w_m
->
poﬁ
 =Öool;

65 
√w_m
->
√°ed
 = 
Êags
 & 
APR_THREAD_MUTEX_NESTED
;

67 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
, (*Íew_m, 
_thªad_muãx_˛ónup
,

68 
≠r_poﬁ_˛ónup_nuŒ
);

70 (*
muãx
Ë
√w_m
;

71  
APR_SUCCESS
;

72 
	}
}

74 #i‡
APR_HAS_CREATE_LOCKS_NP


75 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã_≈
(
≠r_thªad_muãx_t
 **
muãx
,

76 c⁄° *
‚ame
,

77 
≠r_lockmech_e_≈
 
mech
,

78 
≠r_poﬁ_t
 *
poﬁ
)

80  
APR_ENOTIMPL
;

81 
	}
}

84 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
)

86 
öt32
 
°©
;

87 
thªad_id
 
me
 = 
	`föd_thªad
(
NULL
);

89 i‡(
muãx
->
√°ed
 && muãx->
ow√r
 =
me
) {

90 
muãx
->
ow√r_ªf
++;

91  
APR_SUCCESS
;

94 i‡(
	`©omic_add
(&
muãx
->
LockCou¡
, 1) > 0) {

95 i‡((
°©
 = 
	`acquúe_£m
(
muãx
->
Lock
)Ë< 
B_NO_ERROR
) {

97 
	`©omic_add
(&
muãx
->
LockCou¡
, -1);

98  
°©
;

102 
muãx
->
ow√r
 = 
me
;

103 
muãx
->
ow√r_ªf
 = 1;

105  
APR_SUCCESS
;

106 
	}
}

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
)

110  
APR_ENOTIMPL
;

111 
	}
}

113 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
)

115 
öt32
 
°©
;

117 i‡(
muãx
->
√°ed
 && muãx->
ow√r
 =
	`föd_thªad
(
NULL
)) {

118 
muãx
->
ow√r_ªf
--;

119 i‡(
muãx
->
ow√r_ªf
 > 0)

120  
APR_SUCCESS
;

123 i‡(
	`©omic_add
(&
muãx
->
LockCou¡
, -1) > 1) {

124 i‡((
°©
 = 
	`ªÀa£_£m
(
muãx
->
Lock
)Ë< 
B_NO_ERROR
) {

125 
	`©omic_add
(&
muãx
->
LockCou¡
, 1);

126  
°©
;

130 
muãx
->
ow√r
 = -1;

131 
muãx
->
ow√r_ªf
 = 0;

133  
APR_SUCCESS
;

134 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
)

138 
≠r_°©us_t
 
°©
;

139 i‡((
°©
 = 
	`_thªad_muãx_˛ónup
(
muãx
)Ë=
APR_SUCCESS
) {

140 
	`≠r_poﬁ_˛ónup_kûl
(
muãx
->
poﬁ
, muãx, 
_thªad_muãx_˛ónup
);

141  
APR_SUCCESS
;

143  
°©
;

144 
	}
}

146 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_muãx
)

	@locks/beos/thread_rwlock.c

21 
	~"≠r_¨ch_thªad_rwlock.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_p‹èbÀ.h
"

25 
	#BIG_NUM
 100000

	)

27 
≠r_°©us_t
 
	$_thªad_rw_˛ónup
(* 
d©a
)

29 
≠r_thªad_rwlock_t
 *
muãx
 = (≠r_thªad_rwlock_t*)
d©a
;

31 i‡(
muãx
->
RódCou¡
 != 0) {

32 
	`©omic_add
(&
muãx
->
RódCou¡
 , -1) > 1){

33 
	`ªÀa£_£m
 (
muãx
->
Ród
);

36 i‡(
muãx
->
WrôeCou¡
 != 0) {

37 
	`©omic_add
(&
muãx
->
WrôeCou¡
 , -1) > 1){

38 
	`ªÀa£_£m
 (
muãx
->
Wrôe
);

41 i‡(
muãx
->
LockCou¡
 != 0) {

42 
	`©omic_add
(&
muãx
->
LockCou¡
 , -1) > 1){

43 
	`ªÀa£_£m
 (
muãx
->
Lock
);

47 
	`dñëe_£m
(
muãx
->
Ród
);

48 
	`dñëe_£m
(
muãx
->
Wrôe
);

49 
	`dñëe_£m
(
muãx
->
Lock
);

50  
APR_SUCCESS
;

51 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

54 
≠r_poﬁ_t
 *
poﬁ
)

56 
≠r_thªad_rwlock_t
 *
√w
;

58 
√w
 = (
≠r_thªad_rwlock_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_rwlock_t));

59 i‡(
√w
 =
NULL
){

60  
APR_ENOMEM
;

63 
√w
->
poﬁ
 =Öool;

65 
√w
->
RódCou¡
 = 0;

66 
√w
->
WrôeCou¡
 = 0;

67 
√w
->
LockCou¡
 = 0;

68 
√w
->
Ród
 = 
	`¸óã_£m
(0, "APR_ReadLock");

69 
√w
->
Wrôe
 = 
	`¸óã_£m
(0, "APR_WriteLock");

70 
√w
->
Lock
 = 
	`¸óã_£m
(0, "APR_Lock");

72 i‡(
√w
->
Lock
 < 0 ||Çew->
Ród
 < 0 ||Çew->
Wrôe
 < 0) {

73 
	`_thªad_rw_˛ónup
(
√w
);

77 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w
->
poﬁ
, (*Íew, 
_thªad_rw_˛ónup
,

78 
≠r_poﬁ_˛ónup_nuŒ
);

79 (*
rwlock
Ë
√w
;

80  
APR_SUCCESS
;

81 
	}
}

83 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

85 
öt32
 
rv
 = 
APR_SUCCESS
;

87 i‡(
	`föd_thªad
(
NULL
Ë=
rwlock
->
wrôî
) {

89 
rwlock
->
Ne°ed
++;

92 
öt32
 
r
 = 
	`©omic_add
(&
rwlock
->
RódCou¡
, 1);

93 i‡(
r
 < 0) {

95 
rv
 = 
	`acquúe_£m_ëc
(
rwlock
->
Ród
, 1, 
B_DO_NOT_RESCHEDULE
,

96 
B_INFINITE_TIMEOUT
);

100  
rv
;

101 
	}
}

103 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

105  
APR_ENOTIMPL
;

106 
	}
}

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

110 
rv
 = 
APR_SUCCESS
;

112 i‡(
	`föd_thªad
(
NULL
Ë=
rwlock
->
wrôî
) {

113 
rwlock
->
Ne°ed
++;

116 i‡(
	`©omic_add
(&
rwlock
->
LockCou¡
, 1) >= 1) {

118 
rv
 = 
	`acquúe_£m_ëc
(
rwlock
->
Lock
, 1, 
B_DO_NOT_RESCHEDULE
,

119 
B_INFINITE_TIMEOUT
);

121 i‡(
rv
 =
APR_SUCCESS
) {

125 
öt32
 
ªadîs
 = 
	`©omic_add
(&
rwlock
->
RódCou¡
, -
BIG_NUM
);

126 i‡(
ªadîs
 > 0) {

128 
rv
 = 
	`acquúe_£m_ëc
(
rwlock
->
Wrôe
, 
ªadîs
, 
B_DO_NOT_RESCHEDULE
,

129 
B_INFINITE_TIMEOUT
);

131 i‡(
rv
 =
APR_SUCCESS
)

132 
rwlock
->
wrôî
 = 
	`föd_thªad
(
NULL
);

136  
rv
;

137 
	}
}

139 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

141  
APR_ENOTIMPL
;

142 
	}
}

144 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

146 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

147 
öt32
 
ªadîs
;

150 i‡(
	`föd_thªad
(
NULL
Ë=
rwlock
->
wrôî
) {

152 i‡(
rwlock
->
Ne°ed
 > 1) {

154 
rwlock
->
Ne°ed
--;

155  
APR_SUCCESS
;

158 
ªadîs
 = 
	`©omic_add
(&
rwlock
->
RódCou¡
, 
BIG_NUM
) + BIG_NUM;

159 i‡(
ªadîs
 > 0) {

160 
rv
 = 
	`ªÀa£_£m_ëc
(
rwlock
->
Ród
, 
ªadîs
, 
B_DO_NOT_RESCHEDULE
);

162 i‡(
rv
 =
APR_SUCCESS
) {

163 
rwlock
->
wrôî
 = -1;

164 i‡(
	`©omic_add
(&
rwlock
->
LockCou¡
, -1) > 1) {

165 
rv
 = 
	`ªÀa£_£m_ëc
(
rwlock
->
Lock
, 1, 
B_DO_NOT_RESCHEDULE
);

170 i‡(
	`©omic_add
(&
rwlock
->
RódCou¡
, -1) < 0) {

172 
rv
 = 
	`ªÀa£_£m_ëc
(
rwlock
->
Wrôe
, 1, 
B_DO_NOT_RESCHEDULE
);

176  
rv
;

177 
	}
}

179 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

181 
≠r_°©us_t
 
°©
;

182 i‡((
°©
 = 
	`_thªad_rw_˛ónup
(
rwlock
)Ë=
APR_SUCCESS
) {

183 
	`≠r_poﬁ_˛ónup_kûl
(
rwlock
->
poﬁ
,Ñwlock, 
_thªad_rw_˛ónup
);

184  
APR_SUCCESS
;

186  
°©
;

187 
	}
}

189 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_rwlock
)

	@locks/netware/proc_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_¨ch_¥oc_muãx.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

23 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

24 c⁄° *
‚ame
,

25 
≠r_lockmech_e
 
mech
,

26 
≠r_poﬁ_t
 *
poﬁ
)

28 
≠r_°©us_t
 
ªt
;

29 
≠r_¥oc_muãx_t
 *
√w_muãx
 = 
NULL
;

30 
√w_muãx
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_proc_mutex_t));

32 if(
√w_muãx
 ==
NULL
) {

33  
APR_ENOMEM
;

36 
√w_muãx
->
poﬁ
 =Öool;

37 
ªt
 = 
	`≠r_thªad_muãx_¸óã
(&(
√w_muãx
->
muãx
), 
APR_THREAD_MUTEX_DEFAULT
, 
poﬁ
);

39 i‡(
ªt
 =
APR_SUCCESS
)

40 *
muãx
 = 
√w_muãx
;

42  
ªt
;

43 
	}
}

45 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

46 c⁄° *
‚ame
,

47 
≠r_poﬁ_t
 *
poﬁ
)

49  
APR_SUCCESS
;

50 
	}
}

52 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
)

54 i‡(
muãx
)

55  
	`≠r_thªad_muãx_lock
(
muãx
->mutex);

56  
APR_ENOLOCK
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
)

61 i‡(
muãx
)

62  
	`≠r_thªad_muãx_åylock
(
muãx
->mutex);

63  
APR_ENOLOCK
;

64 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
)

68 i‡(
muãx
)

69  
	`≠r_thªad_muãx_u∆ock
(
muãx
->mutex);

70  
APR_ENOLOCK
;

71 
	}
}

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_˛ónup
(*
muãx
)

75  
	`≠r_¥oc_muãx_de°roy
(
muãx
);

76 
	}
}

78 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
)

80 i‡(
muãx
)

81  
	`≠r_thªad_muãx_de°roy
(
muãx
->mutex);

82  
APR_ENOLOCK
;

83 
	}
}

85 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
)

87  
NULL
;

88 
	}
}

90 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
)

93 
	}
}

95 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_de‚ame
()

98 
	}
}

100 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
¥oc_muãx
)

104 
≠r_°©us_t
 
	$≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

105 
≠r_¥oc_muãx_t
 *
pmuãx
)

107 i‡(
pmuãx
)

108 
o•muãx
 = 
pmuãx
->
muãx
->mutex;

109  
APR_ENOLOCK
;

110 
	}
}

112 
≠r_°©us_t
 
	$≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

113 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

114 
≠r_poﬁ_t
 *
poﬁ
)

116  
APR_ENOTIMPL
;

117 
	}
}

	@locks/netware/thread_cond.c

17 
	~<nks/î∫o.h
>

19 
	~"≠r.h
"

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_¨ch_thªad_muãx.h
"

24 
	~"≠r_¨ch_thªad_c⁄d.h
"

25 
	~"≠r_p‹èbÀ.h
"

27 
≠r_°©us_t
 
	$thªad_c⁄d_˛ónup
(*
d©a
)

29 
≠r_thªad_c⁄d_t
 *
c⁄d
 = (≠r_thªad_c⁄d_à*)
d©a
;

31 
	`NXC⁄dFªe
(
c⁄d
->cond);

32  
APR_SUCCESS
;

33 
	}
}

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

36 
≠r_poﬁ_t
 *
poﬁ
)

38 
≠r_thªad_c⁄d_t
 *
√w_c⁄d
 = 
NULL
;

40 
√w_c⁄d
 = (
≠r_thªad_c⁄d_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_cond_t));

42 if(
√w_c⁄d
 ==
NULL
) {

43  
APR_ENOMEM
;

45 
√w_c⁄d
->
poﬁ
 =Öool;

47 
√w_c⁄d
->
c⁄d
 = 
	`NXC⁄dAŒoc
(
NULL
);

49 if(
√w_c⁄d
->
c⁄d
 =
NULL
)

50  
APR_ENOMEM
;

52 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_c⁄d
->
poﬁ
,Çew_cond,

53 (*)
thªad_c⁄d_˛ónup
,

54 
≠r_poﬁ_˛ónup_nuŒ
);

55 *
c⁄d
 = 
√w_c⁄d
;

56  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

60 
≠r_thªad_muãx_t
 *
muãx
)

62 i‡(
	`NXC⁄dWaô
(
c⁄d
->c⁄d, 
muãx
->mutex) != 0)

63  
APR_EINTR
;

64  
APR_SUCCESS
;

65 
	}
}

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

68 
≠r_thªad_muãx_t
 *
muãx
,

69 
≠r_öãrvÆ_time_t
 
timeout
){

70 i‡(
	`NXC⁄dTimedWaô
(
c⁄d
->c⁄d, 
muãx
->mutex,

71 (
timeout
*1000)/
	`NXGëSy°emTick
()Ë=
NX_ETIMEDOUT
) {

72  
APR_TIMEUP
;

74  
APR_SUCCESS
;

75 
	}
}

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

79 
	`NXC⁄dSig«l
(
c⁄d
->cond);

80  
APR_SUCCESS
;

81 
	}
}

83 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

85 
	`NXC⁄dBrﬂdˇ°
(
c⁄d
->cond);

86  
APR_SUCCESS
;

87 
	}
}

89 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

91 
≠r_°©us_t
 
°©
;

92 i‡((
°©
 = 
	`thªad_c⁄d_˛ónup
(
c⁄d
)Ë=
APR_SUCCESS
) {

93 
	`≠r_poﬁ_˛ónup_kûl
(
c⁄d
->
poﬁ
, c⁄d, 
thªad_c⁄d_˛ónup
);

94  
APR_SUCCESS
;

96  
°©
;

97 
	}
}

99 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_c⁄d
)

	@locks/netware/thread_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
≠r_°©us_t
 
	$thªad_muãx_˛ónup
(*
d©a
)

26 
≠r_thªad_muãx_t
 *
muãx
 = (≠r_thªad_muãx_à*)
d©a
;

28 
	`NXMuãxFªe
(
muãx
->mutex);

29  
APR_SUCCESS
;

30 
	}
}

32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

33 
Êags
,

34 
≠r_poﬁ_t
 *
poﬁ
)

36 
≠r_thªad_muãx_t
 *
√w_muãx
 = 
NULL
;

40 i‡(
Êags
 & 
APR_THREAD_MUTEX_UNNESTED
) {

41  
APR_ENOTIMPL
;

43 
√w_muãx
 = (
≠r_thªad_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_mutex_t));

45 if(
√w_muãx
 ==
NULL
) {

46  
APR_ENOMEM
;

48 
√w_muãx
->
poﬁ
 =Öool;

50 
√w_muãx
->
muãx
 = 
	`NXMuãxAŒoc
(
NX_MUTEX_RECURSIVE
, 0, 
NULL
);

52 if(
√w_muãx
->
muãx
 =
NULL
)

53  
APR_ENOMEM
;

55 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
,Çew_mutex,

56 (*)
thªad_muãx_˛ónup
,

57 
≠r_poﬁ_˛ónup_nuŒ
);

58 *
muãx
 = 
√w_muãx
;

59  
APR_SUCCESS
;

60 
	}
}

62 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
)

64 
	`NXLock
(
muãx
->mutex);

65  
APR_SUCCESS
;

66 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
)

70 i‡(!
	`NXTryLock
(
muãx
->mutex))

71  
APR_EBUSY
;

72  
APR_SUCCESS
;

73 
	}
}

75 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
)

77 
	`NXU∆ock
(
muãx
->mutex);

78  
APR_SUCCESS
;

79 
	}
}

81 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
)

83 
≠r_°©us_t
 
°©
;

84 i‡((
°©
 = 
	`thªad_muãx_˛ónup
(
muãx
)Ë=
APR_SUCCESS
) {

85 
	`≠r_poﬁ_˛ónup_kûl
(
muãx
->
poﬁ
, muãx, 
thªad_muãx_˛ónup
);

86  
APR_SUCCESS
;

88  
°©
;

89 
	}
}

91 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_muãx
)

	@locks/netware/thread_rwlock.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_¨ch_thªad_rwlock.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
≠r_°©us_t
 
	$thªad_rwlock_˛ónup
(*
d©a
)

26 
≠r_thªad_rwlock_t
 *
rwlock
 = (≠r_thªad_rwlock_à*)
d©a
;

28 
	`NXRwLockFªe
 (
rwlock
->rwlock);

29  
APR_SUCCESS
;

30 
	}
}

32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

33 
≠r_poﬁ_t
 *
poﬁ
)

35 
≠r_thªad_rwlock_t
 *
√w_rwlock
 = 
NULL
;

37 
NXHõørchy_t
 
hõørchy
 = 1;

38 
NXLockInfo_t
 *
öfo
;

40 
√w_rwlock
 = (
≠r_thªad_rwlock_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_rwlock_t));

42 if(
√w_rwlock
 ==
NULL
) {

43  
APR_ENOMEM
;

45 
√w_rwlock
->
poﬁ
 =Öool;

47 
öfo
 = (
NXLockInfo_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (NXLockInfo_t));

48 
√w_rwlock
->
rwlock
 = 
	`NXRwLockAŒoc
(
hõørchy
, 
öfo
);

49 if(
√w_rwlock
->
rwlock
 =
NULL
)

50  
APR_ENOMEM
;

52 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_rwlock
->
poﬁ
,Çew_rwlock, 
thªad_rwlock_˛ónup
,

53 
≠r_poﬁ_˛ónup_nuŒ
);

54 *
rwlock
 = 
√w_rwlock
;

56  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

61 
	`NXRdLock
(
rwlock
->rwlock);

62  
APR_SUCCESS
;

63 
	}
}

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

67 i‡(!
	`NXTryRdLock
(
rwlock
->rwlock))

68  
APR_EBUSY
;

69  
APR_SUCCESS
;

70 
	}
}

72 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

74 
	`NXWrLock
(
rwlock
->rwlock);

75  
APR_SUCCESS
;

76 
	}
}

78 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

80 i‡(!
	`NXTryWrLock
(
rwlock
->rwlock))

81  
APR_EBUSY
;

82  
APR_SUCCESS
;

83 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

87 
	`NXRwU∆ock
(
rwlock
->rwlock);

88  
APR_SUCCESS
;

89 
	}
}

91 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

93 
≠r_°©us_t
 
°©
;

94 i‡((
°©
 = 
	`thªad_rwlock_˛ónup
(
rwlock
)Ë=
APR_SUCCESS
) {

95 
	`≠r_poﬁ_˛ónup_kûl
(
rwlock
->
poﬁ
,Ñwlock, 
thªad_rwlock_˛ónup
);

96  
APR_SUCCESS
;

98  
°©
;

99 
	}
}

101 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_rwlock
)

	@locks/os2/proc_mutex.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_lib.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_¥oc_muãx.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~<°rög.h
>

24 
	~<°ddef.h
>

26 
	#CuºítTid
 (*
_thªadid
)

	)

28 *
	$fixed_«me
(c⁄° *
‚ame
, 
≠r_poﬁ_t
 *
poﬁ
)

30 *
£m«me
;

32 i‡(
‚ame
 =
NULL
)

33 
£m«me
 = 
NULL
;

36 *
‚ame
 == '/' || *fname == '\\') {

37 
‚ame
++;

40 
£m«me
 = 
	`≠r_p°rˇt
(
poﬁ
, "/SEM32/", 
‚ame
, 
NULL
);

42 i‡(
£m«me
[8] == ':') {

43 
£m«me
[8] = '$';

47  
£m«me
;

48 
	}
}

52 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_˛ónup
(*
vmuãx
)

54 
≠r_¥oc_muãx_t
 *
muãx
 = 
vmuãx
;

55  
	`≠r_¥oc_muãx_de°roy
(
muãx
);

56 
	}
}

58 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
)

60  
NULL
;

61 
	}
}

63 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
)

66 
	}
}

68 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_de‚ame
()

71 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

75 c⁄° *
‚ame
,

76 
≠r_lockmech_e
 
mech
,

77 
≠r_poﬁ_t
 *
poﬁ
)

79 
≠r_¥oc_muãx_t
 *
√w
;

80 
ULONG
 
rc
;

81 *
£m«me
;

83 i‡(
mech
 !
APR_LOCK_DEFAULT
) {

84  
APR_ENOTIMPL
;

87 
√w
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

88 
√w
->
poﬁ
 =Öool;

89 
√w
->
ow√r
 = 0;

90 
√w
->
lock_cou¡
 = 0;

91 *
muãx
 = 
√w
;

93 
£m«me
 = 
	`fixed_«me
(
‚ame
, 
poﬁ
);

94 
rc
 = 
	`DosCª©eMuãxSem
(
£m«me
, &(
√w
->
hMuãx
), 
DC_SEM_SHARED
, 
FALSE
);

96 i‡(!
rc
) {

97 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
√w
, 
≠r_¥oc_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

100  
	`APR_FROM_OS_ERROR
(
rc
);

101 
	}
}

105 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

106 c⁄° *
‚ame
,

107 
≠r_poﬁ_t
 *
poﬁ
)

109 
≠r_¥oc_muãx_t
 *
√w
;

110 
ULONG
 
rc
;

111 *
£m«me
;

113 
√w
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

114 
√w
->
poﬁ
 =Öool;

115 
√w
->
ow√r
 = 0;

116 
√w
->
lock_cou¡
 = 0;

118 
£m«me
 = 
	`fixed_«me
(
‚ame
, 
poﬁ
);

119 
rc
 = 
	`DosO≥nMuãxSem
(
£m«me
, &(
√w
->
hMuãx
));

120 *
muãx
 = 
√w
;

122 i‡(!
rc
) {

123 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
√w
, 
≠r_¥oc_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

126  
	`APR_FROM_OS_ERROR
(
rc
);

127 
	}
}

131 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
)

133 
ULONG
 
rc
 = 
	`DosReque°MuãxSem
(
muãx
->
hMuãx
, 
SEM_INDEFINITE_WAIT
);

135 i‡(
rc
 == 0) {

136 
muãx
->
ow√r
 = 
CuºítTid
;

137 
muãx
->
lock_cou¡
++;

140  
	`APR_FROM_OS_ERROR
(
rc
);

141 
	}
}

145 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
)

147 
ULONG
 
rc
 = 
	`DosReque°MuãxSem
(
muãx
->
hMuãx
, 
SEM_IMMEDIATE_RETURN
);

149 i‡(
rc
 == 0) {

150 
muãx
->
ow√r
 = 
CuºítTid
;

151 
muãx
->
lock_cou¡
++;

154  
	`APR_FROM_OS_ERROR
(
rc
);

155 
	}
}

159 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
)

161 
ULONG
 
rc
;

163 i‡(
muãx
->
ow√r
 =
CuºítTid
 && muãx->
lock_cou¡
 > 0) {

164 
muãx
->
lock_cou¡
--;

165 
rc
 = 
	`DosRñó£MuãxSem
(
muãx
->
hMuãx
);

166  
	`APR_FROM_OS_ERROR
(
rc
);

169  
APR_SUCCESS
;

170 
	}
}

174 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
)

176 
ULONG
 
rc
;

177 
≠r_°©us_t
 
°©us
 = 
APR_SUCCESS
;

179 i‡(
muãx
->
ow√r
 =
CuºítTid
) {

180 
muãx
->
lock_cou¡
 > 0 && 
°©us
 =
APR_SUCCESS
) {

181 
°©us
 = 
	`≠r_¥oc_muãx_u∆ock
(
muãx
);

185 i‡(
°©us
 !
APR_SUCCESS
) {

186  
°©us
;

189 i‡(
muãx
->
hMuãx
 == 0) {

190  
APR_SUCCESS
;

193 
rc
 = 
	`DosClo£MuãxSem
(
muãx
->
hMuãx
);

195 i‡(!
rc
) {

196 
muãx
->
hMuãx
 = 0;

199  
	`APR_FROM_OS_ERROR
(
rc
);

200 
	}
}

204 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
¥oc_muãx
)

210 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

211 
≠r_¥oc_muãx_t
 *
pmuãx
)

213 *
o•muãx
 = 
pmuãx
->
hMuãx
;

214  
APR_ENOTIMPL
;

215 
	}
}

219 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

220 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

221 
≠r_poﬁ_t
 *
poﬁ
)

223 
≠r_¥oc_muãx_t
 *
√w
;

225 
√w
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

226 
√w
->
poﬁ
 =Öool;

227 
√w
->
ow√r
 = 0;

228 
√w
->
lock_cou¡
 = 0;

229 
√w
->
hMuãx
 = *
o•muãx
;

230 *
pmuãx
 = 
√w
;

232  
APR_SUCCESS
;

233 
	}
}

	@locks/os2/thread_cond.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_lib.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_¨ch_thªad_c⁄d.h
"

23 
	~"≠r_¨ch_fûe_io.h
"

24 
	~<°rög.h
>

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

27 
≠r_poﬁ_t
 *
poﬁ
)

29  
APR_ENOTIMPL
;

30 
	}
}

32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

33 
≠r_thªad_muãx_t
 *
muãx
)

35  
APR_ENOTIMPL
;

36 
	}
}

38 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

39 
≠r_thªad_muãx_t
 *
muãx
,

40 
≠r_öãrvÆ_time_t
 
timeout
){

41  
APR_ENOTIMPL
;

42 
	}
}

44 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

46  
APR_ENOTIMPL
;

47 
	}
}

49 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

51  
APR_ENOTIMPL
;

52 
	}
}

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

56  
APR_ENOTIMPL
;

57 
	}
}

59 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_c⁄d
)

	@locks/os2/thread_mutex.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_lib.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~<°rög.h
>

24 
	~<°ddef.h
>

26 
≠r_°©us_t
 
	$thªad_muãx_˛ónup
(*
themuãx
)

28 
≠r_thªad_muãx_t
 *
muãx
 = 
themuãx
;

29  
	`≠r_thªad_muãx_de°roy
(
muãx
);

30 
	}
}

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

38 
Êags
,

39 
≠r_poﬁ_t
 *
poﬁ
)

41 
≠r_thªad_muãx_t
 *
√w_muãx
;

42 
ULONG
 
rc
;

44 
√w_muãx
 = (
≠r_thªad_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_mutex_t));

45 
√w_muãx
->
poﬁ
 =Öool;

47 
rc
 = 
	`DosCª©eMuãxSem
(
NULL
, &(
√w_muãx
->
hMuãx
), 0, 
FALSE
);

48 *
muãx
 = 
√w_muãx
;

50 i‡(!
rc
)

51 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
√w_muãx
, 
thªad_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

53  
	`APR_OS2_STATUS
(
rc
);

54 
	}
}

58 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
)

60 
ULONG
 
rc
 = 
	`DosReque°MuãxSem
(
muãx
->
hMuãx
, 
SEM_INDEFINITE_WAIT
);

61  
	`APR_OS2_STATUS
(
rc
);

62 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
)

68 
ULONG
 
rc
 = 
	`DosReque°MuãxSem
(
muãx
->
hMuãx
, 
SEM_IMMEDIATE_RETURN
);

69  
	`APR_OS2_STATUS
(
rc
);

70 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
)

76 
ULONG
 
rc
 = 
	`DosRñó£MuãxSem
(
muãx
->
hMuãx
);

77  
	`APR_OS2_STATUS
(
rc
);

78 
	}
}

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
)

84 
ULONG
 
rc
;

86 i‡(
muãx
->
hMuãx
 == 0)

87  
APR_SUCCESS
;

89 
	`DosRñó£MuãxSem
(
muãx
->
hMuãx
) == 0);

91 
rc
 = 
	`DosClo£MuãxSem
(
muãx
->
hMuãx
);

93 i‡(!
rc
) {

94 
muãx
->
hMuãx
 = 0;

95  
APR_SUCCESS
;

98  
	`APR_FROM_OS_ERROR
(
rc
);

99 
	}
}

101 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_muãx
)

	@locks/os2/thread_rwlock.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_lib.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_thªad_rwlock.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~<°rög.h
>

25 
≠r_°©us_t
 
	$thªad_rwlock_˛ónup
(*
thîwlock
)

27 
≠r_thªad_rwlock_t
 *
rwlock
 = 
thîwlock
;

28  
	`≠r_thªad_rwlock_de°roy
(
rwlock
);

29 
	}
}

33 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

34 
≠r_poﬁ_t
 *
poﬁ
)

36 
≠r_thªad_rwlock_t
 *
√w_rwlock
;

37 
ULONG
 
rc
;

39 
√w_rwlock
 = (
≠r_thªad_rwlock_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_rwlock_t));

40 
√w_rwlock
->
poﬁ
 =Öool;

41 
√w_rwlock
->
ªadîs
 = 0;

43 
rc
 = 
	`DosCª©eMuãxSem
(
NULL
, &(
√w_rwlock
->
wrôe_lock
), 0, 
FALSE
);

45 i‡(
rc
)

46  
	`APR_FROM_OS_ERROR
(
rc
);

48 
rc
 = 
	`DosCª©eEvítSem
(
NULL
, &(
√w_rwlock
->
ªad_d⁄e
), 0, 
FALSE
);

50 i‡(
rc
)

51  
	`APR_FROM_OS_ERROR
(
rc
);

53 *
rwlock
 = 
√w_rwlock
;

55 i‡(!
rc
)

56 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
√w_rwlock
, 
thªad_rwlock_˛ónup
,

57 
≠r_poﬁ_˛ónup_nuŒ
);

59  
	`APR_FROM_OS_ERROR
(
rc
);

60 
	}
}

64 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

66 
ULONG
 
rc
, 
po°s
;

68 
rc
 = 
	`DosReque°MuãxSem
(
rwlock
->
wrôe_lock
, 
SEM_INDEFINITE_WAIT
);

70 i‡(
rc
)

71  
	`APR_FROM_OS_ERROR
(
rc
);

77 
rwlock
->
ªadîs
++;

78 
	`DosRe£tEvítSem
(
rwlock
->
ªad_d⁄e
, &
po°s
);

79 
rc
 = 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
);

80  
	`APR_FROM_OS_ERROR
(
rc
);

81 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

88 
ULONG
 
rc
, 
po°s
;

90 
rc
 = 
	`DosReque°MuãxSem
(
rwlock
->
wrôe_lock
, 
SEM_IMMEDIATE_RETURN
);

92 i‡(
rc
)

93  
	`APR_FROM_OS_ERROR
(
rc
);

95 
rwlock
->
ªadîs
++;

96 
	`DosRe£tEvítSem
(
rwlock
->
ªad_d⁄e
, &
po°s
);

97 
rc
 = 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
);

98  
	`APR_FROM_OS_ERROR
(
rc
);

99 
	}
}

103 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

105 
ULONG
 
rc
;

107 
rc
 = 
	`DosReque°MuãxSem
(
rwlock
->
wrôe_lock
, 
SEM_INDEFINITE_WAIT
);

109 i‡(
rc
)

110  
	`APR_FROM_OS_ERROR
(
rc
);

116 i‡(
rwlock
->
ªadîs
) {

117 
rc
 = 
	`DosWaôEvítSem
(
rwlock
->
ªad_d⁄e
, 
SEM_INDEFINITE_WAIT
);

119 i‡(
rc
)

120 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
);

123  
	`APR_FROM_OS_ERROR
(
rc
);

124 
	}
}

128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

130 
ULONG
 
rc
;

132 
rc
 = 
	`DosReque°MuãxSem
(
rwlock
->
wrôe_lock
, 
SEM_IMMEDIATE_RETURN
);

134 i‡(
rc
)

135  
	`APR_FROM_OS_ERROR
(
rc
);

141 i‡(
rwlock
->
ªadîs
) {

143 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
);

144 
rc
 = 
ERROR_TIMEOUT
;

147  
	`APR_FROM_OS_ERROR
(
rc
);

148 
	}
}

152 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

154 
ULONG
 
rc
;

157 
rc
 = 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
);

159 i‡(
rc
 =
ERROR_NOT_OWNER
) {

161 i‡(
rwlock
->
ªadîs
) {

162 
	`DosE¡îCrôSec
();

163 
rwlock
->
ªadîs
--;

165 i‡(
rwlock
->
ªadîs
 == 0) {

166 
	`DosPo°EvítSem
(
rwlock
->
ªad_d⁄e
);

169 
	`DosExôCrôSec
();

170 
rc
 = 0;

174  
	`APR_FROM_OS_ERROR
(
rc
);

175 
	}
}

179 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

181 
ULONG
 
rc
;

183 i‡(
rwlock
->
wrôe_lock
 == 0)

184  
APR_SUCCESS
;

186 
	`DosRñó£MuãxSem
(
rwlock
->
wrôe_lock
) == 0);

188 
rc
 = 
	`DosClo£MuãxSem
(
rwlock
->
wrôe_lock
);

190 i‡(!
rc
) {

191 
rwlock
->
wrôe_lock
 = 0;

192 
	`DosClo£EvítSem
(
rwlock
->
ªad_d⁄e
);

193  
APR_SUCCESS
;

196  
	`APR_FROM_OS_ERROR
(
rc
);

197 
	}
}

199 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_rwlock
)

	@locks/unix/global_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_¨ch_globÆ_muãx.h
"

20 
	~"≠r_¥oc_muãx.h
"

21 
	~"≠r_thªad_muãx.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
≠r_°©us_t
 
	$globÆ_muãx_˛ónup
(*
d©a
)

26 
≠r_globÆ_muãx_t
 *
m
 = (≠r_globÆ_muãx_à*)
d©a
;

27 
≠r_°©us_t
 
rv
;

29 
rv
 = 
	`≠r_¥oc_muãx_de°roy
(
m
->
¥oc_muãx
);

31 #i‡
APR_HAS_THREADS


32 i‡(
m
->
thªad_muãx
) {

33 i‡(
rv
 !
APR_SUCCESS
) {

34 ()
	`≠r_thªad_muãx_de°roy
(
m
->
thªad_muãx
);

37 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
m
->
thªad_muãx
);

42  
rv
;

43 
	}
}

45 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_¸óã
(
≠r_globÆ_muãx_t
 **
muãx
,

46 c⁄° *
‚ame
,

47 
≠r_lockmech_e
 
mech
,

48 
≠r_poﬁ_t
 *
poﬁ
)

50 
≠r_°©us_t
 
rv
;

51 
≠r_globÆ_muãx_t
 *
m
;

53 
m
 = (
≠r_globÆ_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (*m));

54 
m
->
poﬁ
 =Öool;

56 
rv
 = 
	`≠r_¥oc_muãx_¸óã
(&
m
->
¥oc_muãx
, 
‚ame
, 
mech
, m->
poﬁ
);

57 i‡(
rv
 !
APR_SUCCESS
) {

58  
rv
;

61 #i‡
APR_HAS_THREADS


62 i‡(
m
->
¥oc_muãx
->
öãr_mëh
->
Êags
 & 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
) {

63 
m
->
thªad_muãx
 = 
NULL
;

66 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
m
->
thªad_muãx
,

67 
APR_THREAD_MUTEX_DEFAULT
, 
m
->
poﬁ
);

68 i‡(
rv
 !
APR_SUCCESS
) {

69 
rv
 = 
	`≠r_¥oc_muãx_de°roy
(
m
->
¥oc_muãx
);

70  
rv
;

75 
	`≠r_poﬁ_˛ónup_ªgi°î
(
m
->
poﬁ
, (*)m,

76 
globÆ_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

77 *
muãx
 = 
m
;

78  
APR_SUCCESS
;

79 
	}
}

81 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_chûd_öô
(

82 
≠r_globÆ_muãx_t
 **
muãx
,

83 c⁄° *
‚ame
,

84 
≠r_poﬁ_t
 *
poﬁ
)

86 
≠r_°©us_t
 
rv
;

88 
rv
 = 
	`≠r_¥oc_muãx_chûd_öô
(&((*
muãx
)->
¥oc_muãx
), 
‚ame
, 
poﬁ
);

89  
rv
;

90 
	}
}

92 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_lock
(
≠r_globÆ_muãx_t
 *
muãx
)

94 
≠r_°©us_t
 
rv
;

96 #i‡
APR_HAS_THREADS


97 i‡(
muãx
->
thªad_muãx
) {

98 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
->
thªad_muãx
);

99 i‡(
rv
 !
APR_SUCCESS
) {

100  
rv
;

105 
rv
 = 
	`≠r_¥oc_muãx_lock
(
muãx
->
¥oc_muãx
);

107 #i‡
APR_HAS_THREADS


108 i‡(
rv
 !
APR_SUCCESS
) {

109 i‡(
muãx
->
thªad_muãx
) {

110 ()
	`≠r_thªad_muãx_u∆ock
(
muãx
->
thªad_muãx
);

115  
rv
;

116 
	}
}

118 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_åylock
(
≠r_globÆ_muãx_t
 *
muãx
)

120 
≠r_°©us_t
 
rv
;

122 #i‡
APR_HAS_THREADS


123 i‡(
muãx
->
thªad_muãx
) {

124 
rv
 = 
	`≠r_thªad_muãx_åylock
(
muãx
->
thªad_muãx
);

125 i‡(
rv
 !
APR_SUCCESS
) {

126  
rv
;

131 
rv
 = 
	`≠r_¥oc_muãx_åylock
(
muãx
->
¥oc_muãx
);

133 #i‡
APR_HAS_THREADS


134 i‡(
rv
 !
APR_SUCCESS
) {

135 i‡(
muãx
->
thªad_muãx
) {

136 ()
	`≠r_thªad_muãx_u∆ock
(
muãx
->
thªad_muãx
);

141  
rv
;

142 
	}
}

144 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_u∆ock
(
≠r_globÆ_muãx_t
 *
muãx
)

146 
≠r_°©us_t
 
rv
;

148 
rv
 = 
	`≠r_¥oc_muãx_u∆ock
(
muãx
->
¥oc_muãx
);

149 #i‡
APR_HAS_THREADS


150 i‡(
muãx
->
thªad_muãx
) {

151 i‡(
rv
 !
APR_SUCCESS
) {

152 ()
	`≠r_thªad_muãx_u∆ock
(
muãx
->
thªad_muãx
);

155 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
->
thªad_muãx
);

159  
rv
;

160 
	}
}

162 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_globÆ_muãx_gë
(
≠r_os_globÆ_muãx_t
 *
o•muãx
,

163 
≠r_globÆ_muãx_t
 *
pmuãx
)

165 
o•muãx
->
poﬁ
 = 
pmuãx
->pool;

166 
o•muãx
->
¥oc_muãx
 = 
pmuãx
->proc_mutex;

167 #i‡
APR_HAS_THREADS


168 
o•muãx
->
thªad_muãx
 = 
pmuãx
->thread_mutex;

170  
APR_SUCCESS
;

171 
	}
}

173 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_globÆ_muãx_de°roy
(
≠r_globÆ_muãx_t
 *
muãx
)

175  
	`≠r_poﬁ_˛ónup_run
(
muãx
->
poﬁ
, muãx, 
globÆ_muãx_˛ónup
);

176 
	}
}

178 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_globÆ_muãx_lockfûe
(
≠r_globÆ_muãx_t
 *
muãx
)

180  
	`≠r_¥oc_muãx_lockfûe
(
muãx
->
¥oc_muãx
);

181 
	}
}

183 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_globÆ_muãx_«me
(
≠r_globÆ_muãx_t
 *
muãx
)

185  
	`≠r_¥oc_muãx_«me
(
muãx
->
¥oc_muãx
);

186 
	}
}

188 
APR_POOL_IMPLEMENT_ACCESSOR
(
globÆ_muãx
)

	@locks/unix/proc_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_¨ch_¥oc_muãx.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~"≠r_hash.h
"

23 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
)

25  
	`≠r_poﬁ_˛ónup_run
(
muãx
->
poﬁ
, muãx, 
≠r_¥oc_muãx_˛ónup
);

26 
	}
}

28 #i‡
APR_HAS_POSIXSEM_SERIALIZE
 || 
APR_HAS_FCNTL_SERIALIZE
 || \

29 
	gAPR_HAS_PROC_PTHREAD_SERIALIZE
 || 
APR_HAS_SYSVSEM_SERIALIZE


30 
≠r_°©us_t
 
	$¥oc_muãx_no_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

31 
≠r_poﬁ_t
 *
c⁄t
,

32 c⁄° *
‚ame
)

34  
APR_SUCCESS
;

35 
	}
}

38 #i‡
APR_HAS_POSIXSEM_SERIALIZE


40 #i‚de‡
SEM_FAILED


41 
	#SEM_FAILED
 (-1)

	)

44 
≠r_°©us_t
 
	$¥oc_muãx_posix_˛ónup
(*
muãx_
)

46 
≠r_¥oc_muãx_t
 *
muãx
 = 
muãx_
;

48 i‡(
	`£m_˛o£
(
muãx
->
p£m_öãΩroc
) < 0) {

49  
î∫o
;

52  
APR_SUCCESS
;

53 
	}
}

55 
	$rshash
 (*
p
) {

57 
b
 = 378551;

58 
a
 = 63689;

59 
ªtvÆ
 = 0;

61  ; *
p
;Ö++)

63 
ªtvÆ
 =ÑëvÆ * 
a
 + (*
p
);

64 
a
 *
b
;

67  
ªtvÆ
;

68 
	}
}

70 
≠r_°©us_t
 
	$¥oc_muãx_posix_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
,

71 c⁄° *
‚ame
)

73 
	#APR_POSIXSEM_NAME_MIN
 13

	)

74 
£m_t
 *
p£m
;

75 
£m«me
[32];

77 
√w_muãx
->
öãΩroc
 = 
	`≠r_∑Œoc
“ew_muãx->
poﬁ
,

78 (*
√w_muãx
->
öãΩroc
));

101 i‡(
‚ame
) {

102 
≠r_ssize_t
 
Êí
 = 
	`°æí
(
‚ame
);

103 *
p
 = 
	`≠r_p°∫dup
(
√w_muãx
->
poﬁ
, 
‚ame
, 
	`°æí
(fname));

104 
h1
, 
h2
;

105 
h1
 = 
	`≠r_hashfunc_deÁu…
((c⁄° *)
p
, &
Êí
);

106 
h2
 = 
	`rshash
(
p
);

107 
	`≠r_¢¥ötf
(
£m«me
, (£m«me), "/ApR.%xH%x", 
h1
, 
h2
);

109 
≠r_time_t
 
now
;

110 
£c
;

111 
u£c
;

112 
now
 = 
	`≠r_time_now
();

113 
£c
 = 
	`≠r_time_£c
(
now
);

114 
u£c
 = 
	`≠r_time_u£c
(
now
);

115 
	`≠r_¢¥ötf
(
£m«me
, (£m«me), "/ApR.%lxZ%lx", 
£c
, 
u£c
);

117 
p£m
 = 
	`£m_›í
(
£m«me
, 
O_CREAT
 | 
O_EXCL
, 0644, 1);

118 i‡(
p£m
 =(
£m_t
 *)
SEM_FAILED
) {

119 i‡(
î∫o
 =
ENAMETOOLONG
) {

121 
£m«me
[
APR_POSIXSEM_NAME_MIN
] = '\0';

123  
î∫o
;

125 
p£m
 = 
	`£m_›í
(
£m«me
, 
O_CREAT
 | 
O_EXCL
, 0644, 1);

128 i‡(
p£m
 =(
£m_t
 *)
SEM_FAILED
) {

129  
î∫o
;

132 
	`£m_u∆ök
(
£m«me
);

133 
√w_muãx
->
p£m_öãΩroc
 = 
p£m
;

134 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
“ew_muãx->
poﬁ
, 
£m«me
);

135 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
, (*)new_mutex,

136 
≠r_¥oc_muãx_˛ónup
,

137 
≠r_poﬁ_˛ónup_nuŒ
);

138  
APR_SUCCESS
;

139 
	}
}

141 
≠r_°©us_t
 
	$¥oc_muãx_posix_acquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

143 i‡(
	`£m_waô
(
muãx
->
p£m_öãΩroc
) < 0) {

144  
î∫o
;

146 
muãx
->
cuº_locked
 = 1;

147  
APR_SUCCESS
;

148 
	}
}

150 
≠r_°©us_t
 
	$¥oc_muãx_posix_åyacquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

152 i‡(
	`£m_åywaô
(
muãx
->
p£m_öãΩroc
) < 0) {

153 i‡(
î∫o
 =
EAGAIN
) {

154  
APR_EBUSY
;

156  
î∫o
;

158 
muãx
->
cuº_locked
 = 1;

159  
APR_SUCCESS
;

160 
	}
}

162 
≠r_°©us_t
 
	$¥oc_muãx_posix_ªÀa£
(
≠r_¥oc_muãx_t
 *
muãx
)

164 
muãx
->
cuº_locked
 = 0;

165 i‡(
	`£m_po°
(
muãx
->
p£m_öãΩroc
) < 0) {

168  
î∫o
;

170  
APR_SUCCESS
;

171 
	}
}

173 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	gmuãx_posix£m_mëhods
 =

175 #i‡
APR_PROCESS_LOCK_IS_GLOBAL
 || !
APR_HAS_THREADS
 || 
deföed
(
POSIXSEM_IS_GLOBAL
)

176 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
,

180 
¥oc_muãx_posix_¸óã
,

181 
¥oc_muãx_posix_acquúe
,

182 
¥oc_muãx_posix_åyacquúe
,

183 
¥oc_muãx_posix_ªÀa£
,

184 
¥oc_muãx_posix_˛ónup
,

185 
¥oc_muãx_no_chûd_öô
,

191 #i‡
APR_HAS_SYSVSEM_SERIALIZE


193 
£mbuf
 
	g¥oc_muãx_›_⁄
;

194 
£mbuf
 
	g¥oc_muãx_›_åy
;

195 
£mbuf
 
	g¥oc_muãx_›_off
;

197 
	$¥oc_muãx_sysv_£tup
()

199 
¥oc_muãx_›_⁄
.
£m_num
 = 0;

200 
¥oc_muãx_›_⁄
.
£m_›
 = -1;

201 
¥oc_muãx_›_⁄
.
£m_Êg
 = 
SEM_UNDO
;

202 
¥oc_muãx_›_åy
.
£m_num
 = 0;

203 
¥oc_muãx_›_åy
.
£m_›
 = -1;

204 
¥oc_muãx_›_åy
.
£m_Êg
 = 
SEM_UNDO
 | 
IPC_NOWAIT
;

205 
¥oc_muãx_›_off
.
£m_num
 = 0;

206 
¥oc_muãx_›_off
.
£m_›
 = 1;

207 
¥oc_muãx_›_off
.
£m_Êg
 = 
SEM_UNDO
;

208 
	}
}

210 
≠r_°©us_t
 
	$¥oc_muãx_sysv_˛ónup
(*
muãx_
)

212 
≠r_¥oc_muãx_t
 *
muãx
=
muãx_
;

213 
£mun
 
ick
;

215 i‡(
muãx
->
öãΩroc
->
fûedes
 != -1) {

216 
ick
.
vÆ
 = 0;

217 
	`£m˘l
(
muãx
->
öãΩroc
->
fûedes
, 0, 
IPC_RMID
, 
ick
);

219  
APR_SUCCESS
;

220 
	}
}

222 
≠r_°©us_t
 
	$¥oc_muãx_sysv_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
,

223 c⁄° *
‚ame
)

225 
£mun
 
ick
;

226 
≠r_°©us_t
 
rv
;

228 
√w_muãx
->
öãΩroc
 = 
	`≠r_∑Œoc
“ew_muãx->
poﬁ
, (*new_mutex->interproc));

229 
√w_muãx
->
öãΩroc
->
fûedes
 = 
	`£mgë
(
IPC_PRIVATE
, 1, 
IPC_CREAT
 | 0600);

231 i‡(
√w_muãx
->
öãΩroc
->
fûedes
 < 0) {

232 
rv
 = 
î∫o
;

233 
	`¥oc_muãx_sysv_˛ónup
(
√w_muãx
);

234  
rv
;

236 
ick
.
vÆ
 = 1;

237 i‡(
	`£m˘l
(
√w_muãx
->
öãΩroc
->
fûedes
, 0, 
SETVAL
, 
ick
) < 0) {

238 
rv
 = 
î∫o
;

239 
	`¥oc_muãx_sysv_˛ónup
(
√w_muãx
);

240  
rv
;

242 
√w_muãx
->
cuº_locked
 = 0;

243 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
,

244 (*)
√w_muãx
, 
≠r_¥oc_muãx_˛ónup
,

245 
≠r_poﬁ_˛ónup_nuŒ
);

246  
APR_SUCCESS
;

247 
	}
}

249 
≠r_°©us_t
 
	$¥oc_muãx_sysv_acquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

251 
rc
;

254 
rc
 = 
	`£m›
(
muãx
->
öãΩroc
->
fûedes
, &
¥oc_muãx_›_⁄
, 1);

255 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

256 i‡(
rc
 < 0) {

257  
î∫o
;

259 
muãx
->
cuº_locked
 = 1;

260  
APR_SUCCESS
;

261 
	}
}

263 
≠r_°©us_t
 
	$¥oc_muãx_sysv_åyacquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

265 
rc
;

268 
rc
 = 
	`£m›
(
muãx
->
öãΩroc
->
fûedes
, &
¥oc_muãx_›_åy
, 1);

269 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

270 i‡(
rc
 < 0) {

271 i‡(
î∫o
 =
EAGAIN
) {

272  
APR_EBUSY
;

274  
î∫o
;

276 
muãx
->
cuº_locked
 = 1;

277  
APR_SUCCESS
;

278 
	}
}

280 
≠r_°©us_t
 
	$¥oc_muãx_sysv_ªÀa£
(
≠r_¥oc_muãx_t
 *
muãx
)

282 
rc
;

284 
muãx
->
cuº_locked
 = 0;

286 
rc
 = 
	`£m›
(
muãx
->
öãΩroc
->
fûedes
, &
¥oc_muãx_›_off
, 1);

287 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

288 i‡(
rc
 < 0) {

289  
î∫o
;

291  
APR_SUCCESS
;

292 
	}
}

294 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	gmuãx_sysv_mëhods
 =

296 #i‡
APR_PROCESS_LOCK_IS_GLOBAL
 || !
APR_HAS_THREADS
 || 
deföed
(
SYSVSEM_IS_GLOBAL
)

297 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
,

301 
¥oc_muãx_sysv_¸óã
,

302 
¥oc_muãx_sysv_acquúe
,

303 
¥oc_muãx_sysv_åyacquúe
,

304 
¥oc_muãx_sysv_ªÀa£
,

305 
¥oc_muãx_sysv_˛ónup
,

306 
¥oc_muãx_no_chûd_öô
,

312 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


314 
≠r_°©us_t
 
	$¥oc_muãx_¥oc_±hªad_˛ónup
(*
muãx_
)

316 
≠r_¥oc_muãx_t
 *
muãx
=
muãx_
;

317 
≠r_°©us_t
 
rv
;

319 i‡(
muãx
->
cuº_locked
 == 1) {

320 i‡((
rv
 = 
	`±hªad_muãx_u∆ock
(
muãx
->
±hªad_öãΩroc
))) {

321 #ifde‡
HAVE_ZOS_PTHREADS


322 
rv
 = 
î∫o
;

324  
rv
;

328 i‡(
muãx
->
cuº_locked
 != -1) {

329 i‡((
rv
 = 
	`±hªad_muãx_de°roy
(
muãx
->
±hªad_öãΩroc
))) {

330 #ifde‡
HAVE_ZOS_PTHREADS


331 
rv
 = 
î∫o
;

333  
rv
;

336 i‡(
	`munm≠
((
ˇddr_t
)
muãx
->
±hªad_öãΩroc
, (
±hªad_muãx_t
))) {

337  
î∫o
;

339  
APR_SUCCESS
;

340 
	}
}

342 
≠r_°©us_t
 
	$¥oc_muãx_¥oc_±hªad_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
,

343 c⁄° *
‚ame
)

345 
≠r_°©us_t
 
rv
;

346 
fd
;

347 
±hªad_muãx©å_t
 
m©å
;

349 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

350 i‡(
fd
 < 0) {

351  
î∫o
;

354 
√w_muãx
->
±hªad_öãΩroc
 = (
±hªad_muãx_t
 *)
	`mm≠
(

355 (
ˇddr_t
) 0,

356 (
±hªad_muãx_t
),

357 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
,

358 
fd
, 0);

359 i‡(
√w_muãx
->
±hªad_öãΩroc
 =(
±hªad_muãx_t
 *Ë(
ˇddr_t
) -1) {

360 
	`˛o£
(
fd
);

361  
î∫o
;

363 
	`˛o£
(
fd
);

365 
√w_muãx
->
cuº_locked
 = -1;

367 i‡((
rv
 = 
	`±hªad_muãx©å_öô
(&
m©å
))) {

368 #ifde‡
HAVE_ZOS_PTHREADS


369 
rv
 = 
î∫o
;

371 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

372  
rv
;

374 i‡((
rv
 = 
	`±hªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
))) {

375 #ifde‡
HAVE_ZOS_PTHREADS


376 
rv
 = 
î∫o
;

378 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

379 
	`±hªad_muãx©å_de°roy
(&
m©å
);

380  
rv
;

383 #ifde‡
HAVE_PTHREAD_MUTEX_ROBUST


384 i‡((
rv
 = 
	`±hªad_muãx©å_£åobu°_≈
(&
m©å
,

385 
PTHREAD_MUTEX_ROBUST_NP
))) {

386 #ifde‡
HAVE_ZOS_PTHREADS


387 
rv
 = 
î∫o
;

389 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

390 
	`±hªad_muãx©å_de°roy
(&
m©å
);

391  
rv
;

393 i‡((
rv
 = 
	`±hªad_muãx©å_£çrŸocﬁ
(&
m©å
, 
PTHREAD_PRIO_INHERIT
))) {

394 #ifde‡
HAVE_ZOS_PTHREADS


395 
rv
 = 
î∫o
;

397 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

398 
	`±hªad_muãx©å_de°roy
(&
m©å
);

399  
rv
;

403 i‡((
rv
 = 
	`±hªad_muãx_öô
(
√w_muãx
->
±hªad_öãΩroc
, &
m©å
))) {

404 #ifde‡
HAVE_ZOS_PTHREADS


405 
rv
 = 
î∫o
;

407 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

408 
	`±hªad_muãx©å_de°roy
(&
m©å
);

409  
rv
;

412 
√w_muãx
->
cuº_locked
 = 0;

414 i‡((
rv
 = 
	`±hªad_muãx©å_de°roy
(&
m©å
))) {

415 #ifde‡
HAVE_ZOS_PTHREADS


416 
rv
 = 
î∫o
;

418 
	`¥oc_muãx_¥oc_±hªad_˛ónup
(
√w_muãx
);

419  
rv
;

422 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
,

423 (*)
√w_muãx
,

424 
≠r_¥oc_muãx_˛ónup
,

425 
≠r_poﬁ_˛ónup_nuŒ
);

426  
APR_SUCCESS
;

427 
	}
}

429 
≠r_°©us_t
 
	$¥oc_muãx_¥oc_±hªad_acquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

431 
≠r_°©us_t
 
rv
;

433 i‡((
rv
 = 
	`±hªad_muãx_lock
(
muãx
->
±hªad_öãΩroc
))) {

434 #ifde‡
HAVE_ZOS_PTHREADS


435 
rv
 = 
î∫o
;

437 #ifde‡
HAVE_PTHREAD_MUTEX_ROBUST


439 i‡(
rv
 =
EOWNERDEAD
) {

440 
	`±hªad_muãx_c⁄si°ít_≈
(
muãx
->
±hªad_öãΩroc
);

443  
rv
;

445  
rv
;

448 
muãx
->
cuº_locked
 = 1;

449  
APR_SUCCESS
;

450 
	}
}

452 
≠r_°©us_t
 
	$¥oc_muãx_¥oc_±hªad_åyacquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

454 
≠r_°©us_t
 
rv
;

456 i‡((
rv
 = 
	`±hªad_muãx_åylock
(
muãx
->
±hªad_öãΩroc
))) {

457 #ifde‡
HAVE_ZOS_PTHREADS


458 
rv
 = 
î∫o
;

460 i‡(
rv
 =
EBUSY
) {

461  
APR_EBUSY
;

463 #ifde‡
HAVE_PTHREAD_MUTEX_ROBUST


465 i‡(
rv
 =
EOWNERDEAD
) {

466 
	`±hªad_muãx_c⁄si°ít_≈
(
muãx
->
±hªad_öãΩroc
);

467 
rv
 = 
APR_SUCCESS
;

470  
rv
;

472  
rv
;

475 
muãx
->
cuº_locked
 = 1;

476  
rv
;

477 
	}
}

479 
≠r_°©us_t
 
	$¥oc_muãx_¥oc_±hªad_ªÀa£
(
≠r_¥oc_muãx_t
 *
muãx
)

481 
≠r_°©us_t
 
rv
;

483 
muãx
->
cuº_locked
 = 0;

484 i‡((
rv
 = 
	`±hªad_muãx_u∆ock
(
muãx
->
±hªad_öãΩroc
))) {

485 #ifde‡
HAVE_ZOS_PTHREADS


486 
rv
 = 
î∫o
;

488  
rv
;

490  
APR_SUCCESS
;

491 
	}
}

493 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	gmuãx_¥oc_±hªad_mëhods
 =

495 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
,

496 
¥oc_muãx_¥oc_±hªad_¸óã
,

497 
¥oc_muãx_¥oc_±hªad_acquúe
,

498 
¥oc_muãx_¥oc_±hªad_åyacquúe
,

499 
¥oc_muãx_¥oc_±hªad_ªÀa£
,

500 
¥oc_muãx_¥oc_±hªad_˛ónup
,

501 
¥oc_muãx_no_chûd_öô
,

507 #i‡
APR_HAS_FCNTL_SERIALIZE


509 
Êock
 
	g¥oc_muãx_lock_ô
;

510 
Êock
 
	g¥oc_muãx_u∆ock_ô
;

512 
≠r_°©us_t
 
¥oc_muãx_f˙é_ªÀa£
(
≠r_¥oc_muãx_t
 *);

514 
	$¥oc_muãx_f˙é_£tup
()

516 
¥oc_muãx_lock_ô
.
l_whí˚
 = 
SEEK_SET
;

517 
¥oc_muãx_lock_ô
.
l_°¨t
 = 0;

518 
¥oc_muãx_lock_ô
.
l_Àn
 = 0;

519 
¥oc_muãx_lock_ô
.
l_ty≥
 = 
F_WRLCK
;

520 
¥oc_muãx_lock_ô
.
l_pid
 = 0;

521 
¥oc_muãx_u∆ock_ô
.
l_whí˚
 = 
SEEK_SET
;

522 
¥oc_muãx_u∆ock_ô
.
l_°¨t
 = 0;

523 
¥oc_muãx_u∆ock_ô
.
l_Àn
 = 0;

524 
¥oc_muãx_u∆ock_ô
.
l_ty≥
 = 
F_UNLCK
;

525 
¥oc_muãx_u∆ock_ô
.
l_pid
 = 0;

526 
	}
}

528 
≠r_°©us_t
 
	$¥oc_muãx_f˙é_˛ónup
(*
muãx_
)

530 
≠r_°©us_t
 
°©us
;

531 
≠r_¥oc_muãx_t
 *
muãx
=
muãx_
;

533 i‡(
muãx
->
cuº_locked
 == 1) {

534 
°©us
 = 
	`¥oc_muãx_f˙é_ªÀa£
(
muãx
);

535 i‡(
°©us
 !
APR_SUCCESS
)

536  
°©us
;

539  
	`≠r_fûe_˛o£
(
muãx
->
öãΩroc
);

540 
	}
}

542 
≠r_°©us_t
 
	$¥oc_muãx_f˙é_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
,

543 c⁄° *
‚ame
)

545 
rv
;

547 i‡(
‚ame
) {

548 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
“ew_muãx->
poﬁ
, fname);

549 
rv
 = 
	`≠r_fûe_›í
(&
√w_muãx
->
öãΩroc
,Çew_muãx->
‚ame
,

550 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_EXCL
,

551 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
 | 
APR_WREAD
,

552 
√w_muãx
->
poﬁ
);

555 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
“ew_muãx->
poﬁ
, "/tmp/aprXXXXXX");

556 
rv
 = 
	`≠r_fûe_mkãmp
(&
√w_muãx
->
öãΩroc
,Çew_muãx->
‚ame
,

557 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_EXCL
,

558 
√w_muãx
->
poﬁ
);

561 i‡(
rv
 !
APR_SUCCESS
) {

562  
rv
;

565 
√w_muãx
->
cuº_locked
 = 0;

566 
	`u∆ök
(
√w_muãx
->
‚ame
);

567 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
,

568 (*)
√w_muãx
,

569 
≠r_¥oc_muãx_˛ónup
,

570 
≠r_poﬁ_˛ónup_nuŒ
);

571  
APR_SUCCESS
;

572 
	}
}

574 
≠r_°©us_t
 
	$¥oc_muãx_f˙é_acquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

576 
rc
;

579 
rc
 = 
	`f˙é
(
muãx
->
öãΩroc
->
fûedes
, 
F_SETLKW
, &
¥oc_muãx_lock_ô
);

580 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

581 i‡(
rc
 < 0) {

582  
î∫o
;

584 
muãx
->
cuº_locked
=1;

585  
APR_SUCCESS
;

586 
	}
}

588 
≠r_°©us_t
 
	$¥oc_muãx_f˙é_åyacquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

590 
rc
;

593 
rc
 = 
	`f˙é
(
muãx
->
öãΩroc
->
fûedes
, 
F_SETLK
, &
¥oc_muãx_lock_ô
);

594 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

595 i‡(
rc
 < 0) {

596 #i‡
FCNTL_TRYACQUIRE_EACCES


597 i‡(
î∫o
 =
EACCES
) {

599 i‡(
î∫o
 =
EAGAIN
) {

601  
APR_EBUSY
;

603  
î∫o
;

605 
muãx
->
cuº_locked
 = 1;

606  
APR_SUCCESS
;

607 
	}
}

609 
≠r_°©us_t
 
	$¥oc_muãx_f˙é_ªÀa£
(
≠r_¥oc_muãx_t
 *
muãx
)

611 
rc
;

613 
muãx
->
cuº_locked
=0;

615 
rc
 = 
	`f˙é
(
muãx
->
öãΩroc
->
fûedes
, 
F_SETLKW
, &
¥oc_muãx_u∆ock_ô
);

616 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

617 i‡(
rc
 < 0) {

618  
î∫o
;

620  
APR_SUCCESS
;

621 
	}
}

623 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	gmuãx_f˙é_mëhods
 =

625 #i‡
APR_PROCESS_LOCK_IS_GLOBAL
 || !
APR_HAS_THREADS
 || 
deföed
(
FCNTL_IS_GLOBAL
)

626 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
,

630 
¥oc_muãx_f˙é_¸óã
,

631 
¥oc_muãx_f˙é_acquúe
,

632 
¥oc_muãx_f˙é_åyacquúe
,

633 
¥oc_muãx_f˙é_ªÀa£
,

634 
¥oc_muãx_f˙é_˛ónup
,

635 
¥oc_muãx_no_chûd_öô
,

641 #i‡
APR_HAS_FLOCK_SERIALIZE


643 
≠r_°©us_t
 
¥oc_muãx_Êock_ªÀa£
(
≠r_¥oc_muãx_t
 *);

645 
≠r_°©us_t
 
	$¥oc_muãx_Êock_˛ónup
(*
muãx_
)

647 
≠r_°©us_t
 
°©us
;

648 
≠r_¥oc_muãx_t
 *
muãx
=
muãx_
;

650 i‡(
muãx
->
cuº_locked
 == 1) {

651 
°©us
 = 
	`¥oc_muãx_Êock_ªÀa£
(
muãx
);

652 i‡(
°©us
 !
APR_SUCCESS
)

653  
°©us
;

655 i‡(
muãx
->
öãΩroc
) {

656 
	`≠r_fûe_˛o£
(
muãx
->
öãΩroc
);

658 
	`u∆ök
(
muãx
->
‚ame
);

659  
APR_SUCCESS
;

660 
	}
}

662 
≠r_°©us_t
 
	$¥oc_muãx_Êock_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
,

663 c⁄° *
‚ame
)

665 
rv
;

667 i‡(
‚ame
) {

668 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
“ew_muãx->
poﬁ
, fname);

669 
rv
 = 
	`≠r_fûe_›í
(&
√w_muãx
->
öãΩroc
,Çew_muãx->
‚ame
,

670 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_EXCL
,

671 
APR_UREAD
 | 
APR_UWRITE
,

672 
√w_muãx
->
poﬁ
);

675 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
“ew_muãx->
poﬁ
, "/tmp/aprXXXXXX");

676 
rv
 = 
	`≠r_fûe_mkãmp
(&
√w_muãx
->
öãΩroc
,Çew_muãx->
‚ame
,

677 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_EXCL
,

678 
√w_muãx
->
poﬁ
);

681 i‡(
rv
 !
APR_SUCCESS
) {

682 
	`¥oc_muãx_Êock_˛ónup
(
√w_muãx
);

683  
î∫o
;

685 
√w_muãx
->
cuº_locked
 = 0;

686 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
, (*)new_mutex,

687 
≠r_¥oc_muãx_˛ónup
,

688 
≠r_poﬁ_˛ónup_nuŒ
);

689  
APR_SUCCESS
;

690 
	}
}

692 
≠r_°©us_t
 
	$¥oc_muãx_Êock_acquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

694 
rc
;

697 
rc
 = 
	`Êock
(
muãx
->
öãΩroc
->
fûedes
, 
LOCK_EX
);

698 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

699 i‡(
rc
 < 0) {

700  
î∫o
;

702 
muãx
->
cuº_locked
 = 1;

703  
APR_SUCCESS
;

704 
	}
}

706 
≠r_°©us_t
 
	$¥oc_muãx_Êock_åyacquúe
(
≠r_¥oc_muãx_t
 *
muãx
)

708 
rc
;

711 
rc
 = 
	`Êock
(
muãx
->
öãΩroc
->
fûedes
, 
LOCK_EX
 | 
LOCK_NB
);

712 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

713 i‡(
rc
 < 0) {

714 i‡(
î∫o
 =
EWOULDBLOCK
 ||Éºnÿ=
EAGAIN
) {

715  
APR_EBUSY
;

717  
î∫o
;

719 
muãx
->
cuº_locked
 = 1;

720  
APR_SUCCESS
;

721 
	}
}

723 
≠r_°©us_t
 
	$¥oc_muãx_Êock_ªÀa£
(
≠r_¥oc_muãx_t
 *
muãx
)

725 
rc
;

727 
muãx
->
cuº_locked
 = 0;

729 
rc
 = 
	`Êock
(
muãx
->
öãΩroc
->
fûedes
, 
LOCK_UN
);

730 } 
rc
 < 0 && 
î∫o
 =
EINTR
);

731 i‡(
rc
 < 0) {

732  
î∫o
;

734  
APR_SUCCESS
;

735 
	}
}

737 
≠r_°©us_t
 
	$¥oc_muãx_Êock_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

738 
≠r_poﬁ_t
 *
poﬁ
,

739 c⁄° *
‚ame
)

741 
≠r_¥oc_muãx_t
 *
√w_muãx
;

742 
rv
;

744 
√w_muãx
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

746 
	`mem˝y
(
√w_muãx
, *
muãx
,  *new_mutex);

747 
√w_muãx
->
poﬁ
 =Öool;

748 i‡(!
‚ame
) {

749 
‚ame
 = (*
muãx
)->fname;

751 
√w_muãx
->
‚ame
 = 
	`≠r_p°rdup
(
poﬁ
, fname);

752 
rv
 = 
	`≠r_fûe_›í
(&
√w_muãx
->
öãΩroc
,Çew_muãx->
‚ame
,

753 
APR_FOPEN_WRITE
, 0, 
√w_muãx
->
poﬁ
);

754 i‡(
rv
 !
APR_SUCCESS
) {

755  
rv
;

757 *
muãx
 = 
√w_muãx
;

758  
APR_SUCCESS
;

759 
	}
}

761 c⁄° 
≠r_¥oc_muãx_unix_lock_mëhods_t
 
	gmuãx_Êock_mëhods
 =

763 #i‡
APR_PROCESS_LOCK_IS_GLOBAL
 || !
APR_HAS_THREADS
 || 
deföed
(
FLOCK_IS_GLOBAL
)

764 
APR_PROCESS_LOCK_MECH_IS_GLOBAL
,

768 
¥oc_muãx_Êock_¸óã
,

769 
¥oc_muãx_Êock_acquúe
,

770 
¥oc_muãx_Êock_åyacquúe
,

771 
¥oc_muãx_Êock_ªÀa£
,

772 
¥oc_muãx_Êock_˛ónup
,

773 
¥oc_muãx_Êock_chûd_öô
,

779 
	$≠r_¥oc_muãx_unix_£tup_lock
()

782 #i‡
APR_HAS_SYSVSEM_SERIALIZE


783 
	`¥oc_muãx_sysv_£tup
();

785 #i‡
APR_HAS_FCNTL_SERIALIZE


786 
	`¥oc_muãx_f˙é_£tup
();

788 
	}
}

790 
≠r_°©us_t
 
	$¥oc_muãx_choo£_mëhod
(
≠r_¥oc_muãx_t
 *
√w_muãx
, 
≠r_lockmech_e
 
mech
)

792 
mech
) {

793 
APR_LOCK_FCNTL
:

794 #i‡
APR_HAS_FCNTL_SERIALIZE


795 
√w_muãx
->
öãr_mëh
 = &
muãx_f˙é_mëhods
;

797  
APR_ENOTIMPL
;

800 
APR_LOCK_FLOCK
:

801 #i‡
APR_HAS_FLOCK_SERIALIZE


802 
√w_muãx
->
öãr_mëh
 = &
muãx_Êock_mëhods
;

804  
APR_ENOTIMPL
;

807 
APR_LOCK_SYSVSEM
:

808 #i‡
APR_HAS_SYSVSEM_SERIALIZE


809 
√w_muãx
->
öãr_mëh
 = &
muãx_sysv_mëhods
;

811  
APR_ENOTIMPL
;

814 
APR_LOCK_POSIXSEM
:

815 #i‡
APR_HAS_POSIXSEM_SERIALIZE


816 
√w_muãx
->
öãr_mëh
 = &
muãx_posix£m_mëhods
;

818  
APR_ENOTIMPL
;

821 
APR_LOCK_PROC_PTHREAD
:

822 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


823 
√w_muãx
->
öãr_mëh
 = &
muãx_¥oc_±hªad_mëhods
;

825  
APR_ENOTIMPL
;

828 
APR_LOCK_DEFAULT
:

829 #i‡
APR_USE_FLOCK_SERIALIZE


830 
√w_muãx
->
öãr_mëh
 = &
muãx_Êock_mëhods
;

831 #ñi‡
APR_USE_SYSVSEM_SERIALIZE


832 
√w_muãx
->
öãr_mëh
 = &
muãx_sysv_mëhods
;

833 #ñi‡
APR_USE_FCNTL_SERIALIZE


834 
√w_muãx
->
öãr_mëh
 = &
muãx_f˙é_mëhods
;

835 #ñi‡
APR_USE_PROC_PTHREAD_SERIALIZE


836 
√w_muãx
->
öãr_mëh
 = &
muãx_¥oc_±hªad_mëhods
;

837 #ñi‡
APR_USE_POSIXSEM_SERIALIZE


838 
√w_muãx
->
öãr_mëh
 = &
muãx_posix£m_mëhods
;

840  
APR_ENOTIMPL
;

844  
APR_ENOTIMPL
;

846  
APR_SUCCESS
;

847 
	}
}

849 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_de‚ame
()

851 
≠r_°©us_t
 
rv
;

852 
≠r_¥oc_muãx_t
 
muãx
;

854 i‡((
rv
 = 
	`¥oc_muãx_choo£_mëhod
(&
muãx
, 
APR_LOCK_DEFAULT
)Ë!
APR_SUCCESS
) {

857 
muãx
.
mëh
 = muãx.
öãr_mëh
;

859  
	`≠r_¥oc_muãx_«me
(&
muãx
);

860 
	}
}

862 
≠r_°©us_t
 
	$¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 *
√w_muãx
, 
≠r_lockmech_e
 
mech
, c⁄° *
‚ame
)

864 
≠r_°©us_t
 
rv
;

866 i‡((
rv
 = 
	`¥oc_muãx_choo£_mëhod
(
√w_muãx
, 
mech
)Ë!
APR_SUCCESS
) {

867  
rv
;

870 
√w_muãx
->
mëh
 =Çew_muãx->
öãr_mëh
;

872 i‡((
rv
 = 
√w_muãx
->
mëh
->
	`¸óã
“ew_muãx, 
‚ame
)Ë!
APR_SUCCESS
) {

873  
rv
;

876  
APR_SUCCESS
;

877 
	}
}

879 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

880 c⁄° *
‚ame
,

881 
≠r_lockmech_e
 
mech
,

882 
≠r_poﬁ_t
 *
poﬁ
)

884 
≠r_¥oc_muãx_t
 *
√w_muãx
;

885 
≠r_°©us_t
 
rv
;

887 
√w_muãx
 = 
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_¥oc_muãx_t
));

888 
√w_muãx
->
poﬁ
 =Öool;

890 i‡((
rv
 = 
	`¥oc_muãx_¸óã
(
√w_muãx
, 
mech
, 
‚ame
)Ë!
APR_SUCCESS
)

891  
rv
;

893 *
muãx
 = 
√w_muãx
;

894  
APR_SUCCESS
;

895 
	}
}

897 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

898 c⁄° *
‚ame
,

899 
≠r_poﬁ_t
 *
poﬁ
)

901  (*
muãx
)->
mëh
->
	`chûd_öô
(muãx, 
poﬁ
, 
‚ame
);

902 
	}
}

904 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
)

906  
muãx
->
mëh
->
	`acquúe
(mutex);

907 
	}
}

909 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
)

911  
muãx
->
mëh
->
	`åyacquúe
(mutex);

912 
	}
}

914 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
)

916  
muãx
->
mëh
->
	`ªÀa£
(mutex);

917 
	}
}

919 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_˛ónup
(*
muãx
)

921  ((
≠r_¥oc_muãx_t
 *)
muãx
)->
mëh
->
	`˛ónup
(mutex);

922 
	}
}

924 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
)

926  
muãx
->
mëh
->
«me
;

927 
	}
}

929 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
)

933 #i‡
APR_HAS_FLOCK_SERIALIZE


934 i‡(
muãx
->
mëh
 =&
muãx_Êock_mëhods
) {

935  
muãx
->
‚ame
;

938 #i‡
APR_HAS_FCNTL_SERIALIZE


939 i‡(
muãx
->
mëh
 =&
muãx_f˙é_mëhods
) {

940  
muãx
->
‚ame
;

943  
NULL
;

944 
	}
}

946 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
¥oc_muãx
)

950 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

951 
≠r_¥oc_muãx_t
 *
pmuãx
)

953 #i‡
APR_HAS_SYSVSEM_SERIALIZE
 || 
APR_HAS_FCNTL_SERIALIZE
 || 
APR_HAS_FLOCK_SERIALIZE
 || 
APR_HAS_POSIXSEM_SERIALIZE


954 
o•muãx
->
¸os•roc
 = 
pmuãx
->
öãΩroc
->
fûedes
;

956 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


957 
o•muãx
->
±hªad_öãΩroc
 = 
pmuãx
->pthread_interproc;

959  
APR_SUCCESS
;

960 
	}
}

962 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

963 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

964 
≠r_poﬁ_t
 *
poﬁ
)

966 i‡(
poﬁ
 =
NULL
) {

967  
APR_ENOPOOL
;

969 i‡((*
pmuãx
Ë=
NULL
) {

970 (*
pmuãx
Ë(
≠r_¥oc_muãx_t
 *)
	`≠r_pˇŒoc
(
poﬁ
,

971 (
≠r_¥oc_muãx_t
));

972 (*
pmuãx
)->
poﬁ
 =Öool;

974 #i‡
APR_HAS_SYSVSEM_SERIALIZE
 || 
APR_HAS_FCNTL_SERIALIZE
 || 
APR_HAS_FLOCK_SERIALIZE
 || 
APR_HAS_POSIXSEM_SERIALIZE


975 
	`≠r_os_fûe_put
(&(*
pmuãx
)->
öãΩroc
, &
o•muãx
->
¸os•roc
, 0, 
poﬁ
);

977 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


978 (*
pmuãx
)->
±hªad_öãΩroc
 = 
o•muãx
->pthread_interproc;

980  
APR_SUCCESS
;

981 
	}
}

	@locks/unix/thread_cond.c

17 
	~"≠r.h
"

19 #i‡
APR_HAS_THREADS


21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_¨ch_thªad_c⁄d.h
"

24 
≠r_°©us_t
 
	$thªad_c⁄d_˛ónup
(*
d©a
)

26 
≠r_thªad_c⁄d_t
 *
c⁄d
 = (≠r_thªad_c⁄d_à*)
d©a
;

27 
≠r_°©us_t
 
rv
;

29 
rv
 = 
	`±hªad_c⁄d_de°roy
(&
c⁄d
->cond);

30 #ifde‡
HAVE_ZOS_PTHREADS


31 i‡(
rv
) {

32 
rv
 = 
î∫o
;

35  
rv
;

36 
	}
}

38 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

39 
≠r_poﬁ_t
 *
poﬁ
)

41 
≠r_thªad_c⁄d_t
 *
√w_c⁄d
;

42 
≠r_°©us_t
 
rv
;

44 
√w_c⁄d
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_thªad_c⁄d_t
));

46 
√w_c⁄d
->
poﬁ
 =Öool;

48 i‡((
rv
 = 
	`±hªad_c⁄d_öô
(&
√w_c⁄d
->
c⁄d
, 
NULL
))) {

49 #ifde‡
HAVE_ZOS_PTHREADS


50 
rv
 = 
î∫o
;

52  
rv
;

55 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_c⁄d
->
poﬁ
,

56 (*)
√w_c⁄d
, 
thªad_c⁄d_˛ónup
,

57 
≠r_poﬁ_˛ónup_nuŒ
);

59 *
c⁄d
 = 
√w_c⁄d
;

60  
APR_SUCCESS
;

61 
	}
}

63 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

64 
≠r_thªad_muãx_t
 *
muãx
)

66 
≠r_°©us_t
 
rv
;

68 
rv
 = 
	`±hªad_c⁄d_waô
(&
c⁄d
->c⁄d, &
muãx
->mutex);

69 #ifde‡
HAVE_ZOS_PTHREADS


70 i‡(
rv
) {

71 
rv
 = 
î∫o
;

74  
rv
;

75 
	}
}

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

78 
≠r_thªad_muãx_t
 *
muãx
,

79 
≠r_öãrvÆ_time_t
 
timeout
)

81 
≠r_°©us_t
 
rv
;

82 
≠r_time_t
 
thí
;

83 
time•ec
 
ab°ime
;

85 
thí
 = 
	`≠r_time_now
(Ë+ 
timeout
;

86 
ab°ime
.
tv_£c
 = 
	`≠r_time_£c
(
thí
);

87 
ab°ime
.
tv_n£c
 = 
	`≠r_time_u£c
(
thí
) * 1000;

89 
rv
 = 
	`±hªad_c⁄d_timedwaô
(&
c⁄d
->c⁄d, &
muãx
->muãx, &
ab°ime
);

90 #ifde‡
HAVE_ZOS_PTHREADS


91 i‡(
rv
) {

92 
rv
 = 
î∫o
;

95 i‡(
ETIMEDOUT
 =
rv
) {

96  
APR_TIMEUP
;

98  
rv
;

99 
	}
}

102 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

104 
≠r_°©us_t
 
rv
;

106 
rv
 = 
	`±hªad_c⁄d_sig«l
(&
c⁄d
->cond);

107 #ifde‡
HAVE_ZOS_PTHREADS


108 i‡(
rv
) {

109 
rv
 = 
î∫o
;

112  
rv
;

113 
	}
}

115 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

117 
≠r_°©us_t
 
rv
;

119 
rv
 = 
	`±hªad_c⁄d_brﬂdˇ°
(&
c⁄d
->cond);

120 #ifde‡
HAVE_ZOS_PTHREADS


121 i‡(
rv
) {

122 
rv
 = 
î∫o
;

125  
rv
;

126 
	}
}

128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

130  
	`≠r_poﬁ_˛ónup_run
(
c⁄d
->
poﬁ
, c⁄d, 
thªad_c⁄d_˛ónup
);

131 
	}
}

133 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_c⁄d
)

	@locks/unix/thread_mutex.c

17 
	~"≠r_¨ch_thªad_muãx.h
"

18 
	#APR_WANT_MEMFUNC


	)

19 
	~"≠r_w™t.h
"

21 #i‡
APR_HAS_THREADS


23 
≠r_°©us_t
 
	$thªad_muãx_˛ónup
(*
d©a
)

25 
≠r_thªad_muãx_t
 *
muãx
 = 
d©a
;

26 
≠r_°©us_t
 
rv
;

28 
rv
 = 
	`±hªad_muãx_de°roy
(&
muãx
->mutex);

29 #ifde‡
HAVE_ZOS_PTHREADS


30 i‡(
rv
) {

31 
rv
 = 
î∫o
;

34  
rv
;

35 
	}
}

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

38 
Êags
,

39 
≠r_poﬁ_t
 *
poﬁ
)

41 
≠r_thªad_muãx_t
 *
√w_muãx
;

42 
≠r_°©us_t
 
rv
;

44 #i‚de‡
HAVE_PTHREAD_MUTEX_RECURSIVE


45 i‡(
Êags
 & 
APR_THREAD_MUTEX_NESTED
) {

46  
APR_ENOTIMPL
;

50 
√w_muãx
 = 
	`≠r_pˇŒoc
(
poﬁ
, (
≠r_thªad_muãx_t
));

51 
√w_muãx
->
poﬁ
 =Öool;

53 #ifde‡
HAVE_PTHREAD_MUTEX_RECURSIVE


54 i‡(
Êags
 & 
APR_THREAD_MUTEX_NESTED
) {

55 
±hªad_muãx©å_t
 
m©å
;

57 
rv
 = 
	`±hªad_muãx©å_öô
(&
m©å
);

58 i‡(
rv
) Ñv;

60 
rv
 = 
	`±hªad_muãx©å_£ây≥
(&
m©å
, 
PTHREAD_MUTEX_RECURSIVE
);

61 i‡(
rv
) {

62 
	`±hªad_muãx©å_de°roy
(&
m©å
);

63  
rv
;

66 
rv
 = 
	`±hªad_muãx_öô
(&
√w_muãx
->
muãx
, &
m©å
);

68 
	`±hªad_muãx©å_de°roy
(&
m©å
);

71 
rv
 = 
	`±hªad_muãx_öô
(&
√w_muãx
->
muãx
, 
NULL
);

73 i‡(
rv
) {

74 #ifde‡
HAVE_ZOS_PTHREADS


75 
rv
 = 
î∫o
;

77  
rv
;

80 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_muãx
->
poﬁ
,

81 
√w_muãx
, 
thªad_muãx_˛ónup
,

82 
≠r_poﬁ_˛ónup_nuŒ
);

84 *
muãx
 = 
√w_muãx
;

85  
APR_SUCCESS
;

86 
	}
}

88 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
)

90 
≠r_°©us_t
 
rv
;

92 
rv
 = 
	`±hªad_muãx_lock
(&
muãx
->mutex);

93 #ifde‡
HAVE_ZOS_PTHREADS


94 i‡(
rv
) {

95 
rv
 = 
î∫o
;

99  
rv
;

100 
	}
}

102 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
)

104 
≠r_°©us_t
 
rv
;

106 
rv
 = 
	`±hªad_muãx_åylock
(&
muãx
->mutex);

107 i‡(
rv
) {

108 #ifde‡
HAVE_ZOS_PTHREADS


109 
rv
 = 
î∫o
;

111  (
rv
 =
EBUSY
Ë? 
APR_EBUSY
 :Ñv;

114  
APR_SUCCESS
;

115 
	}
}

117 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
)

119 
≠r_°©us_t
 
°©us
;

121 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
muãx
->mutex);

122 #ifde‡
HAVE_ZOS_PTHREADS


123 i‡(
°©us
) {

124 
°©us
 = 
î∫o
;

128  
°©us
;

129 
	}
}

131 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
)

133  
	`≠r_poﬁ_˛ónup_run
(
muãx
->
poﬁ
, muãx, 
thªad_muãx_˛ónup
);

134 
	}
}

136 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_muãx
)

	@locks/unix/thread_rwlock.c

17 
	~"≠r_¨ch_thªad_rwlock.h
"

18 
	~"≠r_¥iv©e.h
"

20 #i‡
APR_HAS_THREADS


22 #ifde‡
HAVE_PTHREAD_RWLOCKS


26 
≠r_°©us_t
 
	$thªad_rwlock_˛ónup
(*
d©a
)

28 
≠r_thªad_rwlock_t
 *
rwlock
 = (≠r_thªad_rwlock_à*)
d©a
;

29 
≠r_°©us_t
 
°©
;

31 
°©
 = 
	`±hªad_rwlock_de°roy
(&
rwlock
->rwlock);

32 #ifde‡
HAVE_ZOS_PTHREADS


33 i‡(
°©
) {

34 
°©
 = 
î∫o
;

37  
°©
;

38 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

41 
≠r_poﬁ_t
 *
poﬁ
)

43 
≠r_thªad_rwlock_t
 *
√w_rwlock
;

44 
≠r_°©us_t
 
°©
;

46 
√w_rwlock
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_thªad_rwlock_t
));

47 
√w_rwlock
->
poﬁ
 =Öool;

49 i‡((
°©
 = 
	`±hªad_rwlock_öô
(&
√w_rwlock
->
rwlock
, 
NULL
))) {

50 #ifde‡
HAVE_ZOS_PTHREADS


51 
°©
 = 
î∫o
;

53  
°©
;

56 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_rwlock
->
poﬁ
,

57 (*)
√w_rwlock
, 
thªad_rwlock_˛ónup
,

58 
≠r_poﬁ_˛ónup_nuŒ
);

60 *
rwlock
 = 
√w_rwlock
;

61  
APR_SUCCESS
;

62 
	}
}

64 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

66 
≠r_°©us_t
 
°©
;

68 
°©
 = 
	`±hªad_rwlock_rdlock
(&
rwlock
->rwlock);

69 #ifde‡
HAVE_ZOS_PTHREADS


70 i‡(
°©
) {

71 
°©
 = 
î∫o
;

74  
°©
;

75 
	}
}

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

79 
≠r_°©us_t
 
°©
;

81 
°©
 = 
	`±hªad_rwlock_åyrdlock
(&
rwlock
->rwlock);

82 #ifde‡
HAVE_ZOS_PTHREADS


83 i‡(
°©
) {

84 
°©
 = 
î∫o
;

88 i‡(
°©
 =
EBUSY
)

89 
°©
 = 
APR_EBUSY
;

90  
°©
;

91 
	}
}

93 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

95 
≠r_°©us_t
 
°©
;

97 
°©
 = 
	`±hªad_rwlock_wæock
(&
rwlock
->rwlock);

98 #ifde‡
HAVE_ZOS_PTHREADS


99 i‡(
°©
) {

100 
°©
 = 
î∫o
;

103  
°©
;

104 
	}
}

106 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

108 
≠r_°©us_t
 
°©
;

110 
°©
 = 
	`±hªad_rwlock_åywæock
(&
rwlock
->rwlock);

111 #ifde‡
HAVE_ZOS_PTHREADS


112 i‡(
°©
) {

113 
°©
 = 
î∫o
;

117 i‡(
°©
 =
EBUSY
)

118 
°©
 = 
APR_EBUSY
;

119  
°©
;

120 
	}
}

122 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

124 
≠r_°©us_t
 
°©
;

126 
°©
 = 
	`±hªad_rwlock_u∆ock
(&
rwlock
->rwlock);

127 #ifde‡
HAVE_ZOS_PTHREADS


128 i‡(
°©
) {

129 
°©
 = 
î∫o
;

132  
°©
;

133 
	}
}

135 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

137  
	`≠r_poﬁ_˛ónup_run
(
rwlock
->
poﬁ
,Ñwlock, 
thªad_rwlock_˛ónup
);

138 
	}
}

142 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

143 
≠r_poﬁ_t
 *
poﬁ
)

145  
APR_ENOTIMPL
;

146 
	}
}

148 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

150  
APR_ENOTIMPL
;

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

155  
APR_ENOTIMPL
;

156 
	}
}

158 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

160  
APR_ENOTIMPL
;

161 
	}
}

163 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

165  
APR_ENOTIMPL
;

166 
	}
}

168 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

170  
APR_ENOTIMPL
;

171 
	}
}

173 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

175  
APR_ENOTIMPL
;

176 
	}
}

179 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_rwlock
)

	@locks/win32/proc_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~"≠r_¨ch_¥oc_muãx.h
"

24 
	~"≠r_¨ch_misc.h
"

26 
≠r_°©us_t
 
	$¥oc_muãx_˛ónup
(*
muãx_
)

28 
≠r_¥oc_muãx_t
 *
muãx
 = 
muãx_
;

30 i‡(
muãx
->
h™dÀ
) {

31 i‡(
	`Clo£H™dÀ
(
muãx
->
h™dÀ
) == 0) {

32  
	`≠r_gë_os_îr‹
();

35  
APR_SUCCESS
;

36 
	}
}

38 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_¸óã
(
≠r_¥oc_muãx_t
 **
muãx
,

39 c⁄° *
‚ame
,

40 
≠r_lockmech_e
 
mech
,

41 
≠r_poﬁ_t
 *
poﬁ
)

43 
HANDLE
 
hMuãx
;

44 *
muãxkey
;

50 i‡(
‚ame
) {

51 
muãxkey
 = 
	`ªs_«me_‰om_fûíame
(
‚ame
, 1, 
poﬁ
);

54 
muãxkey
 = 
NULL
;

57 #i‡
APR_HAS_UNICODE_FS


58 
IF_WIN_OS_IS_UNICODE


60 
hMuãx
 = 
	`Cª©eMuãxW
(
NULL
, 
FALSE
, 
muãxkey
);

63 #i‡
APR_HAS_ANSI_FS


64 
ELSE_WIN_OS_IS_ANSI


66 
hMuãx
 = 
	`Cª©eMuãxA
(
NULL
, 
FALSE
, 
muãxkey
);

70 i‡(!
hMuãx
) {

71  
	`≠r_gë_os_îr‹
();

74 *
muãx
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

75 (*
muãx
)->
poﬁ
 =Öool;

76 (*
muãx
)->
h™dÀ
 = 
hMuãx
;

77 (*
muãx
)->
‚ame
 = fname;

78 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
muãx
)->
poﬁ
, *mutex,

79 
¥oc_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

80  
APR_SUCCESS
;

81 
	}
}

83 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_chûd_öô
(
≠r_¥oc_muãx_t
 **
muãx
,

84 c⁄° *
‚ame
,

85 
≠r_poﬁ_t
 *
poﬁ
)

87 
HANDLE
 
hMuãx
;

88 *
muãxkey
;

90 i‡(!
‚ame
) {

92  
APR_SUCCESS
;

99 
muãxkey
 = 
	`ªs_«me_‰om_fûíame
(
‚ame
, 1, 
poﬁ
);

101 #i‡
	`deföed
(
_WIN32_WCE
)

102 
hMuãx
 = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, 
muãxkey
);

103 i‡(
hMuãx
 && 
ERROR_ALREADY_EXISTS
 !
	`GëLa°Eº‹
()) {

104 
	`Clo£H™dÀ
(
hMuãx
);

105 
hMuãx
 = 
NULL
;

106 
	`SëLa°Eº‹
(
ERROR_FILE_NOT_FOUND
);

109 #i‡
APR_HAS_UNICODE_FS


110 
IF_WIN_OS_IS_UNICODE


112 
hMuãx
 = 
	`O≥nMuãxW
(
MUTEX_ALL_ACCESS
, 
FALSE
, 
muãxkey
);

115 #i‡
APR_HAS_ANSI_FS


116 
ELSE_WIN_OS_IS_ANSI


118 
hMuãx
 = 
	`O≥nMuãxA
(
MUTEX_ALL_ACCESS
, 
FALSE
, 
muãxkey
);

123 i‡(!
hMuãx
) {

124  
	`≠r_gë_os_îr‹
();

127 *
muãx
 = (
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_proc_mutex_t));

128 (*
muãx
)->
poﬁ
 =Öool;

129 (*
muãx
)->
h™dÀ
 = 
hMuãx
;

130 (*
muãx
)->
‚ame
 = fname;

131 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
muãx
)->
poﬁ
, *mutex,

132 
¥oc_muãx_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

133  
APR_SUCCESS
;

134 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_lock
(
≠r_¥oc_muãx_t
 *
muãx
)

138 
DWORD
 
rv
;

140 
rv
 = 
	`WaôF‹SögÀObje˘
(
muãx
->
h™dÀ
, 
INFINITE
);

142 i‡(
rv
 =
WAIT_OBJECT_0
 ||Ñv =
WAIT_ABANDONED
) {

143  
APR_SUCCESS
;

145  
	`≠r_gë_os_îr‹
();

146 
	}
}

148 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_åylock
(
≠r_¥oc_muãx_t
 *
muãx
)

150 
DWORD
 
rv
;

152 
rv
 = 
	`WaôF‹SögÀObje˘
(
muãx
->
h™dÀ
, 0);

154 i‡(
rv
 =
WAIT_OBJECT_0
 ||Ñv =
WAIT_ABANDONED
) {

155  
APR_SUCCESS
;

157 i‡(
rv
 =
WAIT_TIMEOUT
) {

158  
APR_EBUSY
;

160  
	`≠r_gë_os_îr‹
();

161 
	}
}

163 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_u∆ock
(
≠r_¥oc_muãx_t
 *
muãx
)

165 i‡(
	`Rñó£Muãx
(
muãx
->
h™dÀ
) == 0) {

166  
	`≠r_gë_os_îr‹
();

168  
APR_SUCCESS
;

169 
	}
}

171 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_de°roy
(
≠r_¥oc_muãx_t
 *
muãx
)

173 
≠r_°©us_t
 
°©
;

175 
°©
 = 
	`¥oc_muãx_˛ónup
(
muãx
);

176 i‡(
°©
 =
APR_SUCCESS
) {

177 
	`≠r_poﬁ_˛ónup_kûl
(
muãx
->
poﬁ
, muãx, 
¥oc_muãx_˛ónup
);

179  
°©
;

180 
	}
}

182 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_muãx_˛ónup
(*
muãx
)

184  
	`≠r_¥oc_muãx_de°roy
((
≠r_¥oc_muãx_t
 *)
muãx
);

185 
	}
}

187 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_lockfûe
(
≠r_¥oc_muãx_t
 *
muãx
)

189  
muãx
->
‚ame
;

190 
	}
}

192 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_«me
(
≠r_¥oc_muãx_t
 *
muãx
)

194  
	`≠r_¥oc_muãx_de‚ame
();

195 
	}
}

197 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_¥oc_muãx_de‚ame
()

200 
	}
}

202 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
¥oc_muãx
)

206 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_gë
(
≠r_os_¥oc_muãx_t
 *
o•muãx
,

207 
≠r_¥oc_muãx_t
 *
muãx
)

209 *
o•muãx
 = 
muãx
->
h™dÀ
;

210  
APR_SUCCESS
;

211 
	}
}

213 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_¥oc_muãx_put
(
≠r_¥oc_muãx_t
 **
pmuãx
,

214 
≠r_os_¥oc_muãx_t
 *
o•muãx
,

215 
≠r_poﬁ_t
 *
poﬁ
)

217 i‡(
poﬁ
 =
NULL
) {

218  
APR_ENOPOOL
;

220 i‡((*
pmuãx
Ë=
NULL
) {

221 (*
pmuãx
Ë(
≠r_¥oc_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

222 (
≠r_¥oc_muãx_t
));

223 (*
pmuãx
)->
poﬁ
 =Öool;

225 (*
pmuãx
)->
h™dÀ
 = *
o•muãx
;

226  
APR_SUCCESS
;

227 
	}
}

	@locks/win32/thread_cond.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_¨ch_thªad_c⁄d.h
"

23 
	~"≠r_p‹èbÀ.h
"

25 
	~<limôs.h
>

27 
≠r_°©us_t
 
	$thªad_c⁄d_˛ónup
(*
d©a
)

29 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
d©a
;

30 
	`Clo£H™dÀ
(
c⁄d
->
£m≠h‹e
);

31 
	`DñëeCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

32  
APR_SUCCESS
;

33 
	}
}

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_¸óã
(
≠r_thªad_c⁄d_t
 **
c⁄d
,

36 
≠r_poﬁ_t
 *
poﬁ
)

38 
≠r_thªad_c⁄d_t
 *
cv
;

40 
cv
 = 
	`≠r_pˇŒoc
(
poﬁ
, (**
c⁄d
));

41 i‡(
cv
 =
NULL
) {

42  
APR_ENOMEM
;

45 
cv
->
£m≠h‹e
 = 
	`Cª©eSem≠h‹e
(
NULL
, 0, 
LONG_MAX
, NULL);

46 i‡(
cv
->
£m≠h‹e
 =
NULL
) {

47  
	`≠r_gë_os_îr‹
();

50 *
c⁄d
 = 
cv
;

51 
cv
->
poﬁ
 =Öool;

52 
	`InôülizeCrôiˇlSe˘i⁄
(&
cv
->
c£˘i⁄
);

53 
	`≠r_poﬁ_˛ónup_ªgi°î
(
cv
->
poﬁ
, cv, 
thªad_c⁄d_˛ónup
,

54 
≠r_poﬁ_˛ónup_nuŒ
);

56  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_de°roy
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

61  
	`≠r_poﬁ_˛ónup_run
(
c⁄d
->
poﬁ
, c⁄d, 
thªad_c⁄d_˛ónup
);

62 
	}
}

64 
APR_INLINE
 
≠r_°©us_t
 
	$_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

65 
≠r_thªad_muãx_t
 *
muãx
,

66 
DWORD
 
timeout_ms
 )

68 
DWORD
 
ªs
;

69 
≠r_°©us_t
 
rv
;

70 
wake
 = 0;

71 
gíî©i⁄
;

73 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

74 
c⁄d
->
num_waôög
++;

75 
gíî©i⁄
 = 
c⁄d
->generation;

76 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

78 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

81 
ªs
 = 
	`WaôF‹SögÀObje˘
(
c⁄d
->
£m≠h‹e
, 
timeout_ms
);

83 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

85 i‡(
c⁄d
->
num_wake
) {

86 i‡(
c⁄d
->
gíî©i⁄
 != generation) {

87 
c⁄d
->
num_wake
--;

88 
c⁄d
->
num_waôög
--;

89 
rv
 = 
APR_SUCCESS
;

92 
wake
 = 1;

95 i‡(
ªs
 !
WAIT_OBJECT_0
) {

96 
c⁄d
->
num_waôög
--;

97 
rv
 = 
APR_TIMEUP
;

101 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

103 i‡(
wake
) {

104 
wake
 = 0;

105 
	`Rñó£Sem≠h‹e
(
c⁄d
->
£m≠h‹e
, 1, 
NULL
);

109 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

110 
	`≠r_thªad_muãx_lock
(
muãx
);

112  
rv
;

113 
	}
}

115 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_waô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

116 
≠r_thªad_muãx_t
 *
muãx
)

118  
	`_thªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 
INFINITE
);

119 
	}
}

121 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_timedwaô
(
≠r_thªad_c⁄d_t
 *
c⁄d
,

122 
≠r_thªad_muãx_t
 *
muãx
,

123 
≠r_öãrvÆ_time_t
 
timeout
)

125 
DWORD
 
timeout_ms
 = (DWORDË
	`≠r_time_as_m£c
(
timeout
);

127  
	`_thªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 
timeout_ms
);

128 
	}
}

130 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_sig«l
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

132 
wake
 = 0;

134 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

135 i‡(
c⁄d
->
num_waôög
 > c⁄d->
num_wake
) {

136 
wake
 = 1;

137 
c⁄d
->
num_wake
++;

138 
c⁄d
->
gíî©i⁄
++;

140 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

142 i‡(
wake
) {

143 
	`Rñó£Sem≠h‹e
(
c⁄d
->
£m≠h‹e
, 1, 
NULL
);

146  
APR_SUCCESS
;

147 
	}
}

149 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_c⁄d_brﬂdˇ°
(
≠r_thªad_c⁄d_t
 *
c⁄d
)

151 
num_wake
 = 0;

153 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

154 i‡(
c⁄d
->
num_waôög
 > c⁄d->
num_wake
) {

155 
num_wake
 = 
c⁄d
->
num_waôög
 - cond->num_wake;

156 
c⁄d
->
num_wake
 = c⁄d->
num_waôög
;

157 
c⁄d
->
gíî©i⁄
++;

159 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
c£˘i⁄
);

161 i‡(
num_wake
) {

162 
	`Rñó£Sem≠h‹e
(
c⁄d
->
£m≠h‹e
, 
num_wake
, 
NULL
);

165  
APR_SUCCESS
;

166 
	}
}

168 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_c⁄d
)

	@locks/win32/thread_mutex.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_¨ch_thªad_muãx.h
"

22 
	~"≠r_thªad_muãx.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~"≠r_¨ch_misc.h
"

26 
≠r_°©us_t
 
	$thªad_muãx_˛ónup
(*
d©a
)

28 
≠r_thªad_muãx_t
 *
lock
 = 
d©a
;

30 i‡(
lock
->
ty≥
 =
thªad_muãx_¸ôiˇl_£˘i⁄
) {

31 
lock
->
ty≥
 = -1;

32 
	`DñëeCrôiˇlSe˘i⁄
(&
lock
->
£˘i⁄
);

35 i‡(!
	`Clo£H™dÀ
(
lock
->
h™dÀ
)) {

36  
	`≠r_gë_os_îr‹
();

39  
APR_SUCCESS
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_¸óã
(
≠r_thªad_muãx_t
 **
muãx
,

43 
Êags
,

44 
≠r_poﬁ_t
 *
poﬁ
)

46 (*
muãx
Ë(
≠r_thªad_muãx_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (**mutex));

48 (*
muãx
)->
poﬁ
 =Öool;

50 i‡(
Êags
 & 
APR_THREAD_MUTEX_UNNESTED
) {

54 (*
muãx
)->
ty≥
 = 
thªad_muãx_u¬e°ed_evít
;

55 (*
muãx
)->
h™dÀ
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, 
TRUE
, NULL);

58 #i‡
APR_HAS_UNICODE_FS


63 
IF_WIN_OS_IS_UNICODE
 {

64 
	`InôülizeCrôiˇlSe˘i⁄
(&(*
muãx
)->
£˘i⁄
);

65 (*
muãx
)->
ty≥
 = 
thªad_muãx_¸ôiˇl_£˘i⁄
;

68 #i‡
APR_HAS_ANSI_FS


69 
ELSE_WIN_OS_IS_ANSI
 {

70 (*
muãx
)->
ty≥
 = 
thªad_muãx_√°ed_muãx
;

71 (*
muãx
)->
h™dÀ
 = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, NULL);

77 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
muãx
)->
poﬁ
, (*muãx), 
thªad_muãx_˛ónup
,

78 
≠r_poﬁ_˛ónup_nuŒ
);

79  
APR_SUCCESS
;

80 
	}
}

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_lock
(
≠r_thªad_muãx_t
 *
muãx
)

84 i‡(
muãx
->
ty≥
 =
thªad_muãx_¸ôiˇl_£˘i⁄
) {

85 
	`E¡îCrôiˇlSe˘i⁄
(&
muãx
->
£˘i⁄
);

88 
DWORD
 
rv
 = 
	`WaôF‹SögÀObje˘
(
muãx
->
h™dÀ
, 
INFINITE
);

89 i‡((
rv
 !
WAIT_OBJECT_0
Ë&& (rv !
WAIT_ABANDONED
)) {

90  (
rv
 =
WAIT_TIMEOUT
Ë? 
APR_EBUSY
 : 
	`≠r_gë_os_îr‹
();

93  
APR_SUCCESS
;

94 
	}
}

96 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_åylock
(
≠r_thªad_muãx_t
 *
muãx
)

98 i‡(
muãx
->
ty≥
 =
thªad_muãx_¸ôiˇl_£˘i⁄
) {

99 i‡(!
	`TryE¡îCrôiˇlSe˘i⁄
(&
muãx
->
£˘i⁄
)) {

100  
APR_EBUSY
;

104 
DWORD
 
rv
 = 
	`WaôF‹SögÀObje˘
(
muãx
->
h™dÀ
, 0);

105 i‡((
rv
 !
WAIT_OBJECT_0
Ë&& (rv !
WAIT_ABANDONED
)) {

106  (
rv
 =
WAIT_TIMEOUT
Ë? 
APR_EBUSY
 : 
	`≠r_gë_os_îr‹
();

109  
APR_SUCCESS
;

110 
	}
}

112 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_u∆ock
(
≠r_thªad_muãx_t
 *
muãx
)

114 i‡(
muãx
->
ty≥
 =
thªad_muãx_¸ôiˇl_£˘i⁄
) {

115 
	`LóveCrôiˇlSe˘i⁄
(&
muãx
->
£˘i⁄
);

117 i‡(
muãx
->
ty≥
 =
thªad_muãx_u¬e°ed_evít
) {

118 i‡(!
	`SëEvít
(
muãx
->
h™dÀ
)) {

119  
	`≠r_gë_os_îr‹
();

122 i‡(
muãx
->
ty≥
 =
thªad_muãx_√°ed_muãx
) {

123 i‡(!
	`Rñó£Muãx
(
muãx
->
h™dÀ
)) {

124  
	`≠r_gë_os_îr‹
();

127  
APR_SUCCESS
;

128 
	}
}

130 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_muãx_de°roy
(
≠r_thªad_muãx_t
 *
muãx
)

132  
	`≠r_poﬁ_˛ónup_run
(
muãx
->
poﬁ
, muãx, 
thªad_muãx_˛ónup
);

133 
	}
}

135 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_muãx
)

	@locks/win32/thread_rwlock.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_¨ch_thªad_rwlock.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
≠r_°©us_t
 
	$thªad_rwlock_˛ónup
(*
d©a
)

26 
≠r_thªad_rwlock_t
 *
rwlock
 = 
d©a
;

28 i‡(! 
	`Clo£H™dÀ
(
rwlock
->
ªad_evít
))

29  
	`≠r_gë_os_îr‹
();

31 i‡(! 
	`Clo£H™dÀ
(
rwlock
->
wrôe_muãx
))

32  
	`≠r_gë_os_îr‹
();

34  
APR_SUCCESS
;

35 
	}
}

37 
	$APR_DECLARE
(
≠r_°©us_t
)
	$≠r_thªad_rwlock_¸óã
(
≠r_thªad_rwlock_t
 **
rwlock
,

38 
≠r_poﬁ_t
 *
poﬁ
)

40 *
rwlock
 = 
	`≠r_∑Œoc
(
poﬁ
, (**rwlock));

42 (*
rwlock
)->
poﬁ
 =Öool;

43 (*
rwlock
)->
ªadîs
 = 0;

45 i‡(! ((*
rwlock
)->
ªad_evít
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL))) {

46 *
rwlock
 = 
NULL
;

47  
	`≠r_gë_os_îr‹
();

50 i‡(! ((*
rwlock
)->
wrôe_muãx
 = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, NULL))) {

51 
	`Clo£H™dÀ
((*
rwlock
)->
ªad_evít
);

52 *
rwlock
 = 
NULL
;

53  
	`≠r_gë_os_îr‹
();

56 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
rwlock
, 
thªad_rwlock_˛ónup
,

57 
≠r_poﬁ_˛ónup_nuŒ
);

59  
APR_SUCCESS
;

60 
	}
}

62 
≠r_°©us_t
 
	$≠r_thªad_rwlock_rdlock_c‹e
(
≠r_thªad_rwlock_t
 *
rwlock
,

63 
DWORD
 
mûli£c⁄ds
)

65 
DWORD
 
code
 = 
	`WaôF‹SögÀObje˘
(
rwlock
->
wrôe_muãx
, 
mûli£c⁄ds
);

67 i‡(
code
 =
WAIT_FAILED
 || codê=
WAIT_TIMEOUT
)

68  
	`APR_FROM_OS_ERROR
(
code
);

74 
	`I¡îlockedIn¸emít
(&
rwlock
->
ªadîs
);

76 i‡(! 
	`Re£tEvít
(
rwlock
->
ªad_evít
))

77  
	`≠r_gë_os_îr‹
();

79 i‡(! 
	`Rñó£Muãx
(
rwlock
->
wrôe_muãx
))

80  
	`≠r_gë_os_îr‹
();

82  
APR_SUCCESS
;

83 
	}
}

85 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_rdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

87  
	`≠r_thªad_rwlock_rdlock_c‹e
(
rwlock
, 
INFINITE
);

88 
	}
}

90 
	$APR_DECLARE
(
≠r_°©us_t
)

91 
	$≠r_thªad_rwlock_åyrdlock
(
≠r_thªad_rwlock_t
 *
rwlock
)

93  
	`≠r_thªad_rwlock_rdlock_c‹e
(
rwlock
, 0);

94 
	}
}

96 
≠r_°©us_t


97 
	$≠r_thªad_rwlock_wæock_c‹e
(
≠r_thªad_rwlock_t
 *
rwlock
, 
DWORD
 
mûli£c⁄ds
)

99 
DWORD
 
code
 = 
	`WaôF‹SögÀObje˘
(
rwlock
->
wrôe_muãx
, 
mûli£c⁄ds
);

101 i‡(
code
 =
WAIT_FAILED
 || codê=
WAIT_TIMEOUT
)

102  
	`APR_FROM_OS_ERROR
(
code
);

107 i‡(
rwlock
->
ªadîs
) {

111 
code
 = 
mûli£c⁄ds


112 ? 
	`WaôF‹SögÀObje˘
(
rwlock
->
ªad_evít
, 
mûli£c⁄ds
)

113 : 
WAIT_TIMEOUT
;

115 i‡(
code
 =
WAIT_FAILED
 || codê=
WAIT_TIMEOUT
) {

117 i‡(! 
	`Rñó£Muãx
(
rwlock
->
wrôe_muãx
))

118  
	`≠r_gë_os_îr‹
();

120  
	`APR_FROM_OS_ERROR
(
code
);

124  
APR_SUCCESS
;

125 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_wæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

129  
	`≠r_thªad_rwlock_wæock_c‹e
(
rwlock
, 
INFINITE
);

130 
	}
}

132 
	$APR_DECLARE
(
≠r_°©us_t
)
	$≠r_thªad_rwlock_åywæock
(
≠r_thªad_rwlock_t
 *
rwlock
)

134  
	`≠r_thªad_rwlock_wæock_c‹e
(
rwlock
, 0);

135 
	}
}

137 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_u∆ock
(
≠r_thªad_rwlock_t
 *
rwlock
)

139 
≠r_°©us_t
 
rv
 = 0;

142 i‡(! 
	`Rñó£Muãx
(
rwlock
->
wrôe_muãx
))

143 
rv
 = 
	`≠r_gë_os_îr‹
();

145 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
ERROR_NOT_OWNER
)) {

147 i‡(
rwlock
->
ªadîs
 &&

148 ! 
	`I¡îlockedDe¸emít
(&
rwlock
->
ªadîs
) &&

149 ! 
	`SëEvít
(
rwlock
->
ªad_evít
)) {

150 
rv
 = 
	`≠r_gë_os_îr‹
();

153 
rv
 = 0;

157  
rv
;

158 
	}
}

160 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_rwlock_de°roy
(
≠r_thªad_rwlock_t
 *
rwlock
)

162  
	`≠r_poﬁ_˛ónup_run
(
rwlock
->
poﬁ
,Ñwlock, 
thªad_rwlock_˛ónup
);

163 
	}
}

165 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad_rwlock
)

	@memory/unix/apr_pools.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_©omic.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_Æloˇt‹.h
"

26 
	~"≠r_lib.h
"

27 
	~"≠r_thªad_muãx.h
"

28 
	~"≠r_hash.h
"

29 
	~"≠r_time.h
"

30 
	#APR_WANT_MEMFUNC


	)

31 
	~"≠r_w™t.h
"

32 
	~"≠r_ív.h
"

34 #i‡
APR_HAVE_STDLIB_H


35 
	~<°dlib.h
>

38 #i‡
APR_HAVE_UNISTD_H


39 
	~<uni°d.h
>

42 #i‡
APR_ALLOCATOR_USES_MMAP


43 
	~<sys/mm™.h
>

55 
	#MIN_ALLOC
 (2 * 
BOUNDARY_SIZE
)

	)

56 
	#MAX_INDEX
 20

	)

58 #i‡
APR_ALLOCATOR_USES_MMAP
 && 
deföed
(
_SC_PAGESIZE
)

59 
	gbound¨y_ödex
;

60 
	gbound¨y_size
;

61 
	#BOUNDARY_INDEX
 
bound¨y_ödex


	)

62 
	#BOUNDARY_SIZE
 
bound¨y_size


	)

64 
	#BOUNDARY_INDEX
 12

	)

65 
	#BOUNDARY_SIZE
 (1 << 
BOUNDARY_INDEX
)

	)

75 
	#TIMEOUT_USECS
 3000000

	)

76 
	#TIMEOUT_INTERVAL
 46875

	)

85 
	s≠r_Æloˇt‹_t
 {

87 
≠r_uöt32_t
 
	mmax_ödex
;

93 
≠r_uöt32_t
 
	mmax_‰ì_ödex
;

98 
≠r_uöt32_t
 
	mcuºít_‰ì_ödex
;

99 #i‡
APR_HAS_THREADS


100 
≠r_thªad_muãx_t
 *
	mmuãx
;

102 
≠r_poﬁ_t
 *
	mow√r
;

113 
≠r_memnode_t
 *
	m‰ì
[
MAX_INDEX
];

116 
	#SIZEOF_ALLOCATOR_T
 
	`APR_ALIGN_DEFAULT
((
≠r_Æloˇt‹_t
))

	)

123 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_Æloˇt‹_¸óã
(
≠r_Æloˇt‹_t
 **
Æloˇt‹
)

125 
≠r_Æloˇt‹_t
 *
√w_Æloˇt‹
;

127 *
Æloˇt‹
 = 
NULL
;

129 i‡((
√w_Æloˇt‹
 = 
	`mÆloc
(
SIZEOF_ALLOCATOR_T
)Ë=
NULL
)

130  
APR_ENOMEM
;

132 
	`mem£t
(
√w_Æloˇt‹
, 0, 
SIZEOF_ALLOCATOR_T
);

133 
√w_Æloˇt‹
->
max_‰ì_ödex
 = 
APR_ALLOCATOR_MAX_FREE_UNLIMITED
;

135 *
Æloˇt‹
 = 
√w_Æloˇt‹
;

137  
APR_SUCCESS
;

138 
	}
}

140 
	$APR_DECLARE
(Ë
	$≠r_Æloˇt‹_de°roy
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

142 
≠r_uöt32_t
 
ödex
;

143 
≠r_memnode_t
 *
node
, **
ªf
;

145 
ödex
 = 0; index < 
MAX_INDEX
; index++) {

146 
ªf
 = &
Æloˇt‹
->
‰ì
[
ödex
];

147 (
node
 = *
ªf
Ë!
NULL
) {

148 *
ªf
 = 
node
->
√xt
;

149 #i‡
APR_ALLOCATOR_USES_MMAP


150 
	`munm≠
(
node
, (node->
ödex
+1Ë<< 
BOUNDARY_INDEX
);

152 
	`‰ì
(
node
);

157 
	`‰ì
(
Æloˇt‹
);

158 
	}
}

160 #i‡
APR_HAS_THREADS


161 
	$APR_DECLARE
(Ë
	$≠r_Æloˇt‹_muãx_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

162 
≠r_thªad_muãx_t
 *
muãx
)

164 
Æloˇt‹
->
muãx
 = mutex;

165 
	}
}

167 
	$APR_DECLARE
(
≠r_thªad_muãx_t
 *Ë
	$≠r_Æloˇt‹_muãx_gë
(

168 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

170  
Æloˇt‹
->
muãx
;

171 
	}
}

174 
	$APR_DECLARE
(Ë
	$≠r_Æloˇt‹_ow√r_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

175 
≠r_poﬁ_t
 *
poﬁ
)

177 
Æloˇt‹
->
ow√r
 = 
poﬁ
;

178 
	}
}

180 
	$APR_DECLARE
(
≠r_poﬁ_t
 *Ë
	$≠r_Æloˇt‹_ow√r_gë
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

182  
Æloˇt‹
->
ow√r
;

183 
	}
}

185 
	$APR_DECLARE
(Ë
	$≠r_Æloˇt‹_max_‰ì_£t
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

186 
≠r_size_t
 
ö_size
)

188 
≠r_uöt32_t
 
max_‰ì_ödex
;

189 
≠r_uöt32_t
 
size
 = (
APR_UINT32_TRUNC_CAST
)
ö_size
;

191 #i‡
APR_HAS_THREADS


192 
≠r_thªad_muãx_t
 *
muãx
;

194 
muãx
 = 
	`≠r_Æloˇt‹_muãx_gë
(
Æloˇt‹
);

195 i‡(
muãx
 !
NULL
)

196 
	`≠r_thªad_muãx_lock
(
muãx
);

199 
max_‰ì_ödex
 = 
	`APR_ALIGN
(
size
, 
BOUNDARY_SIZE
Ë>> 
BOUNDARY_INDEX
;

200 
Æloˇt‹
->
cuºít_‰ì_ödex
 +
max_‰ì_ödex
;

201 
Æloˇt‹
->
cuºít_‰ì_ödex
 -Æloˇt‹->
max_‰ì_ödex
;

202 
Æloˇt‹
->
max_‰ì_ödex
 = max_free_index;

203 i‡(
Æloˇt‹
->
cuºít_‰ì_ödex
 > 
max_‰ì_ödex
)

204 
Æloˇt‹
->
cuºít_‰ì_ödex
 = 
max_‰ì_ödex
;

206 #i‡
APR_HAS_THREADS


207 i‡(
muãx
 !
NULL
)

208 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

210 
	}
}

212 
APR_INLINE


213 
≠r_memnode_t
 *
	$Æloˇt‹_Æloc
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
, 
≠r_size_t
 
ö_size
)

215 
≠r_memnode_t
 *
node
, **
ªf
;

216 
≠r_uöt32_t
 
max_ödex
;

217 
≠r_size_t
 
size
, 
i
, 
ödex
;

222 
size
 = 
	`APR_ALIGN
(
ö_size
 + 
APR_MEMNODE_T_SIZE
, 
BOUNDARY_SIZE
);

223 i‡(
size
 < 
ö_size
) {

224  
NULL
;

226 i‡(
size
 < 
MIN_ALLOC
)

227 
size
 = 
MIN_ALLOC
;

232 
ödex
 = (
size
 >> 
BOUNDARY_INDEX
) - 1;

234 i‡(
ödex
 > 
APR_UINT32_MAX
) {

235  
NULL
;

241 i‡(
ödex
 <
Æloˇt‹
->
max_ödex
) {

242 #i‡
APR_HAS_THREADS


243 i‡(
Æloˇt‹
->
muãx
)

244 
	`≠r_thªad_muãx_lock
(
Æloˇt‹
->
muãx
);

257 
max_ödex
 = 
Æloˇt‹
->max_index;

258 
ªf
 = &
Æloˇt‹
->
‰ì
[
ödex
];

259 
i
 = 
ödex
;

260 *
ªf
 =
NULL
 && 
i
 < 
max_ödex
) {

261 
ªf
++;

262 
i
++;

265 i‡((
node
 = *
ªf
Ë!
NULL
) {

271 i‡((*
ªf
 = 
node
->
√xt
Ë=
NULL
 && 
i
 >
max_ödex
) {

273 
ªf
--;

274 
max_ödex
--;

276 *
ªf
 =
NULL
 && 
max_ödex
 > 0);

278 
Æloˇt‹
->
max_ödex
 = max_index;

281 
Æloˇt‹
->
cuºít_‰ì_ödex
 +
node
->
ödex
 + 1;

282 i‡(
Æloˇt‹
->
cuºít_‰ì_ödex
 >áŒoˇt‹->
max_‰ì_ödex
)

283 
Æloˇt‹
->
cuºít_‰ì_ödex
 =áŒoˇt‹->
max_‰ì_ödex
;

285 #i‡
APR_HAS_THREADS


286 i‡(
Æloˇt‹
->
muãx
)

287 
	`≠r_thªad_muãx_u∆ock
(
Æloˇt‹
->
muãx
);

290 
node
->
√xt
 = 
NULL
;

291 
node
->
fú°_avaû
 = (*Íodê+ 
APR_MEMNODE_T_SIZE
;

293  
node
;

296 #i‡
APR_HAS_THREADS


297 i‡(
Æloˇt‹
->
muãx
)

298 
	`≠r_thªad_muãx_u∆ock
(
Æloˇt‹
->
muãx
);

305 i‡(
Æloˇt‹
->
‰ì
[0]) {

306 #i‡
APR_HAS_THREADS


307 i‡(
Æloˇt‹
->
muãx
)

308 
	`≠r_thªad_muãx_lock
(
Æloˇt‹
->
muãx
);

314 
ªf
 = &
Æloˇt‹
->
‰ì
[0];

315 (
node
 = *
ªf
Ë!
NULL
 && 
ödex
 >Çode->index)

316 
ªf
 = &
node
->
√xt
;

318 i‡(
node
) {

319 *
ªf
 = 
node
->
√xt
;

321 
Æloˇt‹
->
cuºít_‰ì_ödex
 +
node
->
ödex
 + 1;

322 i‡(
Æloˇt‹
->
cuºít_‰ì_ödex
 >áŒoˇt‹->
max_‰ì_ödex
)

323 
Æloˇt‹
->
cuºít_‰ì_ödex
 =áŒoˇt‹->
max_‰ì_ödex
;

325 #i‡
APR_HAS_THREADS


326 i‡(
Æloˇt‹
->
muãx
)

327 
	`≠r_thªad_muãx_u∆ock
(
Æloˇt‹
->
muãx
);

330 
node
->
√xt
 = 
NULL
;

331 
node
->
fú°_avaû
 = (*Íodê+ 
APR_MEMNODE_T_SIZE
;

333  
node
;

336 #i‡
APR_HAS_THREADS


337 i‡(
Æloˇt‹
->
muãx
)

338 
	`≠r_thªad_muãx_u∆ock
(
Æloˇt‹
->
muãx
);

345 #i‡
APR_ALLOCATOR_USES_MMAP


346 i‡((
node
 = 
	`mm≠
(
NULL
, 
size
, 
PROT_READ
|
PROT_WRITE
,

347 
MAP_PRIVATE
|
MAP_ANON
, -1, 0)Ë=
MAP_FAILED
)

349 i‡((
node
 = 
	`mÆloc
(
size
)Ë=
NULL
)

351  
NULL
;

353 
node
->
√xt
 = 
NULL
;

354 
node
->
ödex
 = (
APR_UINT32_TRUNC_CAST
)index;

355 
node
->
fú°_avaû
 = (*Íodê+ 
APR_MEMNODE_T_SIZE
;

356 
node
->
ídp
 = (*Íodê+ 
size
;

358  
node
;

359 
	}
}

361 
APR_INLINE


362 
	$Æloˇt‹_‰ì
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
, 
≠r_memnode_t
 *
node
)

364 
≠r_memnode_t
 *
√xt
, *
‰ìli°
 = 
NULL
;

365 
≠r_uöt32_t
 
ödex
, 
max_ödex
;

366 
≠r_uöt32_t
 
max_‰ì_ödex
, 
cuºít_‰ì_ödex
;

368 #i‡
APR_HAS_THREADS


369 i‡(
Æloˇt‹
->
muãx
)

370 
	`≠r_thªad_muãx_lock
(
Æloˇt‹
->
muãx
);

373 
max_ödex
 = 
Æloˇt‹
->max_index;

374 
max_‰ì_ödex
 = 
Æloˇt‹
->max_free_index;

375 
cuºít_‰ì_ödex
 = 
Æloˇt‹
->current_free_index;

381 
√xt
 = 
node
->next;

382 
ödex
 = 
node
->index;

384 i‡(
max_‰ì_ödex
 !
APR_ALLOCATOR_MAX_FREE_UNLIMITED


385 && 
ödex
 + 1 > 
cuºít_‰ì_ödex
) {

386 
node
->
√xt
 = 
‰ìli°
;

387 
‰ìli°
 = 
node
;

389 i‡(
ödex
 < 
MAX_INDEX
) {

393 i‡((
node
->
√xt
 = 
Æloˇt‹
->
‰ì
[
ödex
]Ë=
NULL


394 && 
ödex
 > 
max_ödex
) {

395 
max_ödex
 = 
ödex
;

397 
Æloˇt‹
->
‰ì
[
ödex
] = 
node
;

398 i‡(
cuºít_‰ì_ödex
 >
ödex
 + 1)

399 
cuºít_‰ì_ödex
 -
ödex
 + 1;

401 
cuºít_‰ì_ödex
 = 0;

407 
node
->
√xt
 = 
Æloˇt‹
->
‰ì
[0];

408 
Æloˇt‹
->
‰ì
[0] = 
node
;

409 i‡(
cuºít_‰ì_ödex
 >
ödex
 + 1)

410 
cuºít_‰ì_ödex
 -
ödex
 + 1;

412 
cuºít_‰ì_ödex
 = 0;

414 } (
node
 = 
√xt
Ë!
NULL
);

416 
Æloˇt‹
->
max_ödex
 = max_index;

417 
Æloˇt‹
->
cuºít_‰ì_ödex
 = current_free_index;

419 #i‡
APR_HAS_THREADS


420 i‡(
Æloˇt‹
->
muãx
)

421 
	`≠r_thªad_muãx_u∆ock
(
Æloˇt‹
->
muãx
);

424 
‰ìli°
 !
NULL
) {

425 
node
 = 
‰ìli°
;

426 
‰ìli°
 = 
node
->
√xt
;

427 #i‡
APR_ALLOCATOR_USES_MMAP


428 
	`munm≠
(
node
, (node->
ödex
+1Ë<< 
BOUNDARY_INDEX
);

430 
	`‰ì
(
node
);

433 
	}
}

435 
	$APR_DECLARE
(
≠r_memnode_t
 *Ë
	$≠r_Æloˇt‹_Æloc
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

436 
≠r_size_t
 
size
)

438  
	`Æloˇt‹_Æloc
(
Æloˇt‹
, 
size
);

439 
	}
}

441 
	$APR_DECLARE
(Ë
	$≠r_Æloˇt‹_‰ì
(
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

442 
≠r_memnode_t
 *
node
)

444 
	`Æloˇt‹_‰ì
(
Æloˇt‹
, 
node
);

445 
	}
}

453 
	#APR_POOL_DEBUG_GENERAL
 0x01

	)

454 
	#APR_POOL_DEBUG_VERBOSE
 0x02

	)

455 
	#APR_POOL_DEBUG_LIFETIME
 0x04

	)

456 
	#APR_POOL_DEBUG_OWNER
 0x08

	)

457 
	#APR_POOL_DEBUG_VERBOSE_ALLOC
 0x10

	)

459 
	#APR_POOL_DEBUG_VERBOSE_ALL
 (
APR_POOL_DEBUG_VERBOSE
 \

460 | 
APR_POOL_DEBUG_VERBOSE_ALLOC
)

	)

467 
˛ónup_t
 
	t˛ónup_t
;

470 
	s¥o˚ss_chaö
 {

472 
≠r_¥oc_t
 *
	m¥oc
;

473 
≠r_kûl_c⁄dôi⁄s_e
 
	mkûl_how
;

475 
¥o˚ss_chaö
 *
	m√xt
;

479 #i‡
APR_POOL_DEBUG


481 
debug_node_t
 
	tdebug_node_t
;

483 
	sdebug_node_t
 {

484 
debug_node_t
 *
	m√xt
;

485 
≠r_uöt32_t
 
	mödex
;

486 *
	mbegöp
[64];

487 *
	mídp
[64];

490 
	#SIZEOF_DEBUG_NODE_T
 
	`APR_ALIGN_DEFAULT
((
debug_node_t
))

	)

500 
	s≠r_poﬁ_t
 {

501 
≠r_poﬁ_t
 *
	m∑ª¡
;

502 
≠r_poﬁ_t
 *
	mchûd
;

503 
≠r_poﬁ_t
 *
	msiblög
;

504 
≠r_poﬁ_t
 **
	mªf
;

505 
˛ónup_t
 *
	m˛ónups
;

506 
˛ónup_t
 *
	m‰ì_˛ónups
;

507 
≠r_Æloˇt‹_t
 *
	mÆloˇt‹
;

508 
¥o˚ss_chaö
 *
	msub¥o˚s£s
;

509 
≠r_ab‹tfunc_t
 
	mab‹t_‚
;

510 
≠r_hash_t
 *
	mu£r_d©a
;

511 c⁄° *
	mèg
;

513 #i‡!
APR_POOL_DEBUG


514 
≠r_memnode_t
 *
	ma˘ive
;

515 
≠r_memnode_t
 *
	m£lf
;

516 *
	m£lf_fú°_avaû
;

519 
≠r_poﬁ_t
 *
	mjoöed
;

521 
debug_node_t
 *
	mnodes
;

522 c⁄° *
	mfûe_löe
;

523 
≠r_uöt32_t
 
	m¸óti⁄_Êags
;

524 
	m°©_Æloc
;

525 
	m°©_tŸÆ_Æloc
;

526 
	m°©_˛ór
;

527 #i‡
APR_HAS_THREADS


528 
≠r_os_thªad_t
 
	mow√r
;

529 
≠r_thªad_muãx_t
 *
	mmuãx
;

532 #ifde‡
NETWARE


533 
≠r_os_¥oc_t
 
	mow√r_¥oc
;

535 
˛ónup_t
 *
	m¥e_˛ónups
;

538 
	#SIZEOF_POOL_T
 
	`APR_ALIGN_DEFAULT
((
≠r_poﬁ_t
))

	)

545 
≠r_byã_t
 
	g≠r_poﬁs_öôülized
 = 0;

546 
≠r_poﬁ_t
 *
	gglobÆ_poﬁ
 = 
NULL
;

548 #i‡!
APR_POOL_DEBUG


549 
≠r_Æloˇt‹_t
 *
	gglobÆ_Æloˇt‹
 = 
NULL
;

552 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

553 
≠r_fûe_t
 *
	gfûe_°dîr
 = 
NULL
;

560 
run_˛ónups
(
˛ónup_t
 **
c
);

561 
‰ì_¥oc_chaö
(
¥o˚ss_chaö
 *
¥ocs
);

563 #i‡
APR_POOL_DEBUG


564 
poﬁ_de°roy_debug
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
fûe_löe
);

567 #i‡!
APR_POOL_DEBUG


572 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_öôülize
()

574 
≠r_°©us_t
 
rv
;

576 i‡(
≠r_poﬁs_öôülized
++)

577  
APR_SUCCESS
;

579 #i‡
APR_ALLOCATOR_USES_MMAP
 && 
	`deföed
(
_SC_PAGESIZE
)

580 
bound¨y_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

581 
bound¨y_ödex
 = 12;

582  (1 << 
bound¨y_ödex
Ë< 
bound¨y_size
)

583 
bound¨y_ödex
++;

584 
bound¨y_size
 = (1 << 
bound¨y_ödex
);

587 i‡((
rv
 = 
	`≠r_Æloˇt‹_¸óã
(&
globÆ_Æloˇt‹
)Ë!
APR_SUCCESS
) {

588 
≠r_poﬁs_öôülized
 = 0;

589  
rv
;

592 i‡((
rv
 = 
	`≠r_poﬁ_¸óã_ex
(&
globÆ_poﬁ
, 
NULL
, NULL,

593 
globÆ_Æloˇt‹
)Ë!
APR_SUCCESS
) {

594 
	`≠r_Æloˇt‹_de°roy
(
globÆ_Æloˇt‹
);

595 
globÆ_Æloˇt‹
 = 
NULL
;

596 
≠r_poﬁs_öôülized
 = 0;

597  
rv
;

600 
	`≠r_poﬁ_èg
(
globÆ_poﬁ
, "apr_global_pool");

608 i‡((
rv
 = 
	`≠r_©omic_öô
(
globÆ_poﬁ
)Ë!
APR_SUCCESS
) {

609  
rv
;

612 #i‡
APR_HAS_THREADS


614 
≠r_thªad_muãx_t
 *
muãx
;

616 i‡((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
,

617 
APR_THREAD_MUTEX_DEFAULT
,

618 
globÆ_poﬁ
)Ë!
APR_SUCCESS
) {

619  
rv
;

622 
	`≠r_Æloˇt‹_muãx_£t
(
globÆ_Æloˇt‹
, 
muãx
);

626 
	`≠r_Æloˇt‹_ow√r_£t
(
globÆ_Æloˇt‹
, 
globÆ_poﬁ
);

628  
APR_SUCCESS
;

629 
	}
}

631 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_ãrmö©e
()

633 i‡(!
≠r_poﬁs_öôülized
)

636 i‡(--
≠r_poﬁs_öôülized
)

639 
	`≠r_poﬁ_de°roy
(
globÆ_poﬁ
);

640 
globÆ_poﬁ
 = 
NULL
;

642 
globÆ_Æloˇt‹
 = 
NULL
;

643 
	}
}

648 
	#li°_ö£π
(
node
, 
poöt
) do { \

649 
node
->
ªf
 = 
poöt
->ref; \

650 *
node
->
ªf
 =Çode; \

651 
node
->
√xt
 = 
poöt
; \

652 
poöt
->
ªf
 = &
node
->
√xt
; \

653 } 0)

	)

656 
	#li°_ªmove
(
node
) do { \

657 *
node
->
ªf
 =Çode->
√xt
; \

658 
node
->
√xt
->
ªf
 =Çode->ref; \

659 } 0)

	)

662 
	#node_‰ì_•a˚
(
node_
Ë((
≠r_size_t
)“ode_->
ídp
 -Çode_->
fú°_avaû
))

	)

668 
	$APR_DECLARE
(*Ë
	$≠r_∑Œoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
ö_size
)

670 
≠r_memnode_t
 *
a˘ive
, *
node
;

671 *
mem
;

672 
≠r_size_t
 
size
, 
‰ì_ödex
;

674 
size
 = 
	`APR_ALIGN_DEFAULT
(
ö_size
);

675 i‡(
size
 < 
ö_size
) {

676 i‡(
poﬁ
->
ab‹t_‚
)

677 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

679  
NULL
;

681 
a˘ive
 = 
poﬁ
->active;

684 i‡(
size
 <
	`node_‰ì_•a˚
(
a˘ive
)) {

685 
mem
 = 
a˘ive
->
fú°_avaû
;

686 
a˘ive
->
fú°_avaû
 +
size
;

688  
mem
;

691 
node
 = 
a˘ive
->
√xt
;

692 i‡(
size
 <
	`node_‰ì_•a˚
(
node
)) {

693 
	`li°_ªmove
(
node
);

696 i‡((
node
 = 
	`Æloˇt‹_Æloc
(
poﬁ
->
Æloˇt‹
, 
size
)Ë=
NULL
) {

697 i‡(
poﬁ
->
ab‹t_‚
)

698 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

700  
NULL
;

704 
node
->
‰ì_ödex
 = 0;

706 
mem
 = 
node
->
fú°_avaû
;

707 
node
->
fú°_avaû
 +
size
;

709 
	`li°_ö£π
(
node
, 
a˘ive
);

711 
poﬁ
->
a˘ive
 = 
node
;

713 
‰ì_ödex
 = (
	`APR_ALIGN
(
a˘ive
->
ídp
 -á˘ive->
fú°_avaû
 + 1,

714 
BOUNDARY_SIZE
Ë- BOUNDARY_SIZEË>> 
BOUNDARY_INDEX
;

716 
a˘ive
->
‰ì_ödex
 = (
APR_UINT32_TRUNC_CAST
)free_index;

717 
node
 = 
a˘ive
->
√xt
;

718 i‡(
‰ì_ödex
 >
node
->free_index)

719  
mem
;

722 
node
 =Çode->
√xt
;

724 
‰ì_ödex
 < 
node
->free_index);

726 
	`li°_ªmove
(
a˘ive
);

727 
	`li°_ö£π
(
a˘ive
, 
node
);

729  
mem
;

730 
	}
}

736 #ifde‡
≠r_pˇŒoc


737 #unde‡
≠r_pˇŒoc


740 
	$APR_DECLARE
(*Ë
	`≠r_pˇŒoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
);

741 
	$APR_DECLARE
(*Ë
	$≠r_pˇŒoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
)

743 *
mem
;

745 i‡((
mem
 = 
	`≠r_∑Œoc
(
poﬁ
, 
size
)Ë!
NULL
) {

746 
	`mem£t
(
mem
, 0, 
size
);

749  
mem
;

750 
	}
}

757 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ór
(
≠r_poﬁ_t
 *
poﬁ
)

759 
≠r_memnode_t
 *
a˘ive
;

762 
	`run_˛ónups
(&
poﬁ
->
¥e_˛ónups
);

763 
poﬁ
->
¥e_˛ónups
 = 
NULL
;

768 
poﬁ
->
chûd
)

769 
	`≠r_poﬁ_de°roy
(
poﬁ
->
chûd
);

772 
	`run_˛ónups
(&
poﬁ
->
˛ónups
);

773 
poﬁ
->
˛ónups
 = 
NULL
;

774 
poﬁ
->
‰ì_˛ónups
 = 
NULL
;

777 
	`‰ì_¥oc_chaö
(
poﬁ
->
sub¥o˚s£s
);

778 
poﬁ
->
sub¥o˚s£s
 = 
NULL
;

781 
poﬁ
->
u£r_d©a
 = 
NULL
;

786 
a˘ive
 = 
poﬁ
->a˘ivêpoﬁ->
£lf
;

787 
a˘ive
->
fú°_avaû
 = 
poﬁ
->
£lf_fú°_avaû
;

789 i‡(
a˘ive
->
√xt
 ==áctive)

792 *
a˘ive
->
ªf
 = 
NULL
;

793 
	`Æloˇt‹_‰ì
(
poﬁ
->
Æloˇt‹
, 
a˘ive
->
√xt
);

794 
a˘ive
->
√xt
 =áctive;

795 
a˘ive
->
ªf
 = &a˘ive->
√xt
;

796 
	}
}

798 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_de°roy
(
≠r_poﬁ_t
 *
poﬁ
)

800 
≠r_memnode_t
 *
a˘ive
;

801 
≠r_Æloˇt‹_t
 *
Æloˇt‹
;

804 
	`run_˛ónups
(&
poﬁ
->
¥e_˛ónups
);

805 
poﬁ
->
¥e_˛ónups
 = 
NULL
;

810 
poﬁ
->
chûd
)

811 
	`≠r_poﬁ_de°roy
(
poﬁ
->
chûd
);

814 
	`run_˛ónups
(&
poﬁ
->
˛ónups
);

817 
	`‰ì_¥oc_chaö
(
poﬁ
->
sub¥o˚s£s
);

820 i‡(
poﬁ
->
∑ª¡
) {

821 #i‡
APR_HAS_THREADS


822 
≠r_thªad_muãx_t
 *
muãx
;

824 i‡((
muãx
 = 
	`≠r_Æloˇt‹_muãx_gë
(
poﬁ
->
∑ª¡
->
Æloˇt‹
)Ë!
NULL
)

825 
	`≠r_thªad_muãx_lock
(
muãx
);

828 i‡((*
poﬁ
->
ªf
 =Öoﬁ->
siblög
Ë!
NULL
)

829 
poﬁ
->
siblög
->
ªf
 =Öool->ref;

831 #i‡
APR_HAS_THREADS


832 i‡(
muãx
)

833 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

840 
Æloˇt‹
 = 
poﬁ
->allocator;

841 
a˘ive
 = 
poﬁ
->
£lf
;

842 *
a˘ive
->
ªf
 = 
NULL
;

844 #i‡
APR_HAS_THREADS


845 i‡(
	`≠r_Æloˇt‹_ow√r_gë
(
Æloˇt‹
Ë=
poﬁ
) {

849 
	`≠r_Æloˇt‹_muãx_£t
(
Æloˇt‹
, 
NULL
);

856 
	`Æloˇt‹_‰ì
(
Æloˇt‹
, 
a˘ive
);

863 i‡(
	`≠r_Æloˇt‹_ow√r_gë
(
Æloˇt‹
Ë=
poﬁ
) {

864 
	`≠r_Æloˇt‹_de°roy
(
Æloˇt‹
);

866 
	}
}

868 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

869 
≠r_poﬁ_t
 *
∑ª¡
,

870 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

871 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

873 
≠r_poﬁ_t
 *
poﬁ
;

874 
≠r_memnode_t
 *
node
;

876 *
√wpoﬁ
 = 
NULL
;

878 i‡(!
∑ª¡
)

879 
∑ª¡
 = 
globÆ_poﬁ
;

885 i‡(!
ab‹t_‚
 && 
∑ª¡
)

886 
ab‹t_‚
 = 
∑ª¡
->abort_fn;

888 i‡(
Æloˇt‹
 =
NULL
)

889 
Æloˇt‹
 = 
∑ª¡
->allocator;

891 i‡((
node
 = 
	`Æloˇt‹_Æloc
(
Æloˇt‹
,

892 
MIN_ALLOC
 - 
APR_MEMNODE_T_SIZE
)Ë=
NULL
) {

893 i‡(
ab‹t_‚
)

894 
	`ab‹t_‚
(
APR_ENOMEM
);

896  
APR_ENOMEM
;

899 
node
->
√xt
 =Çode;

900 
node
->
ªf
 = &node->
√xt
;

902 
poﬁ
 = (
≠r_poﬁ_t
 *)
node
->
fú°_avaû
;

903 
node
->
fú°_avaû
 = 
poﬁ
->
£lf_fú°_avaû
 = (*Ìoﬁ + 
SIZEOF_POOL_T
;

905 
poﬁ
->
Æloˇt‹
 =állocator;

906 
poﬁ
->
a˘ive
 =Öoﬁ->
£lf
 = 
node
;

907 
poﬁ
->
ab‹t_‚
 =ábort_fn;

908 
poﬁ
->
chûd
 = 
NULL
;

909 
poﬁ
->
˛ónups
 = 
NULL
;

910 
poﬁ
->
‰ì_˛ónups
 = 
NULL
;

911 
poﬁ
->
¥e_˛ónups
 = 
NULL
;

912 
poﬁ
->
sub¥o˚s£s
 = 
NULL
;

913 
poﬁ
->
u£r_d©a
 = 
NULL
;

914 
poﬁ
->
èg
 = 
NULL
;

916 #ifde‡
NETWARE


917 
poﬁ
->
ow√r_¥oc
 = (
≠r_os_¥oc_t
)
	`gë∆mh™dÀ
();

920 i‡((
poﬁ
->
∑ª¡
 =Ö¨ítË!
NULL
) {

921 #i‡
APR_HAS_THREADS


922 
≠r_thªad_muãx_t
 *
muãx
;

924 i‡((
muãx
 = 
	`≠r_Æloˇt‹_muãx_gë
(
∑ª¡
->
Æloˇt‹
)Ë!
NULL
)

925 
	`≠r_thªad_muãx_lock
(
muãx
);

928 i‡((
poﬁ
->
siblög
 = 
∑ª¡
->
chûd
Ë!
NULL
)

929 
poﬁ
->
siblög
->
ªf
 = &pool->sibling;

931 
∑ª¡
->
chûd
 = 
poﬁ
;

932 
poﬁ
->
ªf
 = &
∑ª¡
->
chûd
;

934 #i‡
APR_HAS_THREADS


935 i‡(
muãx
)

936 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

940 
poﬁ
->
siblög
 = 
NULL
;

941 
poﬁ
->
ªf
 = 
NULL
;

944 *
√wpoﬁ
 = 
poﬁ
;

946  
APR_SUCCESS
;

947 
	}
}

951 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_c‹e_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

952 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

953 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

955  
	`≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
);

956 
	}
}

958 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_unm™aged_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

959 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

960 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

962 
≠r_poﬁ_t
 *
poﬁ
;

963 
≠r_memnode_t
 *
node
;

964 
≠r_Æloˇt‹_t
 *
poﬁ_Æloˇt‹
;

966 *
√wpoﬁ
 = 
NULL
;

968 i‡(!
≠r_poﬁs_öôülized
)

969  
APR_ENOPOOL
;

970 i‡((
poﬁ_Æloˇt‹
 = 
Æloˇt‹
Ë=
NULL
) {

971 i‡((
poﬁ_Æloˇt‹
 = 
	`mÆloc
(
SIZEOF_ALLOCATOR_T
)Ë=
NULL
) {

972 i‡(
ab‹t_‚
)

973 
	`ab‹t_‚
(
APR_ENOMEM
);

975  
APR_ENOMEM
;

977 
	`mem£t
(
poﬁ_Æloˇt‹
, 0, 
SIZEOF_ALLOCATOR_T
);

978 
poﬁ_Æloˇt‹
->
max_‰ì_ödex
 = 
APR_ALLOCATOR_MAX_FREE_UNLIMITED
;

980 i‡((
node
 = 
	`Æloˇt‹_Æloc
(
poﬁ_Æloˇt‹
,

981 
MIN_ALLOC
 - 
APR_MEMNODE_T_SIZE
)Ë=
NULL
) {

982 i‡(
ab‹t_‚
)

983 
	`ab‹t_‚
(
APR_ENOMEM
);

985  
APR_ENOMEM
;

988 
node
->
√xt
 =Çode;

989 
node
->
ªf
 = &node->
√xt
;

991 
poﬁ
 = (
≠r_poﬁ_t
 *)
node
->
fú°_avaû
;

992 
node
->
fú°_avaû
 = 
poﬁ
->
£lf_fú°_avaû
 = (*Ìoﬁ + 
SIZEOF_POOL_T
;

994 
poﬁ
->
Æloˇt‹
 = 
poﬁ_Æloˇt‹
;

995 
poﬁ
->
a˘ive
 =Öoﬁ->
£lf
 = 
node
;

996 
poﬁ
->
ab‹t_‚
 =ábort_fn;

997 
poﬁ
->
chûd
 = 
NULL
;

998 
poﬁ
->
˛ónups
 = 
NULL
;

999 
poﬁ
->
‰ì_˛ónups
 = 
NULL
;

1000 
poﬁ
->
¥e_˛ónups
 = 
NULL
;

1001 
poﬁ
->
sub¥o˚s£s
 = 
NULL
;

1002 
poﬁ
->
u£r_d©a
 = 
NULL
;

1003 
poﬁ
->
èg
 = 
NULL
;

1004 
poﬁ
->
∑ª¡
 = 
NULL
;

1005 
poﬁ
->
siblög
 = 
NULL
;

1006 
poﬁ
->
ªf
 = 
NULL
;

1008 #ifde‡
NETWARE


1009 
poﬁ
->
ow√r_¥oc
 = (
≠r_os_¥oc_t
)
	`gë∆mh™dÀ
();

1011 i‡(!
Æloˇt‹
)

1012 
poﬁ_Æloˇt‹
->
ow√r
 = 
poﬁ
;

1013 *
√wpoﬁ
 = 
poﬁ
;

1015  
APR_SUCCESS
;

1016 
	}
}

1036 
	sp•rötf_d©a
 {

1037 
≠r_vf‹m©ãr_buff_t
 
	mvbuff
;

1038 
≠r_memnode_t
 *
	mnode
;

1039 
≠r_poﬁ_t
 *
	mpoﬁ
;

1040 
≠r_byã_t
 
	mgŸ_a_√w_node
;

1041 
≠r_memnode_t
 *
	m‰ì
;

1044 
	#APR_PSPRINTF_MIN_STRINGSIZE
 32

	)

1046 
	$p•rötf_Êush
(
≠r_vf‹m©ãr_buff_t
 *
vbuff
)

1048 
p•rötf_d©a
 *
ps
 = (p•rötf_d©®*)
vbuff
;

1049 
≠r_memnode_t
 *
node
, *
a˘ive
;

1050 
≠r_size_t
 
cur_Àn
, 
size
;

1051 *
°Ω
;

1052 
≠r_poﬁ_t
 *
poﬁ
;

1053 
≠r_size_t
 
‰ì_ödex
;

1055 
poﬁ
 = 
ps
->pool;

1056 
a˘ive
 = 
ps
->
node
;

1057 
°Ω
 = 
ps
->
vbuff
.
cuΩos
;

1058 
cur_Àn
 = 
°Ω
 - 
a˘ive
->
fú°_avaû
;

1059 
size
 = 
cur_Àn
 << 1;

1066 i‡(
size
 < 
APR_PSPRINTF_MIN_STRINGSIZE
)

1067 
size
 = 
APR_PSPRINTF_MIN_STRINGSIZE
;

1069 
node
 = 
a˘ive
->
√xt
;

1070 i‡(!
ps
->
gŸ_a_√w_node
 && 
size
 <
	`node_‰ì_•a˚
(
node
)) {

1072 
	`li°_ªmove
(
node
);

1073 
	`li°_ö£π
(
node
, 
a˘ive
);

1075 
node
->
‰ì_ödex
 = 0;

1077 
poﬁ
->
a˘ive
 = 
node
;

1079 
‰ì_ödex
 = (
	`APR_ALIGN
(
a˘ive
->
ídp
 -á˘ive->
fú°_avaû
 + 1,

1080 
BOUNDARY_SIZE
Ë- BOUNDARY_SIZEË>> 
BOUNDARY_INDEX
;

1082 
a˘ive
->
‰ì_ödex
 = (
APR_UINT32_TRUNC_CAST
)free_index;

1083 
node
 = 
a˘ive
->
√xt
;

1084 i‡(
‰ì_ödex
 < 
node
->free_index) {

1086 
node
 =Çode->
√xt
;

1088 
‰ì_ödex
 < 
node
->free_index);

1090 
	`li°_ªmove
(
a˘ive
);

1091 
	`li°_ö£π
(
a˘ive
, 
node
);

1094 
node
 = 
poﬁ
->
a˘ive
;

1097 i‡((
node
 = 
	`Æloˇt‹_Æloc
(
poﬁ
->
Æloˇt‹
, 
size
)Ë=
NULL
)

1100 i‡(
ps
->
gŸ_a_√w_node
) {

1101 
a˘ive
->
√xt
 = 
ps
->
‰ì
;

1102 
ps
->
‰ì
 = 
a˘ive
;

1105 
ps
->
gŸ_a_√w_node
 = 1;

1108 
	`mem˝y
(
node
->
fú°_avaû
, 
a˘ive
->fú°_avaû, 
cur_Àn
);

1110 
ps
->
node
 =Çode;

1111 
ps
->
vbuff
.
cuΩos
 = 
node
->
fú°_avaû
 + 
cur_Àn
;

1112 
ps
->
vbuff
.
ídpos
 = 
node
->
ídp
 - 1;

1115 
	}
}

1117 
	$APR_DECLARE
(*Ë
	$≠r_pv•rötf
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
fmt
, 
va_li°
 
≠
)

1119 
p•rötf_d©a
 
ps
;

1120 *
°Ω
;

1121 
≠r_size_t
 
size
;

1122 
≠r_memnode_t
 *
a˘ive
, *
node
;

1123 
≠r_size_t
 
‰ì_ödex
;

1125 
ps
.
node
 = 
a˘ive
 = 
poﬁ
->active;

1126 
ps
.
poﬁ
 =Öool;

1127 
ps
.
vbuff
.
cuΩos
 =Ös.
node
->
fú°_avaû
;

1130 
ps
.
vbuff
.
ídpos
 =Ös.
node
->
ídp
 - 1;

1131 
ps
.
gŸ_a_√w_node
 = 0;

1132 
ps
.
‰ì
 = 
NULL
;

1137 i‡(
ps
.
node
->
fú°_avaû
 =ps.node->
ídp
) {

1138 i‡(
	`p•rötf_Êush
(&
ps
.
vbuff
) == -1) {

1139 i‡(
poﬁ
->
ab‹t_‚
) {

1140 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1143  
NULL
;

1147 i‡(
	`≠r_vf‹m©ãr
(
p•rötf_Êush
, &
ps
.
vbuff
, 
fmt
, 
≠
) == -1) {

1148 i‡(
poﬁ
->
ab‹t_‚
)

1149 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1151  
NULL
;

1154 
°Ω
 = 
ps
.
vbuff
.
cuΩos
;

1155 *
°Ω
++ = '\0';

1157 
size
 = 
°Ω
 - 
ps
.
node
->
fú°_avaû
;

1158 
size
 = 
	`APR_ALIGN_DEFAULT
(size);

1159 
°Ω
 = 
ps
.
node
->
fú°_avaû
;

1160 
ps
.
node
->
fú°_avaû
 +
size
;

1162 i‡(
ps
.
‰ì
)

1163 
	`Æloˇt‹_‰ì
(
poﬁ
->
Æloˇt‹
, 
ps
.
‰ì
);

1168 i‡(!
ps
.
gŸ_a_√w_node
)

1169  
°Ω
;

1171 
a˘ive
 = 
poﬁ
->active;

1172 
node
 = 
ps
.node;

1174 
node
->
‰ì_ödex
 = 0;

1176 
	`li°_ö£π
(
node
, 
a˘ive
);

1178 
poﬁ
->
a˘ive
 = 
node
;

1180 
‰ì_ödex
 = (
	`APR_ALIGN
(
a˘ive
->
ídp
 -á˘ive->
fú°_avaû
 + 1,

1181 
BOUNDARY_SIZE
Ë- BOUNDARY_SIZEË>> 
BOUNDARY_INDEX
;

1183 
a˘ive
->
‰ì_ödex
 = (
APR_UINT32_TRUNC_CAST
)free_index;

1184 
node
 = 
a˘ive
->
√xt
;

1186 i‡(
‰ì_ödex
 >
node
->free_index)

1187  
°Ω
;

1190 
node
 =Çode->
√xt
;

1192 
‰ì_ödex
 < 
node
->free_index);

1194 
	`li°_ªmove
(
a˘ive
);

1195 
	`li°_ö£π
(
a˘ive
, 
node
);

1197  
°Ω
;

1198 
	}
}

1212 
≠r_poﬁ_wÆk_åì
(
≠r_poﬁ_t
 *
poﬁ
,

1213 (*
‚
)(
≠r_poﬁ_t
 *
poﬁ
, *
d©a
),

1214 *
d©a
)

1216 
rv
;

1217 
≠r_poﬁ_t
 *
chûd
;

1219 
rv
 = 
	`‚
(
poﬁ
, 
d©a
);

1220 i‡(
rv
)

1221  
rv
;

1223 #i‡
APR_HAS_THREADS


1224 i‡(
poﬁ
->
muãx
) {

1225 
	`≠r_thªad_muãx_lock
(
poﬁ
->
muãx
);

1229 
chûd
 = 
poﬁ
->child;

1230 
chûd
) {

1231 
rv
 = 
	`≠r_poﬁ_wÆk_åì
(
chûd
, 
‚
, 
d©a
);

1232 i‡(
rv
)

1235 
chûd
 = chûd->
siblög
;

1238 #i‡
APR_HAS_THREADS


1239 i‡(
poﬁ
->
muãx
) {

1240 
	`≠r_thªad_muãx_u∆ock
(
poﬁ
->
muãx
);

1244  
rv
;

1245 
	}
}

1247 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1248 
	$≠r_poﬁ_log_evít
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
evít
,

1249 c⁄° *
fûe_löe
, 
dîef
)

1251 i‡(
fûe_°dîr
) {

1252 i‡(
dîef
) {

1253 
	`≠r_fûe_¥ötf
(
fûe_°dîr
,

1256 #i‡
APR_HAS_THREADS


1266 ()
	`gëpid
(),

1267 #i‡
APR_HAS_THREADS


1268 ()
	`≠r_os_thªad_cuºít
(),

1270 
evít
,

1271 ()
	`≠r_poﬁ_num_byãs
(
poﬁ
, 0),

1272 ()
	`≠r_poﬁ_num_byãs
(
poﬁ
, 1),

1273 ()
	`≠r_poﬁ_num_byãs
(
globÆ_poﬁ
, 1),

1274 
poﬁ
,Öoﬁ->
èg
,

1275 
fûe_löe
,

1276 
poﬁ
->
°©_Æloc
,Öoﬁ->
°©_tŸÆ_Æloc
,Öoﬁ->
°©_˛ór
);

1279 
	`≠r_fûe_¥ötf
(
fûe_°dîr
,

1282 #i‡
APR_HAS_THREADS


1291 ()
	`gëpid
(),

1292 #i‡
APR_HAS_THREADS


1293 ()
	`≠r_os_thªad_cuºít
(),

1295 
evít
,

1296 
poﬁ
,

1297 
fûe_löe
);

1300 
	}
}

1303 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_LIFETIME
)

1304 
	$poﬁ_is_chûd_of
(
≠r_poﬁ_t
 *
∑ª¡
, *
d©a
)

1306 
≠r_poﬁ_t
 *
poﬁ
 = (≠r_poﬁ_à*)
d©a
;

1308  (
poﬁ
 =
∑ª¡
);

1309 
	}
}

1311 
	$≠r_poﬁ_is_chûd_of
(
≠r_poﬁ_t
 *
poﬁ
,á¥_poﬁ_à*
∑ª¡
)

1313 i‡(
∑ª¡
 =
NULL
)

1316  
	`≠r_poﬁ_wÆk_åì
(
∑ª¡
, 
poﬁ_is_chûd_of
, 
poﬁ
);

1317 
	}
}

1320 
	$≠r_poﬁ_check_öãgrôy
(
≠r_poﬁ_t
 *
poﬁ
)

1327 i‡(
poﬁ
 =
globÆ_poﬁ
 || globÆ_poﬁ =
NULL
)

1335 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_LIFETIME
)

1336 i‡(!
	`≠r_poﬁ_is_chûd_of
(
poﬁ
, 
globÆ_poﬁ
)) {

1337 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1338 
	`≠r_poﬁ_log_evít
(
poﬁ
, "LIFE",

1339 
__FILE__
 ":apr_pool_integrity check", 0);

1341 
	`ab‹t
();

1345 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_OWNER
)

1346 #i‡
APR_HAS_THREADS


1347 i‡(!
	`≠r_os_thªad_equÆ
(
poﬁ
->
ow√r
, 
	`≠r_os_thªad_cuºít
())) {

1348 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1349 
	`≠r_poﬁ_log_evít
(
poﬁ
, "THREAD",

1350 
__FILE__
 ":apr_pool_integrity check", 0);

1352 
	`ab‹t
();

1356 
	}
}

1363 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_öôülize
()

1365 
≠r_°©us_t
 
rv
;

1366 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1367 *
log∑th
;

1368 
≠r_fûe_t
 *
debug_log
 = 
NULL
;

1371 i‡(
≠r_poﬁs_öôülized
++)

1372  
APR_SUCCESS
;

1374 #i‡
APR_ALLOCATOR_USES_MMAP
 && 
	`deföed
(
_SC_PAGESIZE
)

1375 
bound¨y_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1376 
bound¨y_ödex
 = 12;

1377  (1 << 
bound¨y_ödex
Ë< 
bound¨y_size
)

1378 
bound¨y_ödex
++;

1379 
bound¨y_size
 = (1 << 
bound¨y_ödex
);

1387 i‡((
rv
 = 
	`≠r_poﬁ_¸óã_ex
(&
globÆ_poﬁ
, 
NULL
, NULL,

1388 
NULL
)Ë!
APR_SUCCESS
) {

1389  
rv
;

1392 
	`≠r_poﬁ_èg
(
globÆ_poﬁ
, "APR globalÖool");

1394 
≠r_poﬁs_öôülized
 = 1;

1399 i‡((
rv
 = 
	`≠r_©omic_öô
(
globÆ_poﬁ
)Ë!
APR_SUCCESS
) {

1400  
rv
;

1403 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1404 
rv
 = 
	`≠r_ív_gë
(&
log∑th
, "APR_POOL_DEBUG_LOG", 
globÆ_poﬁ
);

1410 i‡(
rv
 =
APR_SUCCESS
) {

1411 
	`≠r_fûe_›í
(&
debug_log
, 
log∑th
, 
APR_APPEND
|
APR_WRITE
|
APR_CREATE
,

1412 
APR_OS_DEFAULT
, 
globÆ_poﬁ
);

1415 
	`≠r_fûe_›í_°dîr
(&
debug_log
, 
globÆ_poﬁ
);

1419 
fûe_°dîr
 = 
debug_log
;

1421 i‡(
fûe_°dîr
) {

1422 
	`≠r_fûe_¥ötf
(
fûe_°dîr
,

1424 #i‡
APR_HAS_THREADS


1430 
	`≠r_poﬁ_log_evít
(
globÆ_poﬁ
, "GLOBAL", 
__FILE__
 ":apr_pool_initialize", 0);

1434  
APR_SUCCESS
;

1435 
	}
}

1437 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_ãrmö©e
()

1439 i‡(!
≠r_poﬁs_öôülized
)

1442 i‡(--
≠r_poﬁs_öôülized
)

1445 
	`≠r_poﬁ_de°roy
(
globÆ_poﬁ
);

1446 
globÆ_poﬁ
 = 
NULL
;

1448 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1449 
fûe_°dîr
 = 
NULL
;

1451 
	}
}

1458 *
	$poﬁ_Æloc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
)

1460 
debug_node_t
 *
node
;

1461 *
mem
;

1463 i‡((
mem
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

1464 i‡(
poﬁ
->
ab‹t_‚
)

1465 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1467  
NULL
;

1470 
node
 = 
poﬁ
->
nodes
;

1471 i‡(
node
 =
NULL
 ||Çode->
ödex
 == 64) {

1472 i‡((
node
 = 
	`mÆloc
(
SIZEOF_DEBUG_NODE_T
)Ë=
NULL
) {

1473 
	`‰ì
(
mem
);

1474 i‡(
poﬁ
->
ab‹t_‚
)

1475 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1477  
NULL
;

1480 
	`mem£t
(
node
, 0, 
SIZEOF_DEBUG_NODE_T
);

1482 
node
->
√xt
 = 
poﬁ
->
nodes
;

1483 
poﬁ
->
nodes
 = 
node
;

1484 
node
->
ödex
 = 0;

1487 
node
->
begöp
[node->
ödex
] = 
mem
;

1488 
node
->
ídp
[node->
ödex
] = (*)
mem
 + 
size
;

1489 
node
->
ödex
++;

1491 
poﬁ
->
°©_Æloc
++;

1492 
poﬁ
->
°©_tŸÆ_Æloc
++;

1494  
mem
;

1495 
	}
}

1497 
	$APR_DECLARE
(*Ë
	$≠r_∑Œoc_debug
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
,

1498 c⁄° *
fûe_löe
)

1500 *
mem
;

1502 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

1504 
mem
 = 
	`poﬁ_Æloc
(
poﬁ
, 
size
);

1506 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALLOC
)

1507 
	`≠r_poﬁ_log_evít
(
poﬁ
, "PALLOC", 
fûe_löe
, 1);

1510  
mem
;

1511 
	}
}

1513 
	$APR_DECLARE
(*Ë
	$≠r_pˇŒoc_debug
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
,

1514 c⁄° *
fûe_löe
)

1516 *
mem
;

1518 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

1520 
mem
 = 
	`poﬁ_Æloc
(
poﬁ
, 
size
);

1521 
	`mem£t
(
mem
, 0, 
size
);

1523 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALLOC
)

1524 
	`≠r_poﬁ_log_evít
(
poﬁ
, "PCALLOC", 
fûe_löe
, 1);

1527  
mem
;

1528 
	}
}

1535 
	#POOL_POISON_BYTE
 'A'

	)

1537 
	$poﬁ_˛ór_debug
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
fûe_löe
)

1539 
debug_node_t
 *
node
;

1540 
≠r_uöt32_t
 
ödex
;

1543 
	`run_˛ónups
(&
poﬁ
->
¥e_˛ónups
);

1544 
poﬁ
->
¥e_˛ónups
 = 
NULL
;

1549 
poﬁ
->
chûd
)

1550 
	`poﬁ_de°roy_debug
(
poﬁ
->
chûd
, 
fûe_löe
);

1553 
	`run_˛ónups
(&
poﬁ
->
˛ónups
);

1554 
poﬁ
->
‰ì_˛ónups
 = 
NULL
;

1555 
poﬁ
->
˛ónups
 = 
NULL
;

1558 i‡(
poﬁ
->
chûd
)

1559 
	`ab‹t
();

1562 
	`‰ì_¥oc_chaö
(
poﬁ
->
sub¥o˚s£s
);

1563 
poﬁ
->
sub¥o˚s£s
 = 
NULL
;

1566 
poﬁ
->
u£r_d©a
 = 
NULL
;

1570 (
node
 = 
poﬁ
->
nodes
Ë!
NULL
) {

1571 
poﬁ
->
nodes
 = 
node
->
√xt
;

1573 
ödex
 = 0; index < 
node
->index; index++) {

1574 
	`mem£t
(
node
->
begöp
[
ödex
], 
POOL_POISON_BYTE
,

1575 (*)
node
->
ídp
[
ödex
] - (*Íode->
begöp
[index]);

1576 
	`‰ì
(
node
->
begöp
[
ödex
]);

1579 
	`mem£t
(
node
, 
POOL_POISON_BYTE
, 
SIZEOF_DEBUG_NODE_T
);

1580 
	`‰ì
(
node
);

1583 
poﬁ
->
°©_Æloc
 = 0;

1584 
poﬁ
->
°©_˛ór
++;

1585 
	}
}

1587 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ór_debug
(
≠r_poﬁ_t
 *
poﬁ
,

1588 c⁄° *
fûe_löe
)

1590 #i‡
APR_HAS_THREADS


1591 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

1594 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

1596 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE
)

1597 
	`≠r_poﬁ_log_evít
(
poﬁ
, "CLEAR", 
fûe_löe
, 1);

1600 #i‡
APR_HAS_THREADS


1601 i‡(
poﬁ
->
∑ª¡
 !
NULL
)

1602 
muãx
 = 
poﬁ
->
∑ª¡
->mutex;

1608 i‡(
muãx
 !
NULL
 && muãx !
poﬁ
->mutex) {

1609 
	`≠r_thªad_muãx_lock
(
muãx
);

1613 
	`poﬁ_˛ór_debug
(
poﬁ
, 
fûe_löe
);

1615 #i‡
APR_HAS_THREADS


1620 i‡(
muãx
 !
poﬁ
->mutex) {

1621 ()
	`≠r_thªad_muãx_¸óã
(&
poﬁ
->
muãx
,

1622 
APR_THREAD_MUTEX_NESTED
, 
poﬁ
);

1624 i‡(
muãx
 !
NULL
)

1625 ()
	`≠r_thªad_muãx_u∆ock
(
muãx
);

1628 
	}
}

1630 
	$poﬁ_de°roy_debug
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
fûe_löe
)

1632 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

1634 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE
)

1635 
	`≠r_poﬁ_log_evít
(
poﬁ
, "DESTROY", 
fûe_löe
, 1);

1638 
	`poﬁ_˛ór_debug
(
poﬁ
, 
fûe_löe
);

1641 i‡(
poﬁ
->
∑ª¡
) {

1642 #i‡
APR_HAS_THREADS


1643 
≠r_thªad_muãx_t
 *
muãx
;

1645 i‡((
muãx
 = 
poﬁ
->
∑ª¡
->muãxË!
NULL
)

1646 
	`≠r_thªad_muãx_lock
(
muãx
);

1649 i‡((*
poﬁ
->
ªf
 =Öoﬁ->
siblög
Ë!
NULL
)

1650 
poﬁ
->
siblög
->
ªf
 =Öool->ref;

1652 #i‡
APR_HAS_THREADS


1653 i‡(
muãx
)

1654 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

1658 i‡(
poﬁ
->
Æloˇt‹
 !
NULL


1659 && 
	`≠r_Æloˇt‹_ow√r_gë
(
poﬁ
->
Æloˇt‹
) ==Öool) {

1660 
	`≠r_Æloˇt‹_de°roy
(
poﬁ
->
Æloˇt‹
);

1664 
	`‰ì
(
poﬁ
);

1665 
	}
}

1667 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_de°roy_debug
(
≠r_poﬁ_t
 *
poﬁ
,

1668 c⁄° *
fûe_löe
)

1670 i‡(
poﬁ
->
joöed
) {

1673 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE_ALL
)

1674 
	`≠r_poﬁ_log_evít
(
poﬁ
, "LIFE",

1675 
__FILE__
 ":apr_pool_destroyábort on joined", 0);

1678 
	`ab‹t
();

1680 
	`poﬁ_de°roy_debug
(
poﬁ
, 
fûe_löe
);

1681 
	}
}

1683 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

1684 
≠r_poﬁ_t
 *
∑ª¡
,

1685 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

1686 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

1687 c⁄° *
fûe_löe
)

1689 
≠r_poﬁ_t
 *
poﬁ
;

1691 *
√wpoﬁ
 = 
NULL
;

1693 i‡(!
∑ª¡
) {

1694 
∑ª¡
 = 
globÆ_poﬁ
;

1697 
	`≠r_poﬁ_check_öãgrôy
(
∑ª¡
);

1699 i‡(!
Æloˇt‹
)

1700 
Æloˇt‹
 = 
∑ª¡
->allocator;

1703 i‡(!
ab‹t_‚
 && 
∑ª¡
)

1704 
ab‹t_‚
 = 
∑ª¡
->abort_fn;

1706 i‡((
poﬁ
 = 
	`mÆloc
(
SIZEOF_POOL_T
)Ë=
NULL
) {

1707 i‡(
ab‹t_‚
)

1708 
	`ab‹t_‚
(
APR_ENOMEM
);

1710  
APR_ENOMEM
;

1713 
	`mem£t
(
poﬁ
, 0, 
SIZEOF_POOL_T
);

1715 
poﬁ
->
Æloˇt‹
 =állocator;

1716 
poﬁ
->
ab‹t_‚
 =ábort_fn;

1717 
poﬁ
->
èg
 = 
fûe_löe
;

1718 
poﬁ
->
fûe_löe
 = file_line;

1720 i‡((
poﬁ
->
∑ª¡
 =Ö¨ítË!
NULL
) {

1721 #i‡
APR_HAS_THREADS


1722 i‡(
∑ª¡
->
muãx
)

1723 
	`≠r_thªad_muãx_lock
(
∑ª¡
->
muãx
);

1725 i‡((
poﬁ
->
siblög
 = 
∑ª¡
->
chûd
Ë!
NULL
)

1726 
poﬁ
->
siblög
->
ªf
 = &pool->sibling;

1728 
∑ª¡
->
chûd
 = 
poﬁ
;

1729 
poﬁ
->
ªf
 = &
∑ª¡
->
chûd
;

1731 #i‡
APR_HAS_THREADS


1732 i‡(
∑ª¡
->
muãx
)

1733 
	`≠r_thªad_muãx_u∆ock
(
∑ª¡
->
muãx
);

1737 
poﬁ
->
siblög
 = 
NULL
;

1738 
poﬁ
->
ªf
 = 
NULL
;

1741 #i‡
APR_HAS_THREADS


1742 
poﬁ
->
ow√r
 = 
	`≠r_os_thªad_cuºít
();

1744 #ifde‡
NETWARE


1745 
poﬁ
->
ow√r_¥oc
 = (
≠r_os_¥oc_t
)
	`gë∆mh™dÀ
();

1749 i‡(
∑ª¡
 =
NULL
 ||Ö¨ít->
Æloˇt‹
 !=állocator) {

1750 #i‡
APR_HAS_THREADS


1751 
≠r_°©us_t
 
rv
;

1761 i‡((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
poﬁ
->
muãx
,

1762 
APR_THREAD_MUTEX_NESTED
, 
poﬁ
)Ë!
APR_SUCCESS
) {

1763 
	`‰ì
(
poﬁ
);

1764  
rv
;

1769 #i‡
APR_HAS_THREADS


1770 i‡(
∑ª¡
)

1771 
poﬁ
->
muãx
 = 
∑ª¡
->mutex;

1775 *
√wpoﬁ
 = 
poﬁ
;

1777 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE
)

1778 
	`≠r_poﬁ_log_evít
(
poﬁ
, "CREATE", 
fûe_löe
, 1);

1781  
APR_SUCCESS
;

1782 
	}
}

1784 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_c‹e_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

1785 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

1786 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

1787 c⁄° *
fûe_löe
)

1789  
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
,

1790 
fûe_löe
);

1791 
	}
}

1793 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_unm™aged_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

1794 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

1795 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

1796 c⁄° *
fûe_löe
)

1798 
≠r_poﬁ_t
 *
poﬁ
;

1799 
≠r_Æloˇt‹_t
 *
poﬁ_Æloˇt‹
;

1801 *
√wpoﬁ
 = 
NULL
;

1803 i‡((
poﬁ
 = 
	`mÆloc
(
SIZEOF_POOL_T
)Ë=
NULL
) {

1804 i‡(
ab‹t_‚
)

1805 
	`ab‹t_‚
(
APR_ENOMEM
);

1807  
APR_ENOMEM
;

1810 
	`mem£t
(
poﬁ
, 0, 
SIZEOF_POOL_T
);

1812 
poﬁ
->
ab‹t_‚
 =ábort_fn;

1813 
poﬁ
->
èg
 = 
fûe_löe
;

1814 
poﬁ
->
fûe_löe
 = file_line;

1816 #i‡
APR_HAS_THREADS


1817 
poﬁ
->
ow√r
 = 
	`≠r_os_thªad_cuºít
();

1819 #ifde‡
NETWARE


1820 
poﬁ
->
ow√r_¥oc
 = (
≠r_os_¥oc_t
)
	`gë∆mh™dÀ
();

1823 i‡((
poﬁ_Æloˇt‹
 = 
Æloˇt‹
Ë=
NULL
) {

1824 
≠r_°©us_t
 
rv
;

1825 i‡((
rv
 = 
	`≠r_Æloˇt‹_¸óã
(&
poﬁ_Æloˇt‹
)Ë!
APR_SUCCESS
) {

1826 i‡(
ab‹t_‚
)

1827 
	`ab‹t_‚
(
rv
);

1828  
rv
;

1830 
poﬁ_Æloˇt‹
->
ow√r
 = 
poﬁ
;

1832 
poﬁ
->
Æloˇt‹
 = 
poﬁ_Æloˇt‹
;

1834 i‡(
poﬁ
->
Æloˇt‹
 !=állocator) {

1835 #i‡
APR_HAS_THREADS


1836 
≠r_°©us_t
 
rv
;

1846 i‡((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
poﬁ
->
muãx
,

1847 
APR_THREAD_MUTEX_NESTED
, 
poﬁ
)Ë!
APR_SUCCESS
) {

1848 
	`‰ì
(
poﬁ
);

1849  
rv
;

1854 *
√wpoﬁ
 = 
poﬁ
;

1856 #i‡(
APR_POOL_DEBUG
 & 
APR_POOL_DEBUG_VERBOSE
)

1857 
	`≠r_poﬁ_log_evít
(
poﬁ
, "CREATE", 
fûe_löe
, 1);

1860  
APR_SUCCESS
;

1861 
	}
}

1867 
	sp•rötf_d©a
 {

1868 
≠r_vf‹m©ãr_buff_t
 
	mvbuff
;

1869 *
	mmem
;

1870 
≠r_size_t
 
	msize
;

1873 
	$p•rötf_Êush
(
≠r_vf‹m©ãr_buff_t
 *
vbuff
)

1875 
p•rötf_d©a
 *
ps
 = (p•rötf_d©®*)
vbuff
;

1876 
≠r_size_t
 
size
;

1878 
size
 = 
ps
->
vbuff
.
cuΩos
 -Ös->
mem
;

1880 
ps
->
size
 <<= 1;

1881 i‡((
ps
->
mem
 = 
	`ªÆloc
’s->mem,Ös->
size
)Ë=
NULL
)

1884 
ps
->
vbuff
.
cuΩos
 =Ös->
mem
 + 
size
;

1885 
ps
->
vbuff
.
ídpos
 =Ös->
mem
 +Ös->
size
 - 1;

1888 
	}
}

1890 
	$APR_DECLARE
(*Ë
	$≠r_pv•rötf
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
fmt
, 
va_li°
 
≠
)

1892 
p•rötf_d©a
 
ps
;

1893 
debug_node_t
 *
node
;

1895 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

1897 
ps
.
size
 = 64;

1898 
ps
.
mem
 = 
	`mÆloc
’s.
size
);

1899 
ps
.
vbuff
.
cuΩos
 =Ös.
mem
;

1902 
ps
.
vbuff
.
ídpos
 =Ös.
mem
 +Ös.
size
 - 1;

1904 i‡(
	`≠r_vf‹m©ãr
(
p•rötf_Êush
, &
ps
.
vbuff
, 
fmt
, 
≠
) == -1) {

1905 i‡(
poﬁ
->
ab‹t_‚
)

1906 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1908  
NULL
;

1911 *
ps
.
vbuff
.
cuΩos
++ = '\0';

1916 
node
 = 
poﬁ
->
nodes
;

1917 i‡(
node
 =
NULL
 ||Çode->
ödex
 == 64) {

1918 i‡((
node
 = 
	`mÆloc
(
SIZEOF_DEBUG_NODE_T
)Ë=
NULL
) {

1919 i‡(
poﬁ
->
ab‹t_‚
)

1920 
poﬁ
->
	`ab‹t_‚
(
APR_ENOMEM
);

1922  
NULL
;

1925 
node
->
√xt
 = 
poﬁ
->
nodes
;

1926 
poﬁ
->
nodes
 = 
node
;

1927 
node
->
ödex
 = 0;

1930 
node
->
begöp
[node->
ödex
] = 
ps
.
mem
;

1931 
node
->
ídp
[node->
ödex
] = 
ps
.
mem
 +Ös.
size
;

1932 
node
->
ödex
++;

1934  
ps
.
mem
;

1935 
	}
}

1942 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_joö
(
≠r_poﬁ_t
 *
p
,á¥_poﬁ_à*
sub
)

1944 #i‡
APR_POOL_DEBUG


1945 i‡(
sub
->
∑ª¡
 !
p
) {

1946 
	`ab‹t
();

1948 
sub
->
joöed
 = 
p
;

1950 
	}
}

1952 
	$poﬁ_föd
(
≠r_poﬁ_t
 *
poﬁ
, *
d©a
)

1954 **
pmem
 = (**)
d©a
;

1955 
debug_node_t
 *
node
;

1956 
≠r_uöt32_t
 
ödex
;

1958 
node
 = 
poﬁ
->
nodes
;

1960 
node
) {

1961 
ödex
 = 0; index < 
node
->index; index++) {

1962 i‡(
node
->
begöp
[
ödex
] <*
pmem


1963 && 
node
->
ídp
[
ödex
] > *
pmem
) {

1964 *
pmem
 = 
poﬁ
;

1969 
node
 =Çode->
√xt
;

1973 
	}
}

1975 
	$APR_DECLARE
(
≠r_poﬁ_t
 *Ë
	$≠r_poﬁ_föd
(c⁄° *
mem
)

1977 *
poﬁ
 = (*)
mem
;

1979 i‡(
	`≠r_poﬁ_wÆk_åì
(
globÆ_poﬁ
, 
poﬁ_föd
, &
poﬁ
))

1980  
poﬁ
;

1982  
NULL
;

1983 
	}
}

1985 
	$poﬁ_num_byãs
(
≠r_poﬁ_t
 *
poﬁ
, *
d©a
)

1987 
≠r_size_t
 *
psize
 = (≠r_size_à*)
d©a
;

1988 
debug_node_t
 *
node
;

1989 
≠r_uöt32_t
 
ödex
;

1991 
node
 = 
poﬁ
->
nodes
;

1993 
node
) {

1994 
ödex
 = 0; index < 
node
->index; index++) {

1995 *
psize
 +(*)
node
->
ídp
[
ödex
] - (*Íode->
begöp
[index];

1998 
node
 =Çode->
√xt
;

2002 
	}
}

2004 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_poﬁ_num_byãs
(
≠r_poﬁ_t
 *
poﬁ
, 
ªcur£
)

2006 
≠r_size_t
 
size
 = 0;

2008 i‡(!
ªcur£
) {

2009 
	`poﬁ_num_byãs
(
poﬁ
, &
size
);

2011  
size
;

2014 
	`≠r_poﬁ_wÆk_åì
(
poﬁ
, 
poﬁ_num_byãs
, &
size
);

2016  
size
;

2017 
	}
}

2019 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_lock
(
≠r_poﬁ_t
 *
poﬁ
, 
Êag
)

2021 
	}
}

2025 #ifde‡
NETWARE


2026 
	$√tw¨e_poﬁ_¥oc_˛ónup
 ()

2028 
≠r_poﬁ_t
 *
poﬁ
 = 
globÆ_poﬁ
->
chûd
;

2029 
≠r_os_¥oc_t
 
ow√r_¥oc
 = (≠r_os_¥oc_t)
	`gë∆mh™dÀ
();

2031 
poﬁ
) {

2032 i‡(
poﬁ
->
ow√r_¥oc
 == owner_proc) {

2033 
	`≠r_poﬁ_de°roy
 (
poﬁ
);

2034 
poﬁ
 = 
globÆ_poﬁ
->
chûd
;

2037 
poﬁ
 =Öoﬁ->
siblög
;

2041 
	}
}

2049 
	$APR_DECLARE_NONSTD
(*Ë
	$≠r_p•rötf
(
≠r_poﬁ_t
 *
p
, c⁄° *
fmt
, ...)

2051 
va_li°
 
≠
;

2052 *
ªs
;

2054 
	`va_°¨t
(
≠
, 
fmt
);

2055 
ªs
 = 
	`≠r_pv•rötf
(
p
, 
fmt
, 
≠
);

2056 
	`va_íd
(
≠
);

2057  
ªs
;

2058 
	}
}

2064 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_ab‹t_£t
(
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2065 
≠r_poﬁ_t
 *
poﬁ
)

2067 
poﬁ
->
ab‹t_‚
 =ábort_fn;

2068 
	}
}

2070 
	$APR_DECLARE
(
≠r_ab‹tfunc_t
Ë
	$≠r_poﬁ_ab‹t_gë
(
≠r_poﬁ_t
 *
poﬁ
)

2072  
poﬁ
->
ab‹t_‚
;

2073 
	}
}

2075 
	$APR_DECLARE
(
≠r_poﬁ_t
 *Ë
	$≠r_poﬁ_∑ª¡_gë
(
≠r_poﬁ_t
 *
poﬁ
)

2077 #ifde‡
NETWARE


2080 i‡(
poﬁ
->
∑ª¡
 =
globÆ_poﬁ
)

2081  
poﬁ
;

2084  
poﬁ
->
∑ª¡
;

2085 
	}
}

2087 
	$APR_DECLARE
(
≠r_Æloˇt‹_t
 *Ë
	$≠r_poﬁ_Æloˇt‹_gë
(
≠r_poﬁ_t
 *
poﬁ
)

2089  
poﬁ
->
Æloˇt‹
;

2090 
	}
}

2095 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_is_™˚°‹
(
≠r_poﬁ_t
 *
a
,á¥_poﬁ_à*
b
)

2097 i‡(
a
 =
NULL
)

2100 #i‡
APR_POOL_DEBUG


2103 
a
->
joöed
) {

2104 
a
 =á->
joöed
;

2108 
b
) {

2109 i‡(
a
 =
b
)

2112 
b
 = b->
∑ª¡
;

2116 
	}
}

2118 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_èg
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
èg
)

2120 
poﬁ
->
èg
 =Åag;

2121 
	}
}

2128 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_u£rd©a_£t
(c⁄° *
d©a
, c⁄° *
key
,

2129 
	$≠r_°©us_t
 (*
˛ónup
) (*),

2130 
≠r_poﬁ_t
 *
poﬁ
)

2132 #i‡
APR_POOL_DEBUG


2133 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

2136 i‡(
poﬁ
->
u£r_d©a
 =
NULL
)

2137 
poﬁ
->
u£r_d©a
 = 
	`≠r_hash_make
(pool);

2139 i‡(
	`≠r_hash_gë
(
poﬁ
->
u£r_d©a
, 
key
, 
APR_HASH_KEY_STRING
Ë=
NULL
) {

2140 *
√w_key
 = 
	`≠r_p°rdup
(
poﬁ
, 
key
);

2141 
	`≠r_hash_£t
(
poﬁ
->
u£r_d©a
, 
√w_key
, 
APR_HASH_KEY_STRING
, 
d©a
);

2144 
	`≠r_hash_£t
(
poﬁ
->
u£r_d©a
, 
key
, 
APR_HASH_KEY_STRING
, 
d©a
);

2147 i‡(
˛ónup
)

2148 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
d©a
, 
˛ónup
, cleanup);

2150  
APR_SUCCESS
;

2151 
	}
}

2153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_u£rd©a_£ä
(c⁄° *
d©a
,

2154 c⁄° *
key
,

2155 
	$≠r_°©us_t
 (*
˛ónup
)(*),

2156 
≠r_poﬁ_t
 *
poﬁ
)

2158 #i‡
APR_POOL_DEBUG


2159 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

2162 i‡(
poﬁ
->
u£r_d©a
 =
NULL
)

2163 
poﬁ
->
u£r_d©a
 = 
	`≠r_hash_make
(pool);

2165 
	`≠r_hash_£t
(
poﬁ
->
u£r_d©a
, 
key
, 
APR_HASH_KEY_STRING
, 
d©a
);

2167 i‡(
˛ónup
)

2168 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, 
d©a
, 
˛ónup
, cleanup);

2170  
APR_SUCCESS
;

2171 
	}
}

2173 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_u£rd©a_gë
(**
d©a
, c⁄° *
key
,

2174 
≠r_poﬁ_t
 *
poﬁ
)

2176 #i‡
APR_POOL_DEBUG


2177 
	`≠r_poﬁ_check_öãgrôy
(
poﬁ
);

2180 i‡(
poﬁ
->
u£r_d©a
 =
NULL
) {

2181 *
d©a
 = 
NULL
;

2184 *
d©a
 = 
	`≠r_hash_gë
(
poﬁ
->
u£r_d©a
, 
key
, 
APR_HASH_KEY_STRING
);

2187  
APR_SUCCESS
;

2188 
	}
}

2195 
	s˛ónup_t
 {

2196 
˛ónup_t
 *
	m√xt
;

2197 c⁄° *
	md©a
;

2198 
≠r_°©us_t
 (*
∂aö_˛ónup_‚
)(*
	md©a
);

2199 
≠r_°©us_t
 (*
chûd_˛ónup_‚
)(*
	md©a
);

2202 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_˛ónup_ªgi°î
(
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

2203 
	$≠r_°©us_t
 (*
∂aö_˛ónup_‚
)(*
d©a
),

2204 
	$≠r_°©us_t
 (*
chûd_˛ónup_‚
)(*
d©a
))

2206 
˛ónup_t
 *
c
;

2208 #i‡
APR_POOL_DEBUG


2209 
	`≠r_poﬁ_check_öãgrôy
(
p
);

2212 i‡(
p
 !
NULL
) {

2213 i‡(
p
->
‰ì_˛ónups
) {

2215 
c
 = 
p
->
‰ì_˛ónups
;

2216 
p
->
‰ì_˛ónups
 = 
c
->
√xt
;

2218 
c
 = 
	`≠r_∑Œoc
(
p
, (
˛ónup_t
));

2220 
c
->
d©a
 = data;

2221 
c
->
∂aö_˛ónup_‚
 =Ölain_cleanup_fn;

2222 
c
->
chûd_˛ónup_‚
 = child_cleanup_fn;

2223 
c
->
√xt
 = 
p
->
˛ónups
;

2224 
p
->
˛ónups
 = 
c
;

2226 
	}
}

2228 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_¥e_˛ónup_ªgi°î
(
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

2229 
	$≠r_°©us_t
 (*
∂aö_˛ónup_‚
)(*
d©a
))

2231 
˛ónup_t
 *
c
;

2233 #i‡
APR_POOL_DEBUG


2234 
	`≠r_poﬁ_check_öãgrôy
(
p
);

2237 i‡(
p
 !
NULL
) {

2238 i‡(
p
->
‰ì_˛ónups
) {

2240 
c
 = 
p
->
‰ì_˛ónups
;

2241 
p
->
‰ì_˛ónups
 = 
c
->
√xt
;

2243 
c
 = 
	`≠r_∑Œoc
(
p
, (
˛ónup_t
));

2245 
c
->
d©a
 = data;

2246 
c
->
∂aö_˛ónup_‚
 =Ölain_cleanup_fn;

2247 
c
->
√xt
 = 
p
->
¥e_˛ónups
;

2248 
p
->
¥e_˛ónups
 = 
c
;

2250 
	}
}

2252 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_˛ónup_kûl
(
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

2253 
	$≠r_°©us_t
 (*
˛ónup_‚
)(*))

2255 
˛ónup_t
 *
c
, **
œ°p
;

2257 #i‡
APR_POOL_DEBUG


2258 
	`≠r_poﬁ_check_öãgrôy
(
p
);

2261 i‡(
p
 =
NULL
)

2264 
c
 = 
p
->
˛ónups
;

2265 
œ°p
 = &
p
->
˛ónups
;

2266 
c
) {

2267 #i‡
APR_POOL_DEBUG


2269 i‡(
c
 =c->
√xt


2270 || (
c
->
√xt
 && c == c->next->next)

2271 || (
c
->
√xt
 && c->next->next && c == c->next->next->next)) {

2272 
	`ab‹t
();

2276 i‡(
c
->
d©a
 =d©®&& c->
∂aö_˛ónup_‚
 =
˛ónup_‚
) {

2277 *
œ°p
 = 
c
->
√xt
;

2279 
c
->
√xt
 = 
p
->
‰ì_˛ónups
;

2280 
p
->
‰ì_˛ónups
 = 
c
;

2284 
œ°p
 = &
c
->
√xt
;

2285 
c
 = c->
√xt
;

2289 
c
 = 
p
->
¥e_˛ónups
;

2290 
œ°p
 = &
p
->
¥e_˛ónups
;

2291 
c
) {

2292 #i‡
APR_POOL_DEBUG


2294 i‡(
c
 =c->
√xt


2295 || (
c
->
√xt
 && c == c->next->next)

2296 || (
c
->
√xt
 && c->next->next && c == c->next->next->next)) {

2297 
	`ab‹t
();

2301 i‡(
c
->
d©a
 =d©®&& c->
∂aö_˛ónup_‚
 =
˛ónup_‚
) {

2302 *
œ°p
 = 
c
->
√xt
;

2304 
c
->
√xt
 = 
p
->
‰ì_˛ónups
;

2305 
p
->
‰ì_˛ónups
 = 
c
;

2309 
œ°p
 = &
c
->
√xt
;

2310 
c
 = c->
√xt
;

2313 
	}
}

2315 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_chûd_˛ónup_£t
(
≠r_poﬁ_t
 *
p
, c⁄° *
d©a
,

2316 
	$≠r_°©us_t
 (*
∂aö_˛ónup_‚
)(*),

2317 
	$≠r_°©us_t
 (*
chûd_˛ónup_‚
)(*))

2319 
˛ónup_t
 *
c
;

2321 #i‡
APR_POOL_DEBUG


2322 
	`≠r_poﬁ_check_öãgrôy
(
p
);

2325 i‡(
p
 =
NULL
)

2328 
c
 = 
p
->
˛ónups
;

2329 
c
) {

2330 i‡(
c
->
d©a
 =d©®&& c->
∂aö_˛ónup_‚
 ==Ölain_cleanup_fn) {

2331 
c
->
chûd_˛ónup_‚
 = child_cleanup_fn;

2335 
c
 = c->
√xt
;

2337 
	}
}

2339 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_˛ónup_run
(
≠r_poﬁ_t
 *
p
, *
d©a
,

2340 
	$≠r_°©us_t
 (*
˛ónup_‚
)(*))

2342 
	`≠r_poﬁ_˛ónup_kûl
(
p
, 
d©a
, 
˛ónup_‚
);

2343  (*
˛ónup_‚
)(
d©a
);

2344 
	}
}

2346 
	$run_˛ónups
(
˛ónup_t
 **
¸ef
)

2348 
˛ónup_t
 *
c
 = *
¸ef
;

2350 
c
) {

2351 *
¸ef
 = 
c
->
√xt
;

2352 (*
c
->
∂aö_˛ónup_‚
)((*)c->
d©a
);

2353 
c
 = *
¸ef
;

2355 
	}
}

2357 #i‡!
deföed
(
WIN32
Ë&& !deföed(
OS2
)

2359 
	$run_chûd_˛ónups
(
˛ónup_t
 **
¸ef
)

2361 
˛ónup_t
 *
c
 = *
¸ef
;

2363 
c
) {

2364 *
¸ef
 = 
c
->
√xt
;

2365 (*
c
->
chûd_˛ónup_‚
)((*)c->
d©a
);

2366 
c
 = *
¸ef
;

2368 
	}
}

2370 
	$˛ónup_poﬁ_f‹_exec
(
≠r_poﬁ_t
 *
p
)

2372 
	`run_chûd_˛ónups
(&
p
->
˛ónups
);

2374 
p
 =Ö->
chûd
;Ö;Ö =Ö->
siblög
)

2375 
	`˛ónup_poﬁ_f‹_exec
(
p
);

2376 
	}
}

2378 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ónup_f‹_exec
()

2380 
	`˛ónup_poﬁ_f‹_exec
(
globÆ_poﬁ
);

2381 
	}
}

2385 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ónup_f‹_exec
()

2398 
	}
}

2402 
	$APR_DECLARE_NONSTD
(
≠r_°©us_t
Ë
	$≠r_poﬁ_˛ónup_nuŒ
(*
d©a
)

2405  
APR_SUCCESS
;

2406 
	}
}

2415 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_nŸe_sub¥o˚ss
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_¥oc_t
 *
¥oc
,

2416 
≠r_kûl_c⁄dôi⁄s_e
 
how
)

2418 
¥o˚ss_chaö
 *
pc
 = 
	`≠r_∑Œoc
(
poﬁ
, (process_chain));

2420 
pc
->
¥oc
 =Öroc;

2421 
pc
->
kûl_how
 = 
how
;

2422 
pc
->
√xt
 = 
poﬁ
->
sub¥o˚s£s
;

2423 
poﬁ
->
sub¥o˚s£s
 = 
pc
;

2424 
	}
}

2426 
	$‰ì_¥oc_chaö
(
¥o˚ss_chaö
 *
¥ocs
)

2432 
¥o˚ss_chaö
 *
pc
;

2433 
√ed_timeout
 = 0;

2434 
≠r_time_t
 
timeout_öãrvÆ
;

2436 i‡(!
¥ocs
)

2446 #i‚de‡
NEED_WAITPID


2448 
pc
 = 
¥ocs
;Öc;Ö¯pc->
√xt
) {

2449 i‡(
	`≠r_¥oc_waô
(
pc
->
¥oc
, 
NULL
, NULL, 
APR_NOWAIT
Ë!
APR_CHILD_NOTDONE
)

2450 
pc
->
kûl_how
 = 
APR_KILL_NEVER
;

2454 
pc
 = 
¥ocs
;Öc;Ö¯pc->
√xt
) {

2455 #i‚de‡
WIN32


2456 i‡((
pc
->
kûl_how
 =
APR_KILL_AFTER_TIMEOUT
)

2457 || (
pc
->
kûl_how
 =
APR_KILL_ONLY_ONCE
)) {

2464 i‡(
	`≠r_¥oc_kûl
(
pc
->
¥oc
, 
SIGTERM
Ë=
APR_SUCCESS
)

2465 
√ed_timeout
 = 1;

2467 i‡(
pc
->
kûl_how
 =
APR_KILL_ALWAYS
) {

2469 i‡(
pc
->
kûl_how
 !
APR_KILL_NEVER
) {

2470 
√ed_timeout
 = 1;

2471 
pc
->
kûl_how
 = 
APR_KILL_ALWAYS
;

2473 
	`≠r_¥oc_kûl
(
pc
->
¥oc
, 
SIGKILL
);

2481 i‡(
√ed_timeout
) {

2482 
timeout_öãrvÆ
 = 
TIMEOUT_INTERVAL
;

2483 
	`≠r_¶ìp
(
timeout_öãrvÆ
);

2487 
√ed_timeout
 = 0;

2488 
pc
 = 
¥ocs
;Öc;Ö¯pc->
√xt
) {

2489 i‡(
pc
->
kûl_how
 =
APR_KILL_AFTER_TIMEOUT
) {

2490 i‡(
	`≠r_¥oc_waô
(
pc
->
¥oc
, 
NULL
, NULL, 
APR_NOWAIT
)

2491 =
APR_CHILD_NOTDONE
)

2492 
√ed_timeout
 = 1;

2494 
pc
->
kûl_how
 = 
APR_KILL_NEVER
;

2497 i‡(
√ed_timeout
) {

2498 i‡(
timeout_öãrvÆ
 >
TIMEOUT_USECS
) {

2501 
	`≠r_¶ìp
(
timeout_öãrvÆ
);

2502 
timeout_öãrvÆ
 *= 2;

2504 } 
√ed_timeout
);

2511 
pc
 = 
¥ocs
;Öc;Ö¯pc->
√xt
) {

2512 i‡(
pc
->
kûl_how
 =
APR_KILL_AFTER_TIMEOUT
)

2513 
	`≠r_¥oc_kûl
(
pc
->
¥oc
, 
SIGKILL
);

2517 
pc
 = 
¥ocs
;Öc;Ö¯pc->
√xt
) {

2518 i‡(
pc
->
kûl_how
 !
APR_KILL_NEVER
)

2519 ()
	`≠r_¥oc_waô
(
pc
->
¥oc
, 
NULL
, NULL, 
APR_WAIT
);

2521 
	}
}

2529 #i‡!
APR_POOL_DEBUG


2530 
	$APR_DECLARE
(*Ë
	$≠r_∑Œoc_debug
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
,

2531 c⁄° *
fûe_löe
)

2533  
	`≠r_∑Œoc
(
poﬁ
, 
size
);

2534 
	}
}

2536 
	$APR_DECLARE
(*Ë
	$≠r_pˇŒoc_debug
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
,

2537 c⁄° *
fûe_löe
)

2539  
	`≠r_pˇŒoc
(
poﬁ
, 
size
);

2540 
	}
}

2542 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ór_debug
(
≠r_poﬁ_t
 *
poﬁ
,

2543 c⁄° *
fûe_löe
)

2545 
	`≠r_poﬁ_˛ór
(
poﬁ
);

2546 
	}
}

2548 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_de°roy_debug
(
≠r_poﬁ_t
 *
poﬁ
,

2549 c⁄° *
fûe_löe
)

2551 
	`≠r_poﬁ_de°roy
(
poﬁ
);

2552 
	}
}

2554 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2555 
≠r_poﬁ_t
 *
∑ª¡
,

2556 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2557 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

2558 c⁄° *
fûe_löe
)

2560  
	`≠r_poﬁ_¸óã_ex
(
√wpoﬁ
, 
∑ª¡
, 
ab‹t_‚
, 
Æloˇt‹
);

2561 
	}
}

2563 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_c‹e_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2564 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2565 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

2566 c⁄° *
fûe_löe
)

2568  
	`≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
);

2569 
	}
}

2571 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_unm™aged_ex_debug
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2572 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2573 
≠r_Æloˇt‹_t
 *
Æloˇt‹
,

2574 c⁄° *
fûe_löe
)

2576  
	`≠r_poﬁ_¸óã_unm™aged_ex
(
√wpoﬁ
, 
ab‹t_‚
, 
Æloˇt‹
);

2577 
	}
}

2581 #unde‡
≠r_∑Œoc


2582 
	$APR_DECLARE
(*Ë
	`≠r_∑Œoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
);

2584 
	$APR_DECLARE
(*Ë
	$≠r_∑Œoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
)

2586  
	`≠r_∑Œoc_debug
(
poﬁ
, 
size
, "undefined");

2587 
	}
}

2589 #unde‡
≠r_pˇŒoc


2590 
	$APR_DECLARE
(*Ë
	`≠r_pˇŒoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
);

2592 
	$APR_DECLARE
(*Ë
	$≠r_pˇŒoc
(
≠r_poﬁ_t
 *
poﬁ
, 
≠r_size_t
 
size
)

2594  
	`≠r_pˇŒoc_debug
(
poﬁ
, 
size
, "undefined");

2595 
	}
}

2597 #unde‡
≠r_poﬁ_˛ór


2598 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_˛ór
(
≠r_poﬁ_t
 *
poﬁ
);

2600 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_˛ór
(
≠r_poﬁ_t
 *
poﬁ
)

2602 
	`≠r_poﬁ_˛ór_debug
(
poﬁ
, "undefined");

2603 
	}
}

2605 #unde‡
≠r_poﬁ_de°roy


2606 
	$APR_DECLARE
(Ë
	`≠r_poﬁ_de°roy
(
≠r_poﬁ_t
 *
poﬁ
);

2608 
	$APR_DECLARE
(Ë
	$≠r_poﬁ_de°roy
(
≠r_poﬁ_t
 *
poﬁ
)

2610 
	`≠r_poﬁ_de°roy_debug
(
poﬁ
, "undefined");

2611 
	}
}

2613 #unde‡
≠r_poﬁ_¸óã_ex


2614 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_¸óã_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2615 
≠r_poﬁ_t
 *
∑ª¡
,

2616 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2617 
≠r_Æloˇt‹_t
 *
Æloˇt‹
);

2619 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2620 
≠r_poﬁ_t
 *
∑ª¡
,

2621 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2622 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

2624  
	`≠r_poﬁ_¸óã_ex_debug
(
√wpoﬁ
, 
∑ª¡
,

2625 
ab‹t_‚
, 
Æloˇt‹
,

2627 
	}
}

2629 #unde‡
≠r_poﬁ_¸óã_c‹e_ex


2630 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_¸óã_c‹e_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2631 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2632 
≠r_Æloˇt‹_t
 *
Æloˇt‹
);

2634 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_c‹e_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2635 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2636 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

2638  
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
ab‹t_‚
,

2639 
Æloˇt‹
, "undefined");

2640 
	}
}

2642 #unde‡
≠r_poﬁ_¸óã_unm™aged_ex


2643 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_poﬁ_¸óã_unm™aged_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2644 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2645 
≠r_Æloˇt‹_t
 *
Æloˇt‹
);

2647 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_poﬁ_¸óã_unm™aged_ex
(
≠r_poﬁ_t
 **
√wpoﬁ
,

2648 
≠r_ab‹tfunc_t
 
ab‹t_‚
,

2649 
≠r_Æloˇt‹_t
 *
Æloˇt‹
)

2651  
	`≠r_poﬁ_¸óã_unm™aged_ex_debug
(
√wpoﬁ
, 
ab‹t_‚
,

2652 
Æloˇt‹
, "undefined");

2653 
	}
}

	@misc/netware/charset.c

17 
	~"≠r.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

25 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_deÁu…_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

27  
	`≠r_p°rdup
(
poﬁ
, "CP1252");

28 
	}
}

31 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_loˇÀ_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

33  
	`≠r_os_deÁu…_ícodög
(
poﬁ
);

34 
	}
}

	@misc/netware/libprews.c

16 
	~<√tw¨e.h
>

17 
	~<libøry.h
>

18 
	~<nks/synch.h
>

20 
	~"≠r_poﬁs.h
"

21 
	~"≠r_¥iv©e.h
"

22 
	~"≠r_¨ch_öã∫Æ_time.h
"

26 
	ggLibId
 = -1;

27 *
	ggLibH™dÀ
 = (*Ë
NULL
;

28 
NXMuãx_t
 *
	ggLibLock
 = (NXMuãx_à*Ë
NULL
;

31 
Di•o£LibøryD©a
(*);

33 
	g_N⁄AµSèπ


35 *
	gNLMH™dÀ
,

36 *
	gîr‹S¸ìn
,

37 c⁄° *
	gcmdLöe
,

38 c⁄° *
	glﬂdDúP©h
,

39 
size_t
 
	gunöôülizedD©aLígth
,

40 *
	gNLMFûeH™dÀ
,

41 (*
ªadRoutöeP
)–
c⁄n
, *
fûeH™dÀ
, 
size_t
 
off£t
,

42 
size_t
 
nbyãs
, size_à*
byãsRód
, *
buf„r
 ),

43 
size_t
 
cu°omD©aOff£t
,

44 
size_t
 
cu°omD©aSize
,

45 
mesßgeCou¡
,

46 c⁄° **
mesßges


49 #ifde‡
USE_WINSOCK


50 
WSADATA
 
wßD©a
;

52 
≠r_°©us_t
 
°©us
;

54 
	`NX_LOCK_INFO_ALLOC
(
liblock
, "Per-Application Data Lock", 0);

56 #¥agm®
	`unu£d
(
cmdLöe
)

57 #¥agm®
	`unu£d
(
lﬂdDúP©h
)

58 #¥agm®
	`unu£d
(
unöôülizedD©aLígth
)

59 #¥agm®
	`unu£d
(
NLMFûeH™dÀ
)

60 #¥agm®
	`unu£d
(
ªadRoutöeP
)

61 #¥agm®
	`unu£d
(
cu°omD©aOff£t
)

62 #¥agm®
	`unu£d
(
cu°omD©aSize
)

63 #¥agm®
	`unu£d
(
mesßgeCou¡
)

64 #¥agm®
	`unu£d
(
mesßges
)

66 
gLibId
 = 
	`ªgi°î_libøry
(
Di•o£LibøryD©a
);

68 i‡(
gLibId
 < -1)

70 
	`OuçutToS¸ìn
(
îr‹S¸ìn
, "UnableÅoÑegisterÜibrary with kernel.\n");

74 
gLibH™dÀ
 = 
NLMH™dÀ
;

76 
gLibLock
 = 
	`NXMuãxAŒoc
(0, 0, &
liblock
);

78 i‡(!
gLibLock
)

80 
	`OuçutToS¸ìn
(
îr‹S¸ìn
, "UnableÅoállocateÜibrary dataÜock.\n");

84 
	`≠r_√tw¨e_£tup_time
();

86 i‡((
°©us
 = 
	`≠r_poﬁ_öôülize
()Ë!
APR_SUCCESS
)

87  
°©us
;

89 #ifde‡
USE_WINSOCK


90  
	`WSASèπup
((
WORD
Ë
	`MAKEWORD
(2, 0), &
wßD©a
);

94 
	}
}

96 
	$_N⁄AµSt›
( )

98 
	`≠r_poﬁ_ãrmö©e
();

100 #ifde‡
USE_WINSOCK


101 
	`WSACÀ™up
();

104 
	`uƒegi°î_libøry
(
gLibId
);

105 
	`NXMuãxFªe
(
gLibLock
);

106 
	}
}

108 
	$_N⁄AµCheckU∆ﬂd
( )

111 
	}
}

113 
	$ªgi°î_NLM
(*
NLMH™dÀ
)

115 
APP_DATA
 *
≠p_d©a
 = (APP_DATA*Ë
	`gë_≠p_d©a
(
gLibId
);

117 
	`NXLock
(
gLibLock
);

118 i‡(!
≠p_d©a
) {

119 
≠p_d©a
 = (
APP_DATA
*)
	`libøry_mÆloc
(
gLibH™dÀ
, (APP_DATA));

121 i‡(
≠p_d©a
) {

122 
	`mem£t
 (
≠p_d©a
, 0, (
APP_DATA
));

123 
	`£t_≠p_d©a
(
gLibId
, 
≠p_d©a
);

124 
≠p_d©a
->
gs_∆mh™dÀ
 = 
NLMH™dÀ
;

128 i‡(
≠p_d©a
 && (!≠p_d©a->
öôülized
)) {

129 
≠p_d©a
->
öôülized
 = 1;

130 
	`NXU∆ock
(
gLibLock
);

134 
	`NXU∆ock
(
gLibLock
);

136 
	}
}

138 
	$uƒegi°î_NLM
(*
NLMH™dÀ
)

140 
APP_DATA
 *
≠p_d©a
 = (APP_DATA*Ë
	`gë_≠p_d©a
(
gLibId
);

142 
	`NXLock
(
gLibLock
);

143 i‡(
≠p_d©a
) {

144 
≠p_d©a
->
öôülized
 = 0;

145 
	`NXU∆ock
(
gLibLock
);

148 
	`NXU∆ock
(
gLibLock
);

150 
	}
}

152 
	$Di•o£LibøryD©a
(*
d©a
)

154 i‡(
d©a
)

156 
	`libøry_‰ì
(
d©a
);

160 
	}
}

162 
	$£tGlobÆPoﬁ
(*
d©a
)

164 
APP_DATA
 *
≠p_d©a
 = (APP_DATA*Ë
	`gë_≠p_d©a
(
gLibId
);

166 
	`NXLock
(
gLibLock
);

168 i‡(
≠p_d©a
 && !≠p_d©a->
gPoﬁ
) {

169 
≠p_d©a
->
gPoﬁ
 = 
d©a
;

172 
	`NXU∆ock
(
gLibLock
);

174 
	}
}

176 * 
	$gëGlobÆPoﬁ
()

178 
APP_DATA
 *
≠p_d©a
 = (APP_DATA*Ë
	`gë_≠p_d©a
(
gLibId
);

180 i‡(
≠p_d©a
) {

181  
≠p_d©a
->
gPoﬁ
;

184  
NULL
;

185 
	}
}

	@misc/netware/rand.c

17 
	#APR_WANT_MEMFUNC


	)

18 
	~"≠r_w™t.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_¥iv©e.h
"

22 #i‡
APR_HAS_RANDOM


24 
	~<nks/∂©.h
>

26 
	$NXSìdR™domI¡î«l
–
size_t
 
width
, *
£ed
 )

28 
öô
 = 0;

29 *
s
 = (*Ë
£ed
;

30 uni⁄ { 
x
; 
y
[4]; } 
u
;

32 i‡(!
öô
) {

33 
	`§™d
(
	`NXGëSy°emTick
());

34 
öô
 = 1;

37 i‡(
width
 > 3)

41 *
s
++ = 
	`ønd
();

43 (
width
 -= 4) > 3);

46 i‡(
width
 > 0)

48 *
p
 = (*Ë
s
;

50 
u
.
x
 = 
	`ønd
();

52 
width
 > 0)

53 *
p
++ = 
u
.
y
[
width
--];

56  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gíî©e_øndom_byãs
(*
buf
,

60 
≠r_size_t
 
Àngth
)

62 i‡(
	`NXSìdR™dom
(
Àngth
, 
buf
) != 0) {

63  
	`NXSìdR™domI¡î«l
 (
Àngth
, 
buf
);

65  
APR_SUCCESS
;

66 
	}
}

	@misc/netware/start.c

17 
	~"≠r.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_sig«l.h
"

22 
	~"≠r_¨ch_misc.h
"

23 
	~"≠r_¨ch_¥oc_muãx.h
"

24 
	~"≠r_¨ch_öã∫Æ_time.h
"

25 
	~"≠r_ld≠.h
"

27 #ifde‡
USE_WINSOCK


29 
WSASèπupRTags
(
WORD
 
wVîsi⁄Reque°ed
,

30 
LPWSADATA
 
ÕWSAD©a
,

31 
πag_t
 
WSASèπupRTag
,

32 
πag_t
 
WSPSKTRTag
,

33 
πag_t
 
lookUpSîvi˚BegöRTag
,

34 
πag_t
 
WSAEvítRTag
,

35 
πag_t
 
WSPCPRTag
);

37 
WSACÀ™upRTag
(
πag_t
 
rTag
);

44 
	#WS_LOAD_ENTRY_SIGNATURE
 (*(*Ë"WLDE")

	)

45 
	#WS_SKT_SIGNATURE
 (*(*Ë"WSKT")

	)

46 
	#WS_LOOKUP_SERVICE_SIGNATURE
 (*(*Ë"WLUP")

	)

47 
	#WS_WSAEVENT_SIGNATURE
 (*(*Ë"WEVT")

	)

48 
	#WS_CPORT_SIGNATURE
 (*(*Ë"WCPT")

	)

51 (*
WSASèπupWôhNLMH™dÀ
)–
WORD
 
vîsi⁄
, 
LPWSADATA
 
d©a
, *
h™dÀ
 ) = 
NULL
;

52 (*
WSACÀ™upWôhNLMH™dÀ
)–*
h™dÀ
 ) = 
NULL
;

54 
	$wß_°¨tup_wôh_h™dÀ
 (
WORD
 
wVîsi⁄Reque°ed
, 
LPWSADATA
 
d©a
, *
h™dÀ
)

56 
APP_DATA
 *
≠p_d©a
;

58 i‡(!(
≠p_d©a
 = (
APP_DATA
*Ë
	`gë_≠p_d©a
(
gLibId
)))

59  
APR_EGENERAL
;

61 
≠p_d©a
->
gs_°¨tup_πag
 = 
	`AŒoˇãResour˚Tag
(
h™dÀ
, "WöSock Sèπ-up", 
WS_LOAD_ENTRY_SIGNATURE
);

62 
≠p_d©a
->
gs_sockë_πag
 = 
	`AŒoˇãResour˚Tag
(
h™dÀ
, "WöSock sockë()", 
WS_SKT_SIGNATURE
);

63 
≠p_d©a
->
gs_lookup_πag
 = 
	`AŒoˇãResour˚Tag
(
h™dÀ
, "WöSock Look-up", 
WS_LOOKUP_SERVICE_SIGNATURE
);

64 
≠p_d©a
->
gs_evít_πag
 = 
	`AŒoˇãResour˚Tag
(
h™dÀ
, "WöSock Evít", 
WS_WSAEVENT_SIGNATURE
);

65 
≠p_d©a
->
gs_p˝_πag
 = 
	`AŒoˇãResour˚Tag
(
h™dÀ
, "WöSock C-P‹t", 
WS_CPORT_SIGNATURE
);

67  
	`WSASèπupRTags
(
wVîsi⁄Reque°ed
, 
d©a
,

68 
≠p_d©a
->
gs_°¨tup_πag
,

69 
≠p_d©a
->
gs_sockë_πag
,

70 
≠p_d©a
->
gs_lookup_πag
,

71 
≠p_d©a
->
gs_evít_πag
,

72 
≠p_d©a
->
gs_p˝_πag
);

73 
	}
}

75 
	$wß_˛ónup_wôh_h™dÀ
 (*
h™dÀ
)

77 
APP_DATA
 *
≠p_d©a
;

79 i‡(!(
≠p_d©a
 = (
APP_DATA
*Ë
	`gë_≠p_d©a
(
gLibId
)))

80  
APR_EGENERAL
;

82  
	`WSACÀ™upRTag
(
≠p_d©a
->
gs_°¨tup_πag
);

83 
	}
}

85 
	$Uƒegi°îAµWôhWöSock
 (*
∆m_h™dÀ
)

87 i‡(!
WSACÀ™upWôhNLMH™dÀ
)

89 i‡(!(
WSACÀ™upWôhNLMH™dÀ
 = 
	`Imp‹tPublicObje˘
(
gLibH™dÀ
, "WSACleanupWithNLMHandle")))

90 
WSACÀ™upWôhNLMH™dÀ
 = 
wß_˛ónup_wôh_h™dÀ
;

93  (*
WSACÀ™upWôhNLMH™dÀ
)(
∆m_h™dÀ
);

94 
	}
}

96 
	$Regi°îAµWôhWöSock
 (*
∆m_h™dÀ
)

98 
îr
;

99 
WSADATA
 
wßD©a
;

100 
WORD
 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
(
WSAHighByã
, 
WSALowByã
);

102 i‡(!
WSASèπupWôhNLMH™dÀ
)

104 i‡(!(
WSASèπupWôhNLMH™dÀ
 = 
	`Imp‹tPublicObje˘
(
gLibH™dÀ
, "WSAStartupWithNLMHandle")))

105 
WSASèπupWôhNLMH™dÀ
 = 
wß_°¨tup_wôh_h™dÀ
;

108 
îr
 = (*
WSASèπupWôhNLMH™dÀ
)(
wVîsi⁄Reque°ed
, &
wßD©a
, 
∆m_h™dÀ
);

110 i‡(
	`LOBYTE
(
wßD©a
.
wVîsi⁄
Ë!
WSAHighByã
 ||

111 
	`HIBYTE
(
wßD©a
.
wVîsi⁄
Ë!
WSALowByã
) {

113 
	`Uƒegi°îAµWôhWöSock
 (
∆m_h™dÀ
);

114  
APR_EEXIST
;

117  
îr
;

118 
	}
}

123 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_≠p_öôülize
(*
¨gc
,

124 c⁄° * c⁄° * *
¨gv
,

125 c⁄° * c⁄° * *
ív
)

132  
	`≠r_öôülize
();

133 
	}
}

135 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_öôülize
()

137 
≠r_poﬁ_t
 *
poﬁ
;

138 *
∆mh™dÀ
 = 
	`gë∆mh™dÀ
();

142 i‡(
	`ªgi°î_NLM
(
∆mh™dÀ
) != 0) {

143  
APR_SUCCESS
;

150 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

151  
APR_ENOPOOL
;

154 
	`≠r_poﬁ_èg
(
poﬁ
, "apr_initilialize");

156 #ifde‡
USE_WINSOCK


158 
îr
;

159 i‡((
îr
 = 
	`Regi°îAµWôhWöSock
 (
∆mh™dÀ
))) {

160  
îr
;

165 
	`≠r_sig«l_öô
(
poﬁ
);

166 #i‡
APR_HAS_LDAP


167 
	`≠r_ld≠_ªböd_öô
(
poﬁ
);

170  
APR_SUCCESS
;

171 
	}
}

173 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_ãrmö©e
()

175 
APP_DATA
 *
≠p_d©a
;

178 i‡(!(
≠p_d©a
 = (
APP_DATA
*Ë
	`gë_≠p_d©a
(
gLibId
)))

183 i‡(
	`uƒegi°î_NLM
(
≠p_d©a
->
gs_∆mh™dÀ
) != 0) {

193 
	`√tw¨e_poﬁ_¥oc_˛ónup
 ();

195 #ifde‡
USE_WINSOCK


196 
	`Uƒegi°îAµWôhWöSock
 (
≠p_d©a
->
gs_∆mh™dÀ
);

198 
	}
}

200 
	$APR_DECLARE
(Ë
	$≠r_ãrmö©e2
()

202 
	`≠r_ãrmö©e
();

203 
	}
}

	@misc/unix/charset.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

22 #ifde‡
HAVE_LANGINFO_H


23 
	~<œngöfo.h
>

36 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_deÁu…_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

38 #ifde‡
__MVS__


39 #ifde‡
__CODESET__


40  
__CODESET__
;

63 
	}
}

66 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_loˇÀ_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

68 #i‡
	`deföed
(
HAVE_NL_LANGINFO
Ë&& deföed(
CODESET
)

69 c⁄° *
ch¨£t
;

71 
ch¨£t
 = 
	`∆_œngöfo
(
CODESET
);

72 i‡(
ch¨£t
 && *charset) {

73 #ifde‡
_OSD_POSIX


76 i‡(
ch¨£t
[0] != '^')

78  
	`≠r_p°rdup
(
poﬁ
, 
ch¨£t
);

82  
	`≠r_os_deÁu…_ícodög
(
poﬁ
);

83 
	}
}

	@misc/unix/env.c

17 
	#APR_WANT_STRFUNC


	)

18 
	~"≠r_w™t.h
"

19 
	~"≠r.h
"

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_ív.h
"

22 
	~"≠r_°rögs.h
"

24 #i‡
APR_HAVE_UNISTD_H


25 
	~<uni°d.h
>

27 #i‡
APR_HAVE_STDLIB_H


28 
	~<°dlib.h
>

31 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_gë
(**
vÆue
,

32 c⁄° *
ívv¨
,

33 
≠r_poﬁ_t
 *
poﬁ
)

35 #ifde‡
HAVE_GETENV


37 *
vÆ
 = 
	`gëív
(
ívv¨
);

38 i‡(!
vÆ
)

39  
APR_ENOENT
;

40 *
vÆue
 = 
vÆ
;

41  
APR_SUCCESS
;

44  
APR_ENOTIMPL
;

46 
	}
}

49 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_£t
(c⁄° *
ívv¨
,

50 c⁄° *
vÆue
,

51 
≠r_poﬁ_t
 *
poﬁ
)

53 #i‡
	`deföed
(
HAVE_SETENV
)

55 i‡(0 > 
	`£ãnv
(
ívv¨
, 
vÆue
, 1))

56  
APR_ENOMEM
;

57  
APR_SUCCESS
;

59 #ñi‡
	`deföed
(
HAVE_PUTENV
)

61 i‡(0 > 
	`puãnv
(
	`≠r_p°rˇt
(
poﬁ
, 
ívv¨
, "=", 
vÆue
, 
NULL
)))

62  
APR_ENOMEM
;

63  
APR_SUCCESS
;

66  
APR_ENOTIMPL
;

68 
	}
}

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_dñëe
(c⁄° *
ívv¨
, 
≠r_poﬁ_t
 *
poﬁ
)

73 #ifde‡
HAVE_UNSETENV


75 
	`un£ãnv
(
ívv¨
);

76  
APR_SUCCESS
;

86  
APR_ENOTIMPL
;

88 
	}
}

	@misc/unix/errorcodes.c

17 
	~"≠r_¨ch_misc.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_dso.h
"

22 #i‡
APR_HAVE_NETDB_H


23 
	~<√tdb.h
>

25 #ifde‡
HAVE_DLFCN_H


26 
	~<dlf˙.h
>

33 *
	$°uffbuf„r
(*
buf
, 
≠r_size_t
 
bufsize
, c⁄° *
s
)

35 
	`≠r_˝y°∫
(
buf
,
s
,
bufsize
);

36  
buf
;

37 
	}
}

39 *
	$≠r_îr‹_°rög
(
≠r_°©us_t
 
°©code
)

41 
°©code
) {

42 
APR_ENOPOOL
:

44 
APR_EBADDATE
:

46 
APR_EINVALSOCK
:

48 
APR_ENOPROC
:

50 
APR_ENOTIME
:

52 
APR_ENODIR
:

54 
APR_ENOLOCK
:

56 
APR_ENOPOLL
:

58 
APR_ENOSOCKET
:

60 
APR_ENOTHREAD
:

62 
APR_ENOTHDKEY
:

64 
APR_ENOSHMAVAIL
:

66 
APR_EDSOOPEN
:

67 #i‡
APR_HAS_DSO
 && 
	`deföed
(
HAVE_LIBDL
)

68  
	`dÀº‹
();

72 
APR_EBADIP
:

74 
APR_EBADMASK
:

77 
APR_INCHILD
:

81 
APR_INPARENT
:

85 
APR_DETACH
:

87 
APR_NOTDETACH
:

89 
APR_CHILD_DONE
:

91 
APR_CHILD_NOTDONE
:

93 
APR_TIMEUP
:

95 
APR_INCOMPLETE
:

97 
APR_BADCH
:

99 
APR_BADARG
:

101 
APR_EOF
:

103 
APR_NOTFOUND
:

105 
APR_ANONYMOUS
:

107 
APR_FILEBASED
:

109 
APR_KEYBASED
:

111 
APR_EINIT
:

115 
APR_ENOTIMPL
:

117 
APR_EMISMATCH
:

119 
APR_EABSOLUTE
:

121 
APR_ERELATIVE
:

123 
APR_EINCOMPLETE
:

125 
APR_EABOVEROOT
:

127 
APR_EBADPATH
:

129 
APR_EPATHWILD
:

131 
APR_EPROC_UNKNOWN
:

133 
APR_EGENERAL
:

138 
	}
}

141 #ifde‡
OS2


142 
	~<˘y≥.h
>

144 
≠r_ˇn⁄iˇl_îr‹
(
≠r_°©us_t
 
îr
);

146 *
	$≠r_os_°ªº‹
(* 
buf
, 
≠r_size_t
 
bufsize
, 
îr
)

148 
ªsu…
[200];

149 
mesßge
[
HUGE_STRING_LEN
];

150 
ULONG
 
Àn
;

151 *
pos
;

152 
c
;

154 i‡(
îr
 >= 10000 &&Érr < 12000) {

155  
	`°uffbuf„r
(
buf
, 
bufsize
,

156 
	`°ªº‹
(
	`≠r_ˇn⁄iˇl_îr‹
(
îr
+
APR_OS_START_SYSERR
)));

158 i‡(
	`DosGëMesßge
(
NULL
, 0, 
mesßge
, 
HUGE_STRING_LEN
, 
îr
,

159 "OSO001.MSG", &
Àn
) == 0) {

160 
Àn
--;

161 
mesßge
[
Àn
] = 0;

162 
pos
 = 
ªsu…
;

164 i‡(
Àn
 >(
ªsu…
))

165 
Àn
 = (
ªsu…
) - 1;

167 
c
=0; c<
Àn
; c++) {

169 
	`≠r_is•a˚
(
mesßge
[
c
]) &&ápr_isspace(message[c+1]))

170 
c
++;

171 *(
pos
++Ë
	`≠r_is•a˚
(
mesßge
[
c
]) ? ' ' : message[c];

174 *
pos
 = 0;

177 
	`•rötf
(
ªsu…
, "OS/2Éº‹ %d", 
îr
);

183  
	`°uffbuf„r
(
buf
, 
bufsize
, 
ªsu…
);

184 
	}
}

186 #ñi‡
deföed
(
WIN32
Ë|| (deföed(
NETWARE
Ë&& deföed(
USE_WINSOCK
))

189 
≠r_°©us_t
 
	mcode
;

190 c⁄° *
	mmsg
;

191 } 
	ggaEº‹Li°
[] = {

192 {
WSAEINTR
, "Interrupted system call"},

193 {
WSAEBADF
, "Bad fileÇumber"},

194 {
WSAEACCES
, "Permission denied"},

195 {
WSAEFAULT
, "Badáddress"},

196 {
WSAEINVAL
, "Invalidárgument"},

197 {
WSAEMFILE
, "Too many open sockets"},

198 {
WSAEWOULDBLOCK
, "Operation would block"},

199 {
WSAEINPROGRESS
, "OperationÇow inÖrogress"},

200 {
WSAEALREADY
, "Operationálready inÖrogress"},

201 {
WSAENOTSOCK
, "Socket operation onÇon-socket"},

202 {
WSAEDESTADDRREQ
, "DestinationáddressÑequired"},

203 {
WSAEMSGSIZE
, "MessageÅooÜong"},

204 {
WSAEPROTOTYPE
, "Protocol wrongÅype for socket"},

205 {
WSAENOPROTOOPT
, "BadÖrotocol option"},

206 {
WSAEPROTONOSUPPORT
, "ProtocolÇot supported"},

207 {
WSAESOCKTNOSUPPORT
, "SocketÅypeÇot supported"},

208 {
WSAEOPNOTSUPP
, "OperationÇot supported on socket"},

209 {
WSAEPFNOSUPPORT
, "Protocol familyÇot supported"},

210 {
WSAEAFNOSUPPORT
, "Address familyÇot supported"},

211 {
WSAEADDRINUSE
, "Addressálready in use"},

212 {
WSAEADDRNOTAVAIL
, "Can'tássignÑequestedáddress"},

213 {
WSAENETDOWN
, "Network is down"},

214 {
WSAENETUNREACH
, "Network is unreachable"},

215 {
WSAENETRESET
, "Net connectionÑeset"},

216 {
WSAECONNABORTED
, "Software caused connectionábort"},

217 {
WSAECONNRESET
, "ConnectionÑeset byÖeer"},

218 {
WSAENOBUFS
, "No buffer spaceávailable"},

219 {
WSAEISCONN
, "Socket isálready connected"},

220 {
WSAENOTCONN
, "Socket isÇot connected"},

221 {
WSAESHUTDOWN
, "Can't sendáfter socket shutdown"},

222 {
WSAETOOMANYREFS
, "Too manyÑeferences, can't splice"},

223 {
WSAETIMEDOUT
, "ConnectionÅimed out"},

224 {
WSAECONNREFUSED
, "ConnectionÑefused"},

225 {
WSAELOOP
, "Too manyÜevels of symbolicÜinks"},

226 {
WSAENAMETOOLONG
, "FileÇameÅooÜong"},

227 {
WSAEHOSTDOWN
, "Host is down"},

228 {
WSAEHOSTUNREACH
, "NoÑouteÅo host"},

229 {
WSAENOTEMPTY
, "DirectoryÇotÉmpty"},

230 {
WSAEPROCLIM
, "Too manyÖrocesses"},

231 {
WSAEUSERS
, "Too many users"},

232 {
WSAEDQUOT
, "Disc quotaÉxceeded"},

233 {
WSAESTALE
, "Stale NFS file handle"},

234 {
WSAEREMOTE
, "Too manyÜevels ofÑemote inÖath"},

235 {
WSASYSNOTREADY
, "Network system is unavailable"},

236 {
WSAVERNOTSUPPORTED
, "Winsock version out ofÑange"},

237 {
WSANOTINITIALISED
, "WSAStartupÇot yet called"},

238 {
WSAEDISCON
, "Graceful shutdown inÖrogress"},

239 {
WSAHOST_NOT_FOUND
, "HostÇot found"},

240 {
WSANO_DATA
, "No host data ofÅhatÅype was found"},

241 {0, 
NULL
}

245 *
	$≠r_os_°ªº‹
(*
buf
, 
≠r_size_t
 
bufsize
, 
≠r_°©us_t
 
îrcode
)

247 
≠r_size_t
 
Àn
=0, 
i
;

249 #i‚de‡
NETWARE


250 #i‚de‡
_WIN32_WCE


251 
Àn
 = 
	`F‹m©MesßgeA
(
FORMAT_MESSAGE_FROM_SYSTEM


252 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

253 
NULL
,

254 
îrcode
,

255 
	`MAKELANGID
(
LANG_NEUTRAL
, 
SUBLANG_DEFAULT
),

256 
buf
,

257 (
DWORD
)
bufsize
,

258 
NULL
);

260 
LPTSTR
 
msg
 = (LPTSTRË
buf
;

261 
Àn
 = 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM


262 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

263 
NULL
,

264 
îrcode
,

265 
	`MAKELANGID
(
LANG_NEUTRAL
, 
SUBLANG_DEFAULT
),

266 
msg
,

267 (
DWORD
Ë(
bufsize
/(
TCHAR
)),

268 
NULL
);

270 
i
 = 0; i <
Àn
; i++) {

271 i‡(
msg
[
i
] < 0x80 && msg[i] >= 0) {

272 
buf
[
i
] = (Ë
msg
[i];

274 
buf
[
i
] = '?';

280 i‡(!
Àn
) {

281 
i
 = 0; 
gaEº‹Li°
[i].
msg
; ++i) {

282 i‡(
gaEº‹Li°
[
i
].
code
 =
îrcode
) {

283 
	`≠r_˝y°∫
(
buf
, 
gaEº‹Li°
[
i
].
msg
, 
bufsize
);

284 
Àn
 = 
	`°æí
(
buf
);

290 i‡(
Àn
) {

297 
i
 = 
Àn
;

298 
i
) {

299 
i
--;

300 i‡((
buf
[
i
] == '\r') || (buf[i] == '\n'))

301 
buf
[
i
] = ' ';

307 
	`≠r_¢¥ötf
(
buf
, 
bufsize
, "Uƒecognized Wö32Éº‹ codê%d", 
îrcode
);

310  
buf
;

311 
	}
}

317 *
	$≠r_os_°ªº‹
(* 
buf
, 
≠r_size_t
 
bufsize
, 
îr
)

319 #ifde‡
HAVE_HSTRERROR


320  
	`°uffbuf„r
(
buf
, 
bufsize
, 
	`h°ªº‹
(
îr
));

322 c⁄° *
msg
;

324 
îr
) {

325 
HOST_NOT_FOUND
:

326 
msg
 = "Unknown host";

328 #i‡
	`deföed
(
NO_DATA
)

329 
NO_DATA
:

330 #i‡
	`deföed
(
NO_ADDRESS
Ë&& (
NO_DATA
 != NO_ADDRESS)

331 
NO_ADDRESS
:

333 
msg
 = "Noáddress for host";

335 #ñi‡
	`deföed
(
NO_ADDRESS
)

336 
NO_ADDRESS
:

337 
msg
 = "Noáddress for host";

341 
msg
 = "UnrecognizedÑesolverÉrror";

343  
	`°uffbuf„r
(
buf
, 
bufsize
, 
msg
);

345 
	}
}

348 #i‡
deföed
(
HAVE_STRERROR_R
Ë&& deföed(
STRERROR_R_RC_INT
Ë&& !deföed(
BEOS
)

350 *
	$«tive_°ªº‹
(
≠r_°©us_t
 
°©code
, *
buf
,

351 
≠r_size_t
 
bufsize
)

353 i‡(
	`°ªº‹_r
(
°©code
, 
buf
, 
bufsize
) < 0) {

354  
	`°uffbuf„r
(
buf
, 
bufsize
,

358  
buf
;

360 
	}
}

361 #ñi‡
deföed
(
HAVE_STRERROR_R
)

368 #i‡
deföed
(
BEOS
)

369 c⁄° *
°ªº‹_r
(
≠r_°©us_t
, *, 
≠r_size_t
);

372 *
	$«tive_°ªº‹
(
≠r_°©us_t
 
°©code
, *
buf
,

373 
≠r_size_t
 
bufsize
)

375 c⁄° *
msg
;

377 
buf
[0] = '\0';

378 
msg
 = 
	`°ªº‹_r
(
°©code
, 
buf
, 
bufsize
);

379 i‡(
buf
[0] == '\0') {

380  
	`°uffbuf„r
(
buf
, 
bufsize
, 
msg
);

383  
buf
;

385 
	}
}

390 *
	$«tive_°ªº‹
(
≠r_°©us_t
 
°©code
, *
buf
,

391 
≠r_size_t
 
bufsize
)

393 #ifde‡
_WIN32_WCE


394 
îr
[32];

395 
	`•rötf
(
îr
, "N©ivêEº‹ #%d", 
°©code
);

396  
	`°uffbuf„r
(
buf
, 
bufsize
, 
îr
);

398 c⁄° *
îr
 = 
	`°ªº‹
(
°©code
);

399 i‡(
îr
) {

400  
	`°uffbuf„r
(
buf
, 
bufsize
, 
îr
);

402  
	`°uffbuf„r
(
buf
, 
bufsize
,

406 
	}
}

409 
	$APR_DECLARE
(*Ë
	$≠r_°ªº‹
(
≠r_°©us_t
 
°©code
, *
buf
,

410 
≠r_size_t
 
bufsize
)

412 i‡(
°©code
 < 
APR_OS_START_ERROR
) {

413  
	`«tive_°ªº‹
(
°©code
, 
buf
, 
bufsize
);

415 i‡(
°©code
 < 
APR_OS_START_USERERR
) {

416  
	`°uffbuf„r
(
buf
, 
bufsize
, 
	`≠r_îr‹_°rög
(
°©code
));

418 i‡(
°©code
 < 
APR_OS_START_EAIERR
) {

419  
	`°uffbuf„r
(
buf
, 
bufsize
, "APR doesÇot understandÅhisÉrror code");

421 i‡(
°©code
 < 
APR_OS_START_SYSERR
) {

422 #i‡
	`deföed
(
HAVE_GAI_STRERROR
)

423 
°©code
 -
APR_OS_START_EAIERR
;

424 #i‡
	`deföed
(
NEGATIVE_EAI
)

425 
°©code
 = -statcode;

427  
	`°uffbuf„r
(
buf
, 
bufsize
, 
	`gai_°ªº‹
(
°©code
));

429  
	`°uffbuf„r
(
buf
, 
bufsize
, "APR doesÇot understandÅhisÉrror code");

433  
	`≠r_os_°ªº‹
(
buf
, 
bufsize
, 
°©code
 - 
APR_OS_START_SYSERR
);

435 
	}
}

	@misc/unix/getopt.c

34 
	~"≠r_¨ch_misc.h
"

35 
	~"≠r_°rögs.h
"

36 
	~"≠r_lib.h
"

38 
	#EMSG
 ""

	)

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gë›t_öô
(
≠r_gë›t_t
 **
os
, 
≠r_poﬁ_t
 *
c⁄t
,

41 
¨gc
, c⁄° *c⁄° *
¨gv
)

43 *
¨gv_buff
;

45 *
os
 = 
	`≠r_∑Œoc
(
c⁄t
, (
≠r_gë›t_t
));

46 (*
os
)->
c⁄t
 = cont;

47 (*
os
)->
ª£t
 = 0;

48 (*
os
)->
îr‚
 = (
≠r_gë›t_îr_‚_t
*)(
Ârötf
);

49 (*
os
)->
îørg
 = (*)(
°dîr
);

51 (*
os
)->
∂a˚
 = 
EMSG
;

52 (*
os
)->
¨gc
 =árgc;

58 
¨gv_buff
 = 
	`≠r_∑Œoc
(
c⁄t
, (
¨gc
 + 1) * (const *));

59 
	`mem˝y
(
¨gv_buff
, 
¨gv
, 
¨gc
 * (const *));

60 (*
os
)->
¨gv
 = 
¨gv_buff
;

61 (*
os
)->
¨gv
[
¨gc
] = 
NULL
;

63 (*
os
)->
öãæóve
 = 0;

64 (*
os
)->
öd
 = 1;

65 (*
os
)->
skù_°¨t
 = 1;

66 (*
os
)->
skù_íd
 = 1;

68  
APR_SUCCESS
;

69 
	}
}

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gë›t
(
≠r_gë›t_t
 *
os
, c⁄° *
›ts
,

72 *
›tch
, c⁄° **
›èrg
)

74 c⁄° *
ﬁi
;

76 i‡(
os
->
ª£t
 || !*os->
∂a˚
) {

77 
os
->
ª£t
 = 0;

78 i‡(
os
->
öd
 >os->
¨gc
 || *(os->
∂a˚
 = os->
¨gv
[os->ind]) != '-') {

79 
os
->
∂a˚
 = 
EMSG
;

80 *
›tch
 = 
os
->
›t
;

81  (
APR_EOF
);

83 i‡(
os
->
∂a˚
[1] && *++os->place == '-') {

84 ++
os
->
öd
;

85 
os
->
∂a˚
 = 
EMSG
;

86 *
›tch
 = 
os
->
›t
;

87  (
APR_EOF
);

90 i‡((
os
->
›t
 = (Ë*os->
∂a˚
++) == () ':' ||

91 !(
ﬁi
 = 
	`°rchr
(
›ts
, 
os
->
›t
))) {

96 i‡(
os
->
›t
 == () '-') {

97 *
›tch
 = 
os
->
›t
;

98  (
APR_EOF
);

100 i‡(!*
os
->
∂a˚
)

101 ++
os
->
öd
;

102 i‡(
os
->
îr‚
 && *
›ts
 != ':') {

103 (
os
->
îr‚
)(os->
îørg
, "%s: illegal option -- %c\n",

104 
	`≠r_fûï©h_«me_gë
(*
os
->
¨gv
), os->
›t
);

106 *
›tch
 = 
os
->
›t
;

107  (
APR_BADCH
);

109 i‡(*++
ﬁi
 != ':') {

110 *
›èrg
 = 
NULL
;

111 i‡(!*
os
->
∂a˚
)

112 ++
os
->
öd
;

115 i‡(*
os
->
∂a˚
)

116 *
›èrg
 = 
os
->
∂a˚
;

117 i‡(
os
->
¨gc
 <++os->
öd
) {

118 
os
->
∂a˚
 = 
EMSG
;

119 i‡(*
›ts
 == ':') {

120 *
›tch
 = 
os
->
›t
;

121  (
APR_BADARG
);

123 i‡(
os
->
îr‚
) {

124 (
os
->
îr‚
)(os->
îørg
,

126 
	`≠r_fûï©h_«me_gë
(*
os
->
¨gv
), os->
›t
);

128 *
›tch
 = 
os
->
›t
;

129  (
APR_BADCH
);

132 *
›èrg
 = 
os
->
¨gv
[os->
öd
];

133 
os
->
∂a˚
 = 
EMSG
;

134 ++
os
->
öd
;

136 *
›tch
 = 
os
->
›t
;

137  
APR_SUCCESS
;

138 
	}
}

141 
	$ªvî£
(c⁄° **
¨gv
, 
°¨t
, 
Àn
)

143 c⁄° *
ãmp
;

145 ; 
Àn
 >2; 
°¨t
++,Üen -= 2) {

146 
ãmp
 = 
¨gv
[
°¨t
];

147 
¨gv
[
°¨t
] =árgv[°¨à+ 
Àn
 - 1];

148 
¨gv
[
°¨t
 + 
Àn
 - 1] = 
ãmp
;

150 
	}
}

158 
	$≥rmuã
(
≠r_gë›t_t
 *
os
)

160 
Àn1
 = 
os
->
skù_íd
 - os->
skù_°¨t
;

161 
Àn2
 = 
os
->
öd
 - os->
skù_íd
;

163 i‡(
os
->
öãæóve
) {

170 
	`ªvî£
(
os
->
¨gv
, os->
skù_°¨t
, 
Àn1
 + 
Àn2
);

171 
	`ªvî£
(
os
->
¨gv
, os->
skù_°¨t
, 
Àn2
);

172 
	`ªvî£
(
os
->
¨gv
, os->
skù_°¨t
 + 
Àn2
, 
Àn1
);

176 
os
->
skù_°¨t
 +
Àn2
;

177 
os
->
skù_íd
 +
Àn2
;

178 
	}
}

181 
≠r_°©us_t
 
	$£º
(
≠r_gë›t_t
 *
os
, c⁄° *
îr
, c⁄° *
°r
,

182 
≠r_°©us_t
 
°©us
)

184 i‡(
os
->
îr‚
)

185 (
os
->
îr‚
)(os->
îørg
, "%s: %s: %s\n",

186 
	`≠r_fûï©h_«me_gë
(*
os
->
¨gv
), 
îr
, 
°r
);

187  
°©us
;

188 
	}
}

191 
≠r_°©us_t
 
	$˚º
(
≠r_gë›t_t
 *
os
, c⁄° *
îr
, 
ch
,

192 
≠r_°©us_t
 
°©us
)

194 i‡(
os
->
îr‚
)

195 (
os
->
îr‚
)(os->
îørg
, "%s: %s: %c\n",

196 
	`≠r_fûï©h_«me_gë
(*
os
->
¨gv
), 
îr
, 
ch
);

197  
°©us
;

198 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gë›t_l⁄g
(
≠r_gë›t_t
 *
os
,

201 c⁄° 
≠r_gë›t_›ti⁄_t
 *
›ts
,

202 *
›tch
, c⁄° **
›èrg
)

204 c⁄° *
p
;

205 
i
;

208 i‡(
os
->
ª£t
) {

209 
os
->
∂a˚
 = 
EMSG
;

210 
os
->
öd
 = 1;

211 
os
->
ª£t
 = 0;

219 
p
 = 
os
->
∂a˚
;

220 i‡(*
p
 == '\0') {

222 i‡(
os
->
öãæóve
) {

223 
os
->
öd
 < os->
¨gc
 && *os->
¨gv
[os->ind] != '-')

224 
os
->
öd
++;

225 
os
->
skù_íd
 = os->
öd
;

227 i‡(
os
->
öd
 >os->
¨gc
 || *os->
¨gv
[os->ind] != '-') {

228 
os
->
öd
 = os->
skù_°¨t
;

229  
APR_EOF
;

232 
p
 = 
os
->
¨gv
[os->
öd
++] + 1;

233 i‡(*
p
 == '-' &&Ö[1] != '\0') {

235 
≠r_size_t
 
Àn
 = 0;

237 
p
++;

238 
i
 = 0; ; i++) {

239 i‡(
›ts
[
i
].
›tch
 == 0)

240  
	`£º
(
os
, "övÆid o±i⁄", 
p
 - 2, 
APR_BADCH
);

242 i‡(
›ts
[
i
].
«me
) {

243 
Àn
 = 
	`°æí
(
›ts
[
i
].
«me
);

244 i‡(
	`°∫cmp
(
p
, 
›ts
[
i
].
«me
, 
Àn
) == 0

245 && (
p
[
Àn
] == '\0' ||Ö[len] == '='))

249 *
›tch
 = 
›ts
[
i
].optch;

251 i‡(
›ts
[
i
].
has_¨g
) {

252 i‡(
p
[
Àn
] == '=')

253 *
›èrg
 = 
p
 + 
Àn
 + 1;

255 i‡(
os
->
öd
 >os->
¨gc
)

256  
	`£º
(
os
, "missögárgumít", 
p
 - 2, 
APR_BADARG
);

258 *
›èrg
 = 
os
->
¨gv
[os->
öd
++];

261 *
›èrg
 = 
NULL
;

262 i‡(
p
[
Àn
] == '=')

263  
	`£º
(
os
, "îr⁄eou†¨gumít", 
p
 - 2, 
APR_BADARG
);

265 
	`≥rmuã
(
os
);

266  
APR_SUCCESS
;

268 i‡(*
p
 == '-') {

269 
	`≥rmuã
(
os
);

270 
os
->
öd
 = os->
skù_°¨t
;

271  
APR_EOF
;

274 i‡(*
p
 == '\0')

275  
	`£º
(
os
, "övÆid o±i⁄", 
p
, 
APR_BADCH
);

283 
i
 = 0; ; i++) {

284 i‡(
›ts
[
i
].
›tch
 == 0)

285  
	`˚º
(
os
, "övÆid o±i⁄ ch¨a˘î", *
p
, 
APR_BADCH
);

287 i‡(*
p
 =
›ts
[
i
].
›tch
)

290 *
›tch
 = *
p
++;

292 i‡(
›ts
[
i
].
has_¨g
) {

293 i‡(*
p
 != '\0')

294 *
›èrg
 = 
p
;

296 i‡(
os
->
öd
 >os->
¨gc
)

297  
	`˚º
(
os
, "missögárgumít", *
›tch
, 
APR_BADARG
);

299 *
›èrg
 = 
os
->
¨gv
[os->
öd
++];

301 
os
->
∂a˚
 = 
EMSG
;

303 *
›èrg
 = 
NULL
;

304 
os
->
∂a˚
 = 
p
;

307 
	`≥rmuã
(
os
);

308  
APR_SUCCESS
;

309 
	}
}

	@misc/unix/otherchild.c

17 
	~"≠r.h
"

18 
	~"≠r_¨ch_misc.h
"

19 
	~"≠r_¨ch_thªad¥oc.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

22 #i‡
APR_HAS_OTHER_CHILD


24 #ifde‡
HAVE_TIME_H


25 
	~<sys/time.h
>

27 #ifde‡
HAVE_SYS_SELECT_H


28 
	~<sys/£À˘.h
>

30 #i‡
APR_HAVE_SYS_WAIT_H


31 
	~<sys/waô.h
>

33 #ifde‡
BEOS


34 
	~<sys/sockë.h
>

37 
≠r_Ÿhî_chûd_ªc_t
 *
	gŸhî_chûdªn
 = 
NULL
;

39 
≠r_°©us_t
 
	$Ÿhî_chûd_˛ónup
(*
d©a
)

41 
≠r_Ÿhî_chûd_ªc_t
 **
po¸
, *
no¸
;

43 
po¸
 = &
Ÿhî_chûdªn
; *po¸;Öo¸ = &(*po¸)->
√xt
) {

44 i‡((*
po¸
)->
d©a
 == data) {

45 
no¸
 = (*
po¸
)->
√xt
;

46 (*(*
po¸
)->
maöã«n˚
Ë(
APR_OC_REASON_UNREGISTER
, (*po¸)->
d©a
, -1);

47 *
po¸
 = 
no¸
;

49  
APR_SUCCESS
;

52  
APR_SUCCESS
;

53 
	}
}

55 
	$APR_DECLARE
(Ë
	`≠r_¥oc_Ÿhî_chûd_ªgi°î
(
≠r_¥oc_t
 *
¥oc
,

56 (*
maöã«n˚
Ë(
ªas⁄
, *, 
°©us
),

57 *
d©a
, 
≠r_fûe_t
 *
wrôe_fd
, 
≠r_poﬁ_t
 *
p
)

59 
≠r_Ÿhî_chûd_ªc_t
 *
o¸
;

61 
o¸
 = 
	`≠r_∑Œoc
(
p
, (*ocr));

62 
o¸
->
p
 =Ö;

63 
o¸
->
¥oc
 =Öroc;

64 
o¸
->
maöã«n˚
 = maintenance;

65 
o¸
->
d©a
 = data;

66 i‡(
wrôe_fd
 =
NULL
) {

67 
o¸
->
wrôe_fd
 = (
≠r_os_fûe_t
) -1;

70 #ifde‡
WIN32


74 
o¸
->
wrôe_fd
 = wrôe_fd->
fûeh™d
;

76 
o¸
->
wrôe_fd
 = wrôe_fd->
fûedes
;

80 
o¸
->
√xt
 = 
Ÿhî_chûdªn
;

81 
Ÿhî_chûdªn
 = 
o¸
;

82 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
o¸
->
d©a
, 
Ÿhî_chûd_˛ónup
,

83 
≠r_poﬁ_˛ónup_nuŒ
);

84 
	}
}

86 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_uƒegi°î
(*
d©a
)

88 
≠r_Ÿhî_chûd_ªc_t
 *
cur
;

90 
cur
 = 
Ÿhî_chûdªn
;

91 
cur
) {

92 i‡(
cur
->
d©a
 == data) {

95 
cur
 = cur->
√xt
;

99 
	`≠r_poﬁ_˛ónup_kûl
(
cur
->
p
, cur->
d©a
, 
Ÿhî_chûd_˛ónup
);

100 
	`Ÿhî_chûd_˛ónup
(
d©a
);

101 
	}
}

103 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_Ÿhî_chûd_Æît
(
≠r_¥oc_t
 *
¥oc
,

104 
ªas⁄
,

105 
°©us
)

107 
≠r_Ÿhî_chûd_ªc_t
 *
o¸
, *
no¸
;

109 
o¸
 = 
Ÿhî_chûdªn
; o¸; o¸ = 
no¸
) {

110 
no¸
 = 
o¸
->
√xt
;

111 i‡(
o¸
->
¥oc
->
pid
 !=Öroc->pid)

114 
o¸
->
¥oc
 = 
NULL
;

115 (*
o¸
->
maöã«n˚
Ë(
ªas⁄
, o¸->
d©a
, 
°©us
);

116  
APR_SUCCESS
;

118  
APR_EPROC_UNKNOWN
;

119 
	}
}

121 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_ª‰esh
(
≠r_Ÿhî_chûd_ªc_t
 *
o¸
,

122 
ªas⁄
)

127 #ifde‡
WIN32


128 
DWORD
 
°©us
;

130 i‡(
o¸
->
¥oc
 =
NULL
)

133 i‡(!
o¸
->
¥oc
->
h¥oc
) {

137 
o¸
->
¥oc
 = 
NULL
;

138 (*
o¸
->
maöã«n˚
Ë(
APR_OC_REASON_LOST
, o¸->
d©a
, -1);

140 i‡(!
	`GëExôCodePro˚ss
(
o¸
->
¥oc
->
h¥oc
, &
°©us
)) {

141 
	`Clo£H™dÀ
(
o¸
->
¥oc
->
h¥oc
);

142 
o¸
->
¥oc
->
h¥oc
 = 
NULL
;

143 
o¸
->
¥oc
 = 
NULL
;

144 (*
o¸
->
maöã«n˚
Ë(
APR_OC_REASON_LOST
, o¸->
d©a
, -1);

146 i‡(
°©us
 =
STILL_ACTIVE
) {

147 (*
o¸
->
maöã«n˚
Ë(
ªas⁄
, o¸->
d©a
, -1);

150 
	`Clo£H™dÀ
(
o¸
->
¥oc
->
h¥oc
);

151 
o¸
->
¥oc
->
h¥oc
 = 
NULL
;

152 
o¸
->
¥oc
 = 
NULL
;

153 (*
o¸
->
maöã«n˚
Ë(
APR_OC_REASON_DEATH
, o¸->
d©a
, 
°©us
);

157 
pid_t
 
waôªt
;

158 
°©us
;

160 i‡(
o¸
->
¥oc
 =
NULL
)

163 
waôªt
 = 
	`waôpid
(
o¸
->
¥oc
->
pid
, &
°©us
, 
WNOHANG
);

164 i‡(
waôªt
 =
o¸
->
¥oc
->
pid
) {

165 
o¸
->
¥oc
 = 
NULL
;

166 (*
o¸
->
maöã«n˚
Ë(
APR_OC_REASON_DEATH
, o¸->
d©a
, 
°©us
);

168 i‡(
waôªt
 == 0) {

169 (*
o¸
->
maöã«n˚
Ë(
ªas⁄
, o¸->
d©a
, -1);

171 i‡(
waôªt
 == -1) {

173 
o¸
->
¥oc
 = 
NULL
;

174 (*
o¸
->
maöã«n˚
Ë(
APR_OC_REASON_LOST
, o¸->
d©a
, -1);

177 
	}
}

179 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_ª‰esh_Æl
(
ªas⁄
)

181 
≠r_Ÿhî_chûd_ªc_t
 *
o¸
, *
√xt_o¸
;

183 
o¸
 = 
Ÿhî_chûdªn
; o¸; o¸ = 
√xt_o¸
) {

184 
√xt_o¸
 = 
o¸
->
√xt
;

185 
	`≠r_¥oc_Ÿhî_chûd_ª‰esh
(
o¸
, 
ªas⁄
);

187 
	}
}

191 
	$APR_DECLARE
(Ë
	`≠r_¥oc_Ÿhî_chûd_ªgi°î
(
≠r_¥oc_t
 *
¥oc
,

192 (*
maöã«n˚
Ë(
ªas⁄
, *, 
°©us
),

193 *
d©a
, 
≠r_fûe_t
 *
wrôe_fd
, 
≠r_poﬁ_t
 *
p
)

196 
	}
}

198 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_uƒegi°î
(*
d©a
)

201 
	}
}

203 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_Ÿhî_chûd_Æît
(
≠r_¥oc_t
 *
¥oc
,

204 
ªas⁄
,

205 
°©us
)

207  
APR_ENOTIMPL
;

208 
	}
}

210 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_ª‰esh
(
≠r_Ÿhî_chûd_ªc_t
 *
o¸
,

211 
ªas⁄
)

214 
	}
}

216 
	$APR_DECLARE
(Ë
	$≠r_¥oc_Ÿhî_chûd_ª‰esh_Æl
(
ªas⁄
)

219 
	}
}

	@misc/unix/rand.c

17 
	#APR_WANT_MEMFUNC


	)

18 
	~"≠r_w™t.h
"

19 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_¨ch_misc.h
"

22 
	~<sys/°©.h
>

23 #i‡
APR_HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

26 #i‡
APR_HAVE_SYS_SOCKET_H


27 
	~<sys/sockë.h
>

29 #i‡
APR_HAVE_FCNTL_H


30 
	~<f˙é.h
>

32 #i‡
APR_HAVE_UNISTD_H


33 
	~<uni°d.h
>

35 #i‡
APR_HAVE_SYS_UN_H


36 
	~<sys/un.h
>

38 #i‡
deföed
(
HAVE_UUID_H
)

39 
	~<uuid.h
>

40 #ñi‡
deföed
(
HAVE_UUID_UUID_H
)

41 
	~<uuid/uuid.h
>

42 #ñi‡
deföed
(
HAVE_SYS_UUID_H
)

43 
	~<sys/uuid.h
>

46 #i‚de‡
SHUT_RDWR


47 
	#SHUT_RDWR
 2

	)

50 #i‡
APR_HAS_OS_UUID


52 #i‡
deföed
(
HAVE_UUID_CREATE
)

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_uuid_gë
(*
uuid_d©a
)

56 
uöt32_t
 
rv
;

57 
uuid_t
 
g
;

59 
	`uuid_¸óã
(&
g
, &
rv
);

61 i‡(
rv
 !
uuid_s_ok
)

62  
APR_EGENERAL
;

64 
	`mem˝y
(
uuid_d©a
, &
g
, (
uuid_t
));

66  
APR_SUCCESS
;

67 
	}
}

69 #ñi‡
deföed
(
HAVE_UUID_GENERATE
)

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_uuid_gë
(*
uuid_d©a
)

73 
uuid_t
 
g
;

75 
	`uuid_gíî©e
(
g
);

77 
	`mem˝y
(
uuid_d©a
, 
g
, (
uuid_t
));

79  
APR_SUCCESS
;

80 
	}
}

85 #i‡
APR_HAS_RANDOM


87 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gíî©e_øndom_byãs
(*
buf
,

88 
≠r_size_t
 
Àngth
)

90 #ifde‡
DEV_RANDOM


92 
fd
 = -1;

98 
≠r_ssize_t
 
rc
;

100 i‡(
fd
 == -1)

101 i‡((
fd
 = 
	`›í
(
DEV_RANDOM
, 
O_RDONLY
)) == -1)

102  
î∫o
;

105 
rc
 = 
	`ªad
(
fd
, 
buf
, 
Àngth
);

106 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

108 i‡(
rc
 < 0) {

109 
î∫um
 = 
î∫o
;

110 
	`˛o£
(
fd
);

111  
î∫um
;

113 i‡(
rc
 == 0) {

114 
	`˛o£
(
fd
);

115 
fd
 = -1;

118 
buf
 +
rc
;

119 
Àngth
 -
rc
;

121 } 
Àngth
 > 0);

123 
	`˛o£
(
fd
);

124 #ñi‡
	`deföed
(
OS2
)

125 
UCHAR
 
	`øndbyã
();

126 
idx
;

128 
idx
=0; idx<
Àngth
; idx++)

129 
buf
[
idx
] = 
	`øndbyã
();

131 #ñi‡
	`deföed
(
HAVE_EGD
)

146 c⁄° *
egd_sockës
[] = { 
EGD_DEFAULT_SOCKET
, 
NULL
 };

147 c⁄° **
egdsock«me
 = 
NULL
;

149 
egd_sockë
, 
egd_∑th_Àn
, 
rv
, 
bad_î∫o
;

150 
sockaddr_un
 
addr
;

151 
≠r_sockÀn_t
 
egd_addr_Àn
;

152 
≠r_size_t
 
ª•_ex≥˘ed
;

153 
ªq
[2], 
ª•
[255];

154 *
curbuf
 = 
buf
;

156 
egdsock«me
 = 
egd_sockës
; *egdsock«mê&& 
Àngth
 > 0;Égdsockname++) {

157 
egd_∑th_Àn
 = 
	`°æí
(*
egdsock«me
);

159 i‡(
egd_∑th_Àn
 > (
addr
.
sun_∑th
)) {

160  
APR_EINVAL
;

163 
	`mem£t
(&
addr
, 0, (
sockaddr_un
));

164 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

165 
	`mem˝y
(
addr
.
sun_∑th
, *
egdsock«me
, 
egd_∑th_Àn
);

166 
egd_addr_Àn
 = 
	`APR_OFFSETOF
(
sockaddr_un
, 
sun_∑th
) +

167 
egd_∑th_Àn
;

169 
egd_sockë
 = 
	`sockë
(
PF_UNIX
, 
SOCK_STREAM
, 0);

171 i‡(
egd_sockë
 == -1) {

172  
î∫o
;

175 
rv
 = 
	`c⁄√˘
(
egd_sockë
, (
sockaddr
*)&
addr
, 
egd_addr_Àn
);

177 i‡(
rv
 == -1) {

178 
bad_î∫o
 = 
î∫o
;

183 
Àngth
 > 0) {

184 
≠r_ssize_t
 
§v
;

185 
ªq
[0] = 2;

186 
ªq
[1] = 
Àngth
 > 255 ? 255:Üength;

188 
§v
 = 
	`wrôe
(
egd_sockë
, 
ªq
, 2);

189 i‡(
§v
 == -1) {

190 
bad_î∫o
 = 
î∫o
;

191 
	`shutdown
(
egd_sockë
, 
SHUT_RDWR
);

192 
	`˛o£
(
egd_sockë
);

196 i‡(
§v
 != 2) {

197 
	`shutdown
(
egd_sockë
, 
SHUT_RDWR
);

198 
	`˛o£
(
egd_sockë
);

199  
APR_EGENERAL
;

202 
ª•_ex≥˘ed
 = 
ªq
[1];

203 
§v
 = 
	`ªad
(
egd_sockë
, 
ª•
, 
ª•_ex≥˘ed
);

204 i‡(
§v
 == -1) {

205 
bad_î∫o
 = 
î∫o
;

206 
	`shutdown
(
egd_sockë
, 
SHUT_RDWR
);

207 
	`˛o£
(
egd_sockë
);

208  
bad_î∫o
;

211 
	`mem˝y
(
curbuf
, 
ª•
, 
§v
);

212 
curbuf
 +
§v
;

213 
Àngth
 -
§v
;

216 
	`shutdown
(
egd_sockë
, 
SHUT_RDWR
);

217 
	`˛o£
(
egd_sockë
);

220 i‡(
Àngth
 > 0) {

224  
bad_î∫o
;

227 #ñi‡
	`deföed
(
HAVE_TRUERAND
)

229 
	`øndbyã
();

230 
idx
;

235 
idx
=0; idx<
Àngth
; idx++)

236 
buf
[
idx
] = (Ë
	`øndbyã
();

240  
APR_SUCCESS
;

241 
	}
}

243 #unde‡
STR


244 #unde‡
XSTR


246 #ifde‡
OS2


247 
	~"øndbyã_os2.öc
"

	@misc/unix/start.c

17 
	~"≠r.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_sig«l.h
"

21 
	~"≠r_©omic.h
"

23 
	~"≠r_¨ch_¥oc_muãx.h
"

24 
	~"≠r_¨ch_öã∫Æ_time.h
"

27 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_≠p_öôülize
(*
¨gc
,

28 c⁄° * c⁄° * *
¨gv
,

29 c⁄° * c⁄° * *
ív
)

36  
	`≠r_öôülize
();

37 
	}
}

39 
	göôülized
 = 0;

41 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_öôülize
()

43 
≠r_poﬁ_t
 *
poﬁ
;

44 
≠r_°©us_t
 
°©us
;

46 i‡(
öôülized
++) {

47  
APR_SUCCESS
;

50 #i‡!
	`deföed
(
BEOS
Ë&& !deföed(
OS2
)

51 
	`≠r_¥oc_muãx_unix_£tup_lock
();

52 
	`≠r_unix_£tup_time
();

55 i‡((
°©us
 = 
	`≠r_poﬁ_öôülize
()Ë!
APR_SUCCESS
)

56  
°©us
;

58 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

59  
APR_ENOPOOL
;

62 
	`≠r_poﬁ_èg
(
poﬁ
, "apr_initialize");

71 
	`≠r_sig«l_öô
(
poﬁ
);

73  
APR_SUCCESS
;

74 
	}
}

76 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_ãrmö©e
()

78 
öôülized
--;

79 i‡(
öôülized
) {

82 
	`≠r_poﬁ_ãrmö©e
();

84 
	}
}

86 
	$APR_DECLARE
(Ë
	$≠r_ãrmö©e2
()

88 
	`≠r_ãrmö©e
();

89 
	}
}

	@misc/unix/version.c

17 
	~"≠r_vîsi⁄.h
"

18 
	~"≠r_gíîÆ.h
"

20 
	$APR_DECLARE
(Ë
	$≠r_vîsi⁄
(
≠r_vîsi⁄_t
 *
pv¢
)

22 
pv¢
->
maj‹
 = 
APR_MAJOR_VERSION
;

23 
pv¢
->
mö‹
 = 
APR_MINOR_VERSION
;

24 
pv¢
->
∑tch
 = 
APR_PATCH_VERSION
;

25 #ifde‡
APR_IS_DEV_VERSION


26 
pv¢
->
is_dev
 = 1;

28 
pv¢
->
is_dev
 = 0;

30 
	}
}

32 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_vîsi⁄_°rög
()

34  
APR_VERSION_STRING
;

35 
	}
}

	@misc/win32/apr_app.c

38 
	~"≠r_gíîÆ.h
"

39 
	~"ShñlAPI.h
"

40 
	~"wch¨.h
"

41 
	~"≠r_¨ch_fûe_io.h
"

42 
	~"as£π.h
"

43 
	~"≠r_¥iv©e.h
"

44 
	~"≠r_¨ch_misc.h
"

46 #¥agm®
commít
(
lökî
,"/ENTRY:wmainCRTStartup")

48 
maö
(
¨gc
, c⁄° **
¨gv
, c⁄° **
ív
);

50 
	$wmaö
(
¨gc
, c⁄° 
wch¨_t
 **
w¨gv
, c⁄° wch¨_à**
wív
)

52 **
¨gv
;

53 **
ív
;

54 
du≥nv
;

56 ()
	`≠r_wa°πﬂ°r
(&
¨gv
, 
w¨gv
, 
¨gc
);

58 
du≥nv
 = 
	`≠r_wa°πﬂ°r
(&
ív
, 
wív
, -1);

60 
_ívú⁄
 = 
	`≠r_mÆloc_dbg
((
du≥nv
 + 1) *  (*),

61 
__FILE__
, 
__LINE__
 );

62 
	`mem˝y
(
_ívú⁄
, 
ív
, (
du≥nv
 + 1) *  (*));

71 i‡(
_wívú⁄
) {

72 
wív
 = 
_wívú⁄
;

73 
_wívú⁄
 = 
NULL
;

74 
	`‰ì
((
wch¨_t
 **)
wív
);

77 
≠r_≠p_öô_com∂ëe
 = 1;

79  
	`maö
(
¨gc
, 
¨gv
, 
ív
);

80 
	}
}

	@misc/win32/charset.c

17 
	~"≠r.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

22 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_deÁu…_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

24  
	`≠r_p•rötf
(
poﬁ
, "CP%u", (Ë
	`GëACP
());

25 
	}
}

28 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_os_loˇÀ_ícodög
 (
≠r_poﬁ_t
 *
poﬁ
)

30 #ifde‡
_UNICODE


31 
i
;

33 #i‡
	`deföed
(
_WIN32_WCE
)

34 
LCID
 
loˇÀ
 = 
	`GëU£rDeÁu…LCID
();

36 
LCID
 
loˇÀ
 = 
	`GëThªadLoˇÀ
();

38 
Àn
 = 
	`GëLoˇÀInfo
(
loˇÀ
, 
LOCALE_IDEFAULTANSICODEPAGE
, 
NULL
, 0);

39 *
˝
 = 
	`≠r_∑Œoc
(
poﬁ
, (
Àn
 * (
TCHAR
)) + 2);

40 i‡(0 < 
	`GëLoˇÀInfo
(
loˇÀ
, 
LOCALE_IDEFAULTANSICODEPAGE
, (
TCHAR
*Ë(
˝
 + 2), 
Àn
))

44 
˝
[0] = 'C';

45 
˝
[1] = 'P';

46 #ifde‡
_UNICODE


47 
i
 = 0; i < 
Àn
; i++) {

48 
˝
[
i
 + 2] = (Ë((
TCHAR
*) (cp + 2))[i];

51  
˝
;

54  
	`≠r_os_deÁu…_ícodög
(
poﬁ
);

55 
	}
}

	@misc/win32/env.c

17 
	#APR_WANT_STRFUNC


	)

18 
	~"≠r_w™t.h
"

19 
	~"≠r.h
"

20 
	~"≠r_¨ch_misc.h
"

21 
	~"≠r_¨ch_utf8.h
"

22 
	~"≠r_ív.h
"

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_°rögs.h
"

27 #i‡
APR_HAS_UNICODE_FS
 && !
deföed
(
_WIN32_WCE
)

28 
≠r_°©us_t
 
	$widí_ívv¨_«me
 (
≠r_wch¨_t
 *
buf„r
,

29 
≠r_size_t
 
bufÊí
,

30 c⁄° *
ívv¨
)

32 
≠r_size_t
 
öch¨s
;

33 
≠r_°©us_t
 
°©us
;

35 
öch¨s
 = 
	`°æí
(
ívv¨
) + 1;

36 
°©us
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
ívv¨
, &
öch¨s
, 
buf„r
, &
bufÊí
);

37 i‡(
°©us
 =
APR_INCOMPLETE
)

38 
°©us
 = 
APR_ENAMETOOLONG
;

40  
°©us
;

41 
	}
}

45 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_gë
(**
vÆue
,

46 c⁄° *
ívv¨
,

47 
≠r_poﬁ_t
 *
poﬁ
)

49 #i‡
	`deföed
(
_WIN32_WCE
)

50  
APR_ENOTIMPL
;

52 *
vÆ
 = 
NULL
;

53 
DWORD
 
size
;

55 #i‡
APR_HAS_UNICODE_FS


56 
IF_WIN_OS_IS_UNICODE


58 
≠r_wch¨_t
 
wívv¨
[
APR_PATH_MAX
];

59 
≠r_size_t
 
öch¨s
, 
outch¨s
;

60 
≠r_wch¨_t
 *
wvÆue
, 
dummy
;

61 
≠r_°©us_t
 
°©us
;

63 
°©us
 = 
	`widí_ívv¨_«me
(
wívv¨
, 
APR_PATH_MAX
, 
ívv¨
);

64 i‡(
°©us
)

65  
°©us
;

67 
	`SëLa°Eº‹
(0);

68 
size
 = 
	`GëEnvú⁄mítV¨übÀW
(
wívv¨
, &
dummy
, 0);

69 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_ENVVAR_NOT_FOUND
)

71  
APR_ENOENT
;

73 i‡(
size
 == 0) {

75 *
vÆue
 = 
	`≠r_p°rdup
(
poﬁ
, "");

76  
APR_SUCCESS
;

79 
wvÆue
 = 
	`≠r_∑Œoc
(
poﬁ
, 
size
 * (*wvalue));

80 
size
 = 
	`GëEnvú⁄mítV¨übÀW
(
wívv¨
, 
wvÆue
, size);

82 
öch¨s
 = 
	`wc¶í
(
wvÆue
) + 1;

83 
outch¨s
 = 3 * 
öch¨s
;

84 
vÆ
 = 
	`≠r_∑Œoc
(
poﬁ
, 
outch¨s
);

85 
°©us
 = 
	`≠r_c⁄v_ucs2_to_utf8
(
wvÆue
, &
öch¨s
, 
vÆ
, &
outch¨s
);

86 i‡(
°©us
)

87  
°©us
;

90 #i‡
APR_HAS_ANSI_FS


91 
ELSE_WIN_OS_IS_ANSI


93 
dummy
;

95 
	`SëLa°Eº‹
(0);

96 
size
 = 
	`GëEnvú⁄mítV¨übÀA
(
ívv¨
, &
dummy
, 0);

97 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_ENVVAR_NOT_FOUND
)

99  
APR_ENOENT
;

101 i‡(
size
 == 0) {

103 *
vÆue
 = 
	`≠r_p°rdup
(
poﬁ
, "");

104  
APR_SUCCESS
;

107 
vÆ
 = 
	`≠r_∑Œoc
(
poﬁ
, 
size
);

108 
size
 = 
	`GëEnvú⁄mítV¨übÀA
(
ívv¨
, 
vÆ
, size);

109 i‡(
size
 == 0)

111  
APR_INCOMPLETE
;

115 *
vÆue
 = 
vÆ
;

116  
APR_SUCCESS
;

118 
	}
}

121 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_£t
(c⁄° *
ívv¨
,

122 c⁄° *
vÆue
,

123 
≠r_poﬁ_t
 *
poﬁ
)

125 #i‡
	`deföed
(
_WIN32_WCE
)

126  
APR_ENOTIMPL
;

128 #i‡
APR_HAS_UNICODE_FS


129 
IF_WIN_OS_IS_UNICODE


131 
≠r_wch¨_t
 
wívv¨
[
APR_PATH_MAX
];

132 
≠r_wch¨_t
 *
wvÆue
;

133 
≠r_size_t
 
öch¨s
, 
outch¨s
;

134 
≠r_°©us_t
 
°©us
;

136 
°©us
 = 
	`widí_ívv¨_«me
(
wívv¨
, 
APR_PATH_MAX
, 
ívv¨
);

137 i‡(
°©us
)

138  
°©us
;

140 
outch¨s
 = 
öch¨s
 = 
	`°æí
(
vÆue
) + 1;

141 
wvÆue
 = 
	`≠r_∑Œoc
(
poﬁ
, 
outch¨s
 * (*wvalue));

142 
°©us
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
vÆue
, &
öch¨s
, 
wvÆue
, &
outch¨s
);

143 i‡(
°©us
)

144  
°©us
;

146 i‡(!
	`SëEnvú⁄mítV¨übÀW
(
wívv¨
, 
wvÆue
))

147  
	`≠r_gë_os_îr‹
();

150 #i‡
APR_HAS_ANSI_FS


151 
ELSE_WIN_OS_IS_ANSI


153 i‡(!
	`SëEnvú⁄mítV¨übÀA
(
ívv¨
, 
vÆue
))

154  
	`≠r_gë_os_îr‹
();

158  
APR_SUCCESS
;

160 
	}
}

163 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ív_dñëe
(c⁄° *
ívv¨
, 
≠r_poﬁ_t
 *
poﬁ
)

165 #i‡
	`deföed
(
_WIN32_WCE
)

166  
APR_ENOTIMPL
;

168 #i‡
APR_HAS_UNICODE_FS


169 
IF_WIN_OS_IS_UNICODE


171 
≠r_wch¨_t
 
wívv¨
[
APR_PATH_MAX
];

172 
≠r_°©us_t
 
°©us
;

174 
°©us
 = 
	`widí_ívv¨_«me
(
wívv¨
, 
APR_PATH_MAX
, 
ívv¨
);

175 i‡(
°©us
)

176  
°©us
;

178 i‡(!
	`SëEnvú⁄mítV¨übÀW
(
wívv¨
, 
NULL
))

179  
	`≠r_gë_os_îr‹
();

182 #i‡
APR_HAS_ANSI_FS


183 
ELSE_WIN_OS_IS_ANSI


185 i‡(!
	`SëEnvú⁄mítV¨übÀA
(
ívv¨
, 
NULL
))

186  
	`≠r_gë_os_îr‹
();

190  
APR_SUCCESS
;

192 
	}
}

	@misc/win32/internal.c

17 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_¨ch_misc.h
"

20 
	~"≠r_¨ch_fûe_io.h
"

21 
	~<as£π.h
>

40 
	$≠r_wa°πﬂ°r
(c⁄° * c⁄° * *
ªèº
,

41 
wch¨_t
 c⁄° * c⁄° *
¨r
, 
¨gs
)

43 
≠r_size_t
 
ñesize
 = 0;

44 **
√w¨r
;

45 *
ñemíts
;

46 *
ñe
;

47 
¨g
;

49 i‡(
¨gs
 < 0) {

50 
¨gs
 = 0; 
¨r
[args]; ++args)

54 
√w¨r
 = 
	`≠r_mÆloc_dbg
((
¨gs
 + 1) * (*),

55 
__FILE__
, 
__LINE__
);

57 
¨g
 = 0;árg < 
¨gs
; ++arg) {

58 
√w¨r
[
¨g
] = (*)(
	`wc¶í
(
¨r
[arg]) + 1);

59 
ñesize
 +(
≠r_size_t
)
√w¨r
[
¨g
];

67 
ñesize
 =Élesize * 3 + 1;

68 
ñe
 = 
ñemíts
 = 
	`≠r_mÆloc_dbg
(
ñesize
 * (),

69 
__FILE__
, 
__LINE__
);

71 
¨g
 = 0;árg < 
¨gs
; ++arg) {

72 
≠r_size_t
 
Àn
 = (≠r_size_t)
√w¨r
[
¨g
];

73 
≠r_size_t
 
√wÀn
 = 
ñesize
;

75 
√w¨r
[
¨g
] = 
ñe
;

76 ()
	`≠r_c⁄v_ucs2_to_utf8
(
¨r
[
¨g
], &
Àn
,

77 
√w¨r
[
¨g
], &
ñesize
);

79 
√wÀn
 -
ñesize
;

80 
ñe
 +
√wÀn
;

81 
	`as£π
(
ñesize
 && (
Àn
 == 0));

84 
√w¨r
[
¨g
] = 
NULL
;

85 *(
ñe
++) = '\0';

89 
ñe
 = 
	`≠r_ªÆloc_dbg
(
ñemíts
,Éle -Élements,

90 
__FILE__
, 
__LINE__
);

92 i‡(
ñe
 !
ñemíts
) {

93 
≠r_size_t
 
diff
 = 
ñe
 - 
ñemíts
;

94 
¨g
 = 0;árg < 
¨gs
; ++arg) {

95 
√w¨r
[
¨g
] +
diff
;

99 *
ªèº
 = (c⁄° * c⁄° *)
√w¨r
;

100  
¨gs
;

101 
	}
}

	@misc/win32/misc.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_¨ch_misc.h
"

19 
	~"≠r_¨ch_fûe_io.h
"

20 
	~"as£π.h
"

21 
	~"≠r_lib.h
"

22 
	~"tch¨.h
"

24 
APR_DECLARE_DATA
 
≠r_o¶evñ_e
 
	g≠r_os_Àvñ
 = 
APR_WIN_UNK
;

26 
≠r_°©us_t
 
	$≠r_gë_o¶evñ
(
≠r_o¶evñ_e
 *
Àvñ
)

28 i‡(
≠r_os_Àvñ
 =
APR_WIN_UNK
)

30 
OSVERSIONINFO
 
o¶ev
;

31 
o¶ev
.
dwOSVîsi⁄InfoSize
 = (
OSVERSIONINFO
);

32 
	`GëVîsi⁄Ex
(&
o¶ev
);

34 i‡(
o¶ev
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32_NT
)

36 
£rv∑ck
 = 0;

37 
TCHAR
 *
p£rv∑ck
;

38 i‡((
p£rv∑ck
 = 
o¶ev
.
szCSDVîsi⁄
)) {

39 *
p£rv∑ck
 && !
	`≠r_isdigô
(*pservpack)) {

40 
p£rv∑ck
++;

42 i‡(*
p£rv∑ck
)

43 #ifde‡
_UNICODE


44 
£rv∑ck
 = 
	`_wtoi
(
p£rv∑ck
);

46 
£rv∑ck
 = 
	`©oi
(
p£rv∑ck
);

50 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 < 3) {

51 
≠r_os_Àvñ
 = 
APR_WIN_UNSUP
;

53 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 == 3) {

54 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 < 50) {

55 
≠r_os_Àvñ
 = 
APR_WIN_UNSUP
;

57 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 == 50) {

58 
≠r_os_Àvñ
 = 
APR_WIN_NT_3_5
;

61 
≠r_os_Àvñ
 = 
APR_WIN_NT_3_51
;

64 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 == 4) {

65 i‡(
£rv∑ck
 < 2)

66 
≠r_os_Àvñ
 = 
APR_WIN_NT_4
;

67 i‡(
£rv∑ck
 <= 2)

68 
≠r_os_Àvñ
 = 
APR_WIN_NT_4_SP2
;

69 i‡(
£rv∑ck
 <= 3)

70 
≠r_os_Àvñ
 = 
APR_WIN_NT_4_SP3
;

71 i‡(
£rv∑ck
 <= 4)

72 
≠r_os_Àvñ
 = 
APR_WIN_NT_4_SP4
;

73 i‡(
£rv∑ck
 <= 5)

74 
≠r_os_Àvñ
 = 
APR_WIN_NT_4_SP5
;

76 
≠r_os_Àvñ
 = 
APR_WIN_NT_4_SP6
;

78 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 == 5) {

79 i‡(
o¶ev
.
dwMö‹Vîsi⁄
 == 0) {

80 i‡(
£rv∑ck
 == 0)

81 
≠r_os_Àvñ
 = 
APR_WIN_2000
;

82 i‡(
£rv∑ck
 == 1)

83 
≠r_os_Àvñ
 = 
APR_WIN_2000_SP1
;

85 
≠r_os_Àvñ
 = 
APR_WIN_2000_SP2
;

87 i‡(
o¶ev
.
dwMö‹Vîsi⁄
 == 2) {

88 
≠r_os_Àvñ
 = 
APR_WIN_2003
;

91 i‡(
£rv∑ck
 < 1)

92 
≠r_os_Àvñ
 = 
APR_WIN_XP
;

93 i‡(
£rv∑ck
 == 1)

94 
≠r_os_Àvñ
 = 
APR_WIN_XP_SP1
;

96 
≠r_os_Àvñ
 = 
APR_WIN_XP_SP2
;

99 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 == 6) {

100 i‡(
o¶ev
.
dwMö‹Vîsi⁄
 == 0)

101 
≠r_os_Àvñ
 = 
APR_WIN_VISTA
;

103 
≠r_os_Àvñ
 = 
APR_WIN_7
;

106 
≠r_os_Àvñ
 = 
APR_WIN_XP
;

109 #i‚de‡
WINNT


110 i‡(
o¶ev
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32_WINDOWS
) {

111 
TCHAR
 *
¥evisi⁄
;

112 i‡(
¥evisi⁄
 = 
o¶ev
.
szCSDVîsi⁄
) {

113 *
¥evisi⁄
 && !
	`≠r_isuµî
(*prevision)) {

114 
¥evisi⁄
++;

117 
¥evisi⁄
 = 
	`_T
("");

119 i‡(
o¶ev
.
dwMö‹Vîsi⁄
 < 10) {

120 i‡(*
¥evisi⁄
 < 
	`_T
('C'))

121 
≠r_os_Àvñ
 = 
APR_WIN_95
;

123 
≠r_os_Àvñ
 = 
APR_WIN_95_OSR2
;

125 i‡(
o¶ev
.
dwMö‹Vîsi⁄
 < 90) {

126 i‡(*
¥evisi⁄
 < 
	`_T
('A'))

127 
≠r_os_Àvñ
 = 
APR_WIN_98
;

129 
≠r_os_Àvñ
 = 
APR_WIN_98_SE
;

132 
≠r_os_Àvñ
 = 
APR_WIN_ME
;

136 #ifde‡
_WIN32_WCE


137 i‡(
o¶ev
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32_CE
)

139 i‡(
o¶ev
.
dwMaj‹Vîsi⁄
 < 3) {

140 
≠r_os_Àvñ
 = 
APR_WIN_UNSUP
;

143 
≠r_os_Àvñ
 = 
APR_WIN_CE_3
;

148 
≠r_os_Àvñ
 = 
APR_WIN_UNSUP
;

152 *
Àvñ
 = 
≠r_os_Àvñ
;

154 i‡(
≠r_os_Àvñ
 < 
APR_WIN_UNSUP
) {

155  
APR_EGENERAL
;

158  
APR_SUCCESS
;

159 
	}
}

166 c⁄° * c⁄° 
	gœãDŒName
[
DLL_deföed
] = {

168 
HMODULE
 
	gœãDŒH™dÀ
[
DLL_deföed
] = {

169 
NULL
, NULL, NULL, NULL, NULL, NULL };

171 
FARPROC
 
	$≠r_lﬂd_dŒ_func
(
≠r_dŒtokí_e
 
‚Lib
, * 
‚Name
, 
‹döÆ
)

173 i‡(!
œãDŒH™dÀ
[
‚Lib
]) {

174 
œãDŒH™dÀ
[
‚Lib
] = 
	`LﬂdLibøryA
(
œãDŒName
[fnLib]);

175 i‡(!
œãDŒH™dÀ
[
‚Lib
])

176  
NULL
;

178 #i‡
	`deföed
(
_WIN32_WCE
)

179 i‡(
‹döÆ
)

180  
	`GëProcAddªssA
(
œãDŒH™dÀ
[
‚Lib
], (const *)

181 (
≠r_ssize_t
)
‹döÆ
);

183  
	`GëProcAddªssA
(
œãDŒH™dÀ
[
‚Lib
], 
‚Name
);

185 i‡(
‹döÆ
)

186  
	`GëProcAddªss
(
œãDŒH™dÀ
[
‚Lib
], (const *)

187 (
≠r_ssize_t
)
‹döÆ
);

189  
	`GëProcAddªss
(
œãDŒH™dÀ
[
‚Lib
], 
‚Name
);

191 
	}
}

195 
	$APR_DECLARE_NONSTD
(
HANDLE
Ë
	$≠r_dbg_log
(* 
‚
, 
HANDLE
 
ha
, * 
Ê
, 
 
,

196 
nh
, ...)

198 
DWORD
 
ésid
 = 0xFFFFFFFF;

199 
HANDLE
 
fh
 = 
NULL
;

200 
˘r
 = 0;

201 
CRITICAL_SECTION
 
cs
;

202 
£q
;

203 
DWORD
 
wrŸe
;

204 *
sbuf
;

206 
£q
 = (
I¡îlockedIn¸emít
)(&
˘r
);

208 i‡(
ésid
 == 0xFFFFFFFF) {

209 
ésid
 = (
TlsAŒoc
)();

212 
sbuf
 = (
TlsGëVÆue
)(
ésid
);

213 i‡(!
fh
 || !
sbuf
) {

214 
sbuf
 = (
mÆloc
)(1024);

215 (
TlsSëVÆue
)(
ésid
, 
sbuf
);

216 
sbuf
[1023] = '\0';

217 i‡(!
fh
) {

218 (
GëModuÀFûeNameA
)(
NULL
, 
sbuf
, 250);

219 
	`•rötf
(
	`°rchr
(
sbuf
, '\0'), ".%u",

220 ()(
GëCuºítPro˚ssId
)());

221 
fh
 = (
Cª©eFûeA
)(
sbuf
, 
GENERIC_WRITE
, 0, 
NULL
,

222 
CREATE_ALWAYS
, 0, 
NULL
);

223 (
InôülizeCrôiˇlSe˘i⁄
)(&
cs
);

227 i‡(!
nh
) {

228 (
•rötf
)(
sbuf
, "%p %08x %08x %s() %s:%d\n",

229 
ha
, ()
£q
, ()
	`GëCuºítThªadId
(),

230 
‚
, 
Ê
, 
 
);

231 (
E¡îCrôiˇlSe˘i⁄
)(&
cs
);

232 (
WrôeFûe
)(
fh
, 
sbuf
, (
DWORD
)
	`°æí
(sbuf), &
wrŸe
, 
NULL
);

233 (
LóveCrôiˇlSe˘i⁄
)(&
cs
);

236 
va_li°
 
a
;

237 
	`va_°¨t
(
a
,
nh
);

238 (
E¡îCrôiˇlSe˘i⁄
)(&
cs
);

240 
HANDLE
 *
hv
 = 
	`va_¨g
(
a
, HANDLE*);

241 *
dsc
 = 
	`va_¨g
(
a
, *);

242 i‡(
	`°rcmp
(
dsc
, "Signaled") == 0) {

243 i‡((
≠r_ssize_t
)
ha
 >
STATUS_WAIT_0


244 && (
≠r_ssize_t
)
ha
 < 
STATUS_ABANDONED_WAIT_0
) {

245 
hv
 +(
≠r_ssize_t
)
ha
;

247 i‡((
≠r_ssize_t
)
ha
 >
STATUS_ABANDONED_WAIT_0


248 && (
≠r_ssize_t
)
ha
 < 
STATUS_USER_APC
) {

249 
hv
 +(
≠r_ssize_t
)
ha
 - 
STATUS_ABANDONED_WAIT_0
;

250 
dsc
 = "Abandoned";

252 i‡((
≠r_ssize_t
)
ha
 =
WAIT_TIMEOUT
) {

253 
dsc
 = "Timed Out";

256 (
•rötf
)(
sbuf
, "%p %08x %08x %s(%s) %s:%d\n",

257 *
hv
, ()
£q
,

258 ()
	`GëCuºítThªadId
(),

259 
‚
, 
dsc
, 
Ê
, 
 
);

260 (
WrôeFûe
)(
fh
, 
sbuf
, (
DWORD
)
	`°æí
(sbuf), &
wrŸe
, 
NULL
);

261 } --
nh
);

262 (
LóveCrôiˇlSe˘i⁄
)(&
cs
);

263 
	`va_íd
(
a
);

265  
ha
;

266 
	}
}

	@misc/win32/rand.c

17 
	~"≠r.h
"

18 
	~<Ωc.h
>

19 
	~<wö¸y±.h
>

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_p‹èbÀ.h
"

23 
	~"≠r_¨ch_misc.h
"

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gíî©e_øndom_byãs
(* 
buf
,

27 
≠r_size_t
 
Àngth
)

29 
HCRYPTPROV
 
hProv
;

30 
≠r_°©us_t
 
ªs
 = 
APR_SUCCESS
;

35 
DWORD
 
Êags
 = 
CRYPT_VERIFYCONTEXT


36 | ((
≠r_os_Àvñ
 >
APR_WIN_2000
) ? 0x40 : 0);

38 i‡(!
	`Cry±AcquúeC⁄ãxt
(&
hProv
, 
NULL
, NULL, 
PROV_RSA_FULL
, 
Êags
)) {

39  
	`≠r_gë_os_îr‹
();

45 i‡(!
	`Cry±GíR™dom
(
hProv
, (
DWORD
)
Àngth
, 
buf
)) {

46 
ªs
 = 
	`≠r_gë_os_îr‹
();

48 
	`Cry±Rñó£C⁄ãxt
(
hProv
, 0);

49  
ªs
;

50 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_uuid_gë
(*
uuid_d©a
)

65 i‡(
	`FAILED
(
	`UuidCª©e
((
UUID
 *)
uuid_d©a
))) {

66  
APR_EGENERAL
;

68  
APR_SUCCESS
;

69 
	}
}

	@misc/win32/start.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_sig«l.h
"

21 
	~"shñœpi.h
"

23 
	~"≠r_¨ch_misc.h
"

24 
	~"wch¨.h
"

25 
	~"≠r_¨ch_fûe_io.h
"

26 
	~"≠r_¨ch_thªad¥oc.h
"

27 
	~"as£π.h
"

31 
APR_DECLARE_DATA
 
	g≠r_≠p_öô_com∂ëe
 = 0;

33 #i‡!
deföed
(
_WIN32_WCE
)

41 
	$w¨rsztﬂ°r
(c⁄° * c⁄° * *
ªèº
,

42 c⁄° 
wch¨_t
 * 
¨rsz
, 
¨gs
)

44 c⁄° 
≠r_wch¨_t
 *
wch
;

45 
≠r_size_t
 
tŸÀn
;

46 
≠r_size_t
 
√wÀn
;

47 
≠r_size_t
 
wsize
;

48 **
ív
;

49 *
p°rs
;

50 *
°rs
;

51 
¨g
;

53 i‡(
¨gs
 < 0) {

54 
¨gs
 = 1, 
wch
 = 
¨rsz
; wch[0] || wch[1]; ++wch)

55 i‡(!*
wch
)

56 ++
¨gs
;

58 
wsize
 = 1 + 
wch
 - 
¨rsz
;

66 
√wÀn
 = 
tŸÀn
 = 
wsize
 * 3 + 1;

67 
p°rs
 = 
°rs
 = 
	`≠r_mÆloc_dbg
(
√wÀn
 * (),

68 
__FILE__
, 
__LINE__
);

70 ()
	`≠r_c⁄v_ucs2_to_utf8
(
¨rsz
, &
wsize
, 
°rs
, &
√wÀn
);

72 
	`as£π
(
√wÀn
 && !
wsize
);

74 *
ªèº
 = 
ív
 = 
	`≠r_mÆloc_dbg
((
¨gs
 + 1) * (*),

75 
__FILE__
, 
__LINE__
);

76 
¨g
 = 0;árg < 
¨gs
; ++arg) {

77 * 
p
 = 
p°rs
;

78 
Àn
 = 0;

79 *
p
++)

80 ++
Àn
;

81 
Àn
 += 1;

83 *
ív
 = 
	`≠r_mÆloc_dbg
(
Àn
 * (),

84 
__FILE__
, 
__LINE__
);

85 
	`mem˝y
(*
ív
, 
p°rs
, 
Àn
 * ());

87 
p°rs
 +
Àn
;

88 ++
ív
;

91 *
ív
 = 
NULL
;

92 
	`‰ì
(
°rs
);

94  
¨gs
;

95 
	}
}

101 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_≠p_öôülize
(*
¨gc
,

102 c⁄° * c⁄° * *
¨gv
,

103 c⁄° * c⁄° * *
ív
)

105 
≠r_°©us_t
 
rv
 = 
	`≠r_öôülize
();

107 i‡(
rv
 !
APR_SUCCESS
) {

108  
rv
;

111 #i‡
	`deföed
(
_WIN32_WCE
)

112 
≠r_≠p_öô_com∂ëe
 = 1;

113 #ñi‡
APR_HAS_UNICODE_FS


114 
IF_WIN_OS_IS_UNICODE


116 
≠r_wch¨_t
 **
w°rs
;

117 
≠r_wch¨_t
 *
sys°r
;

118 
w°rc
;

119 
du≥nv
;

121 i‡(
≠r_≠p_öô_com∂ëe
) {

122  
rv
;

125 
≠r_≠p_öô_com∂ëe
 = 1;

127 
sys°r
 = 
	`GëComm™dLöeW
();

128 i‡(
sys°r
) {

129 
w°rs
 = 
	`Comm™dLöeToArgvW
(
sys°r
, &
w°rc
);

130 i‡(
w°rs
) {

131 *
¨gc
 = 
	`≠r_wa°πﬂ°r
(
¨gv
, 
w°rs
, 
w°rc
);

132 
	`GlobÆFªe
(
w°rs
);

136 
sys°r
 = 
	`GëEnvú⁄mítSåögsW
();

137 
du≥nv
 = 
	`w¨rsztﬂ°r
(&
_ívú⁄
, 
sys°r
, -1);

139 i‡(
ív
) {

140 *
ív
 = 
	`≠r_mÆloc_dbg
((
du≥nv
 + 1) *  (*),

141 
__FILE__
, 
__LINE__
 );

142 
	`mem˝y
((*)*
ív
, 
_ívú⁄
, (
du≥nv
 + 1) *  (*));

147 
	`FªeEnvú⁄mítSåögsW
(
sys°r
);

156 i‡(
_wívú⁄
) {

157 
≠r_wch¨_t
 **
wív
 = 
_wívú⁄
;

158 
_wívú⁄
 = 
NULL
;

159 
	`‰ì
(
wív
);

164  
rv
;

165 
	}
}

167 
	göôülized
 = 0;

170 
DWORD
 
és_≠r_thªad
;

172 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_öôülize
()

174 
≠r_poﬁ_t
 *
poﬁ
;

175 
≠r_°©us_t
 
°©us
;

176 
iVîsi⁄Reque°ed
;

177 
WSADATA
 
wßD©a
;

178 
îr
;

179 
≠r_o¶evñ_e
 
osvî
;

181 i‡(
öôülized
++) {

182  
APR_SUCCESS
;

186 i‡(
	`≠r_gë_o¶evñ
(&
osvî
Ë!
APR_SUCCESS
) {

187  
APR_EEXIST
;

190 
és_≠r_thªad
 = 
	`TlsAŒoc
();

191 i‡((
°©us
 = 
	`≠r_poﬁ_öôülize
()Ë!
APR_SUCCESS
)

192  
°©us
;

194 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

195  
APR_ENOPOOL
;

198 
	`≠r_poﬁ_èg
(
poﬁ
, "apr_initialize");

200 
iVîsi⁄Reque°ed
 = 
	`MAKEWORD
(
WSAHighByã
, 
WSALowByã
);

201 
îr
 = 
	`WSASèπup
((
WORD
Ë
iVîsi⁄Reque°ed
, &
wßD©a
);

202 i‡(
îr
) {

203  
îr
;

205 i‡(
	`LOBYTE
(
wßD©a
.
wVîsi⁄
Ë!
WSAHighByã
 ||

206 
	`HIBYTE
(
wßD©a
.
wVîsi⁄
Ë!
WSALowByã
) {

207 
	`WSACÀ™up
();

208  
APR_EEXIST
;

211 
	`≠r_sig«l_öô
(
poﬁ
);

213 
	`≠r_thªad¥oc_öô
(
poﬁ
);

215  
APR_SUCCESS
;

216 
	}
}

218 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_ãrmö©e
()

220 
öôülized
--;

221 i‡(
öôülized
) {

224 
	`≠r_poﬁ_ãrmö©e
();

226 
	`WSACÀ™up
();

228 
	`TlsFªe
(
és_≠r_thªad
);

229 
	}
}

231 
	$APR_DECLARE
(Ë
	$≠r_ãrmö©e2
()

233 
	`≠r_ãrmö©e
();

234 
	}
}

	@misc/win32/utf8.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_¨ch_utf8.h
"

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_c⁄v_utf8_to_ucs2
(c⁄° *
ö
,

72 
≠r_size_t
 *
öbyãs
,

73 
≠r_wch¨_t
 *
out
,

74 
≠r_size_t
 *
outw‹ds
)

76 
≠r_öt64_t
 
√wch
, 
mask
;

77 
≠r_size_t
 
ex≥˘
, 
ótög
;

78 
ch
;

80 *
öbyãs
 && *
outw‹ds
)

82 
ch
 = ()(*
ö
++);

83 i‡(!(
ch
 & 0200)) {

86 --*
öbyãs
;

87 --*
outw‹ds
;

88 *(
out
++Ë
ch
;

92 i‡((
ch
 & 0300) != 0300) {

95  
APR_EINVAL
;

104 
mask
 = 0340;

105 
ex≥˘
 = 1;

106 (
ch
 & 
mask
) == mask) {

107 
mask
 |= mask >> 1;

108 i‡(++
ex≥˘
 > 3)

109  
APR_EINVAL
;

111 
√wch
 = 
ch
 & ~
mask
;

112 
ótög
 = 
ex≥˘
 + 1;

113 i‡(*
öbyãs
 <
ex≥˘
)

114  
APR_INCOMPLETE
;

118 i‡(
ex≥˘
 == 1) {

119 i‡(!(
√wch
 & 0036))

120  
APR_EINVAL
;

125 i‡(!
√wch
 && !(()*
ö
 & 0077 & (
mask
 << 1)))

126  
APR_EINVAL
;

127 i‡(
ex≥˘
 == 2) {

131 i‡(
√wch
 =0015 && (()*
ö
 & 0040))

132  
APR_EINVAL
;

134 i‡(
ex≥˘
 == 3) {

137 i‡(
√wch
 > 4)

138  
APR_EINVAL
;

139 i‡(
√wch
 =4 && (()*
ö
 & 0060))

140  
APR_EINVAL
;

146 i‡(*
outw‹ds
 < (
≠r_size_t
)(
ex≥˘
 > 2) + 1)

148 
ex≥˘
--)

151 i‡(((
ch
 = ()*(
ö
++)) & 0300) != 0200)

152  
APR_EINVAL
;

153 
√wch
 <<= 6;

154 
√wch
 |(
ch
 & 0077);

156 *
öbyãs
 -
ótög
;

161 i‡(
√wch
 < 0x10000)

163 --*
outw‹ds
;

164 *(
out
++Ë(
≠r_wch¨_t
Ë
√wch
;

168 *
outw‹ds
 -= 2;

169 
√wch
 -= 0x10000;

170 *(
out
++Ë(
≠r_wch¨_t
Ë(0xD800 | (
√wch
 >> 10));

171 *(
out
++Ë(
≠r_wch¨_t
Ë(0xDC00 | (
√wch
 & 0x03FF));

179  
APR_SUCCESS
;

180 
	}
}

182 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_c⁄v_ucs2_to_utf8
(c⁄° 
≠r_wch¨_t
 *
ö
,

183 
≠r_size_t
 *
öw‹ds
,

184 *
out
,

185 
≠r_size_t
 *
outbyãs
)

187 
≠r_öt64_t
 
√wch
, 
ªquúe
;

188 
≠r_size_t
 
√ed
;

189 *
övout
;

190 
ch
;

192 *
öw‹ds
 && *
outbyãs
)

194 
ch
 = ()(*
ö
++);

195 i‡(
ch
 < 0x80)

197 --*
öw‹ds
;

198 --*
outbyãs
;

199 *(
out
++Ë(Ë
ch
;

203 i‡((
ch
 & 0xFC00) == 0xDC00) {

206  
APR_EINVAL
;

208 i‡((
ch
 & 0xFC00) == 0xD800) {

211 i‡(*
öw‹ds
 < 2) {

214  
APR_INCOMPLETE
;

216 i‡((()(*
ö
) & 0xFC00) != 0xDC00) {

219  
APR_EINVAL
;

221 
√wch
 = (
ch
 & 0x03FFË<< 10 | (()(*
ö
++) & 0x03FF);

222 
√wch
 += 0x10000;

227 
√wch
 = 
ch
;

231 
ªquúe
 = 
√wch
 >> 11;

232 
√ed
 = 1;

233 
ªquúe
)

234 
ªquúe
 >>5, ++
√ed
;

235 i‡(
√ed
 >*
outbyãs
)

237 *
öw‹ds
 -(
√ed
 > 2) + 1;

238 *
outbyãs
 -
√ed
 + 1;

242 
ch
 = 0200;

243 
out
 +
√ed
 + 1;

244 
övout
 = 
out
;

245 
√ed
--) {

246 
ch
 |= ch >> 1;

247 *(--
övout
Ë()(0200 | (
√wch
 & 0077));

248 
√wch
 >>= 6;

252 *(--
övout
Ë()(
ch
 | 
√wch
);

258  
APR_SUCCESS
;

259 
	}
}

	@mmap/unix/common.c

26 
	~"≠r.h
"

27 
	~"≠r_¥iv©e.h
"

28 
	~"≠r_mm≠.h
"

29 
	~"≠r_î∫o.h
"

31 #i‡
APR_HAS_MMAP
 || 
deföed
(
BEOS
)

33 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_off£t
(**
addr
, 
≠r_mm≠_t
 *
mm≠
,

34 
≠r_off_t
 
off£t
)

36 i‡(
off£t
 < 0 || (
≠r_size_t
)off£à> 
mm≠
->
size
)

37  
APR_EINVAL
;

39 (*
addr
Ë(*Ë
mm≠
->
mm
 + 
off£t
;

40  
APR_SUCCESS
;

41 
	}
}

	@mmap/unix/mmap.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_mm≠.h
"

22 
	~"≠r_î∫o.h
"

23 
	~"≠r_¨ch_fûe_io.h
"

24 
	~"≠r_p‹èbÀ.h
"

27 #ifde‡
BEOS


28 
	~<kî√l/OS.h
>

30 #i‡
APR_HAVE_STRING_H


31 
	~<°rög.h
>

33 #i‡
APR_HAVE_STDIO_H


34 
	~<°dio.h
>

36 #ifde‡
HAVE_SYS_STAT_H


37 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_MMAN_H


40 
	~<sys/mm™.h
>

43 #i‡
APR_HAS_MMAP
 || 
deföed
(
BEOS
)

45 
≠r_°©us_t
 
	$mm≠_˛ónup
(*
themm≠
)

47 
≠r_mm≠_t
 *
mm
 = 
themm≠
;

48 
≠r_mm≠_t
 *
√xt
 = 
	`APR_RING_NEXT
(
mm
,
lök
);

49 
rv
 = 0;

52 
	`APR_RING_REMOVE
(
mm
,
lök
);

53 
	`APR_RING_NEXT
(
mm
,
lök
Ë
NULL
;

54 
	`APR_RING_PREV
(
mm
,
lök
Ë
NULL
;

56 i‡(
√xt
 !
mm
) {

58  
APR_SUCCESS
;

61 #ifde‡
BEOS


62 
rv
 = 
	`dñëe_¨ó
(
mm
->
¨ó
);

64 
rv
 = 
	`munm≠
(
mm
->mm, mm->
size
);

66 
mm
->mm = (*)-1;

68 i‡(
rv
 == 0) {

69  
APR_SUCCESS
;

71  
î∫o
;

72 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_¸óã
(
≠r_mm≠_t
 **
√w
,

75 
≠r_fûe_t
 *
fûe
, 
≠r_off_t
 
off£t
,

76 
≠r_size_t
 
size
, 
≠r_öt32_t
 
Êag
,

77 
≠r_poﬁ_t
 *
c⁄t
)

79 *
mm
;

80 #ifde‡
BEOS


81 
¨ó_id
 
aid
 = -1;

82 
uöt32
 
∑ges
 = 0;

84 
≠r_öt32_t
 
«tive_Êags
 = 0;

87 #i‡
APR_HAS_LARGE_FILES
 && 
	`deföed
(
HAVE_MMAP64
)

88 
	#mm≠
 
mm≠64


	)

89 #ñi‡
APR_HAS_LARGE_FILES
 && 
SIZEOF_OFF_T
 == 4

91 i‡((
≠r_öt64_t
)
off£t
 + 
size
 > 
INT_MAX
)

92  
APR_EINVAL
;

95 i‡(
size
 == 0)

96  
APR_EINVAL
;

98 i‡(
fûe
 =
NULL
 || fûe->
fûedes
 =-1 || fûe->
buf„ªd
)

99  
APR_EBADF
;

100 (*
√w
Ë(
≠r_mm≠_t
 *)
	`≠r_pˇŒoc
(
c⁄t
, (apr_mmap_t));

102 #ifde‡
BEOS


104 
	`≠r_fûe_£ek
(
fûe
, 
APR_SET
, &
off£t
);

110 
∑ges
 = (
size
 + 
B_PAGE_SIZE
 -1) / B_PAGE_SIZE;

111 
aid
 = 
	`¸óã_¨ó
("≠r_mm≠", &
mm
 , 
B_ANY_ADDRESS
, 
∑ges
 * 
B_PAGE_SIZE
,

112 
B_NO_LOCK
, 
B_WRITE_AREA
|
B_READ_AREA
);

114 i‡(
aid
 < 
B_NO_ERROR
) {

116 *
√w
 = 
NULL
;

117  
APR_ENOMEM
;

120 i‡(
aid
 >
B_NO_ERROR
)

121 
	`ªad
(
fûe
->
fûedes
, 
mm
, 
size
);

123 (*
√w
)->
¨ó
 = 
aid
;

126 i‡(
Êag
 & 
APR_MMAP_WRITE
) {

127 
«tive_Êags
 |
PROT_WRITE
;

129 i‡(
Êag
 & 
APR_MMAP_READ
) {

130 
«tive_Êags
 |
PROT_READ
;

133 
mm
 = 
	`mm≠
(
NULL
, 
size
, 
«tive_Êags
, 
MAP_SHARED
, 
fûe
->
fûedes
, 
off£t
);

135 i‡(
mm
 == (*)-1) {

137 *
√w
 = 
NULL
;

138  
î∫o
;

142 (*
√w
)->
mm
 = mm;

143 (*
√w
)->
size
 = size;

144 (*
√w
)->
˙txt
 = 
c⁄t
;

145 
	`APR_RING_ELEM_INIT
(*
√w
, 
lök
);

148 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
˙txt
, (*)(*√w), 
mm≠_˛ónup
,

149 
≠r_poﬁ_˛ónup_nuŒ
);

150  
APR_SUCCESS
;

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_dup
(
≠r_mm≠_t
 **
√w_mm≠
,

154 
≠r_mm≠_t
 *
ﬁd_mm≠
,

155 
≠r_poﬁ_t
 *
p
)

157 *
√w_mm≠
 = (
≠r_mm≠_t
 *)
	`≠r_pmemdup
(
p
, 
ﬁd_mm≠
, (apr_mmap_t));

158 (*
√w_mm≠
)->
˙txt
 = 
p
;

160 
	`APR_RING_INSERT_AFTER
(
ﬁd_mm≠
, *
√w_mm≠
, 
lök
);

162 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, *
√w_mm≠
, 
mm≠_˛ónup
,

163 
≠r_poﬁ_˛ónup_nuŒ
);

164  
APR_SUCCESS
;

165 
	}
}

167 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_dñëe
(
≠r_mm≠_t
 *
mm
)

169  
	`≠r_poﬁ_˛ónup_run
(
mm
->
˙txt
, mm, 
mm≠_˛ónup
);

170 
	}
}

	@mmap/win32/mmap.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_mm≠.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~"≠r_°rögs.h
"

26 #i‡
APR_HAS_MMAP


28 
≠r_°©us_t
 
	$mm≠_˛ónup
(*
themm≠
)

30 
≠r_mm≠_t
 *
mm
 = 
themm≠
;

31 
≠r_mm≠_t
 *
√xt
 = 
	`APR_RING_NEXT
(
mm
,
lök
);

34 
	`APR_RING_REMOVE
(
mm
,
lök
);

35 
	`APR_RING_NEXT
(
mm
,
lök
Ë
NULL
;

36 
	`APR_RING_PREV
(
mm
,
lök
Ë
NULL
;

38 i‡(
√xt
 !
mm
) {

40  
APR_SUCCESS
;

43 i‡(
mm
->
mv
) {

44 i‡(!
	`Unm≠VõwOfFûe
(
mm
->
mv
))

46 
≠r_°©us_t
 
rv
 = 
	`≠r_gë_os_îr‹
();

47 
	`Clo£H™dÀ
(
mm
->
mh™dÀ
);

48 
mm
->
mv
 = 
NULL
;

49 
mm
->
mh™dÀ
 = 
NULL
;

50  
rv
;

52 
mm
->
mv
 = 
NULL
;

54 i‡(
mm
->
mh™dÀ
)

56 i‡(!
	`Clo£H™dÀ
(
mm
->
mh™dÀ
))

58 
≠r_°©us_t
 
rv
 = 
	`≠r_gë_os_îr‹
();

59 
	`Clo£H™dÀ
(
mm
->
mh™dÀ
);

60 
mm
->
mh™dÀ
 = 
NULL
;

61  
rv
;

63 
mm
->
mh™dÀ
 = 
NULL
;

65  
APR_SUCCESS
;

66 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_¸óã
(
≠r_mm≠_t
 **
√w
, 
≠r_fûe_t
 *
fûe
,

69 
≠r_off_t
 
off£t
, 
≠r_size_t
 
size
,

70 
≠r_öt32_t
 
Êag
, 
≠r_poﬁ_t
 *
c⁄t
)

72 
DWORD
 
memblock
 = 0;

73 
DWORD
 
fmac˚ss
 = 0;

74 
DWORD
 
mvac˚ss
 = 0;

75 
DWORD
 
ofÊo
;

76 
DWORD
 
offhi
;

78 i‡(
size
 == 0)

79  
APR_EINVAL
;

81 i‡(
Êag
 & 
APR_MMAP_WRITE
)

82 
fmac˚ss
 |
PAGE_READWRITE
;

83 i‡(
Êag
 & 
APR_MMAP_READ
)

84 
fmac˚ss
 |
PAGE_READONLY
;

86 i‡(
Êag
 & 
APR_MMAP_READ
)

87 
mvac˚ss
 |
FILE_MAP_READ
;

88 i‡(
Êag
 & 
APR_MMAP_WRITE
)

89 
mvac˚ss
 |
FILE_MAP_WRITE
;

91 i‡(!
fûe
 || !fûe->
fûeh™d
 || fûe->fûeh™d =
INVALID_HANDLE_VALUE


92 || 
fûe
->
buf„ªd
)

93  
APR_EBADF
;

95 i‡(!
memblock
)

97 
SYSTEM_INFO
 
si
;

98 
	`GëSy°emInfo
(&
si
);

99 
memblock
 = 
si
.
dwAŒoˇti⁄Gønuœrôy
;

102 *
√w
 = 
	`≠r_pˇŒoc
(
c⁄t
, (
≠r_mm≠_t
));

103 (*
√w
)->
p°¨t
 = (
off£t
 / 
memblock
) * memblock;

104 (*
√w
)->
poff£t
 = 
off£t
 - (*√w)->
p°¨t
;

105 (*
√w
)->
psize
 = (
≠r_size_t
)((*√w)->
poff£t
Ë+ 
size
;

111 (*
√w
)->
mh™dÀ
 = 
	`Cª©eFûeM≠pög
(
fûe
->
fûeh™d
, 
NULL
, 
fmac˚ss
,

112 0, 0, 
NULL
);

113 i‡(!(*
√w
)->
mh™dÀ
 || (*√w)->mh™dÀ =
INVALID_HANDLE_VALUE
)

115 *
√w
 = 
NULL
;

116  
	`≠r_gë_os_îr‹
();

119 
ofÊo
 = (
DWORD
)(*
√w
)->
p°¨t
;

120 
offhi
 = (
DWORD
)((*
√w
)->
p°¨t
 >> 32);

121 (*
√w
)->
mv
 = 
	`M≠VõwOfFûe
((*√w)->
mh™dÀ
, 
mvac˚ss
, 
offhi
,

122 
ofÊo
, (*
√w
)->
psize
);

123 i‡(!(*
√w
)->
mv
)

125 
≠r_°©us_t
 
rv
 = 
	`≠r_gë_os_îr‹
();

126 
	`Clo£H™dÀ
((*
√w
)->
mh™dÀ
);

127 *
√w
 = 
NULL
;

128  
rv
;

131 (*
√w
)->
mm
 = (*)((*√w)->
mv
Ë+ (*√w)->
poff£t
;

132 (*
√w
)->
size
 = size;

133 (*
√w
)->
˙txt
 = 
c⁄t
;

134 
	`APR_RING_ELEM_INIT
(*
√w
, 
lök
);

137 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
˙txt
, (*)(*√w), 
mm≠_˛ónup
,

138 
≠r_poﬁ_˛ónup_nuŒ
);

139  
APR_SUCCESS
;

140 
	}
}

142 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_dup
(
≠r_mm≠_t
 **
√w_mm≠
,

143 
≠r_mm≠_t
 *
ﬁd_mm≠
,

144 
≠r_poﬁ_t
 *
p
)

146 *
√w_mm≠
 = (
≠r_mm≠_t
 *)
	`≠r_pmemdup
(
p
, 
ﬁd_mm≠
, (apr_mmap_t));

147 (*
√w_mm≠
)->
˙txt
 = 
p
;

149 
	`APR_RING_INSERT_AFTER
(
ﬁd_mm≠
, *
√w_mm≠
, 
lök
);

151 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, *
√w_mm≠
, 
mm≠_˛ónup
,

152 
≠r_poﬁ_˛ónup_nuŒ
);

153  
APR_SUCCESS
;

154 
	}
}

156 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mm≠_dñëe
(
≠r_mm≠_t
 *
mm
)

158  
	`≠r_poﬁ_˛ónup_run
(
mm
->
˙txt
, mm, 
mm≠_˛ónup
);

159 
	}
}

	@network_io/beos/sendrecv.c

17 
	~"≠r_¥iv©e.h
"

18 #i‡
BEOS_BONE


19 
	~"../unix/£ndªcv.c
"

21 
	~"≠r_¨ch_√tw‹kio.h
"

22 
	~"≠r_time.h
"

24 
≠r_°©us_t
 
	$waô_f‹_io_‹_timeout
(
≠r_sockë_t
 *
sock
, 
f‹_ªad
)

26 
timevÆ
 
tv
, *
tv±r
;

27 
fd_£t
 
fd£t
;

28 
§v
;

31 
	`FD_ZERO
(&
fd£t
);

32 
	`FD_SET
(
sock
->
sockëdes
, &
fd£t
);

33 i‡(
sock
->
timeout
 < 0) {

34 
tv±r
 = 
NULL
;

37 
tv
.
tv_£c
 = 
sock
->
timeout
 / 
APR_USEC_PER_SEC
;

38 
tv
.
tv_u£c
 = 
sock
->
timeout
 % 
APR_USEC_PER_SEC
;

39 
tv±r
 = &
tv
;

41 
§v
 = 
	`£À˘
(
sock
->
sockëdes
 + 1,

42 
f‹_ªad
 ? &
fd£t
 : 
NULL
,

43 
f‹_ªad
 ? 
NULL
 : &
fd£t
,

44 
NULL
,

45 
tv±r
);

47 } 
§v
 =-1 && 
î∫o
 =
EINTR
);

49 i‡(
§v
 == 0) {

50  
APR_TIMEUP
;

52 i‡(
§v
 < 0) {

53  
î∫o
;

55  
APR_SUCCESS
;

56 
	}
}

58 
	#SEND_WAIT
 
APR_USEC_PER_SEC
 / 10

	)

60 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£nd
(
≠r_sockë_t
 *
sock
, c⁄° *
buf
,

61 
≠r_size_t
 *
Àn
)

63 
≠r_ssize_t
 
rv
;

66 
rv
 = 
	`£nd
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

67 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

69 i‡(
rv
 =-1 && 
î∫o
 =
EWOULDBLOCK
 && 
sock
->
timeout
 > 0) {

70 
≠r_öt32_t
 
¢ooze_vÆ
 = 
SEND_WAIT
;

71 
≠r_öt32_t
 
zzz
 = 0;

74 
rv
 = 
	`£nd
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

75 i‡(
rv
 =-1 && 
î∫o
 =
EWOULDBLOCK
){

76 
	`≠r_¶ìp
 (
¢ooze_vÆ
);

77 
zzz
 +
¢ooze_vÆ
;

78 
¢ooze_vÆ
 +
SEND_WAIT
;

80 i‡(
zzz
 > (
sock
->
timeout
 * 
APR_USEC_PER_SEC
))

83 } 
rv
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EWOULDBLOCK
));

85 i‡(
rv
 == -1) {

86 *
Àn
 = 0;

87  
î∫o
;

89 (*
Àn
Ë
rv
;

91  
APR_SUCCESS
;

92 
	}
}

94 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv
(
≠r_sockë_t
 *
sock
, *
buf
,

95 
≠r_size_t
 *
Àn
)

97 
≠r_ssize_t
 
rv
;

100 
rv
 = 
	`ªcv
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

101 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

103 i‡(
rv
 =-1 && 
î∫o
 =
EWOULDBLOCK
 && 
sock
->
timeout
 > 0) {

104 
≠r_°©us_t
 
¨v
 = 
	`waô_f‹_io_‹_timeout
(
sock
, 1);

105 i‡(
¨v
 !
APR_SUCCESS
) {

106 *
Àn
 = 0;

107  
¨v
;

111 
rv
 = 
	`ªcv
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

112 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

115 i‡(
rv
 == -1) {

116 (*
Àn
) = 0;

117  
î∫o
;

119 (*
Àn
Ë
rv
;

120 i‡(
rv
 == 0)

121  
APR_EOF
;

122  
APR_SUCCESS
;

123 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndv
(
≠r_sockë_t
 * 
sock
,

128 c⁄° 
iovec
 *
vec
,

129 
≠r_öt32_t
 
nvec
, 
≠r_size_t
 *
Àn
)

131 *
Àn
 = 
vec
[0].
iov_Àn
;

132  
	`≠r_sockë_£nd
(
sock
, 
vec
[0].
iov_ba£
, 
Àn
);

133 
	}
}

135 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndto
(
≠r_sockë_t
 *
sock
,

136 
≠r_sockaddr_t
 *
whîe
,

137 
≠r_öt32_t
 
Êags
, c⁄° *
buf
,

138 
≠r_size_t
 *
Àn
)

140 
≠r_ssize_t
 
rv
;

143 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

144 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

145 
whîe
->
ßÀn
);

146 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

148 i‡(
rv
 =-1 && (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

149 && 
sock
->
timeout
 != 0) {

150 
≠r_°©us_t
 
¨v
 = 
	`waô_f‹_io_‹_timeout
(
sock
, 0);

151 i‡(
¨v
 !
APR_SUCCESS
) {

152 *
Àn
 = 0;

153  
¨v
;

156 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

157 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

158 
whîe
->
ßÀn
);

159 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

162 i‡(
rv
 == -1) {

163 *
Àn
 = 0;

164  
î∫o
;

166 *
Àn
 = 
rv
;

167  
APR_SUCCESS
;

168 
	}
}

170 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv‰om
(
≠r_sockaddr_t
 *
‰om
,

171 
≠r_sockë_t
 *
sock
,

172 
≠r_öt32_t
 
Êags
, *
buf
,

173 
≠r_size_t
 *
Àn
)

175 
≠r_ssize_t
 
rv
;

177 i‡(
‰om
 =
NULL
){

178  
APR_ENOMEM
;

185 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

186 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

187 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

189 i‡(
rv
 =-1 && (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) &&

190 
sock
->
timeout
 != 0) {

191 
≠r_°©us_t
 
¨v
 = 
	`waô_f‹_io_‹_timeout
(
sock
, 1);

192 i‡(
¨v
 !
APR_SUCCESS
) {

193 *
Àn
 = 0;

194  
¨v
;

197 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

198 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

199 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

202 i‡(
rv
 == -1) {

203 (*
Àn
) = 0;

204  
î∫o
;

207 
‰om
->
p‹t
 = 
	`¡ohs
(‰om->
ß
.
sö
.
sö_p‹t
);

209 (*
Àn
Ë
rv
;

210 i‡(
rv
 == 0)

211  
APR_EOF
;

213  
APR_SUCCESS
;

214 
	}
}

	@network_io/beos/socketcommon.c

1 
	~"../unix/öë_¡›.c
"

2 
	~"../unix/öë_±⁄.c
"

3 
	~"../unix/sockës.c
"

4 
	~"../unix/sockaddr.c
"

5 
	~"../unix/sock›t.c
"

6 
	~"../unix/sockë_utû.c
"

	@network_io/os2/inet_ntop.c

1 
	~"../unix/öë_¡›.c
"

	@network_io/os2/inet_pton.c

1 
	~"../unix/öë_±⁄.c
"

	@network_io/os2/os2calls.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_√tw‹k_io.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

23 
os2_sockë_öô
(, ,);

25 (*
≠r_os2_sockë
)(, , Ë
os2_sockë_öô
;

26 (*
≠r_os2_£À˘
)(*, , , , Ë
NULL
;

27 (*
≠r_os2_sock_î∫o
)(Ë
NULL
;

28 (*
≠r_os2_ac˚±
)(, 
sockaddr
 *, *Ë
NULL
;

29 (*
≠r_os2_böd
)(, 
sockaddr
 *, Ë
NULL
;

30 (*
≠r_os2_c⁄√˘
)(, 
sockaddr
 *, Ë
NULL
;

31 (*
≠r_os2_gë≥î«me
)(, 
sockaddr
 *, *Ë
NULL
;

32 (*
≠r_os2_gësock«me
)(, 
sockaddr
 *, *Ë
NULL
;

33 (*
≠r_os2_gësock›t
)(, , , *, *Ë
NULL
;

34 (*
≠r_os2_io˘l
)(, , 
ˇddr_t
, Ë
NULL
;

35 (*
≠r_os2_li°í
)(, Ë
NULL
;

36 (*
≠r_os2_ªcv
)(, *, , Ë
NULL
;

37 (*
≠r_os2_£nd
)(, c⁄° *, , Ë
NULL
;

38 (*
≠r_os2_£tsock›t
)(, , , *, Ë
NULL
;

39 (*
≠r_os2_shutdown
)(, Ë
NULL
;

40 (*
≠r_os2_so˛o£
)(Ë
NULL
;

41 (*
≠r_os2_wrôev
)(, 
iovec
 *, Ë
NULL
;

42 (*
≠r_os2_£ndto
)(, c⁄° *, , , c⁄° 
sockaddr
 *, );

43 (*
≠r_os2_ªcv‰om
)(, *, , , 
sockaddr
 *, *);

45 
HMODULE
 
hSO32DLL
;

47 
	$os2_‚_lök
()

49 
	`DosE¡îCrôSec
();

51 i‡(
≠r_os2_sockë
 =
os2_sockë_öô
) {

52 
ULONG
 
rc
;

53 
îr‹°r
[200];

55 
rc
 = 
	`DosLﬂdModuÀ
(
îr‹°r
, ”º‹°r), "SO32DLL", &
hSO32DLL
);

57 i‡(
rc
)

58  
	`APR_OS2_STATUS
(
rc
);

60 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SOCKET", &
≠r_os2_sockë
);

62 i‡(!
rc
)

63 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SELECT", &
≠r_os2_£À˘
);

65 i‡(!
rc
)

66 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SOCK_ERRNO", &
≠r_os2_sock_î∫o
);

68 i‡(!
rc
)

69 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "ACCEPT", &
≠r_os2_ac˚±
);

71 i‡(!
rc
)

72 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "BIND", &
≠r_os2_böd
);

74 i‡(!
rc
)

75 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "CONNECT", &
≠r_os2_c⁄√˘
);

77 i‡(!
rc
)

78 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "GETPEERNAME", &
≠r_os2_gë≥î«me
);

80 i‡(!
rc
)

81 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "GETSOCKNAME", &
≠r_os2_gësock«me
);

83 i‡(!
rc
)

84 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "GETSOCKOPT", &
≠r_os2_gësock›t
);

86 i‡(!
rc
)

87 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "IOCTL", &
≠r_os2_io˘l
);

89 i‡(!
rc
)

90 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "LISTEN", &
≠r_os2_li°í
);

92 i‡(!
rc
)

93 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "RECV", &
≠r_os2_ªcv
);

95 i‡(!
rc
)

96 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SEND", &
≠r_os2_£nd
);

98 i‡(!
rc
)

99 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SETSOCKOPT", &
≠r_os2_£tsock›t
);

101 i‡(!
rc
)

102 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SHUTDOWN", &
≠r_os2_shutdown
);

104 i‡(!
rc
)

105 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SOCLOSE", &
≠r_os2_so˛o£
);

107 i‡(!
rc
)

108 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "WRITEV", &
≠r_os2_wrôev
);

110 i‡(!
rc
)

111 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "SENDTO", &
≠r_os2_£ndto
);

113 i‡(!
rc
)

114 
rc
 = 
	`DosQuîyProcAddr
(
hSO32DLL
, 0, "RECVFROM", &
≠r_os2_ªcv‰om
);

116 i‡(
rc
)

117  
	`APR_OS2_STATUS
(
rc
);

120 
	`DosExôCrôSec
();

121  
APR_SUCCESS
;

122 
	}
}

126 
	$os2_sockë_öô
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

128 
rc
 = 
	`os2_‚_lök
();

129 i‡(
rc
 =
APR_SUCCESS
)

130  
	`≠r_os2_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

131  
rc
;

132 
	}
}

	@network_io/os2/sendrecv.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_√tw‹k_io.h
"

21 
	~"≠r_lib.h
"

22 
	~<sys/time.h
>

24 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£nd
(
≠r_sockë_t
 *
sock
, c⁄° *
buf
,

25 
≠r_size_t
 *
Àn
)

27 
≠r_ssize_t
 
rv
;

28 
fds
, 
îr
 = 0;

30 i‡(*
Àn
 > 65536) {

31 *
Àn
 = 65536;

35 i‡(!
sock
->
n⁄block
 || 
îr
 =
SOCEWOULDBLOCK
) {

36 
fds
 = 
sock
->
sockëdes
;

37 
rv
 = 
	`£À˘
(&
fds
, 0, 1, 0, 
sock
->
timeout
 >= 0 ? sock->timeout/1000 : -1);

39 i‡(
rv
 != 1) {

40 *
Àn
 = 0;

41 
îr
 = 
	`sock_î∫o
();

43 i‡(
rv
 == 0)

44  
APR_TIMEUP
;

46 i‡(
îr
 =
SOCEINTR
)

49  
	`APR_OS2_STATUS
(
îr
);

53 
rv
 = 
	`£nd
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

54 
îr
 = 
rv
 < 0 ? 
	`sock_î∫o
() : 0;

55 } 
îr
 =
SOCEINTR
 ||Éº =
SOCEWOULDBLOCK
);

57 i‡(
îr
) {

58 *
Àn
 = 0;

59  
	`APR_OS2_STATUS
(
îr
);

62 (*
Àn
Ë
rv
;

63  
APR_SUCCESS
;

64 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv
(
≠r_sockë_t
 *
sock
, *
buf
,

69 
≠r_size_t
 *
Àn
)

71 
≠r_ssize_t
 
rv
;

72 
fds
, 
îr
 = 0;

75 i‡(!
sock
->
n⁄block
 || (
îr
 =
SOCEWOULDBLOCK
 && sock->
timeout
 != 0)) {

76 
fds
 = 
sock
->
sockëdes
;

77 
rv
 = 
	`£À˘
(&
fds
, 1, 0, 0, 
sock
->
timeout
 >= 0 ? sock->timeout/1000 : -1);

79 i‡(
rv
 != 1) {

80 *
Àn
 = 0;

81 
îr
 = 
	`sock_î∫o
();

83 i‡(
rv
 == 0)

84  
APR_TIMEUP
;

86 i‡(
îr
 =
SOCEINTR
)

89  
	`APR_OS2_STATUS
(
îr
);

93 
rv
 = 
	`ªcv
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 0);

94 
îr
 = 
rv
 < 0 ? 
	`sock_î∫o
() : 0;

95 } 
îr
 =
SOCEINTR
 || (î∏=
SOCEWOULDBLOCK
 && 
sock
->
timeout
 != 0));

97 i‡(
îr
) {

98 *
Àn
 = 0;

99  
	`APR_OS2_STATUS
(
îr
);

102 (*
Àn
Ë
rv
;

103  
rv
 =0 ? 
APR_EOF
 : 
APR_SUCCESS
;

104 
	}
}

108 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndv
(
≠r_sockë_t
 *
sock
,

109 c⁄° 
iovec
 *
vec
,

110 
≠r_öt32_t
 
nvec
, 
≠r_size_t
 *
Àn
)

112 
≠r_°©us_t
 
rv
;

113 
iovec
 *
tmpvec
;

114 
fds
, 
îr
 = 0;

115 
nv_to£nd
, 
tŸÆ
 = 0;

118  
nv_to£nd
 = 0;Çv_to£nd < 
nvec
 && 
tŸÆ
 + 
vec
[nv_to£nd].
iov_Àn
 < 65536;Çv_tosend++ ) {

119 
tŸÆ
 +
vec
[
nv_to£nd
].
iov_Àn
;

122 
tmpvec
 = 
	`Æloˇ
((
iovec
Ë* 
nv_to£nd
);

123 
	`mem˝y
(
tmpvec
, 
vec
, (
iovec
Ë* 
nv_to£nd
);

126 i‡(!
sock
->
n⁄block
 || 
îr
 =
SOCEWOULDBLOCK
) {

127 
fds
 = 
sock
->
sockëdes
;

128 
rv
 = 
	`£À˘
(&
fds
, 0, 1, 0, 
sock
->
timeout
 >= 0 ? sock->timeout/1000 : -1);

130 i‡(
rv
 != 1) {

131 *
Àn
 = 0;

132 
îr
 = 
	`sock_î∫o
();

134 i‡(
rv
 == 0)

135  
APR_TIMEUP
;

137 i‡(
îr
 =
SOCEINTR
)

140  
	`APR_OS2_STATUS
(
îr
);

144 
rv
 = 
	`wrôev
(
sock
->
sockëdes
, 
tmpvec
, 
nv_to£nd
);

145 
îr
 = 
rv
 < 0 ? 
	`sock_î∫o
() : 0;

146 } 
îr
 =
SOCEINTR
 ||Éº =
SOCEWOULDBLOCK
);

148 i‡(
îr
) {

149 *
Àn
 = 0;

150  
	`APR_OS2_STATUS
(
îr
);

153 *
Àn
 = 
rv
;

154  
APR_SUCCESS
;

155 
	}
}

	@network_io/os2/sendrecv_udp.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_√tw‹k_io.h
"

21 
	~"≠r_suµ‹t.h
"

22 
	~"≠r_lib.h
"

23 
	~<sys/time.h
>

26 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndto
(
≠r_sockë_t
 *
sock
,

27 
≠r_sockaddr_t
 *
whîe
,

28 
≠r_öt32_t
 
Êags
, c⁄° *
buf
,

29 
≠r_size_t
 *
Àn
)

31 
≠r_ssize_t
 
rv
;

32 
£ºno
;

35 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

36 (
sockaddr
*)&
whîe
->
ß
,

37 
whîe
->
ßÀn
);

38 } 
rv
 =-1 && (
£ºno
 = 
	`sock_î∫o
()Ë=
EINTR
);

40 i‡(
rv
 =-1 && 
£ºno
 =
SOCEWOULDBLOCK
 && 
sock
->
timeout
 != 0) {

41 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

43 i‡(
¨v
 !
APR_SUCCESS
) {

44 *
Àn
 = 0;

45  
¨v
;

48 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, *
Àn
, 
Êags
,

49 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

50 
whîe
->
ßÀn
);

51 } 
rv
 =-1 && (
£ºno
 = 
	`sock_î∫o
()Ë=
SOCEINTR
);

55 i‡(
rv
 == -1) {

56 *
Àn
 = 0;

57  
	`APR_FROM_OS_ERROR
(
£ºno
);

60 *
Àn
 = 
rv
;

61  
APR_SUCCESS
;

62 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv‰om
(
≠r_sockaddr_t
 *
‰om
,

67 
≠r_sockë_t
 *
sock
,

68 
≠r_öt32_t
 
Êags
, *
buf
,

69 
≠r_size_t
 *
Àn
)

71 
≠r_ssize_t
 
rv
;

72 
£ºno
;

75 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

76 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

77 } 
rv
 =-1 && (
£ºno
 = 
	`sock_î∫o
()Ë=
EINTR
);

79 i‡(
rv
 =-1 && 
£ºno
 =
SOCEWOULDBLOCK
 && 
sock
->
timeout
 != 0) {

80 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 1);

82 i‡(
¨v
 !
APR_SUCCESS
) {

83 *
Àn
 = 0;

84  
¨v
;

87 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, *
Àn
, 
Êags
,

88 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

89 } 
rv
 =-1 && (
£ºno
 = 
	`sock_î∫o
()Ë=
EINTR
);

93 i‡(
rv
 == -1) {

94 (*
Àn
) = 0;

95  
	`APR_FROM_OS_ERROR
(
£ºno
);

98 (*
Àn
Ë
rv
;

100 i‡(
rv
 =0 && 
sock
->
ty≥
 =
SOCK_STREAM
)

101  
APR_EOF
;

103  
APR_SUCCESS
;

104 
	}
}

	@network_io/os2/sockaddr.c

1 
	~"../unix/sockaddr.c
"

	@network_io/os2/socket_util.c

1 
	~"../unix/sockë_utû.c
"

	@network_io/os2/sockets.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_¨ch_öhîô.h
"

19 
	~"≠r_√tw‹k_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_°rögs.h
"

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~<sys/sockë.h
>

27 
	~<√töë/t˝.h
>

28 
	~<√töë/ö.h
>

29 
	~<¨∑/öë.h
>

30 
	~<√tdb.h
>

31 
	~"≠r_¨ch_os2ˇŒs.h
"

33 
≠r_°©us_t
 
	$sockë_˛ónup
(*
sock
)

35 
≠r_sockë_t
 *
thesockë
 = 
sock
;

37 i‡(
thesockë
->
sockëdes
 < 0) {

38  
APR_EINVALSOCK
;

41 i‡(
	`so˛o£
(
thesockë
->
sockëdes
) == 0) {

42 
thesockë
->
sockëdes
 = -1;

43  
APR_SUCCESS
;

46  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

48 
	}
}

50 
	$£t_sockë_v¨s
(
≠r_sockë_t
 *
sock
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
)

52 
sock
->
ty≥
 =Åype;

53 
sock
->
¥Ÿocﬁ
 =Örotocol;

54 
	`≠r_sockaddr_v¨s_£t
(
sock
->
loˇl_addr
, 
Ámûy
, 0);

55 
	`≠r_sockaddr_v¨s_£t
(
sock
->
ªmŸe_addr
, 
Ámûy
, 0);

56 
	}
}

58 
	$Æloc_sockë
(
≠r_sockë_t
 **
√w
, 
≠r_poﬁ_t
 *
p
)

60 *
√w
 = (
≠r_sockë_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_socket_t));

61 (*
√w
)->
poﬁ
 = 
p
;

62 (*
√w
)->
loˇl_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

63 (
≠r_sockaddr_t
));

64 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
p
;

66 (*
√w
)->
ªmŸe_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

67 (
≠r_sockaddr_t
));

68 (*
√w
)->
ªmŸe_addr
->
poﬁ
 = 
p
;

69 (*
√w
)->
ªmŸe_addr_unknown
 = 1;

73 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w
)->
pﬁl£t
, 1, 
p
, 0);

74 
	}
}

76 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_¥Ÿocﬁ_gë
(
≠r_sockë_t
 *
sock
, *
¥Ÿocﬁ
)

78 *
¥Ÿocﬁ
 = 
sock
->protocol;

79  
APR_SUCCESS
;

80 
	}
}

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_¸óã
(
≠r_sockë_t
 **
√w
, 
Ámûy
, 
ty≥
,

83 
¥Ÿocﬁ
, 
≠r_poﬁ_t
 *
c⁄t
)

85 
downgøde
 = (
Ámûy
 =
AF_UNSPEC
);

86 
≠r_pﬁlfd_t
 
pfd
;

88 i‡(
Ámûy
 =
AF_UNSPEC
) {

89 #i‡
APR_HAVE_IPV6


90 
Ámûy
 = 
AF_INET6
;

92 
Ámûy
 = 
AF_INET
;

96 
	`Æloc_sockë
(
√w
, 
c⁄t
);

98 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

99 #i‡
APR_HAVE_IPV6


100 i‡((*
√w
)->
sockëdes
 < 0 && 
downgøde
) {

101 
Ámûy
 = 
AF_INET
;

102 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

106 i‡((*
√w
)->
sockëdes
 < 0) {

107  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

109 
	`£t_sockë_v¨s
(*
√w
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

111 (*
√w
)->
timeout
 = -1;

112 (*
√w
)->
n⁄block
 = 
FALSE
;

113 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*new),

114 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

116  
APR_SUCCESS
;

117 
	}
}

119 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_shutdown
(
≠r_sockë_t
 *
thesockë
,

120 
≠r_shutdown_how_e
 
how
)

122 i‡(
	`shutdown
(
thesockë
->
sockëdes
, 
how
) == 0) {

123  
APR_SUCCESS
;

126  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

128 
	}
}

130 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_˛o£
(
≠r_sockë_t
 *
thesockë
)

132 
	`≠r_poﬁ_˛ónup_kûl
(
thesockë
->
poﬁ
,Åhesockë, 
sockë_˛ónup
);

133  
	`sockë_˛ónup
(
thesockë
);

134 
	}
}

136 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_böd
(
≠r_sockë_t
 *
sock
,

137 
≠r_sockaddr_t
 *
ß
)

139 i‡(
	`böd
(
sock
->
sockëdes
,

140 (
sockaddr
 *)&
ß
->sa,

141 
ß
->
ßÀn
) == -1)

142  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

144 
sock
->
loˇl_addr
 = 
ß
;

146 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_p‹t
 == 0) {

147 
sock
->
loˇl_p‹t_unknown
 = 1;

149  
APR_SUCCESS
;

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_li°í
(
≠r_sockë_t
 *
sock
,

154 
≠r_öt32_t
 
backlog
)

156 i‡(
	`li°í
(
sock
->
sockëdes
, 
backlog
) == -1)

157  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

159  
APR_SUCCESS
;

160 
	}
}

162 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ac˚±
(
≠r_sockë_t
 **
√w
,

163 
≠r_sockë_t
 *
sock
,

164 
≠r_poﬁ_t
 *
c⁄√˘i⁄_c⁄ãxt
)

166 
	`Æloc_sockë
(
√w
, 
c⁄√˘i⁄_c⁄ãxt
);

167 
	`£t_sockë_v¨s
(*
√w
, 
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
, 
SOCK_STREAM
, sock->
¥Ÿocﬁ
);

169 (*
√w
)->
timeout
 = -1;

170 (*
√w
)->
n⁄block
 = 
FALSE
;

172 (*
√w
)->
sockëdes
 = 
	`ac˚±
(
sock
->socketdes,

173 (
sockaddr
 *)&(*
√w
)->
ªmŸe_addr
->
ß
,

174 &(*
√w
)->
ªmŸe_addr
->
ßÀn
);

176 i‡((*
√w
)->
sockëdes
 < 0) {

177  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

180 *(*
√w
)->
loˇl_addr
 = *
sock
->local_addr;

181 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
c⁄√˘i⁄_c⁄ãxt
;

182 (*
√w
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*√w)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

185 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
) {

186 (*
√w
)->
loˇl_addr
->
ùaddr_±r
 = &(*√w)->loˇl_addr->
ß
.
sö
.
sö_addr
;

189 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*new),

190 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

191  
APR_SUCCESS
;

192 
	}
}

194 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_c⁄√˘
(
≠r_sockë_t
 *
sock
,

195 
≠r_sockaddr_t
 *
ß
)

197 i‡((
	`c⁄√˘
(
sock
->
sockëdes
, (
sockaddr
 *)&
ß
->ß.
sö
,

198 
ß
->
ßÀn
) < 0) &&

199 (
	`sock_î∫o
(Ë!
SOCEINPROGRESS
)) {

200  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

203 
«mñí
 = (
sock
->
loˇl_addr
->
ß
.
sö
);

204 
	`gësock«me
(
sock
->
sockëdes
, (
sockaddr
 *)&sock->
loˇl_addr
->
ß
.
sö
,

205 &
«mñí
);

206 
sock
->
ªmŸe_addr
 = 
ß
;

207  
APR_SUCCESS
;

209 
	}
}

211 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ty≥_gë
(
≠r_sockë_t
 *
sock
, *
ty≥
)

213 *
ty≥
 = 
sock
->type;

214  
APR_SUCCESS
;

215 
	}
}

217 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_d©a_gë
(**
d©a
, c⁄° *
key
,

218 
≠r_sockë_t
 *
sock
)

220 
sock_u£rd©a_t
 *
cur
 = 
sock
->
u£rd©a
;

222 *
d©a
 = 
NULL
;

224 
cur
) {

225 i‡(!
	`°rcmp
(
cur
->
key
, key)) {

226 *
d©a
 = 
cur
->data;

229 
cur
 = cur->
√xt
;

232  
APR_SUCCESS
;

233 
	}
}

237 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_sockë_d©a_£t
(
≠r_sockë_t
 *
sock
, *
d©a
, c⁄° *
key
,

238 
	$≠r_°©us_t
 (*
˛ónup
) (*))

240 
sock_u£rd©a_t
 *
√w
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, (sock_userdata_t));

242 
√w
->
key
 = 
	`≠r_p°rdup
(
sock
->
poﬁ
, key);

243 
√w
->
d©a
 = data;

244 
√w
->
√xt
 = 
sock
->
u£rd©a
;

245 
sock
->
u£rd©a
 = 
√w
;

247 i‡(
˛ónup
) {

248 
	`≠r_poﬁ_˛ónup_ªgi°î
(
sock
->
poﬁ
, 
d©a
, 
˛ónup
, cleanup);

251  
APR_SUCCESS
;

252 
	}
}

254 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_gë
(
≠r_os_sock_t
 *
thesock
, 
≠r_sockë_t
 *
sock
)

256 *
thesock
 = 
sock
->
sockëdes
;

257  
APR_SUCCESS
;

258 
	}
}

260 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_make
(
≠r_sockë_t
 **
≠r_sock
,

261 
≠r_os_sock_öfo_t
 *
os_sock_öfo
,

262 
≠r_poﬁ_t
 *
c⁄t
)

264 
	`Æloc_sockë
(
≠r_sock
, 
c⁄t
);

265 
	`£t_sockë_v¨s
(*
≠r_sock
, 
os_sock_öfo
->
Ámûy
, os_sock_öfo->
ty≥
, os_sock_öfo->
¥Ÿocﬁ
);

266 (*
≠r_sock
)->
timeout
 = -1;

267 (*
≠r_sock
)->
sockëdes
 = *
os_sock_öfo
->
os_sock
;

268 i‡(
os_sock_öfo
->
loˇl
) {

269 
	`mem˝y
(&(*
≠r_sock
)->
loˇl_addr
->
ß
.
sö
,

270 
os_sock_öfo
->
loˇl
,

271 (*
≠r_sock
)->
loˇl_addr
->
ßÀn
);

273 (*
≠r_sock
)->
loˇl_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->loˇl_addr->
ß
.
sö
.
sö_p‹t
);

276 (*
≠r_sock
)->
loˇl_p‹t_unknown
 = (*≠r_sock)->
loˇl_öãrÁ˚_unknown
 = 1;

278 i‡(
os_sock_öfo
->
ªmŸe
) {

279 
	`mem˝y
(&(*
≠r_sock
)->
ªmŸe_addr
->
ß
.
sö
,

280 
os_sock_öfo
->
ªmŸe
,

281 (*
≠r_sock
)->
ªmŸe_addr
->
ßÀn
);

283 (*
≠r_sock
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

286 (*
≠r_sock
)->
ªmŸe_addr_unknown
 = 1;

289 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
≠r_sock
)->
poﬁ
, (*)(*apr_sock),

290 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

292  
APR_SUCCESS
;

293 
	}
}

295 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_put
(
≠r_sockë_t
 **
sock
, 
≠r_os_sock_t
 *
thesock
, 
≠r_poﬁ_t
 *
c⁄t
)

297 i‡(
c⁄t
 =
NULL
) {

298  
APR_ENOPOOL
;

300 i‡((*
sock
Ë=
NULL
) {

301 
	`Æloc_sockë
(
sock
, 
c⁄t
);

302 
	`£t_sockë_v¨s
(*
sock
, 
AF_INET
, 
SOCK_STREAM
, 0);

303 (*
sock
)->
timeout
 = -1;

306 (*
sock
)->
loˇl_p‹t_unknown
 = (*sock)->
loˇl_öãrÁ˚_unknown
 = 1;

307 (*
sock
)->
ªmŸe_addr_unknown
 = 1;

308 (*
sock
)->
sockëdes
 = *
thesock
;

309  
APR_SUCCESS
;

310 
	}
}

312 
APR_POOL_IMPLEMENT_ACCESSOR
(
sockë
);

314 
	$APR_IMPLEMENT_INHERIT_SET
(
sockë
, 
öhîô
, 
poﬁ
, 
sockë_˛ónup
)

316 
	`APR_IMPLEMENT_INHERIT_UNSET
(
sockë
, 
öhîô
, 
poﬁ
, 
sockë_˛ónup
)

	@network_io/os2/sockopt.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_√tw‹k_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

24 
	~<sys/sockë.h
>

25 
	~<√töë/t˝.h
>

26 
	~<√töë/ö.h
>

27 
	~<uni°d.h
>

28 
	~<√tdb.h
>

29 
	~<sys/so_io˘l.h
>

32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_timeout_£t
(
≠r_sockë_t
 *
sock
,

33 
≠r_öãrvÆ_time_t
 
t
)

35 
sock
->
timeout
 = 
t
;

36  
APR_SUCCESS
;

37 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_›t_£t
(
≠r_sockë_t
 *
sock
,

41 
≠r_öt32_t
 
›t
,á¥_öt32_à
⁄
)

43 
⁄e
;

44 
lögî
 
li
;

46 i‡(
⁄
)

47 
⁄e
 = 1;

49 
⁄e
 = 0;

51 i‡(
›t
 & 
APR_SO_KEEPALIVE
) {

52 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
⁄e
, ()) == -1) {

53  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

56 i‡(
›t
 & 
APR_SO_DEBUG
) {

57 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_DEBUG
, (*)&
⁄e
, ()) == -1) {

58  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

61 i‡(
›t
 & 
APR_SO_BROADCAST
) {

62 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
⁄e
, ()) == -1) {

63  
	`APR_FROM_OS_ERROR
(
	`sock_î∫o
());

66 i‡(
›t
 & 
APR_SO_REUSEADDR
) {

67 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
⁄e
, ()) == -1) {

68  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

71 i‡(
›t
 & 
APR_SO_SNDBUF
) {

72 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
⁄
, ()) == -1) {

73  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

76 i‡(
›t
 & 
APR_SO_NONBLOCK
) {

77 i‡(
	`io˘l
(
sock
->
sockëdes
, 
FIONBIO
, (
ˇddr_t
)&
⁄e
, (one)) == -1) {

78  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

80 
sock
->
n⁄block
 = 
⁄e
;

83 i‡(
›t
 & 
APR_SO_LINGER
) {

84 
li
.
l_⁄off
 = 
⁄
;

85 
li
.
l_lögî
 = 
APR_MAX_SECS_TO_LINGER
;

86 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_LINGER
, (*Ë&
li
, (
lögî
)) == -1) {

87  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

90 i‡(
›t
 & 
APR_TCP_NODELAY
) {

91 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
⁄
, ()) == -1) {

92  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

95  
APR_SUCCESS
;

96 
	}
}

99 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_timeout_gë
(
≠r_sockë_t
 *
sock
,

100 
≠r_öãrvÆ_time_t
 *
t
)

102 *
t
 = 
sock
->
timeout
;

103  
APR_SUCCESS
;

104 
	}
}

107 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_›t_gë
(
≠r_sockë_t
 *
sock
,

108 
≠r_öt32_t
 
›t
,á¥_öt32_à*
⁄
)

110 
›t
) {

112  
APR_EINVAL
;

114  
APR_SUCCESS
;

115 
	}
}

118 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_©m¨k
(
≠r_sockë_t
 *
sock
, *
©m¨k
)

120 
oobm¨k
;

122 i‡(
	`io˘l
(
sock
->
sockëdes
, 
SIOCATMARK
, (*)&
oobm¨k
, (oobmark)) < 0) {

123  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

126 *
©m¨k
 = (
oobm¨k
 != 0);

128  
APR_SUCCESS
;

129 
	}
}

132 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gëho°«me
(*
buf
, 
≠r_öt32_t
 
Àn
,

133 
≠r_poﬁ_t
 *
c⁄t
)

135 i‡(
	`gëho°«me
(
buf
, 
Àn
) == -1) {

136 
buf
[0] = '\0';

137  
	`APR_OS2_STATUS
(
	`sock_î∫o
());

139 i‡(!
	`memchr
(
buf
, '\0', 
Àn
)) {

140 
buf
[0] = '\0';

141  
APR_ENAMETOOLONG
;

143  
APR_SUCCESS
;

144 
	}
}

	@network_io/unix/inet_ntop.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_¨ch_√tw‹kio.h
"

19 
	~"≠r_°rögs.h
"

21 #i‡
APR_HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

24 #i‡
APR_HAVE_SYS_SOCKET_H


25 
	~<sys/sockë.h
>

27 #i‡
APR_HAVE_NETINET_IN_H


28 
	~<√töë/ö.h
>

30 #i‡
APR_HAVE_ARPA_INET_H


31 
	~<¨∑/öë.h
>

33 
	~<°rög.h
>

34 #i‡
APR_HAVE_ERRNO_H


35 
	~<î∫o.h
>

37 
	~<°dio.h
>

39 #i‚de‡
IN6ADDRSZ


40 
	#IN6ADDRSZ
 16

	)

43 #i‚de‡
INT16SZ


44 
	#INT16SZ
 (
≠r_öt16_t
)

	)

47 #i‚de‡
__P


48 
	#__P
(
x
Ë
	)
x

51 #i‡!
deföed
(
EAFNOSUPPORT
Ë&& deföed(
WSAEAFNOSUPPORT
)

52 
	#EAFNOSUPPORT
 
WSAEAFNOSUPPORT


	)

60 c⁄° *
öë_¡›4
 
__P
((c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
));

61 #i‡
APR_HAVE_IPV6


62 c⁄° *
öë_¡›6
 
__P
((c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
));

74 
	$≠r_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
)

76 
af
) {

77 
AF_INET
:

78  (
	`öë_¡›4
(
§c
, 
d°
, 
size
));

79 #i‡
APR_HAVE_IPV6


80 
AF_INET6
:

81  (
	`öë_¡›6
(
§c
, 
d°
, 
size
));

84 
î∫o
 = 
EAFNOSUPPORT
;

85  (
NULL
);

88 
	}
}

102 
	$öë_¡›4
(c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
)

104 c⁄° 
≠r_size_t
 
MIN_SIZE
 = 16;

105 
n
 = 0;

106 *
√xt
 = 
d°
;

108 i‡(
size
 < 
MIN_SIZE
) {

109 
î∫o
 = 
ENOSPC
;

110  
NULL
;

113 
u
 = *
§c
++;

114 i‡(
u
 > 99) {

115 *
√xt
++ = '0' + 
u
/100;

116 
u
 %= 100;

117 *
√xt
++ = '0' + 
u
/10;

118 
u
 %= 10;

120 i‡(
u
 > 9) {

121 *
√xt
++ = '0' + 
u
/10;

122 
u
 %= 10;

124 *
√xt
++ = '0' + 
u
;

125 *
√xt
++ = '.';

126 
n
++;

127 } 
n
 < 4);

128 *--
√xt
 = 0;

129  
d°
;

130 
	}
}

132 #i‡
APR_HAVE_IPV6


140 
	$öë_¡›6
(c⁄° *
§c
, *
d°
, 
≠r_size_t
 
size
)

149 
tmp
[ "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *
ç
;

150 °ru˘ { 
ba£
, 
Àn
; } 
be°
 = {-1, 0}, 
cur
 = {-1, 0};

151 
w‹ds
[
IN6ADDRSZ
 / 
INT16SZ
];

152 
i
;

153 c⁄° *
√xt_§c
, *
§c_íd
;

154 *
√xt_de°
;

161 
√xt_§c
 = 
§c
;

162 
§c_íd
 = 
§c
 + 
IN6ADDRSZ
;

163 
√xt_de°
 = 
w‹ds
;

164 
i
 = 0;

166 
√xt_w‹d
 = ()*
√xt_§c
++;

167 
√xt_w‹d
 <<= 8;

168 
√xt_w‹d
 |()*
√xt_§c
++;

169 *
√xt_de°
++ = 
√xt_w‹d
;

171 i‡(
√xt_w‹d
 == 0) {

172 i‡(
cur
.
ba£
 == -1) {

173 
cur
.
ba£
 = 
i
;

174 
cur
.
Àn
 = 1;

177 
cur
.
Àn
++;

180 i‡(
cur
.
ba£
 != -1) {

181 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len) {

182 
be°
 = 
cur
;

184 
cur
.
ba£
 = -1;

188 
i
++;

189 } 
√xt_§c
 < 
§c_íd
);

191 i‡(
cur
.
ba£
 != -1) {

192 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len) {

193 
be°
 = 
cur
;

196 i‡(
be°
.
ba£
 !-1 && be°.
Àn
 < 2) {

197 
be°
.
ba£
 = -1;

203 
ç
 = 
tmp
;

204 
i
 = 0; i < (
IN6ADDRSZ
 / 
INT16SZ
);) {

206 i‡(
i
 =
be°
.
ba£
) {

207 *
ç
++ = ':';

208 
i
 +
be°
.
Àn
;

212 i‡(
i
 != 0) {

213 *
ç
++ = ':';

216 i‡(
i
 =6 && 
be°
.
ba£
 == 0 &&

217 (
be°
.
Àn
 =6 || (be°.À¿=5 && 
w‹ds
[5] == 0xffff))) {

218 i‡(!
	`öë_¡›4
(
§c
+12, 
ç
,  
tmp
 - (tp -Åmp))) {

219  (
NULL
);

221 
ç
 +
	`°æí
(tp);

224 
ç
 +
	`≠r_¢¥ötf
—p,  
tmp
 - (ç -Åmp), "%x", 
w‹ds
[
i
]);

225 
i
++;

228 i‡(
be°
.
ba£
 !-1 && (be°.ba£ + be°.
Àn
Ë=(
IN6ADDRSZ
 / 
INT16SZ
)) {

229 *
ç
++ = ':';

231 *
ç
++ = '\0';

236 i‡((
≠r_size_t
)(
ç
 - 
tmp
Ë> 
size
) {

237 
î∫o
 = 
ENOSPC
;

238  (
NULL
);

240 
	`°r˝y
(
d°
, 
tmp
);

241  (
d°
);

242 
	}
}

	@network_io/unix/inet_pton.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_¨ch_√tw‹kio.h
"

20 #i‡
APR_HAVE_SYS_TYPES_H


21 
	~<sys/ty≥s.h
>

23 #i‡
APR_HAVE_SYS_SOCKET_H


24 
	~<sys/sockë.h
>

26 #i‡
APR_HAVE_NETINET_IN_H


27 
	~<√töë/ö.h
>

29 #i‡
APR_HAVE_ARPA_INET_H


30 
	~<¨∑/öë.h
>

32 
	~<°rög.h
>

33 #i‡
APR_HAVE_ERRNO_H


34 
	~<î∫o.h
>

37 #i‚de‡
IN6ADDRSZ


38 
	#IN6ADDRSZ
 16

	)

41 #i‚de‡
INT16SZ


42 
	#INT16SZ
 (
≠r_öt16_t
)

	)

45 #i‚de‡
INADDRSZ


46 
	#INADDRSZ
 4

	)

49 #i‚de‡
__P


50 
	#__P
(
x
Ë
	)
x

53 #i‡!
deföed
(
EAFNOSUPPORT
Ë&& deföed(
WSAEAFNOSUPPORT
)

54 
	#EAFNOSUPPORT
 
WSAEAFNOSUPPORT


	)

62 
öë_±⁄4
 
__P
((c⁄° *
§c
, *
d°
));

63 #i‡
APR_HAVE_IPV6


64 
öë_±⁄6
 
__P
((c⁄° *
§c
, *
d°
));

79 
	$≠r_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
)

81 
af
) {

82 
AF_INET
:

83  (
	`öë_±⁄4
(
§c
, 
d°
));

84 #i‡
APR_HAVE_IPV6


85 
AF_INET6
:

86  (
	`öë_±⁄6
(
§c
, 
d°
));

89 
î∫o
 = 
EAFNOSUPPORT
;

93 
	}
}

106 
	$öë_±⁄4
(c⁄° *
§c
, *
d°
)

108 c⁄° 
digôs
[] = "0123456789";

109 
ßw_digô
, 
o˘ës
, 
ch
;

110 
tmp
[
INADDRSZ
], *
ç
;

112 
ßw_digô
 = 0;

113 
o˘ës
 = 0;

114 *(
ç
 = 
tmp
) = 0;

115 (
ch
 = *
§c
++) != '\0') {

116 c⁄° *
pch
;

118 i‡((
pch
 = 
	`°rchr
(
digôs
, 
ch
)Ë!
NULL
) {

119 
√w
 = *
ç
 * 10 + ()(
pch
 - 
digôs
);

121 i‡(
√w
 > 255)

123 *
ç
 = 
√w
;

124 i‡(! 
ßw_digô
) {

125 i‡(++
o˘ës
 > 4)

127 
ßw_digô
 = 1;

129 } i‡(
ch
 ='.' && 
ßw_digô
) {

130 i‡(
o˘ës
 == 4)

132 *++
ç
 = 0;

133 
ßw_digô
 = 0;

137 i‡(
o˘ës
 < 4)

140 
	`mem˝y
(
d°
, 
tmp
, 
INADDRSZ
);

142 
	}
}

144 #i‡
APR_HAVE_IPV6


159 
	$öë_±⁄6
(c⁄° *
§c
, *
d°
)

161 c⁄° 
xdigôs_l
[] = "0123456789abcdef",

162 
xdigôs_u
[] = "0123456789ABCDEF";

163 
tmp
[
IN6ADDRSZ
], *
ç
, *
ídp
, *
cﬁ⁄p
;

164 c⁄° *
xdigôs
, *
cuπok
;

165 
ch
, 
ßw_xdigô
;

166 
vÆ
;

168 
	`mem£t
((
ç
 = 
tmp
), '\0', 
IN6ADDRSZ
);

169 
ídp
 = 
ç
 + 
IN6ADDRSZ
;

170 
cﬁ⁄p
 = 
NULL
;

172 i‡(*
§c
 == ':')

173 i‡(*++
§c
 != ':')

175 
cuπok
 = 
§c
;

176 
ßw_xdigô
 = 0;

177 
vÆ
 = 0;

178 (
ch
 = *
§c
++) != '\0') {

179 c⁄° *
pch
;

181 i‡((
pch
 = 
	`°rchr
((
xdigôs
 = 
xdigôs_l
), 
ch
)Ë=
NULL
)

182 
pch
 = 
	`°rchr
((
xdigôs
 = 
xdigôs_u
), 
ch
);

183 i‡(
pch
 !
NULL
) {

184 
vÆ
 <<= 4;

185 
vÆ
 |(
pch
 - 
xdigôs
);

186 i‡(
vÆ
 > 0xffff)

188 
ßw_xdigô
 = 1;

191 i‡(
ch
 == ':') {

192 
cuπok
 = 
§c
;

193 i‡(!
ßw_xdigô
) {

194 i‡(
cﬁ⁄p
)

196 
cﬁ⁄p
 = 
ç
;

199 i‡(
ç
 + 
INT16SZ
 > 
ídp
)

201 *
ç
++ = (Ë(
vÆ
 >> 8) & 0xff;

202 *
ç
++ = (Ë
vÆ
 & 0xff;

203 
ßw_xdigô
 = 0;

204 
vÆ
 = 0;

207 i‡(
ch
 ='.' && ((
ç
 + 
INADDRSZ
Ë<
ídp
) &&

208 
	`öë_±⁄4
(
cuπok
, 
ç
) > 0) {

209 
ç
 +
INADDRSZ
;

210 
ßw_xdigô
 = 0;

215 i‡(
ßw_xdigô
) {

216 i‡(
ç
 + 
INT16SZ
 > 
ídp
)

218 *
ç
++ = (Ë(
vÆ
 >> 8) & 0xff;

219 *
ç
++ = (Ë
vÆ
 & 0xff;

221 i‡(
cﬁ⁄p
 !
NULL
) {

226 c⁄° 
≠r_ssize_t
 
n
 = 
ç
 - 
cﬁ⁄p
;

227 
≠r_ssize_t
 
i
;

229 
i
 = 1; i <
n
; i++) {

230 
ídp
[- 
i
] = 
cﬁ⁄p
[
n
 - i];

231 
cﬁ⁄p
[
n
 - 
i
] = 0;

233 
ç
 = 
ídp
;

235 i‡(
ç
 !
ídp
)

237 
	`mem˝y
(
d°
, 
tmp
, 
IN6ADDRSZ
);

239 
	}
}

	@network_io/unix/multicast.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_√tw‹k_io.h
"

19 
	~"≠r_suµ‹t.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_öhîô.h
"

23 #ifde‡
HAVE_GETIFADDRS


24 
	~<√t/if.h
>

25 
	~<iÁddrs.h
>

28 #ifde‡
HAVE_STRUCT_IPMREQ


29 
	$fûl_mù_v4
(
ù_mªq
 *
mù
, 
≠r_sockaddr_t
 *
mˇ°
,

30 
≠r_sockaddr_t
 *
iÁ˚
)

32 
mù
->
imr_mu…üddr
 = 
mˇ°
->
ß
.
sö
.
sö_addr
;

33 i‡(
iÁ˚
 =
NULL
) {

34 
mù
->
imr_öãrÁ˚
.
s_addr
 = 
INADDR_ANY
;

37 
mù
->
imr_öãrÁ˚
 = 
iÁ˚
->
ß
.
sö
.
sö_addr
;

39 
	}
}

44 
	$föd_if_ödex
(c⁄° 
≠r_sockaddr_t
 *
iÁ˚
)

46 
ödex
 = 0;

47 #i‡
	`deföed
(
HAVE_GETIFADDRS
Ë&& 
APR_HAVE_IPV6


48 
iÁddrs
 *
iÂ
, *
ifs
;

58 i‡(
	`gëiÁddrs
(&
ifs
) != 0) {

62 
iÂ
 = 
ifs
; iÂ; iÂ = iÂ->
iÁ_√xt
) {

63 i‡(
iÂ
->
iÁ_addr
 !
NULL
 && iÂ->iÁ_addr->
ß_Ámûy
 =
AF_INET6
) {

64 i‡(
	`memcmp
(&
iÁ˚
->
ß
.
sö6
.
sö6_addr
,

65 &
iÂ
->
iÁ_addr
->
ß_d©a
[0],

66 (
iÁ˚
->
ß
.
sö6
.
sö6_addr
)) == 0) {

67 
ödex
 = 
	`if_«mëoödex
(
iÂ
->
iÁ_«me
);

73 
	`‰ìiÁddrs
(
ifs
);

75  
ödex
;

76 
	}
}

78 #i‡
APR_HAVE_IPV6


79 
	$fûl_mù_v6
(
ùv6_mªq
 *
mù
, c⁄° 
≠r_sockaddr_t
 *
mˇ°
,

80 c⁄° 
≠r_sockaddr_t
 *
iÁ˚
)

82 
	`mem˝y
(&
mù
->
ùv6mr_mu…üddr
, 
mˇ°
->
ùaddr_±r
,

83 (
mù
->
ùv6mr_mu…üddr
));

85 i‡(
iÁ˚
 =
NULL
) {

86 
mù
->
ùv6mr_öãrÁ˚
 = 0;

89 
mù
->
ùv6mr_öãrÁ˚
 = 
	`föd_if_ödex
(
iÁ˚
);

91 
	}
}

95 
	$sock_is_ùv4
(
≠r_sockë_t
 *
sock
)

97 i‡(
sock
->
loˇl_addr
->
Ámûy
 =
APR_INET
)

100 
	}
}

102 #i‡
APR_HAVE_IPV6


103 
	$sock_is_ùv6
(
≠r_sockë_t
 *
sock
)

105 i‡(
sock
->
loˇl_addr
->
Ámûy
 =
APR_INET6
)

108 
	}
}

111 
≠r_°©us_t
 
	$do_mˇ°
(
ty≥
, 
≠r_sockë_t
 *
sock
,

112 
≠r_sockaddr_t
 *
mˇ°
,á¥_sockaddr_à*
iÁ˚
,

113 
≠r_sockaddr_t
 *
sour˚
)

115 
ù_mªq
 
mù4
;

116 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

117 #i‡
APR_HAVE_IPV6


118 
ùv6_mªq
 
mù6
;

120 #ifde‡
GROUP_FILTER_SIZE


121 
group_sour˚_ªq
 
mù
;

122 
ù_¥Ÿo
;

125 i‡(
sour˚
 !
NULL
) {

126 #ifde‡
GROUP_FILTER_SIZE


127 i‡(
	`sock_is_ùv4
(
sock
)) {

128 
ù_¥Ÿo
 = 
IPPROTO_IP
;

130 #i‡
APR_HAVE_IPV6


131 i‡(
	`sock_is_ùv6
(
sock
)) {

132 
ù_¥Ÿo
 = 
IPPROTO_IPV6
;

136  
APR_ENOTIMPL
;

139 i‡(
ty≥
 =
IP_ADD_MEMBERSHIP
)

140 
ty≥
 = 
MCAST_JOIN_SOURCE_GROUP
;

141 i‡(
ty≥
 =
IP_DROP_MEMBERSHIP
)

142 
ty≥
 = 
MCAST_LEAVE_SOURCE_GROUP
;

144  
APR_ENOTIMPL
;

146 
mù
.
g§_öãrÁ˚
 = 
	`föd_if_ödex
(
iÁ˚
);

147 
	`mem˝y
(&
mù
.
g§_group
, 
mˇ°
->
ùaddr_±r
, (mip.gsr_group));

148 
	`mem˝y
(&
mù
.
g§_sour˚
, 
sour˚
->
ùaddr_±r
, (mip.gsr_source));

150 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
ù_¥Ÿo
, 
ty≥
, (c⁄° *Ë&
mù
,

151 (
mù
)) == -1) {

152 
rv
 = 
î∫o
;

156  
APR_ENOTIMPL
;

160 i‡(
	`sock_is_ùv4
(
sock
)) {

162 
	`fûl_mù_v4
(&
mù4
, 
mˇ°
, 
iÁ˚
);

164 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IP
, 
ty≥
,

165 (c⁄° *Ë&
mù4
, (mip4)) == -1) {

166 
rv
 = 
î∫o
;

169 #i‡
APR_HAVE_IPV6
 && 
	`deföed
(
IPV6_JOIN_GROUP
Ë&& deföed(
IPV6_LEAVE_GROUP
)

170 i‡(
	`sock_is_ùv6
(
sock
)) {

171 i‡(
ty≥
 =
IP_ADD_MEMBERSHIP
) {

172 
ty≥
 = 
IPV6_JOIN_GROUP
;

174 i‡(
ty≥
 =
IP_DROP_MEMBERSHIP
) {

175 
ty≥
 = 
IPV6_LEAVE_GROUP
;

178  
APR_ENOTIMPL
;

181 
	`fûl_mù_v6
(&
mù6
, 
mˇ°
, 
iÁ˚
);

183 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IPV6
, 
ty≥
,

184 (c⁄° *Ë&
mù6
, (mip6)) == -1) {

185 
rv
 = 
î∫o
;

190 
rv
 = 
APR_ENOTIMPL
;

193  
rv
;

194 
	}
}

199 
≠r_°©us_t
 
	$do_mˇ°_›t
(
ty≥
, 
≠r_sockë_t
 *
sock
,

200 
≠r_byã_t
 
vÆue
)

202 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

204 i‡(
	`sock_is_ùv4
(
sock
)) {

207 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IP
, 
ty≥
,

208 (c⁄° *Ë&
vÆue
, (value)) == -1) {

209 
rv
 = 
î∫o
;

212 #i‡
APR_HAVE_IPV6


213 i‡(
	`sock_is_ùv6
(
sock
)) {

215 
ivÆue
 = 
vÆue
;

217 i‡(
ty≥
 =
IP_MULTICAST_TTL
) {

218 
ty≥
 = 
IPV6_MULTICAST_HOPS
;

220 i‡(
ty≥
 =
IP_MULTICAST_LOOP
) {

221 
ty≥
 = 
IPV6_MULTICAST_LOOP
;

224  
APR_ENOTIMPL
;

227 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IPV6
, 
ty≥
,

228 (c⁄° *Ë&
ivÆue
, (ivalue)) == -1) {

229 
rv
 = 
î∫o
;

234 
rv
 = 
APR_ENOTIMPL
;

237  
rv
;

238 
	}
}

241 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mˇ°_joö
(
≠r_sockë_t
 *
sock
,

242 
≠r_sockaddr_t
 *
joö
,

243 
≠r_sockaddr_t
 *
iÁ˚
,

244 
≠r_sockaddr_t
 *
sour˚
)

246 #i‡
	`deföed
(
IP_ADD_MEMBERSHIP
Ë&& deföed(
HAVE_STRUCT_IPMREQ
)

247  
	`do_mˇ°
(
IP_ADD_MEMBERSHIP
, 
sock
, 
joö
, 
iÁ˚
, 
sour˚
);

249  
APR_ENOTIMPL
;

251 
	}
}

253 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mˇ°_Àave
(
≠r_sockë_t
 *
sock
,

254 
≠r_sockaddr_t
 *
addr
,

255 
≠r_sockaddr_t
 *
iÁ˚
,

256 
≠r_sockaddr_t
 *
sour˚
)

258 #i‡
	`deföed
(
IP_DROP_MEMBERSHIP
Ë&& deföed(
HAVE_STRUCT_IPMREQ
)

259  
	`do_mˇ°
(
IP_DROP_MEMBERSHIP
, 
sock
, 
addr
, 
iÁ˚
, 
sour˚
);

261  
APR_ENOTIMPL
;

263 
	}
}

265 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mˇ°_h›s
(
≠r_sockë_t
 *
sock
, 
≠r_byã_t
 
âl
)

267 #i‡
	`deföed
(
IP_MULTICAST_TTL
Ë&& deföed(
HAVE_STRUCT_IPMREQ
)

268  
	`do_mˇ°_›t
(
IP_MULTICAST_TTL
, 
sock
, 
âl
);

270  
APR_ENOTIMPL
;

272 
	}
}

274 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mˇ°_lo›back
(
≠r_sockë_t
 *
sock
,

275 
≠r_byã_t
 
›t
)

277 #i‡
	`deföed
(
IP_MULTICAST_LOOP
Ë&& deföed(
HAVE_STRUCT_IPMREQ
)

278  
	`do_mˇ°_›t
(
IP_MULTICAST_LOOP
, 
sock
, 
›t
);

280  
APR_ENOTIMPL
;

282 
	}
}

284 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_mˇ°_öãrÁ˚
(
≠r_sockë_t
 *
sock
,

285 
≠r_sockaddr_t
 *
iÁ˚
)

287 #i‡
	`deföed
(
IP_MULTICAST_IF
Ë&& deföed(
HAVE_STRUCT_IPMREQ
)

288 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

290 i‡(
	`sock_is_ùv4
(
sock
)) {

291 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
,

292 (c⁄° *Ë&
iÁ˚
->
ß
.
sö
.
sö_addr
,

293 (
iÁ˚
->
ß
.
sö
.
sö_addr
)) == -1) {

294 
rv
 = 
î∫o
;

297 #i‡
APR_HAVE_IPV6


298 i‡(
	`sock_is_ùv6
(
sock
)) {

299 
idx
 = 
	`föd_if_ödex
(
iÁ˚
);

300 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_IF
,

301 (c⁄° *Ë&
idx
, (idx)) == -1) {

302 
rv
 = 
î∫o
;

307 
rv
 = 
APR_ENOTIMPL
;

309  
rv
;

311  
APR_ENOTIMPL
;

313 
	}
}

	@network_io/unix/sendrecv.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_suµ‹t.h
"

20 #i‡
APR_HAS_SENDFILE


22 
	~"≠r_¨ch_fûe_io.h
"

26 #i‡
deföed
(
__FªeBSD__
)

27 
	~<o§ñd©e.h
>

30 
≠r_°©us_t
 
	$≠r_sockë_£nd
(
≠r_sockë_t
 *
sock
, c⁄° *
buf
,

31 
≠r_size_t
 *
Àn
)

33 
≠r_ssize_t
 
rv
;

35 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

36 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

37 
do_£À˘
;

41 
rv
 = 
	`wrôe
(
sock
->
sockëdes
, 
buf
, (*
Àn
));

42 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

44 
rv
 =-1 && (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

45 && (
sock
->
timeout
 > 0)) {

46 
≠r_°©us_t
 
¨v
;

47 
do_£À˘
:

48 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

49 i‡(
¨v
 !
APR_SUCCESS
) {

50 *
Àn
 = 0;

51  
¨v
;

55 
rv
 = 
	`wrôe
(
sock
->
sockëdes
, 
buf
, (*
Àn
));

56 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

59 i‡(
rv
 == -1) {

60 *
Àn
 = 0;

61  
î∫o
;

63 i‡((
sock
->
timeout
 > 0Ë&& (
rv
 < *
Àn
)) {

64 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

66 (*
Àn
Ë
rv
;

67  
APR_SUCCESS
;

68 
	}
}

70 
≠r_°©us_t
 
	$≠r_sockë_ªcv
(
≠r_sockë_t
 *
sock
, *
buf
, 
≠r_size_t
 *
Àn
)

72 
≠r_ssize_t
 
rv
;

73 
≠r_°©us_t
 
¨v
;

75 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_READ
) {

76 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_READ
;

77 
do_£À˘
;

81 
rv
 = 
	`ªad
(
sock
->
sockëdes
, 
buf
, (*
Àn
));

82 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

84 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

85 && (
sock
->
timeout
 > 0)) {

86 
do_£À˘
:

87 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 1);

88 i‡(
¨v
 !
APR_SUCCESS
) {

89 *
Àn
 = 0;

90  
¨v
;

94 
rv
 = 
	`ªad
(
sock
->
sockëdes
, 
buf
, (*
Àn
));

95 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

98 i‡(
rv
 == -1) {

99 (*
Àn
) = 0;

100  
î∫o
;

102 i‡((
sock
->
timeout
 > 0Ë&& (
rv
 < *
Àn
)) {

103 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_READ
;

105 (*
Àn
Ë
rv
;

106 i‡(
rv
 == 0) {

107  
APR_EOF
;

109  
APR_SUCCESS
;

110 
	}
}

112 
≠r_°©us_t
 
	$≠r_sockë_£ndto
(
≠r_sockë_t
 *
sock
, 
≠r_sockaddr_t
 *
whîe
,

113 
≠r_öt32_t
 
Êags
, c⁄° *
buf
,

114 
≠r_size_t
 *
Àn
)

116 
≠r_ssize_t
 
rv
;

119 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

120 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

121 
whîe
->
ßÀn
);

122 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

124 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

125 && (
sock
->
timeout
 > 0)) {

126 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

127 i‡(
¨v
 !
APR_SUCCESS
) {

128 *
Àn
 = 0;

129  
¨v
;

132 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

133 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

134 
whîe
->
ßÀn
);

135 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

138 i‡(
rv
 == -1) {

139 *
Àn
 = 0;

140  
î∫o
;

142 *
Àn
 = 
rv
;

143  
APR_SUCCESS
;

144 
	}
}

146 
≠r_°©us_t
 
	$≠r_sockë_ªcv‰om
(
≠r_sockaddr_t
 *
‰om
, 
≠r_sockë_t
 *
sock
,

147 
≠r_öt32_t
 
Êags
, *
buf
,

148 
≠r_size_t
 *
Àn
)

150 
≠r_ssize_t
 
rv
;

152 
‰om
->
ßÀn
 = (‰om->
ß
);

155 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

156 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

157 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

159 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

160 && (
sock
->
timeout
 > 0)) {

161 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 1);

162 i‡(
¨v
 !
APR_SUCCESS
) {

163 *
Àn
 = 0;

164  
¨v
;

167 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, (*
Àn
), 
Êags
,

168 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

169 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

172 i‡(
rv
 == -1) {

173 (*
Àn
) = 0;

174  
î∫o
;

181 i‡(
‰om
->
ßÀn
 > 
	`APR_OFFSETOF
(
sockaddr_ö
, 
sö_p‹t
)) {

182 
	`≠r_sockaddr_v¨s_£t
(
‰om
, from->
ß
.
sö
.
sö_Ámûy
,

183 
	`¡ohs
(
‰om
->
ß
.
sö
.
sö_p‹t
));

186 (*
Àn
Ë
rv
;

187 i‡(
rv
 =0 && 
sock
->
ty≥
 =
SOCK_STREAM
) {

188  
APR_EOF
;

191  
APR_SUCCESS
;

192 
	}
}

194 
≠r_°©us_t
 
	$≠r_sockë_£ndv
(
≠r_sockë_t
 * 
sock
, c⁄° 
iovec
 *
vec
,

195 
≠r_öt32_t
 
nvec
, 
≠r_size_t
 *
Àn
)

197 #ifde‡
HAVE_WRITEV


198 
≠r_ssize_t
 
rv
;

199 
≠r_size_t
 
ªque°ed_Àn
 = 0;

200 
≠r_öt32_t
 
i
;

202 
i
 = 0; i < 
nvec
; i++) {

203 
ªque°ed_Àn
 +
vec
[
i
].
iov_Àn
;

206 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

207 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

208 
do_£À˘
;

212 
rv
 = 
	`wrôev
(
sock
->
sockëdes
, 
vec
, 
nvec
);

213 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

215 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

216 && (
sock
->
timeout
 > 0)) {

217 
≠r_°©us_t
 
¨v
;

218 
do_£À˘
:

219 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

220 i‡(
¨v
 !
APR_SUCCESS
) {

221 *
Àn
 = 0;

222  
¨v
;

226 
rv
 = 
	`wrôev
(
sock
->
sockëdes
, 
vec
, 
nvec
);

227 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

230 i‡(
rv
 == -1) {

231 *
Àn
 = 0;

232  
î∫o
;

234 i‡((
sock
->
timeout
 > 0Ë&& (
rv
 < 
ªque°ed_Àn
)) {

235 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

237 (*
Àn
Ë
rv
;

238  
APR_SUCCESS
;

240 *
Àn
 = 
vec
[0].
iov_Àn
;

241  
	`≠r_sockë_£nd
(
sock
, 
vec
[0].
iov_ba£
, 
Àn
);

243 
	}
}

245 #i‡
APR_HAS_SENDFILE


253 
≠r_hdå_t
 
	gno_hdå
;

255 #i‡(
deföed
(
__löux__
Ë|| deföed(
__GNU__
)Ë&& deföed(
HAVE_WRITEV
)

257 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
, 
≠r_fûe_t
 *
fûe
,

258 
≠r_hdå_t
 *
hdå
, 
≠r_off_t
 *
off£t
,

259 
≠r_size_t
 *
Àn
, 
≠r_öt32_t
 
Êags
)

261 
rv
, 
nbyãs
 = 0, 
tŸÆ_hdrbyãs
, 
i
;

262 
≠r_°©us_t
 
¨v
;

264 #i‡
APR_HAS_LARGE_FILES
 && 
	`deföed
(
HAVE_SENDFILE64
)

265 
≠r_off_t
 
off
 = *
off£t
;

266 
	#£ndfûe
 
£ndfûe64


	)

268 #ñi‡
APR_HAS_LARGE_FILES
 && 
SIZEOF_OFF_T
 == 4

271 
off_t
 
off
;

273 i‡((
≠r_öt64_t
)*
off£t
 + *
Àn
 > 
INT_MAX
) {

274  
EINVAL
;

277 
off
 = *
off£t
;

280 
off_t
 
off
 = *
off£t
;

286 i‡((
off_t
Ë=8 && *
Àn
 > 
INT_MAX
) {

287 *
Àn
 = 
INT_MAX
;

291 i‡(!
hdå
) {

292 
hdå
 = &
no_hdå
;

295 i‡(
hdå
->
numhódîs
 > 0) {

296 
≠r_size_t
 
hdrbyãs
;

299 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 1);

300 i‡(
rv
 !
APR_SUCCESS
) {

301  
rv
;

305 
¨v
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
hódîs
, hdå->
numhódîs
,

306 &
hdrbyãs
);

307 i‡(
¨v
 !
APR_SUCCESS
) {

308 *
Àn
 = 0;

309  
î∫o
;

311 
nbyãs
 +
hdrbyãs
;

317 
tŸÆ_hdrbyãs
 = 0;

318 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

319 
tŸÆ_hdrbyãs
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

321 i‡(
hdrbyãs
 < 
tŸÆ_hdrbyãs
) {

322 *
Àn
 = 
hdrbyãs
;

323  
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

327 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

328 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

329 
do_£À˘
;

333 
rv
 = 
	`£ndfûe
(
sock
->
sockëdes
,

334 
fûe
->
fûedes
,

335 &
off
,

336 *
Àn
);

337 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

339 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

340 && (
sock
->
timeout
 > 0)) {

341 
do_£À˘
:

342 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

343 i‡(
¨v
 !
APR_SUCCESS
) {

344 *
Àn
 = 0;

345  
¨v
;

349 
rv
 = 
	`£ndfûe
(
sock
->
sockëdes
,

350 
fûe
->
fûedes
,

351 &
off
,

352 *
Àn
);

353 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

357 i‡(
rv
 == -1) {

358 *
Àn
 = 
nbyãs
;

359 
rv
 = 
î∫o
;

360 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

361  
rv
;

364 
nbyãs
 +
rv
;

366 i‡(
rv
 < *
Àn
) {

367 *
Àn
 = 
nbyãs
;

368 
¨v
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

369 i‡(
rv
 > 0) {

375 i‡(
sock
->
timeout
 > 0) {

376 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

378  
¨v
;

386  
APR_EOF
;

391 i‡(
hdå
->
numåaûîs
 > 0) {

392 
≠r_size_t
 
åbyãs
;

393 
¨v
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
åaûîs
, hdå->
numåaûîs
,

394 &
åbyãs
);

395 
nbyãs
 +
åbyãs
;

396 i‡(
¨v
 !
APR_SUCCESS
) {

397 *
Àn
 = 
nbyãs
;

398 
rv
 = 
î∫o
;

399 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

400  
rv
;

404 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

406 (*
Àn
Ë
nbyãs
;

407  
rv
 < 0 ? 
î∫o
 : 
APR_SUCCESS
;

408 
	}
}

410 #ñi‡
deföed
(
DARWIN
)

413 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
, 
≠r_fûe_t
 *
fûe
,

414 
≠r_hdå_t
 *
hdå
, 
≠r_off_t
 *
off£t
,

415 
≠r_size_t
 *
Àn
, 
≠r_öt32_t
 
Êags
)

417 
≠r_off_t
 
nbyãs
 = 0;

418 
≠r_off_t
 
byãs_to_£nd
 = *
Àn
;

419 
≠r_off_t
 
byãs_£¡
 = 0;

420 
≠r_°©us_t
 
¨v
;

421 
rv
 = 0;

424 
Êags
 = 0;

426 i‡(!
hdå
) {

427 
hdå
 = &
no_hdå
;

434 i‡(
hdå
->
numhódîs
 > 0) {

435 
≠r_size_t
 
hbyãs
;

436 
i
;

439 
¨v
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
hódîs
, hdå->
numhódîs
,

440 &
hbyãs
);

441 i‡(
¨v
 !
APR_SUCCESS
) {

442 *
Àn
 = 0;

443  
î∫o
;

445 
byãs_£¡
 = 
hbyãs
;

447 
hbyãs
 = 0;

448 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

449 
hbyãs
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

451 i‡(
byãs_£¡
 < 
hbyãs
) {

452 *
Àn
 = 
byãs_£¡
;

453  
APR_SUCCESS
;

458 i‡(!
byãs_to_£nd
) {

461 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

462 
≠r_°©us_t
 
¨v
;

463 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

464 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

465 i‡(
¨v
 !
APR_SUCCESS
) {

466 *
Àn
 = 0;

467  
¨v
;

471 
nbyãs
 = 
byãs_to_£nd
;

472 
rv
 = 
	`£ndfûe
(
fûe
->
fûedes
,

473 
sock
->
sockëdes
,

474 *
off£t
,

475 &
nbyãs
,

476 
NULL
,

477 
Êags
);

479 i‡(
rv
 == -1) {

480 i‡(
î∫o
 =
EAGAIN
) {

481 i‡(
sock
->
timeout
 > 0) {

482 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

488 i‡(
nbyãs
) {

489 
byãs_£¡
 +
nbyãs
;

491 (*
Àn
Ë
byãs_£¡
;

492  
APR_SUCCESS
;

497 
byãs_£¡
 +
nbyãs
;

498 i‡(
nbyãs
 == 0) {

502 (*
Àn
Ë
byãs_£¡
;

503  
APR_EOF
;

506 } 
rv
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

509 i‡(
hdå
->
numåaûîs
 > 0) {

510 
≠r_size_t
 
tbyãs
;

511 
¨v
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
åaûîs
, hdå->
numåaûîs
,

512 &
tbyãs
);

513 
byãs_£¡
 +
tbyãs
;

514 i‡(
¨v
 !
APR_SUCCESS
) {

515 *
Àn
 = 
byãs_£¡
;

516 
rv
 = 
î∫o
;

517  
rv
;

521 (*
Àn
Ë
byãs_£¡
;

522 i‡(
rv
 == -1) {

523  
î∫o
;

525  
APR_SUCCESS
;

526 
	}
}

528 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
)

531 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 * 
sock
, 
≠r_fûe_t
 * 
fûe
,

532 
≠r_hdå_t
 * 
hdå
, 
≠r_off_t
 * 
off£t
,

533 
≠r_size_t
 * 
Àn
, 
≠r_öt32_t
 
Êags
)

535 
off_t
 
nbyãs
 = 0;

536 
rv
;

537 #i‡
	`deföed
(
__FªeBSD_vîsi⁄
) && __FreeBSD_version < 460001

538 
i
;

540 
sf_hdå
 
hódî°ru˘
;

541 
≠r_size_t
 
byãs_to_£nd
 = *
Àn
;

544 
Êags
 = 0;

546 i‡(!
hdå
) {

547 
hdå
 = &
no_hdå
;

550 #i‡
	`deföed
(
__FªeBSD_vîsi⁄
) && __FreeBSD_version < 460001

551 i‡(
hdå
->
numhódîs
) {

560 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

561 
byãs_to_£nd
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

566 
hódî°ru˘
.
hódîs
 = 
hdå
->headers;

567 
hódî°ru˘
.
hdr_˙t
 = 
hdå
->
numhódîs
;

568 
hódî°ru˘
.
åaûîs
 = 
hdå
->trailers;

569 
hódî°ru˘
.
ål_˙t
 = 
hdå
->
numåaûîs
;

573 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

574 
≠r_°©us_t
 
¨v
;

575 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

576 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

577 i‡(
¨v
 !
APR_SUCCESS
) {

578 *
Àn
 = 0;

579  
¨v
;

582 i‡(
byãs_to_£nd
) {

587 
rv
 = 
	`£ndfûe
(
fûe
->
fûedes
,

588 
sock
->
sockëdes
,

589 *
off£t
,

590 
byãs_to_£nd
,

591 &
hódî°ru˘
,

592 &
nbyãs
,

593 
Êags
);

595 i‡(
rv
 == -1) {

596 i‡(
î∫o
 =
EAGAIN
) {

597 i‡(
sock
->
timeout
 > 0) {

598 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

604 i‡(
nbyãs
) {

606 (*
Àn
Ë
nbyãs
;

607  
APR_SUCCESS
;

612 i‡(
nbyãs
 == 0) {

616 (*
Àn
Ë
nbyãs
;

617  
APR_EOF
;

624 
rv
 = 
	`wrôev
(
sock
->
sockëdes
,

625 
hdå
->
åaûîs
,

626 
hdå
->
numåaûîs
);

627 i‡(
rv
 > 0) {

628 
nbyãs
 = 
rv
;

629 
rv
 = 0;

632 
nbyãs
 = 0;

635 i‡((
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
)

636 && (
sock
->
timeout
 > 0)) {

637 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

638 i‡(
¨v
 !
APR_SUCCESS
) {

639 *
Àn
 = 0;

640  
¨v
;

643 } 
rv
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

645 (*
Àn
Ë
nbyãs
;

646 i‡(
rv
 == -1) {

647  
î∫o
;

649  
APR_SUCCESS
;

650 
	}
}

652 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

667 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
, 
≠r_fûe_t
 *
fûe
,

668 
≠r_hdå_t
 *
hdå
, 
≠r_off_t
 *
off£t
,

669 
≠r_size_t
 *
Àn
, 
≠r_öt32_t
 
Êags
)

671 
i
;

672 
≠r_ssize_t
 
rc
;

673 
≠r_size_t
 
nbyãs
 = *
Àn
, 
hódîÀn
, 
åaûîÀn
;

674 
iovec
 
hdå¨øy
[2];

675 *
hódîbuf
, *
åaûîbuf
;

677 #i‡
APR_HAS_LARGE_FILES
 && 
	`deföed
(
HAVE_SENDFILE64
)

679 
	#£ndfûe
 
£ndfûe64


	)

680 
≠r_off_t
 
off
 = *
off£t
;

682 #ñi‡
APR_HAS_LARGE_FILES
 && 
SIZEOF_OFF_T
 == 4

685 
off_t
 
off
;

687 i‡((
≠r_öt64_t
)*
off£t
 + *
Àn
 > 
INT_MAX
) {

688  
EINVAL
;

690 
off
 = *
off£t
;

692 
≠r_off_t
 
off
 = *
off£t
;

695 i‡(!
hdå
) {

696 
hdå
 = &
no_hdå
;

700 
Êags
 = 0;

706 
hdå
->
numhódîs
) {

708 
hdå¨øy
[0].
iov_ba£
 = 
NULL
;

709 
hdå¨øy
[0].
iov_Àn
 = 0;

712 
hdå¨øy
[0] = 
hdå
->
hódîs
[0];

715 
hódîÀn
 = 0;

716 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

717 
hódîÀn
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

721 
hódîbuf
 = 
hdå¨øy
[0].
iov_ba£
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, 
hódîÀn
);

722 
hdå¨øy
[0].
iov_Àn
 = 
hódîÀn
;

724 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

725 
	`mem˝y
(
hódîbuf
, 
hdå
->
hódîs
[
i
].
iov_ba£
,

726 
hdå
->
hódîs
[
i
].
iov_Àn
);

727 
hódîbuf
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

731 
hdå
->
numåaûîs
) {

733 
hdå¨øy
[1].
iov_ba£
 = 
NULL
;

734 
hdå¨øy
[1].
iov_Àn
 = 0;

737 
hdå¨øy
[1] = 
hdå
->
åaûîs
[0];

740 
åaûîÀn
 = 0;

741 
i
 = 0; i < 
hdå
->
numåaûîs
; i++) {

742 
åaûîÀn
 +
hdå
->
åaûîs
[
i
].
iov_Àn
;

746 
åaûîbuf
 = 
hdå¨øy
[1].
iov_ba£
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, 
åaûîÀn
);

747 
hdå¨øy
[1].
iov_Àn
 = 
åaûîÀn
;

749 
i
 = 0; i < 
hdå
->
numåaûîs
; i++) {

750 
	`mem˝y
(
åaûîbuf
, 
hdå
->
åaûîs
[
i
].
iov_ba£
,

751 
hdå
->
åaûîs
[
i
].
iov_Àn
);

752 
åaûîbuf
 +
hdå
->
åaûîs
[
i
].
iov_Àn
;

757 i‡(
nbyãs
) {

758 
rc
 = 
	`£ndfûe
(
sock
->
sockëdes
,

759 
fûe
->
fûedes
,

760 
off
,

761 
nbyãs
,

762 
hdå¨øy
,

763 
Êags
);

766 
rc
 = 
	`wrôev
(
sock
->
sockëdes
, 
hdå¨øy
, 2);

768 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

770 (
rc
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

771 && (
sock
->
timeout
 > 0)) {

772 
≠r_°©us_t
 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

774 i‡(
¨v
 !
APR_SUCCESS
) {

775 *
Àn
 = 0;

776  
¨v
;

780 i‡(
nbyãs
) {

781 
rc
 = 
	`£ndfûe
(
sock
->
sockëdes
,

782 
fûe
->
fûedes
,

783 
off
,

784 
nbyãs
,

785 
hdå¨øy
,

786 
Êags
);

789 
rc
 = 
	`wrôev
(
sock
->
sockëdes
, 
hdå¨øy
, 2);

791 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

795 i‡(
rc
 == -1) {

796 *
Àn
 = 0;

797  
î∫o
;

801 *
Àn
 = 
rc
;

802  
APR_SUCCESS
;

803 
	}
}

804 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__MVS__
)

815 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 * 
sock
, 
≠r_fûe_t
 * 
fûe
,

816 
≠r_hdå_t
 * 
hdå
, 
≠r_off_t
 * 
off£t
,

817 
≠r_size_t
 * 
Àn
, 
≠r_öt32_t
 
Êags
)

819 
i
, 
±r
, 
rv
 = 0;

820 * 
hbuf
=
NULL
, * 
tbuf
=NULL;

821 
≠r_°©us_t
 
¨v
;

822 
sf_∑rms
 
∑rms
;

824 i‡(!
hdå
) {

825 
hdå
 = &
no_hdå
;

829 
Êags
 = 0;

840 
∑rms
.
hódî_Àngth
 = 0;

841 i‡(
hdå
 && hdå->
numhódîs
) {

842 i‡(
hdå
->
numhódîs
 == 1) {

843 
∑rms
.
hódî_d©a
 = 
hdå
->
hódîs
[0].
iov_ba£
;

844 
∑rms
.
hódî_Àngth
 = 
hdå
->
hódîs
[0].
iov_Àn
;

847 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

848 
∑rms
.
hódî_Àngth
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

852 
hbuf
 = 
	`mÆloc
(
∑rms
.
hódî_Àngth
);

857 
hbuf
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, 
∑rms
.
hódî_Àngth
);

859 
±r
 = 0;

860 
i
 = 0; i < 
hdå
->
numhódîs
; i++) {

861 
	`mem˝y
((*)
hbuf
 + 
±r
, 
hdå
->
hódîs
[
i
].
iov_ba£
,

862 
hdå
->
hódîs
[
i
].
iov_Àn
);

863 
±r
 +
hdå
->
hódîs
[
i
].
iov_Àn
;

865 
∑rms
.
hódî_d©a
 = 
hbuf
;

868 
∑rms
.
hódî_d©a
 = 
NULL
;

869 
∑rms
.
åaûî_Àngth
 = 0;

870 i‡(
hdå
 && hdå->
numåaûîs
) {

871 i‡(
hdå
->
numåaûîs
 == 1) {

872 
∑rms
.
åaûî_d©a
 = 
hdå
->
åaûîs
[0].
iov_ba£
;

873 
∑rms
.
åaûî_Àngth
 = 
hdå
->
åaûîs
[0].
iov_Àn
;

876 
i
 = 0; i < 
hdå
->
numåaûîs
; i++) {

877 
∑rms
.
åaûî_Àngth
 +
hdå
->
åaûîs
[
i
].
iov_Àn
;

881 
tbuf
 = 
	`mÆloc
(
∑rms
.
åaûî_Àngth
);

883 
tbuf
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, 
∑rms
.
åaûî_Àngth
);

885 
±r
 = 0;

886 
i
 = 0; i < 
hdå
->
numåaûîs
; i++) {

887 
	`mem˝y
((*)
tbuf
 + 
±r
, 
hdå
->
åaûîs
[
i
].
iov_ba£
,

888 
hdå
->
åaûîs
[
i
].
iov_Àn
);

889 
±r
 +
hdå
->
åaûîs
[
i
].
iov_Àn
;

891 
∑rms
.
åaûî_d©a
 = 
tbuf
;

895 
∑rms
.
åaûî_d©a
 = 
NULL
;

900 
∑rms
.
fûe_des¸ùt‹
 = 
fûe
->
fûedes
;

901 
∑rms
.
fûe_off£t
 = *
off£t
;

902 
∑rms
.
fûe_byãs
 = *
Àn
;

906 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

907 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

908 
do_£À˘
;

912 
rv
 = 
	`£nd_fûe
(&(
sock
->
sockëdes
),

913 &(
∑rms
),

914 
Êags
);

915 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

917 (
rv
 =-1Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
)

918 && (
sock
->
timeout
 > 0)) {

919 
do_£À˘
:

920 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

921 i‡(
¨v
 !
APR_SUCCESS
) {

922 *
Àn
 = 0;

923  
¨v
;

927 
rv
 = 
	`£nd_fûe
(&(
sock
->
sockëdes
),

928 &(
∑rms
),

929 
Êags
);

930 } 
rv
 =-1 && 
î∫o
 =
EINTR
);

934 (*
Àn
Ë
∑rms
.
byãs_£¡
;

938 if(
hbuf
Ë
	`‰ì
(hbuf);

939 if(
tbuf
Ë
	`‰ì
(tbuf);

942 i‡(
rv
 == -1) {

943  
î∫o
;

946 i‡((
sock
->
timeout
 > 0)

947 && (
∑rms
.
byãs_£¡


948 < (
∑rms
.
fûe_byãs
 +Ö¨ms.
hódî_Àngth
 +Ö¨ms.
åaûî_Àngth
))) {

949 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

952  
APR_SUCCESS
;

953 
	}
}

954 #ñi‡
deföed
(
__osf__
Ë&& deföed (
__Æpha
)

959 #ñi‡
deföed
(
HAVE_SENDFILEV
)

972 #i‡
APR_HAS_LARGE_FILES
 && 
deföed
(
HAVE_SENDFILEV64
)

973 
	#£ndfûevec_t
 
£ndfûevec64_t


	)

974 
	#£ndfûev
 
£ndfûev64


	)

977 
≠r_°©us_t
 
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
, 
≠r_fûe_t
 *
fûe
,

978 
≠r_hdå_t
 *
hdå
, 
≠r_off_t
 *
off£t
,

979 
≠r_size_t
 *
Àn
, 
≠r_öt32_t
 
Êags
)

981 
≠r_°©us_t
 
rv
, 
¨v
;

982 
≠r_size_t
 
nbyãs
;

983 
£ndfûevec_t
 *
sfv
;

984 
vecs
, 
curvec
, 
i
, 
ª≥©
;

985 
≠r_size_t
 
ªque°ed_Àn
 = 0;

987 i‡(!
hdå
) {

988 
hdå
 = &
no_hdå
;

992 
Êags
 = 0;

995 
vecs
 = 
hdå
->
numhódîs
 + hdå->
numåaûîs
 + 1;

996 
sfv
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, (
£ndfûevec_t
Ë* 
vecs
);

998 
curvec
 = 0;

1001 
i
 = 0; i < 
hdå
->
numhódîs
; i++, 
curvec
++) {

1002 
sfv
[
curvec
].
sfv_fd
 = 
SFV_FD_SELF
;

1003 
sfv
[
curvec
].
sfv_Êag
 = 0;

1006 
sfv
[
curvec
].
sfv_off
 = ()
hdå
->
hódîs
[
i
].
iov_ba£
;

1007 
sfv
[
curvec
].
sfv_Àn
 = 
hdå
->
hódîs
[
i
].
iov_Àn
;

1008 
ªque°ed_Àn
 +
sfv
[
curvec
].
sfv_Àn
;

1012 i‡(*
Àn
)

1014 
sfv
[
curvec
].
sfv_fd
 = 
fûe
->
fûedes
;

1015 
sfv
[
curvec
].
sfv_Êag
 = 0;

1016 
sfv
[
curvec
].
sfv_off
 = *
off£t
;

1017 
sfv
[
curvec
].
sfv_Àn
 = *
Àn
;

1018 
ªque°ed_Àn
 +
sfv
[
curvec
].
sfv_Àn
;

1020 
curvec
++;

1023 
vecs
--;

1027 
i
 = 0; i < 
hdå
->
numåaûîs
; i++, 
curvec
++) {

1028 
sfv
[
curvec
].
sfv_fd
 = 
SFV_FD_SELF
;

1029 
sfv
[
curvec
].
sfv_Êag
 = 0;

1030 
sfv
[
curvec
].
sfv_off
 = ()
hdå
->
åaûîs
[
i
].
iov_ba£
;

1031 
sfv
[
curvec
].
sfv_Àn
 = 
hdå
->
åaûîs
[
i
].
iov_Àn
;

1032 
ªque°ed_Àn
 +
sfv
[
curvec
].
sfv_Àn
;

1038 i‡(
sock
->
›ti⁄s
 & 
APR_INCOMPLETE_WRITE
) {

1039 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_WRITE
;

1040 
¨v
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

1041 i‡(
¨v
 !
APR_SUCCESS
) {

1042 *
Àn
 = 0;

1043  
¨v
;

1057 
¨v
 = 0;

1060 
ª≥©
 = 0;

1063 
rv
 = 
	`£ndfûev
(
sock
->
sockëdes
, 
sfv
, 
vecs
, &
nbyãs
);

1065 i‡(
rv
 =-1 && 
î∫o
 =
EAGAIN
) {

1066 i‡(
nbyãs
) {

1067 
rv
 = 0;

1069 i‡(!
¨v
 && (
sock
->
timeout
 > 0)) {

1070 
≠r_°©us_t
 
t
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

1072 i‡(
t
 !
APR_SUCCESS
) {

1073 *
Àn
 = 0;

1074  
t
;

1077 
¨v
 = 1;

1078 
ª≥©
 = 1;

1081 } (
rv
 =-1 && 
î∫o
 =
EINTR
Ë|| 
ª≥©
);

1083 i‡(
rv
 == -1) {

1084 *
Àn
 = 0;

1085  
î∫o
;

1089 *
Àn
 = 
nbyãs
;

1091 i‡(
nbyãs
 == 0) {

1095  
APR_EOF
;

1098 i‡((
sock
->
timeout
 > 0Ë&& (*
Àn
 < 
ªque°ed_Àn
)) {

1099 
sock
->
›ti⁄s
 |
APR_INCOMPLETE_WRITE
;

1101  
APR_SUCCESS
;

1102 
	}
}

1104 #îr‹ 
APR
 
has
 
dëe˘ed
 
£ndfûe
 
⁄
 
your
 
sy°em
, 
but
 
nobody
 ha†
wrôãn
 
a


1105 #îr‹ 
vîsi⁄
 
of
 
ô
 
APR
 
yë
. 
To
 
gë
 
∑°
 
this
, 
eôhî
 
wrôe


1106 #îr‹ 
≠r_sockë_£ndfûe
 
‹
 
ch™ge
 
APR_HAS_SENDFILE
 
ö
 
≠r
.
h
 
to
 0.

1108 
	gTru64
/
	gOSF1
 */

	@network_io/unix/sockaddr.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_¥iv©e.h
"

24 #i‡
APR_HAVE_STDLIB_H


25 
	~<°dlib.h
>

28 
	#APR_WANT_STRFUNC


	)

29 
	~"≠r_w™t.h
"

31 
	s≠r_ùsub√t_t
 {

32 
	mÁmûy
;

33 #i‡
APR_HAVE_IPV6


34 
≠r_uöt32_t
 
	msub
[4];

35 
≠r_uöt32_t
 
	mmask
[4];

37 
≠r_uöt32_t
 
	msub
[1];

38 
≠r_uöt32_t
 
	mmask
[1];

42 #i‡!
deföed
(
NETWARE
Ë&& !deföed(
WIN32
)

43 #ifde‡
HAVE_SET_H_ERRNO


44 
	#SET_H_ERRNO
(
√wvÆ
Ë
	`£t_h_î∫o
“ewvÆ)

	)

46 
	#SET_H_ERRNO
(
√wvÆ
Ë
h_î∫o
 = (√wvÆ)

	)

49 
	#SET_H_ERRNO
(
√wvÆ
)

	)

52 #i‡
APR_HAS_THREADS
 && !
deföed
(
GETHOSTBYNAME_IS_THREAD_SAFE
) && \

53 
	$deföed
(
HAVE_GETHOSTBYNAME_R
)

58 
	#GETHOSTBYNAME_BUFLEN
 512

	)

61 #ifde‡
_AIX


65 
	#AIX_SERVNAME_HACK
 1

	)

67 
	#AIX_SERVNAME_HACK
 0

	)

70 #ifde‡
_WIN32_WCE


74 *
	$gë£rvby«me
(c⁄° *
«me
, c⁄° *
¥Ÿo
)

76  
NULL
;

77 
	}
}

80 
≠r_°©us_t
 
	$gë_loˇl_addr
(
≠r_sockë_t
 *
sock
)

82 
sock
->
loˇl_addr
->
ßÀn
 = (sock->loˇl_addr->
ß
);

83 i‡(
	`gësock«me
(
sock
->
sockëdes
, (
sockaddr
 *)&sock->
loˇl_addr
->
ß
,

84 &
sock
->
loˇl_addr
->
ßÀn
) < 0) {

85  
	`≠r_gë_√tos_îr‹
();

88 
sock
->
loˇl_p‹t_unknown
 = sock->
loˇl_öãrÁ˚_unknown
 = 0;

90 
sock
->
loˇl_addr
->
p‹t
 = 
	`¡ohs
(sock->loˇl_addr->
ß
.
sö
.
sö_p‹t
);

91  
APR_SUCCESS
;

93 
	}
}

95 
≠r_°©us_t
 
	$gë_ªmŸe_addr
(
≠r_sockë_t
 *
sock
)

97 
sock
->
ªmŸe_addr
->
ßÀn
 = (sock->ªmŸe_addr->
ß
);

98 i‡(
	`gë≥î«me
(
sock
->
sockëdes
, (
sockaddr
 *)&sock->
ªmŸe_addr
->
ß
,

99 &
sock
->
ªmŸe_addr
->
ßÀn
) < 0) {

100  
	`≠r_gë_√tos_îr‹
();

103 
sock
->
ªmŸe_addr_unknown
 = 0;

105 
sock
->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
(sock->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

106  
APR_SUCCESS
;

108 
	}
}

110 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockaddr_ù_gëbuf
(*
buf
, 
≠r_size_t
 
buÊí
,

111 
≠r_sockaddr_t
 *
sockaddr
)

113 i‡(!
	`≠r_öë_¡›
(
sockaddr
->
Ámûy
, sockaddr->
ùaddr_±r
, 
buf
, 
buÊí
)) {

114  
APR_ENOSPC
;

117 #i‡
APR_HAVE_IPV6


118 i‡(
sockaddr
->
Ámûy
 =
AF_INET6


119 && 
	`IN6_IS_ADDR_V4MAPPED
((
ö6_addr
 *)
sockaddr
->
ùaddr_±r
)

120 && 
buÊí
 > 
	`°æí
("::ffff:")) {

125 
	`memmove
(
buf
, bu‡+ 
	`°æí
("::ffff:"),

126 
	`°æí
(
buf
 + strlen("::ffff:"))+1);

130 
buf
[
buÊí
-1] = '\0';

131  
APR_SUCCESS
;

132 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockaddr_ù_gë
(**
addr
,

135 
≠r_sockaddr_t
 *
sockaddr
)

137 *
addr
 = 
	`≠r_∑Œoc
(
sockaddr
->
poﬁ
, sockaddr->
addr_°r_Àn
);

138  
	`≠r_sockaddr_ù_gëbuf
(*
addr
, 
sockaddr
->
addr_°r_Àn
, sockaddr);

139 
	}
}

141 
	$≠r_sockaddr_v¨s_£t
(
≠r_sockaddr_t
 *
addr
, 
Ámûy
, 
≠r_p‹t_t
 
p‹t
)

143 
addr
->
Ámûy
 = family;

144 
addr
->
ß
.
sö
.
sö_Ámûy
 = 
Ámûy
;

145 i‡(
p‹t
) {

147 
addr
->
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

148 
addr
->
p‹t
 =Öort;

150 #i‡
AIX_SERVNAME_HACK


152 
addr
->
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

156 i‡(
Ámûy
 =
APR_INET
) {

157 
addr
->
ßÀn
 = (
sockaddr_ö
);

158 
addr
->
addr_°r_Àn
 = 16;

159 
addr
->
ùaddr_±r
 = &◊ddr->
ß
.
sö
.
sö_addr
);

160 
addr
->
ùaddr_Àn
 = (
ö_addr
);

162 #i‡
APR_HAVE_IPV6


163 i‡(
Ámûy
 =
APR_INET6
) {

164 
addr
->
ßÀn
 = (
sockaddr_ö6
);

165 
addr
->
addr_°r_Àn
 = 46;

166 
addr
->
ùaddr_±r
 = &◊ddr->
ß
.
sö6
.
sö6_addr
);

167 
addr
->
ùaddr_Àn
 = (
ö6_addr
);

170 
	}
}

172 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_addr_gë
(
≠r_sockaddr_t
 **
ß
,

173 
≠r_öãrÁ˚_e
 
which
,

174 
≠r_sockë_t
 *
sock
)

176 i‡(
which
 =
APR_LOCAL
) {

177 i‡(
sock
->
loˇl_öãrÁ˚_unknown
 || sock->
loˇl_p‹t_unknown
) {

178 
≠r_°©us_t
 
rv
 = 
	`gë_loˇl_addr
(
sock
);

180 i‡(
rv
 !
APR_SUCCESS
) {

181  
rv
;

184 *
ß
 = 
sock
->
loˇl_addr
;

186 i‡(
which
 =
APR_REMOTE
) {

187 i‡(
sock
->
ªmŸe_addr_unknown
) {

188 
≠r_°©us_t
 
rv
 = 
	`gë_ªmŸe_addr
(
sock
);

190 i‡(
rv
 !
APR_SUCCESS
) {

191  
rv
;

194 *
ß
 = 
sock
->
ªmŸe_addr
;

197 *
ß
 = 
NULL
;

198  
APR_EINVAL
;

200  
APR_SUCCESS
;

201 
	}
}

203 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_∑r£_addr_p‹t
(**
addr
,

204 **
sc›e_id
,

205 
≠r_p‹t_t
 *
p‹t
,

206 c⁄° *
°r
,

207 
≠r_poﬁ_t
 *
p
)

209 c⁄° *
ch
, *
œ°ch¨
;

210 
big_p‹t
;

211 
≠r_size_t
 
addæí
;

213 *
addr
 = 
NULL
;

214 *
sc›e_id
 = 
NULL
;

215 *
p‹t
 = 0;

220 
ch
 = 
œ°ch¨
 = 
°r
 + 
	`°æí
(str) - 1;

221 
ch
 >
°r
 && 
	`≠r_isdigô
(*ch)) {

222 --
ch
;

225 i‡(
ch
 < 
°r
) {

226 
big_p‹t
 = 
	`©oi
(
°r
);

227 i‡(
big_p‹t
 < 1 || big_port > 65535) {

228  
APR_EINVAL
;

230 *
p‹t
 = 
big_p‹t
;

231  
APR_SUCCESS
;

234 i‡(*
ch
 =':' && ch < 
œ°ch¨
) {

235 i‡(
ch
 =
°r
) {

236  
APR_EINVAL
;

238 
big_p‹t
 = 
	`©oi
(
ch
 + 1);

239 i‡(
big_p‹t
 < 1 || big_port > 65535) {

240  
APR_EINVAL
;

242 *
p‹t
 = 
big_p‹t
;

243 
œ°ch¨
 = 
ch
 - 1;

247 
addæí
 = 
œ°ch¨
 - 
°r
 + 1;

253 #i‡
APR_HAVE_IPV6


254 i‡(*
°r
 == '[') {

255 c⁄° *
íd_bøckë
 = 
	`memchr
(
°r
, ']', 
addæí
);

256 
ö6_addr
 
ùaddr
;

257 c⁄° *
sc›e_dñim
;

259 i‡(!
íd_bøckë
 ||Énd_bøckë !
œ°ch¨
) {

260 *
p‹t
 = 0;

261  
APR_EINVAL
;

265 
sc›e_dñim
 = 
	`memchr
(
°r
, '%', 
addæí
);

266 i‡(
sc›e_dñim
) {

267 i‡(
sc›e_dñim
 =
íd_bøckë
 - 1) {

268 *
p‹t
 = 0;

269  
APR_EINVAL
;

271 
addæí
 = 
sc›e_dñim
 - 
°r
 - 1;

272 *
sc›e_id
 = 
	`≠r_∑Œoc
(
p
, 
íd_bøckë
 - 
sc›e_dñim
);

273 
	`mem˝y
(*
sc›e_id
, 
sc›e_dñim
 + 1, 
íd_bøckë
 - scope_delim - 1);

274 (*
sc›e_id
)[
íd_bøckë
 - 
sc›e_dñim
 - 1] = '\0';

277 
addæí
 =áddrlen - 2;

280 *
addr
 = 
	`≠r_∑Œoc
(
p
, 
addæí
 + 1);

281 
	`mem˝y
(*
addr
,

282 
°r
 + 1,

283 
addæí
);

284 (*
addr
)[
addæí
] = '\0';

285 i‡(
	`≠r_öë_±⁄
(
AF_INET6
, *
addr
, &
ùaddr
) != 1) {

286 *
addr
 = 
NULL
;

287 *
sc›e_id
 = 
NULL
;

288 *
p‹t
 = 0;

289  
APR_EINVAL
;

298 *
addr
 = 
	`≠r_∑Œoc
(
p
, 
addæí
 + 1);

299 
	`mem˝y
(*
addr
, 
°r
, 
addæí
);

300 (*
addr
)[
addæí
] = '\0';

302  
APR_SUCCESS
;

303 
	}
}

305 #i‡
deföed
(
HAVE_GETADDRINFO
)

307 
≠r_°©us_t
 
	$ˇŒ_ªsﬁvî
(
≠r_sockaddr_t
 **
ß
,

308 c⁄° *
ho°«me
, 
≠r_öt32_t
 
Ámûy
,

309 
≠r_p‹t_t
 
p‹t
, 
≠r_öt32_t
 
Êags
,

310 
≠r_poﬁ_t
 *
p
)

312 
addröfo
 
höts
, *
ai
, *
ai_li°
;

313 
≠r_sockaddr_t
 *
¥ev_ß
;

314 
îr‹
;

315 *
£rv«me
 = 
NULL
;

317 
	`mem£t
(&
höts
, 0, (hints));

318 
höts
.
ai_Ámûy
 = 
Ámûy
;

319 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

320 #ifde‡
HAVE_GAI_ADDRCONFIG


321 i‡(
Ámûy
 =
APR_UNSPEC
) {

325 
höts
.
ai_Êags
 = 
AI_ADDRCONFIG
;

328 if(
ho°«me
 =
NULL
) {

329 #ifde‡
AI_PASSIVE


332 
höts
.
ai_Êags
 |
AI_PASSIVE
;

337 #ifde‡
OSF1


342 
ho°«me
 = 
Ámûy
 =
AF_INET6
 ? "::" : "0.0.0.0";

343 
£rv«me
 = 
NULL
;

344 #ifde‡
AI_NUMERICHOST


345 
höts
.
ai_Êags
 |
AI_NUMERICHOST
;

348 #i‡
AIX_SERVNAME_HACK


349 i‡(!
p‹t
) {

350 
£rv«me
 = "1";

354 
£rv«me
 = 
	`≠r_ôﬂ
(
p
, 
p‹t
);

357 
îr‹
 = 
	`gëaddröfo
(
ho°«me
, 
£rv«me
, &
höts
, &
ai_li°
);

358 #ifde‡
HAVE_GAI_ADDRCONFIG


374 i‡((
Ámûy
 =
APR_UNSPEC
Ë&& (
îr‹
 =
EAI_BADFLAGS


375 #ifde‡
EAI_ADDRFAMILY


376 || 
îr‹
 =
EAI_ADDRFAMILY


379 
höts
.
ai_Êags
 &~
AI_ADDRCONFIG
;

380 
îr‹
 = 
	`gëaddröfo
(
ho°«me
, 
£rv«me
, &
höts
, &
ai_li°
);

383 i‡(
îr‹
) {

384 #i‡
	`deföed
(
WIN32
)

385  
	`≠r_gë_√tos_îr‹
();

387 i‡(
îr‹
 =
EAI_SYSTEM
) {

388  
î∫o
 ?Éºnÿ: 
APR_EGENERAL
;

397 #i‡
	`deföed
(
NEGATIVE_EAI
)

398 
îr‹
 = -error;

400  
îr‹
 + 
APR_OS_START_EAIERR
;

405 
¥ev_ß
 = 
NULL
;

406 
ai
 = 
ai_li°
;

407 
ai
) {

408 
≠r_sockaddr_t
 *
√w_ß
;

413 #i‡
APR_HAVE_IPV6


414 i‡(
ai
->
ai_Ámûy
 !
AF_INET
 &&ái->ai_Ámûy !
AF_INET6
) {

416 i‡(
ai
->
ai_Ámûy
 !
AF_INET
) {

418 
ai
 =ái->
ai_√xt
;

422 
√w_ß
 = 
	`≠r_pˇŒoc
(
p
, (
≠r_sockaddr_t
));

424 
√w_ß
->
poﬁ
 = 
p
;

425 
	`mem˝y
(&
√w_ß
->
ß
, 
ai
->
ai_addr
,ái->
ai_addæí
);

426 
	`≠r_sockaddr_v¨s_£t
(
√w_ß
, 
ai
->
ai_Ámûy
, 
p‹t
);

428 i‡(!
¥ev_ß
) {

429 i‡(
ho°«me
) {

430 
√w_ß
->
ho°«me
 = 
	`≠r_p°rdup
(
p
, hostname);

432 *
ß
 = 
√w_ß
;

435 
√w_ß
->
ho°«me
 = 
¥ev_ß
->hostname;

436 
¥ev_ß
->
√xt
 = 
√w_ß
;

439 
¥ev_ß
 = 
√w_ß
;

440 
ai
 =ái->
ai_√xt
;

442 
	`‰ìaddröfo
(
ai_li°
);

444 i‡(
¥ev_ß
 =
NULL
) {

449  
APR_EGENERAL
;

452  
APR_SUCCESS
;

453 
	}
}

455 
≠r_°©us_t
 
	$föd_addªs£s
(
≠r_sockaddr_t
 **
ß
,

456 c⁄° *
ho°«me
, 
≠r_öt32_t
 
Ámûy
,

457 
≠r_p‹t_t
 
p‹t
, 
≠r_öt32_t
 
Êags
,

458 
≠r_poﬁ_t
 *
p
)

460 i‡(
Êags
 & 
APR_IPV4_ADDR_OK
) {

461 
≠r_°©us_t
 
îr‹
 = 
	`ˇŒ_ªsﬁvî
(
ß
, 
ho°«me
, 
AF_INET
, 
p‹t
, 
Êags
, 
p
);

463 #i‡
APR_HAVE_IPV6


464 i‡(
îr‹
) {

465 
Ámûy
 = 
AF_INET6
;

469  
îr‹
;

471 #i‡
APR_HAVE_IPV6


472 i‡(
Êags
 & 
APR_IPV6_ADDR_OK
) {

473 
≠r_°©us_t
 
îr‹
 = 
	`ˇŒ_ªsﬁvî
(
ß
, 
ho°«me
, 
AF_INET6
, 
p‹t
, 
Êags
, 
p
);

475 i‡(
îr‹
) {

476 
Ámûy
 = 
AF_INET
;

479  
APR_SUCCESS
;

484  
	`ˇŒ_ªsﬁvî
(
ß
, 
ho°«me
, 
Ámûy
, 
p‹t
, 
Êags
, 
p
);

485 
	}
}

489 
≠r_°©us_t
 
	$föd_addªs£s
(
≠r_sockaddr_t
 **
ß
,

490 c⁄° *
ho°«me
, 
≠r_öt32_t
 
Ámûy
,

491 
≠r_p‹t_t
 
p‹t
, 
≠r_öt32_t
 
Êags
,

492 
≠r_poﬁ_t
 *
p
)

494 
ho°ít
 *
hp
;

495 
≠r_sockaddr_t
 *
¥ev_ß
;

496 
cuøddr
;

497 #i‡
APR_HAS_THREADS
 && !
	`deföed
(
GETHOSTBYNAME_IS_THREAD_SAFE
) && \

498 
	`deföed
(
HAVE_GETHOSTBYNAME_R
Ë&& !deföed(
BEOS
)

499 #ifde‡
GETHOSTBYNAME_R_HOSTENT_DATA


500 
ho°ít_d©a
 
hd
;

504 
tmp
[
GETHOSTBYNAME_BUFLEN
];

506 
ho°îr‹
;

508 
ho°ít
 
hs
;

509 
ö_addr
 
ùaddr
;

510 *
addr_li°
[2];

511 c⁄° *
‹ig_ho°«me
 = 
ho°«me
;

513 i‡(
ho°«me
 =
NULL
) {

515 
ho°«me
 = "0.0.0.0";

518 i‡(*
ho°«me
 >= '0' && *hostname <= '9' &&

519 
	`°r•n
(
ho°«me
, "0123456789."Ë=
	`°æí
(hostname)) {

521 
ùaddr
.
s_addr
 = 
	`öë_addr
(
ho°«me
);

522 
addr_li°
[0] = (*)&
ùaddr
;

523 
addr_li°
[1] = 
NULL
;

524 
hs
.
h_addr_li°
 = (**)
addr_li°
;

525 
hp
 = &
hs
;

528 #i‡
APR_HAS_THREADS
 && !
	`deföed
(
GETHOSTBYNAME_IS_THREAD_SAFE
) && \

529 
	`deföed
(
HAVE_GETHOSTBYNAME_R
Ë&& !deföed(
BEOS
)

530 #i‡
	`deföed
(
GETHOSTBYNAME_R_HOSTENT_DATA
)

532 
	`gëho°by«me_r
(
ho°«me
, &
hs
, &
hd
);

533 
hp
 = &
hs
;

535 #i‡
	`deföed
(
GETHOSTBYNAME_R_GLIBC2
)

537 
	`gëho°by«me_r
(
ho°«me
, &
hs
, 
tmp
, 
GETHOSTBYNAME_BUFLEN
 - 1,

538 &
hp
, &
ho°îr‹
);

541 
hp
 = 
	`gëho°by«me_r
(
ho°«me
, &
hs
, 
tmp
, 
GETHOSTBYNAME_BUFLEN
 - 1,

542 &
ho°îr‹
);

544 i‡(!
hp
) {

545  (
ho°îr‹
 + 
APR_OS_START_SYSERR
);

549 
hp
 = 
	`gëho°by«me
(
ho°«me
);

552 i‡(!
hp
) {

553 #ifde‡
WIN32


554  
	`≠r_gë_√tos_îr‹
();

556  (
h_î∫o
 + 
APR_OS_START_SYSERR
);

561 
¥ev_ß
 = 
NULL
;

562 
cuøddr
 = 0;

563 
hp
->
h_addr_li°
[
cuøddr
]) {

564 
≠r_sockaddr_t
 *
√w_ß
 = 
	`≠r_pˇŒoc
(
p
, (apr_sockaddr_t));

566 
√w_ß
->
poﬁ
 = 
p
;

567 
√w_ß
->
ß
.
sö
.
sö_addr
 = *(
ö_addr
 *)
hp
->
h_addr_li°
[
cuøddr
];

568 
	`≠r_sockaddr_v¨s_£t
(
√w_ß
, 
AF_INET
, 
p‹t
);

570 i‡(!
¥ev_ß
) {

571 i‡(
‹ig_ho°«me
) {

572 
√w_ß
->
ho°«me
 = 
	`≠r_p°rdup
(
p
, 
‹ig_ho°«me
);

574 *
ß
 = 
√w_ß
;

577 
√w_ß
->
ho°«me
 = 
¥ev_ß
->hostname;

578 
¥ev_ß
->
√xt
 = 
√w_ß
;

581 
¥ev_ß
 = 
√w_ß
;

582 ++
cuøddr
;

585 i‡(
¥ev_ß
 =
NULL
) {

587  
APR_EGENERAL
;

590  
APR_SUCCESS
;

591 
	}
}

595 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockaddr_öfo_gë
(
≠r_sockaddr_t
 **
ß
,

596 c⁄° *
ho°«me
,

597 
≠r_öt32_t
 
Ámûy
, 
≠r_p‹t_t
 
p‹t
,

598 
≠r_öt32_t
 
Êags
, 
≠r_poﬁ_t
 *
p
)

600 
≠r_öt32_t
 
masked
;

601 *
ß
 = 
NULL
;

603 i‡((
masked
 = 
Êags
 & (
APR_IPV4_ADDR_OK
 | 
APR_IPV6_ADDR_OK
))) {

604 i‡(!
ho°«me
 ||

605 
Ámûy
 !
APR_UNSPEC
 ||

606 
masked
 =(
APR_IPV4_ADDR_OK
 | 
APR_IPV6_ADDR_OK
)) {

607  
APR_EINVAL
;

609 #i‡!
APR_HAVE_IPV6


610 i‡(
Êags
 & 
APR_IPV6_ADDR_OK
) {

611  
APR_ENOTIMPL
;

615 #i‡!
APR_HAVE_IPV6


621 i‡(
Ámûy
 =
APR_UNSPEC
) {

622 
Ámûy
 = 
APR_INET
;

626  
	`föd_addªs£s
(
ß
, 
ho°«me
, 
Ámûy
, 
p‹t
, 
Êags
, 
p
);

627 
	}
}

629 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gë«meöfo
(**
ho°«me
,

630 
≠r_sockaddr_t
 *
sockaddr
,

631 
≠r_öt32_t
 
Êags
)

633 #i‡
	`deföed
(
HAVE_GETNAMEINFO
)

634 
rc
;

635 #i‡
	`deföed
(
NI_MAXHOST
)

636 
tmpho°«me
[
NI_MAXHOST
];

638 
tmpho°«me
[256];

643 
	`SET_H_ERRNO
(0);

652 #i‡
APR_HAVE_IPV6


653 i‡(
sockaddr
->
Ámûy
 =
AF_INET6
 &&

654 
	`IN6_IS_ADDR_V4MAPPED
(&
sockaddr
->
ß
.
sö6
.
sö6_addr
)) {

655 
sockaddr_ö
 
tmpß
;

656 
tmpß
.
sö_Ámûy
 = 
AF_INET
;

657 
tmpß
.
sö_p‹t
 = 0;

658 
tmpß
.
sö_addr
.
s_addr
 = ((
≠r_uöt32_t
 *)
sockaddr
->
ùaddr_±r
)[3];

659 #ifde‡
SIN6_LEN


660 
tmpß
.
sö_Àn
 = (tmpsa);

663 
rc
 = 
	`gë«meöfo
((c⁄° 
sockaddr
 *)&
tmpß
, (tmpsa),

664 
tmpho°«me
, —mpho°«me), 
NULL
, 0,

665 
Êags
 !0 ? fœg†: 
NI_NAMEREQD
);

669 
rc
 = 
	`gë«meöfo
((c⁄° 
sockaddr
 *)&sockaddr->
ß
, sockaddr->
ßÀn
,

670 
tmpho°«me
, —mpho°«me), 
NULL
, 0,

671 
Êags
 !0 ? fœg†: 
NI_NAMEREQD
);

672 i‡(
rc
 != 0) {

673 *
ho°«me
 = 
NULL
;

675 #i‚de‡
WIN32


677 i‡(
rc
 =
EAI_SYSTEM
) {

680 i‡(
h_î∫o
) {

681  
h_î∫o
 + 
APR_OS_START_SYSERR
;

684  
î∫o
 + 
APR_OS_START_SYSERR
;

690 #i‡
	`deföed
(
NEGATIVE_EAI
)

691 i‡(
rc
 < 0)Ñc = -rc;

693  
rc
 + 
APR_OS_START_EAIERR
;

696 *
ho°«me
 = 
sockaddr
->ho°«mê
	`≠r_p°rdup
(sockaddr->
poﬁ
,

697 
tmpho°«me
);

698  
APR_SUCCESS
;

700 #i‡
APR_HAS_THREADS
 && !
	`deföed
(
GETHOSTBYADDR_IS_THREAD_SAFE
) && \

701 
	`deföed
(
HAVE_GETHOSTBYADDR_R
Ë&& !deföed(
BEOS
)

702 #ifde‡
GETHOSTBYNAME_R_HOSTENT_DATA


703 
ho°ít_d©a
 
hd
;

705 
tmp
[
GETHOSTBYNAME_BUFLEN
];

707 
ho°îr‹
;

708 
ho°ít
 
hs
, *
h±r
;

710 #i‡
	`deföed
(
GETHOSTBYNAME_R_HOSTENT_DATA
)

712 
	`gëho°byaddr_r
((*)&
sockaddr
->
ß
.
sö
.
sö_addr
,

713 (
ö_addr
), 
AF_INET
, &
hs
, &
hd
);

714 
h±r
 = &
hs
;

716 #i‡
	`deföed
(
GETHOSTBYNAME_R_GLIBC2
)

718 
	`gëho°byaddr_r
((*)&
sockaddr
->
ß
.
sö
.
sö_addr
,

719 (
ö_addr
), 
AF_INET
,

720 &
hs
, 
tmp
, 
GETHOSTBYNAME_BUFLEN
 - 1, &
h±r
, &
ho°îr‹
);

723 
h±r
 = 
	`gëho°byaddr_r
((*)&
sockaddr
->
ß
.
sö
.
sö_addr
,

724 (
ö_addr
), 
AF_INET
,

725 &
hs
, 
tmp
, 
GETHOSTBYNAME_BUFLEN
, &
ho°îr‹
);

727 i‡(!
h±r
) {

728 *
ho°«me
 = 
NULL
;

729  
ho°îr‹
 + 
APR_OS_START_SYSERR
;

733 
ho°ít
 *
h±r
;

734 
h±r
 = 
	`gëho°byaddr
((*)&
sockaddr
->
ß
.
sö
.
sö_addr
,

735 (
ö_addr
), 
AF_INET
);

738 i‡(
h±r
) {

739 *
ho°«me
 = 
sockaddr
->ho°«mê
	`≠r_p°rdup
(sockaddr->
poﬁ
, 
h±r
->
h_«me
);

740  
APR_SUCCESS
;

742 *
ho°«me
 = 
NULL
;

743 #i‡
	`deföed
(
WIN32
)

744  
	`≠r_gë_√tos_îr‹
();

745 #ñi‡
	`deföed
(
OS2
)

746  
h_î∫o
;

748  
h_î∫o
 + 
APR_OS_START_SYSERR
;

751 
	}
}

753 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gë£rvby«me
(
≠r_sockaddr_t
 *
sockaddr
,

754 c⁄° *
£rv«me
)

756 #i‡
APR_HAS_THREADS
 && !
	`deföed
(
GETSERVBYNAME_IS_THREAD_SAFE
) && \

757 
	`deföed
(
HAVE_GETSERVBYNAME_R
) && \

758 (
	`deföed
(
GETSERVBYNAME_R_GLIBC2
Ë|| deföed(
GETSERVBYNAME_R_SOLARIS
) || \

759 
	`deföed
(
GETSERVBYNAME_R_OSF1
))

760 
£rvít
 
£
;

761 #i‡
	`deföed
(
GETSERVBYNAME_R_OSF1
)

762 
£rvít_d©a
 
£d
;

764 
	`mem£t
(&
£d
, 0, (sed));

766 #i‡
	`deföed
(
GETSERVBYNAME_R_GLIBC2
)

767 
£rvít
 *
ªs
;

769 
buf
[1024];

772 
£rvít
 *
£
;

775 i‡(
£rv«me
 =
NULL
)

776  
APR_EINVAL
;

778 #i‡
APR_HAS_THREADS
 && !
	`deföed
(
GETSERVBYNAME_IS_THREAD_SAFE
) && \

779 
	`deföed
(
HAVE_GETSERVBYNAME_R
) && \

780 (
	`deföed
(
GETSERVBYNAME_R_GLIBC2
Ë|| deföed(
GETSERVBYNAME_R_SOLARIS
) || \

781 
	`deföed
(
GETSERVBYNAME_R_OSF1
))

782 #i‡
	`deföed
(
GETSERVBYNAME_R_GLIBC2
)

783 i‡(
	`gë£rvby«me_r
(
£rv«me
, 
NULL
,

784 &
£
, 
buf
, (buf), &
ªs
Ë=0 &&Ñe†!
NULL
) {

785 
sockaddr
->
p‹t
 = 
	`¡ohs
(
ªs
->
s_p‹t
);

786 
sockaddr
->
£rv«me
 = 
	`≠r_p°rdup
(sockaddr->
poﬁ
, servname);

787 
sockaddr
->
ß
.
sö
.
sö_p‹t
 = 
ªs
->
s_p‹t
;

788  
APR_SUCCESS
;

790 #ñi‡
	`deföed
(
GETSERVBYNAME_R_SOLARIS
)

791 i‡(
	`gë£rvby«me_r
(
£rv«me
, 
NULL
, &
£
, 
buf
, (buf)) != NULL) {

792 
sockaddr
->
p‹t
 = 
	`¡ohs
(
£
.
s_p‹t
);

793 
sockaddr
->
£rv«me
 = 
	`≠r_p°rdup
(sockaddr->
poﬁ
, servname);

794 
sockaddr
->
ß
.
sö
.
sö_p‹t
 = 
£
.
s_p‹t
;

795  
APR_SUCCESS
;

797 #ñi‡
	`deföed
(
GETSERVBYNAME_R_OSF1
)

798 i‡(
	`gë£rvby«me_r
(
£rv«me
, 
NULL
, &
£
, &
£d
) == 0) {

799 
sockaddr
->
p‹t
 = 
	`¡ohs
(
£
.
s_p‹t
);

800 
sockaddr
->
£rv«me
 = 
	`≠r_p°rdup
(sockaddr->
poﬁ
, servname);

801 
sockaddr
->
ß
.
sö
.
sö_p‹t
 = 
£
.
s_p‹t
;

802  
APR_SUCCESS
;

806 i‡((
£
 = 
	`gë£rvby«me
(
£rv«me
, 
NULL
)) != NULL){

807 
sockaddr
->
p‹t
 = 
	`¡ohs
(
£
->
s_p‹t
);

808 
sockaddr
->
£rv«me
 = 
	`≠r_p°rdup
(sockaddr->
poﬁ
, servname);

809 
sockaddr
->
ß
.
sö
.
sö_p‹t
 = 
£
->
s_p‹t
;

810  
APR_SUCCESS
;

813  
APR_ENOENT
;

814 
	}
}

816 
	#V4MAPPED_EQUAL
(
a
,
b
) \

817 ((
a
)->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
 && \

818 (
b
)->
ß
.
sö
.
sö_Ámûy
 =
AF_INET6
 && \

819 
	`IN6_IS_ADDR_V4MAPPED
((
ö6_addr
 *)(
b
)->
ùaddr_±r
) && \

820 !
	`memcmp
((
a
)->
ùaddr_±r
, \

821 &((
ö6_addr
 *)(
b
)->
ùaddr_±r
)->
s6_addr
[12], \

822 (
a
)->
ùaddr_Àn
))

	)

824 
	$APR_DECLARE
(Ë
	$≠r_sockaddr_equÆ
(c⁄° 
≠r_sockaddr_t
 *
addr1
,

825 c⁄° 
≠r_sockaddr_t
 *
addr2
)

827 i‡(
addr1
->
ùaddr_Àn
 =
addr2
->ipaddr_len &&

828 !
	`memcmp
(
addr1
->
ùaddr_±r
, 
addr2
->ùaddr_±r,áddr1->
ùaddr_Àn
)) {

831 #i‡
APR_HAVE_IPV6


832 i‡(
	`V4MAPPED_EQUAL
(
addr1
, 
addr2
)) {

835 i‡(
	`V4MAPPED_EQUAL
(
addr2
, 
addr1
)) {

840 
	}
}

842 
	$APR_DECLARE
(Ë
	$≠r_sockaddr_is_wûdˇrd
(c⁄° 
≠r_sockaddr_t
 *
addr
)

844 c⁄° 
öaddr_™y
[

845 #i‡
APR_HAVE_IPV6


846 (
ö6_addr
)

848 (
ö_addr
)

852 i‡(
addr
->
ùaddr_±r


853 && 
addr
->
ùaddr_Àn
 < 
öaddr_™y
) {

854 i‡(!
	`memcmp
(
öaddr_™y
, 
addr
->
ùaddr_±r
,áddr->
ùaddr_Àn
)) {

857 #i‡
APR_HAVE_IPV6


858 i‡(
addr
->
Ámûy
 =
AF_INET6


859 && 
	`IN6_IS_ADDR_V4MAPPED
((
ö6_addr
 *)
addr
->
ùaddr_±r
)) {

860 
ö_addr
 *
v4
 = (ö_add∏*)&((
≠r_uöt32_t
 *)
addr
->
ùaddr_±r
)[3];

862 i‡(!
	`memcmp
(
öaddr_™y
, 
v4
,  *v4)) {

869 
	}
}

871 
≠r_°©us_t
 
	$∑r£_√tw‹k
(
≠r_ùsub√t_t
 *
ùsub
, c⁄° *
√tw‹k
)

874 
shi·
;

875 *
s
, *
t
;

876 
o˘ë
;

877 
buf
[ "255.255.255.255"];

879 i‡(
	`°æí
(
√tw‹k
Ë<  
buf
) {

880 
	`°r˝y
(
buf
, 
√tw‹k
);

883  
APR_EBADIP
;

887 
s
 = 
buf
;

888 
ùsub
->
sub
[0] = 0;

889 
ùsub
->
mask
[0] = 0;

890 
shi·
 = 24;

891 *
s
) {

892 
t
 = 
s
;

893 i‡(!
	`≠r_isdigô
(*
t
)) {

894  
APR_EBADIP
;

896 
	`≠r_isdigô
(*
t
)) {

897 ++
t
;

899 i‡(*
t
 == '.') {

900 *
t
++ = 0;

902 i‡(*
t
) {

903  
APR_EBADIP
;

905 i‡(
shi·
 < 0) {

906  
APR_EBADIP
;

908 
o˘ë
 = 
	`©oi
(
s
);

909 i‡(
o˘ë
 < 0 || octet > 255) {

910  
APR_EBADIP
;

912 
ùsub
->
sub
[0] |
o˘ë
 << 
shi·
;

913 
ùsub
->
mask
[0] |0xFFUL << 
shi·
;

914 
s
 = 
t
;

915 
shi·
 -= 8;

917 
ùsub
->
sub
[0] = 
	`¡ohl
(ipsub->sub[0]);

918 
ùsub
->
mask
[0] = 
	`¡ohl
(ipsub->mask[0]);

919 
ùsub
->
Ámûy
 = 
AF_INET
;

920  
APR_SUCCESS
;

921 
	}
}

929 
≠r_°©us_t
 
	$∑r£_ù
(
≠r_ùsub√t_t
 *
ùsub
, c⁄° *
ù°r
, 
√tw‹k_Ælowed
)

943 
rc
;

945 #i‡
APR_HAVE_IPV6


946 
rc
 = 
	`≠r_öë_±⁄
(
AF_INET6
, 
ù°r
, 
ùsub
->
sub
);

947 i‡(
rc
 == 1) {

948 i‡(
	`IN6_IS_ADDR_V4MAPPED
((
ö6_addr
 *)
ùsub
->
sub
)) {

953  
APR_EBADIP
;

955 
ùsub
->
Ámûy
 = 
AF_INET6
;

960 
rc
 = 
	`≠r_öë_±⁄
(
AF_INET
, 
ù°r
, 
ùsub
->
sub
);

961 i‡(
rc
 == 1) {

962 
ùsub
->
Ámûy
 = 
AF_INET
;

965 i‡(
rc
 != 1) {

966 i‡(
√tw‹k_Ælowed
) {

967  
	`∑r£_√tw‹k
(
ùsub
, 
ù°r
);

970  
APR_EBADIP
;

973  
APR_SUCCESS
;

974 
	}
}

976 
	$looks_like_ù
(c⁄° *
ù°r
)

978 i‡(
	`°rchr
(
ù°r
, ':')) {

984 (*
ù°r
 ='.'Ë|| 
	`≠r_isdigô
(*ipstr))

985 
ù°r
++;

986  (*
ù°r
 == '\0');

987 
	}
}

989 
	$fix_sub√t
(
≠r_ùsub√t_t
 *
ùsub
)

994 
i
;

996 
i
 = 0; i <  
ùsub
->
mask
 / (
≠r_öt32_t
); i++) {

997 
ùsub
->
sub
[
i
] &ùsub->
mask
[i];

999 
	}
}

1002 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_ùsub√t_¸óã
(
≠r_ùsub√t_t
 **
ùsub
, c⁄° *
ù°r
,

1003 c⁄° *
mask_‹_numbôs
, 
≠r_poﬁ_t
 *
p
)

1005 
≠r_°©us_t
 
rv
;

1006 *
íd±r
;

1007 
bôs
, 
maxbôs
 = 32;

1014 i‡(!
	`looks_like_ù
(
ù°r
)) {

1015  
APR_EINVAL
;

1018 *
ùsub
 = 
	`≠r_pˇŒoc
(
p
, (
≠r_ùsub√t_t
));

1021 
	`mem£t
((*
ùsub
)->
mask
, 0xFF,  (*ipsub)->mask);

1023 
rv
 = 
	`∑r£_ù
(*
ùsub
, 
ù°r
, 
mask_‹_numbôs
 =
NULL
);

1024 i‡(
rv
 !
APR_SUCCESS
) {

1025  
rv
;

1028 i‡(
mask_‹_numbôs
) {

1029 #i‡
APR_HAVE_IPV6


1030 i‡((*
ùsub
)->
Ámûy
 =
AF_INET6
) {

1031 
maxbôs
 = 128;

1034 
bôs
 = 
	`°πﬁ
(
mask_‹_numbôs
, &
íd±r
, 10);

1035 i‡(*
íd±r
 ='\0' && 
bôs
 > 0 && bô†<
maxbôs
) {

1037 
cur_íåy
 = 0;

1038 
≠r_öt32_t
 
cur_bô_vÆue
;

1040 
	`mem£t
((*
ùsub
)->
mask
, 0,  (*ipsub)->mask);

1041 
bôs
 > 32) {

1042 (*
ùsub
)->
mask
[
cur_íåy
] = 0xFFFFFFFF;

1043 
bôs
 -= 32;

1044 ++
cur_íåy
;

1046 
cur_bô_vÆue
 = 0x80000000;

1047 
bôs
) {

1048 (*
ùsub
)->
mask
[
cur_íåy
] |
cur_bô_vÆue
;

1049 --
bôs
;

1050 
cur_bô_vÆue
 /= 2;

1052 (*
ùsub
)->
mask
[
cur_íåy
] = 
	`ht⁄l
((*ipsub)->mask[cur_entry]);

1054 i‡(
	`≠r_öë_±⁄
(
AF_INET
, 
mask_‹_numbôs
, (*
ùsub
)->
mask
) == 1 &&

1055 (*
ùsub
)->
Ámûy
 =
AF_INET
) {

1059  
APR_EBADMASK
;

1063 
	`fix_sub√t
(*
ùsub
);

1065  
APR_SUCCESS
;

1066 
	}
}

1068 
	$APR_DECLARE
(Ë
	$≠r_ùsub√t_ã°
(
≠r_ùsub√t_t
 *
ùsub
, 
≠r_sockaddr_t
 *
ß
)

1070 #i‡
APR_HAVE_IPV6


1074 i‡(
ß
->
Ámûy
 =
AF_INET
) {

1075 i‡(
ùsub
->
Ámûy
 =
AF_INET
 &&

1076 ((
ß
->ß.
sö
.
sö_addr
.
s_addr
 & 
ùsub
->
mask
[0]Ë=ùsub->
sub
[0])) {

1080 i‡(
	`IN6_IS_ADDR_V4MAPPED
((
ö6_addr
 *)
ß
->
ùaddr_±r
)) {

1081 i‡(
ùsub
->
Ámûy
 =
AF_INET
 &&

1082 (((
≠r_uöt32_t
 *)
ß
->
ùaddr_±r
)[3] & 
ùsub
->
mask
[0]Ë=ùsub->
sub
[0]) {

1086 i‡(
ß
->
Ámûy
 =
AF_INET6
 && 
ùsub
->family == AF_INET6) {

1087 
≠r_uöt32_t
 *
addr
 = (≠r_uöt32_à*)
ß
->
ùaddr_±r
;

1089 i‡((
addr
[0] & 
ùsub
->
mask
[0]Ë=ùsub->
sub
[0] &&

1090 (
addr
[1] & 
ùsub
->
mask
[1]Ë=ùsub->
sub
[1] &&

1091 (
addr
[2] & 
ùsub
->
mask
[2]Ë=ùsub->
sub
[2] &&

1092 (
addr
[3] & 
ùsub
->
mask
[3]Ë=ùsub->
sub
[3]) {

1097 i‡((
ß
->ß.
sö
.
sö_addr
.
s_addr
 & 
ùsub
->
mask
[0]Ë=ùsub->
sub
[0]) {

1102 
	}
}

	@network_io/unix/socket_util.c

17 
	~"≠r_√tw‹k_io.h
"

18 
	~"≠r_pﬁl.h
"

20 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_©ªadeof
(
≠r_sockë_t
 *
sock
, *
©ªadeof
)

22 
≠r_pﬁlfd_t
 
pfds
[1];

23 
≠r_°©us_t
 
rv
;

24 
≠r_öt32_t
 
nfds
;

31 
pfds
[0].
ªqevíts
 = 
APR_POLLIN
;

32 
pfds
[0].
desc_ty≥
 = 
APR_POLL_SOCKET
;

33 
pfds
[0].
desc
.
s
 = 
sock
;

36 
rv
 = 
	`≠r_pﬁl
(&
pfds
[0], 1, &
nfds
, 0);

37 } 
	`APR_STATUS_IS_EINTR
(
rv
));

39 i‡(
	`APR_STATUS_IS_TIMEUP
(
rv
)) {

42 *
©ªadeof
 = 0;

43  
APR_SUCCESS
;

45 i‡(
rv
) {

47  
rv
;

49 i‡(
nfds
 =1 && 
pfds
[0].
π√víts
 =
APR_POLLIN
) {

50 
≠r_sockaddr_t
 
unu£d
;

51 
≠r_size_t
 
Àn
 = 1;

52 
buf
;

56 
rv
 = 
	`≠r_sockë_ªcv‰om
(&
unu£d
, 
sock
, 
MSG_PEEK
, &
buf
, &
Àn
);

57 i‡(
rv
 =
APR_EOF
) {

58 *
©ªadeof
 = 1;

59  
APR_SUCCESS
;

61 i‡(
rv
) {

63  
rv
;

66 *
©ªadeof
 = 0;

67  
APR_SUCCESS
;

72  
APR_EGENERAL
;

73 
	}
}

	@network_io/unix/sockets.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_√tw‹k_io.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_suµ‹t.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_¨ch_öhîô.h
"

24 #ifde‡
BEOS_R5


25 #unde‡
˛o£


26 
	#˛o£
 
˛o£sockë


	)

29 
	ggíîic_öaddr_™y
[16] = {0};

31 
≠r_°©us_t
 
	$sockë_˛ónup
(*
sock
)

33 
≠r_sockë_t
 *
thesockë
 = 
sock
;

34 
sd
 = 
thesockë
->
sockëdes
;

39 
thesockë
->
sockëdes
 = -1;

41 i‡(
	`˛o£
(
sd
) == 0) {

42  
APR_SUCCESS
;

46 
thesockë
->
sockëdes
 = 
sd
;

48  
î∫o
;

50 
	}
}

52 
	$£t_sockë_v¨s
(
≠r_sockë_t
 *
sock
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
)

54 
sock
->
ty≥
 =Åype;

55 
sock
->
¥Ÿocﬁ
 =Örotocol;

56 
	`≠r_sockaddr_v¨s_£t
(
sock
->
loˇl_addr
, 
Ámûy
, 0);

57 
	`≠r_sockaddr_v¨s_£t
(
sock
->
ªmŸe_addr
, 
Ámûy
, 0);

58 
sock
->
›ti⁄s
 = 0;

59 #i‡
	`deföed
(
BEOS
Ë&& !deföed(
BEOS_BONE
)

63 
sock
->
›ti⁄s
 |
APR_TCP_NODELAY
;

65 
	}
}

67 
	$Æloc_sockë
(
≠r_sockë_t
 **
√w
, 
≠r_poﬁ_t
 *
p
)

69 *
√w
 = (
≠r_sockë_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_socket_t));

70 (*
√w
)->
poﬁ
 = 
p
;

71 (*
√w
)->
loˇl_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

72 (
≠r_sockaddr_t
));

73 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
p
;

74 (*
√w
)->
ªmŸe_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

75 (
≠r_sockaddr_t
));

76 (*
√w
)->
ªmŸe_addr
->
poﬁ
 = 
p
;

77 (*
√w
)->
ªmŸe_addr_unknown
 = 1;

78 #i‚de‡
WAITIO_USES_POLL


81 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w
)->
pﬁl£t
, 1, 
p
, 0);

83 
	}
}

85 
≠r_°©us_t
 
	$≠r_sockë_¥Ÿocﬁ_gë
(
≠r_sockë_t
 *
sock
, *
¥Ÿocﬁ
)

87 *
¥Ÿocﬁ
 = 
sock
->protocol;

88  
APR_SUCCESS
;

89 
	}
}

91 
≠r_°©us_t
 
	$≠r_sockë_¸óã
(
≠r_sockë_t
 **
√w
, 
oÁmûy
, 
ty≥
,

92 
¥Ÿocﬁ
, 
≠r_poﬁ_t
 *
c⁄t
)

94 
Ámûy
 = 
oÁmûy
, 
Êags
 = 0;

96 #ifde‡
HAVE_SOCK_CLOEXEC


97 
Êags
 |
SOCK_CLOEXEC
;

100 i‡(
Ámûy
 =
APR_UNSPEC
) {

101 #i‡
APR_HAVE_IPV6


102 
Ámûy
 = 
APR_INET6
;

104 
Ámûy
 = 
APR_INET
;

108 
	`Æloc_sockë
(
√w
, 
c⁄t
);

110 #i‚de‡
BEOS_R5


111 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
|
Êags
, 
¥Ÿocﬁ
);

115 
¥Ÿocﬁ
) {

117 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
|
Êags
, 0);

119 
APR_PROTO_TCP
:

120 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
|
Êags
, 
IPPROTO_TCP
);

122 
APR_PROTO_UDP
:

123 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
|
Êags
, 
IPPROTO_UDP
);

125 
APR_PROTO_SCTP
:

127 
î∫o
 = 
EPROTONOSUPPORT
;

128 (*
√w
)->
sockëdes
 = -1;

133 #i‡
APR_HAVE_IPV6


134 i‡((*
√w
)->
sockëdes
 < 0 && 
oÁmûy
 =
APR_UNSPEC
) {

135 
Ámûy
 = 
APR_INET
;

136 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
|
Êags
, 
¥Ÿocﬁ
);

140 i‡((*
√w
)->
sockëdes
 < 0) {

141  
î∫o
;

143 
	`£t_sockë_v¨s
(*
√w
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

145 #i‚de‡
HAVE_SOCK_CLOEXEC


147 
Êags
;

149 i‡((
Êags
 = 
	`f˙é
((*
√w
)->
sockëdes
, 
F_GETFD
)) == -1)

150  
î∫o
;

152 
Êags
 |
FD_CLOEXEC
;

153 i‡(
	`f˙é
((*
√w
)->
sockëdes
, 
F_SETFD
, 
Êags
) == -1)

154  
î∫o
;

158 (*
√w
)->
timeout
 = -1;

159 (*
√w
)->
öhîô
 = 0;

160 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*√w), 
sockë_˛ónup
,

161 
sockë_˛ónup
);

163  
APR_SUCCESS
;

164 
	}
}

166 
≠r_°©us_t
 
	$≠r_sockë_shutdown
(
≠r_sockë_t
 *
thesockë
,

167 
≠r_shutdown_how_e
 
how
)

169  (
	`shutdown
(
thesockë
->
sockëdes
, 
how
Ë=-1Ë? 
î∫o
 : 
APR_SUCCESS
;

170 
	}
}

172 
≠r_°©us_t
 
	$≠r_sockë_˛o£
(
≠r_sockë_t
 *
thesockë
)

174  
	`≠r_poﬁ_˛ónup_run
(
thesockë
->
poﬁ
,Åhesockë, 
sockë_˛ónup
);

175 
	}
}

177 
≠r_°©us_t
 
	$≠r_sockë_böd
(
≠r_sockë_t
 *
sock
, 
≠r_sockaddr_t
 *
ß
)

179 i‡(
	`böd
(
sock
->
sockëdes
,

180 (
sockaddr
 *)&
ß
->ß, sa->
ßÀn
) == -1) {

181  
î∫o
;

184 
sock
->
loˇl_addr
 = 
ß
;

186 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_p‹t
 == 0) {

187 
sock
->
loˇl_p‹t_unknown
 = 1;

189  
APR_SUCCESS
;

191 
	}
}

193 
≠r_°©us_t
 
	$≠r_sockë_li°í
(
≠r_sockë_t
 *
sock
, 
≠r_öt32_t
 
backlog
)

195 i‡(
	`li°í
(
sock
->
sockëdes
, 
backlog
) == -1)

196  
î∫o
;

198  
APR_SUCCESS
;

199 
	}
}

201 
≠r_°©us_t
 
	$≠r_sockë_ac˚±
(
≠r_sockë_t
 **
√w
,á¥_sockë_à*
sock
,

202 
≠r_poﬁ_t
 *
c⁄√˘i⁄_c⁄ãxt
)

204 
s
;

205 
≠r_sockaddr_t
 
ß
;

207 
ß
.
ßÀn
 = (sa.sa);

209 #ifde‡
HAVE_ACCEPT4


210 
s
 = 
	`ac˚±4
(
sock
->
sockëdes
, (
sockaddr
 *)&
ß
.ß, &ß.
ßÀn
, 
SOCK_CLOEXEC
);

212 
s
 = 
	`ac˚±
(
sock
->
sockëdes
, (
sockaddr
 *)&
ß
.ß, &ß.
ßÀn
);

215 i‡(
s
 < 0) {

216  
î∫o
;

218 #ifde‡
TPF


219 i‡(
s
 == 0) {

221  
APR_EINTR
;

224 
	`Æloc_sockë
(
√w
, 
c⁄√˘i⁄_c⁄ãxt
);

231 
	`£t_sockë_v¨s
(*
√w
, 
ß
.ß.
sö
.
sö_Ámûy
, 
SOCK_STREAM
, 
sock
->
¥Ÿocﬁ
);

233 #i‚de‡
HAVE_POLL


234 (*
√w
)->
c⁄√˘ed
 = 1;

236 (*
√w
)->
timeout
 = -1;

238 (*
√w
)->
ªmŸe_addr_unknown
 = 0;

240 (*
√w
)->
sockëdes
 = 
s
;

243 (*
√w
)->
ªmŸe_addr
->
ß
 = sa.sa;

244 (*
√w
)->
ªmŸe_addr
->
ßÀn
 = 
ß
.salen;

246 *(*
√w
)->
loˇl_addr
 = *
sock
->local_addr;

252 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
c⁄√˘i⁄_c⁄ãxt
;

255 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
) {

256 (*
√w
)->
loˇl_addr
->
ùaddr_±r
 = &(*√w)->loˇl_addr->
ß
.
sö
.
sö_addr
;

258 #i‡
APR_HAVE_IPV6


259 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET6
) {

260 (*
√w
)->
loˇl_addr
->
ùaddr_±r
 = &(*√w)->loˇl_addr->
ß
.
sö6
.
sö6_addr
;

263 (*
√w
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*√w)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

264 i‡(
sock
->
loˇl_p‹t_unknown
) {

266 (*
√w
)->
loˇl_p‹t_unknown
 = 1;

269 #i‡
APR_TCP_NODELAY_INHERITED


270 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NODELAY
) == 1) {

271 
	`≠r_£t_›ti⁄
(*
√w
, 
APR_TCP_NODELAY
, 1);

274 #i‡
APR_O_NONBLOCK_INHERITED


275 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
) == 1) {

276 
	`≠r_£t_›ti⁄
(*
√w
, 
APR_SO_NONBLOCK
, 1);

280 i‡(
sock
->
loˇl_öãrÁ˚_unknown
 ||

281 !
	`memcmp
(
sock
->
loˇl_addr
->
ùaddr_±r
,

282 
gíîic_öaddr_™y
,

283 
sock
->
loˇl_addr
->
ùaddr_Àn
)) {

290 (*
√w
)->
loˇl_öãrÁ˚_unknown
 = 1;

293 #i‚de‡
HAVE_ACCEPT4


295 
Êags
;

297 i‡((
Êags
 = 
	`f˙é
((*
√w
)->
sockëdes
, 
F_GETFD
)) == -1)

298  
î∫o
;

300 
Êags
 |
FD_CLOEXEC
;

301 i‡(
	`f˙é
((*
√w
)->
sockëdes
, 
F_SETFD
, 
Êags
) == -1)

302  
î∫o
;

306 (*
√w
)->
öhîô
 = 0;

307 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*√w), 
sockë_˛ónup
,

308 
sockë_˛ónup
);

309  
APR_SUCCESS
;

310 
	}
}

312 
≠r_°©us_t
 
	$≠r_sockë_c⁄√˘
(
≠r_sockë_t
 *
sock
, 
≠r_sockaddr_t
 *
ß
)

314 
rc
;

317 
rc
 = 
	`c⁄√˘
(
sock
->
sockëdes
,

318 (c⁄° 
sockaddr
 *)&
ß
->ß.
sö
,

319 
ß
->
ßÀn
);

320 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

325 i‡((
rc
 =-1Ë&& (
î∫o
 =
EINPROGRESS
 ||Éºnÿ=
EALREADY
)

326 && (
sock
->
timeout
 > 0)) {

327 
rc
 = 
	`≠r_waô_f‹_io_‹_timeout
(
NULL
, 
sock
, 0);

328 i‡(
rc
 !
APR_SUCCESS
) {

329  
rc
;

332 #ifde‡
SO_ERROR


334 
îr‹
;

335 
≠r_sockÀn_t
 
Àn
 = (
îr‹
);

336 i‡((
rc
 = 
	`gësock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_ERROR
,

337 (*)&
îr‹
, &
Àn
)) < 0) {

338  
î∫o
;

340 i‡(
îr‹
) {

341  
îr‹
;

348 i‡(
	`memcmp
(
ß
->
ùaddr_±r
, 
gíîic_öaddr_™y
, sa->
ùaddr_Àn
)) {

352 
sock
->
ªmŸe_addr_unknown
 = 0;

355 
sock
->
ªmŸe_addr
->
ß
 = sa->sa;

356 
sock
->
ªmŸe_addr
->
ßÀn
 = 
ß
->salen;

358 
	`≠r_sockaddr_v¨s_£t
(
sock
->
ªmŸe_addr
, 
ß
->
Ámûy
, sa->
p‹t
);

361 i‡(
sock
->
loˇl_addr
->
p‹t
 == 0) {

363 
sock
->
loˇl_p‹t_unknown
 = 1;

365 i‡(!
	`memcmp
(
sock
->
loˇl_addr
->
ùaddr_±r
,

366 
gíîic_öaddr_™y
,

367 
sock
->
loˇl_addr
->
ùaddr_Àn
)) {

371 
sock
->
loˇl_öãrÁ˚_unknown
 = 1;

374 i‡(
rc
 =-1 && 
î∫o
 !
EISCONN
) {

375  
î∫o
;

378 #i‚de‡
HAVE_POLL


379 
sock
->
c⁄√˘ed
=1;

381  
APR_SUCCESS
;

382 
	}
}

384 
≠r_°©us_t
 
	$≠r_sockë_ty≥_gë
(
≠r_sockë_t
 *
sock
, *
ty≥
)

386 *
ty≥
 = 
sock
->type;

387  
APR_SUCCESS
;

388 
	}
}

390 
≠r_°©us_t
 
	$≠r_sockë_d©a_gë
(**
d©a
, c⁄° *
key
, 
≠r_sockë_t
 *
sock
)

392 
sock_u£rd©a_t
 *
cur
 = 
sock
->
u£rd©a
;

394 *
d©a
 = 
NULL
;

396 
cur
) {

397 i‡(!
	`°rcmp
(
cur
->
key
, key)) {

398 *
d©a
 = 
cur
->data;

401 
cur
 = cur->
√xt
;

404  
APR_SUCCESS
;

405 
	}
}

407 
≠r_°©us_t
 
≠r_sockë_d©a_£t
(
≠r_sockë_t
 *
sock
, *
d©a
, c⁄° *
key
,

408 
	$≠r_°©us_t
 (*
˛ónup
) (*))

410 
sock_u£rd©a_t
 *
√w
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, (sock_userdata_t));

412 
√w
->
key
 = 
	`≠r_p°rdup
(
sock
->
poﬁ
, key);

413 
√w
->
d©a
 = data;

414 
√w
->
√xt
 = 
sock
->
u£rd©a
;

415 
sock
->
u£rd©a
 = 
√w
;

417 i‡(
˛ónup
) {

418 
	`≠r_poﬁ_˛ónup_ªgi°î
(
sock
->
poﬁ
, 
d©a
, 
˛ónup
, cleanup);

421  
APR_SUCCESS
;

422 
	}
}

424 
≠r_°©us_t
 
	$≠r_os_sock_gë
(
≠r_os_sock_t
 *
thesock
, 
≠r_sockë_t
 *
sock
)

426 *
thesock
 = 
sock
->
sockëdes
;

427  
APR_SUCCESS
;

428 
	}
}

430 
≠r_°©us_t
 
	$≠r_os_sock_make
(
≠r_sockë_t
 **
≠r_sock
,

431 
≠r_os_sock_öfo_t
 *
os_sock_öfo
,

432 
≠r_poﬁ_t
 *
c⁄t
)

434 
	`Æloc_sockë
(
≠r_sock
, 
c⁄t
);

435 
	`£t_sockë_v¨s
(*
≠r_sock
, 
os_sock_öfo
->
Ámûy
, os_sock_öfo->
ty≥
, os_sock_öfo->
¥Ÿocﬁ
);

436 (*
≠r_sock
)->
timeout
 = -1;

437 (*
≠r_sock
)->
sockëdes
 = *
os_sock_öfo
->
os_sock
;

438 i‡(
os_sock_öfo
->
loˇl
) {

439 
	`mem˝y
(&(*
≠r_sock
)->
loˇl_addr
->
ß
.
sö
,

440 
os_sock_öfo
->
loˇl
,

441 (*
≠r_sock
)->
loˇl_addr
->
ßÀn
);

443 (*
≠r_sock
)->
loˇl_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->loˇl_addr->
ß
.
sö
.
sö_p‹t
);

446 (*
≠r_sock
)->
loˇl_p‹t_unknown
 = (*≠r_sock)->
loˇl_öãrÁ˚_unknown
 = 1;

448 i‡(
os_sock_öfo
->
ªmŸe
) {

449 #i‚de‡
HAVE_POLL


450 (*
≠r_sock
)->
c⁄√˘ed
 = 1;

452 
	`mem˝y
(&(*
≠r_sock
)->
ªmŸe_addr
->
ß
.
sö
,

453 
os_sock_öfo
->
ªmŸe
,

454 (*
≠r_sock
)->
ªmŸe_addr
->
ßÀn
);

456 (*
≠r_sock
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

459 (*
≠r_sock
)->
ªmŸe_addr_unknown
 = 1;

462 (*
≠r_sock
)->
öhîô
 = 0;

463 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
≠r_sock
)->
poﬁ
, (*)(*apr_sock),

464 
sockë_˛ónup
, socket_cleanup);

465  
APR_SUCCESS
;

466 
	}
}

468 
≠r_°©us_t
 
	$≠r_os_sock_put
(
≠r_sockë_t
 **
sock
, 
≠r_os_sock_t
 *
thesock
,

469 
≠r_poﬁ_t
 *
c⁄t
)

472 i‡((*
sock
Ë=
NULL
) {

473 
	`Æloc_sockë
(
sock
, 
c⁄t
);

477 
	`£t_sockë_v¨s
(*
sock
, 
APR_INET
, 
SOCK_STREAM
, 0);

478 (*
sock
)->
timeout
 = -1;

480 (*
sock
)->
loˇl_p‹t_unknown
 = (*sock)->
loˇl_öãrÁ˚_unknown
 = 1;

481 (*
sock
)->
ªmŸe_addr_unknown
 = 1;

482 (*
sock
)->
sockëdes
 = *
thesock
;

483  
APR_SUCCESS
;

484 
	}
}

486 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
sockë
)

488 
	$APR_IMPLEMENT_INHERIT_SET
(
sockë
, 
öhîô
, 
poﬁ
, 
sockë_˛ónup
)

490 
	`APR_IMPLEMENT_INHERIT_UNSET
(
sockë
, 
öhîô
, 
poﬁ
, 
sockë_˛ónup
)

	@network_io/unix/sockopt.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_°rögs.h
"

21 
≠r_°©us_t
 
	$soblock
(
sd
)

24 #i‚de‡
BEOS


25 
fd_Êags
;

27 
fd_Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

28 #i‡
	`deföed
(
O_NONBLOCK
)

29 
fd_Êags
 &~
O_NONBLOCK
;

30 #ñi‡
	`deföed
(
O_NDELAY
)

31 
fd_Êags
 &~
O_NDELAY
;

32 #ñi‡
	`deföed
(
FNDELAY
)

33 
fd_Êags
 &~
FNDELAY
;

35 #îr‹ 
PÀa£
 
ãach
 
APR
 
how
 
to
 
make
 
sockës
 
blockög
 
⁄
 
your
 
∂©f‹m
.

37 i‡(
	`f˙é
(
sd
, 
F_SETFL
, 
fd_Êags
) == -1) {

38  
î∫o
;

41 
⁄
 = 0;

42 i‡(
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_NONBLOCK
, &
⁄
, ()) < 0)

43  
î∫o
;

45  
APR_SUCCESS
;

46 
	}
}

48 
≠r_°©us_t
 
	$s⁄⁄block
(
sd
)

50 #i‚de‡
BEOS


51 
fd_Êags
;

53 
fd_Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

54 #i‡
	`deföed
(
O_NONBLOCK
)

55 
fd_Êags
 |
O_NONBLOCK
;

56 #ñi‡
	`deföed
(
O_NDELAY
)

57 
fd_Êags
 |
O_NDELAY
;

58 #ñi‡
	`deföed
(
FNDELAY
)

59 
fd_Êags
 |
FNDELAY
;

61 #îr‹ 
PÀa£
 
ãach
 
APR
 
how
 
to
 
make
 
sockës
 
n⁄
-
blockög
 
⁄
 
your
 
∂©f‹m
.

63 i‡(
	`f˙é
(
sd
, 
F_SETFL
, 
fd_Êags
) == -1) {

64  
î∫o
;

67 
⁄
 = 1;

68 i‡(
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_NONBLOCK
, &
⁄
, ()) < 0)

69  
î∫o
;

71  
APR_SUCCESS
;

72 
	}
}

75 
≠r_°©us_t
 
	$≠r_sockë_timeout_£t
(
≠r_sockë_t
 *
sock
, 
≠r_öãrvÆ_time_t
 
t
)

77 
≠r_°©us_t
 
°©
;

86 i‡(
t
 >0 && 
sock
->
timeout
 < 0) {

87 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
) != 1) {

88 i‡((
°©
 = 
	`s⁄⁄block
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
) {

89  
°©
;

91 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_NONBLOCK
, 1);

94 i‡(
t
 < 0 && 
sock
->
timeout
 >= 0) {

95 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
) != 0) {

96 i‡((
°©
 = 
	`soblock
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
) {

97  
°©
;

99 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_NONBLOCK
, 0);

105 i‡(
t
 <= 0) {

106 
sock
->
›ti⁄s
 &~
APR_INCOMPLETE_READ
;

108 
sock
->
timeout
 = 
t
;

109  
APR_SUCCESS
;

110 
	}
}

113 
≠r_°©us_t
 
	$≠r_sockë_›t_£t
(
≠r_sockë_t
 *
sock
,

114 
≠r_öt32_t
 
›t
,á¥_öt32_à
⁄
)

116 
⁄e
;

117 
≠r_°©us_t
 
rv
;

119 i‡(
⁄
)

120 
⁄e
 = 1;

122 
⁄e
 = 0;

123 
›t
) {

124 
APR_SO_KEEPALIVE
:

125 #ifde‡
SO_KEEPALIVE


126 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_KEEPALIVE
)) {

127 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
⁄e
, ()) == -1) {

128  
î∫o
;

130 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_KEEPALIVE
, 
⁄
);

133  
APR_ENOTIMPL
;

136 
APR_SO_DEBUG
:

137 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_DEBUG
)) {

138 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_DEBUG
, (*)&
⁄e
, ()) == -1) {

139  
î∫o
;

141 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_DEBUG
, 
⁄
);

144 
APR_SO_BROADCAST
:

145 #ifde‡
SO_BROADCAST


146 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_BROADCAST
)) {

147 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
⁄e
, ()) == -1) {

148  
î∫o
;

150 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_BROADCAST
, 
⁄
);

153  
APR_ENOTIMPL
;

156 
APR_SO_REUSEADDR
:

157 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_REUSEADDR
)) {

158 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
⁄e
, ()) == -1) {

159  
î∫o
;

161 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_REUSEADDR
, 
⁄
);

164 
APR_SO_SNDBUF
:

165 #ifde‡
SO_SNDBUF


166 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
⁄
, ()) == -1) {

167  
î∫o
;

170  
APR_ENOTIMPL
;

173 
APR_SO_RCVBUF
:

174 #ifde‡
SO_RCVBUF


175 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
⁄
, ()) == -1) {

176  
î∫o
;

179  
APR_ENOTIMPL
;

182 
APR_SO_NONBLOCK
:

183 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
Ë!
⁄
) {

184 i‡(
⁄
) {

185 i‡((
rv
 = 
	`s⁄⁄block
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

186  
rv
;

189 i‡((
rv
 = 
	`soblock
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

190  
rv
;

192 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_NONBLOCK
, 
⁄
);

195 
APR_SO_LINGER
:

196 #ifde‡
SO_LINGER


197 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_LINGER
Ë!
⁄
) {

198 
lögî
 
li
;

199 
li
.
l_⁄off
 = 
⁄
;

200 
li
.
l_lögî
 = 
APR_MAX_SECS_TO_LINGER
;

201 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_LINGER
, (*Ë&
li
, (
lögî
)) == -1) {

202  
î∫o
;

204 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_LINGER
, 
⁄
);

207  
APR_ENOTIMPL
;

210 
APR_TCP_DEFER_ACCEPT
:

211 #i‡
	`deföed
(
TCP_DEFER_ACCEPT
)

212 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_DEFER_ACCEPT
Ë!
⁄
) {

213 
›éevñ
 = 
IPPROTO_TCP
;

214 
›äame
 = 
TCP_DEFER_ACCEPT
;

216 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
,

217 (*)&
⁄
, ()) == -1) {

218  
î∫o
;

220 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_DEFER_ACCEPT
, 
⁄
);

223  
APR_ENOTIMPL
;

226 
APR_TCP_NODELAY
:

227 #i‡
	`deföed
(
TCP_NODELAY
)

228 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NODELAY
Ë!
⁄
) {

229 
›éevñ
 = 
IPPROTO_TCP
;

230 
›äame
 = 
TCP_NODELAY
;

232 #i‡
APR_HAVE_SCTP


233 i‡(
sock
->
¥Ÿocﬁ
 =
IPPROTO_SCTP
) {

234 
›éevñ
 = 
IPPROTO_SCTP
;

235 
›äame
 = 
SCTP_NODELAY
;

238 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
, (*)&
⁄
, ()) == -1) {

239  
î∫o
;

241 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_NODELAY
, 
⁄
);

248 #ifde‡
BEOS


249 i‡(
⁄
 == 1)

250  
APR_SUCCESS
;

253  
APR_ENOTIMPL
;

256 
APR_TCP_NOPUSH
:

257 #i‡
APR_TCP_NOPUSH_FLAG


263 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NOPUSH
Ë!
⁄
) {

264 #i‚de‡
HAVE_TCP_NODELAY_WITH_CORK


265 
›éevñ
 = 
IPPROTO_TCP
;

266 
›äame
 = 
TCP_NODELAY
;

268 #i‡
APR_HAVE_SCTP


269 i‡(
sock
->
¥Ÿocﬁ
 =
IPPROTO_SCTP
) {

270 
›éevñ
 = 
IPPROTO_SCTP
;

271 
›äame
 = 
SCTP_NODELAY
;

275 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NODELAY
Ë=1 && 
⁄
) {

278 
tmpÊag
 = 0;

279 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
,

280 (*)&
tmpÊag
, ()) == -1) {

281  
î∫o
;

283 
	`≠r_£t_›ti⁄
(
sock
, 
APR_RESET_NODELAY
, 1);

284 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_NODELAY
, 0);

285 } i‡(
⁄
) {

286 
	`≠r_£t_›ti⁄
(
sock
, 
APR_RESET_NODELAY
, 0);

291 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_TCP
, 
APR_TCP_NOPUSH_FLAG
,

292 (*)&
⁄
, ()) == -1) {

293  
î∫o
;

295 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_NOPUSH
, 
⁄
);

296 #i‚de‡
HAVE_TCP_NODELAY_WITH_CORK


297 i‡(!
⁄
 && 
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_RESET_NODELAY
)) {

301 
tmpÊag
 = 1;

302 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
,

303 (*)&
tmpÊag
, ()) == -1) {

304  
î∫o
;

306 
	`≠r_£t_›ti⁄
(
sock
, 
APR_RESET_NODELAY
,0);

307 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_NODELAY
, 1);

312  
APR_ENOTIMPL
;

315 
APR_INCOMPLETE_READ
:

316 
	`≠r_£t_›ti⁄
(
sock
, 
APR_INCOMPLETE_READ
, 
⁄
);

318 
APR_IPV6_V6ONLY
:

319 #i‡
APR_HAVE_IPV6
 && 
	`deföed
(
IPV6_V6ONLY
)

324 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

325 (*)&
⁄
, ()) == -1) {

326  
î∫o
;

328 
	`≠r_£t_›ti⁄
(
sock
, 
APR_IPV6_V6ONLY
, 
⁄
);

330  
APR_ENOTIMPL
;

334  
APR_EINVAL
;

337  
APR_SUCCESS
;

338 
	}
}

341 
≠r_°©us_t
 
	$≠r_sockë_timeout_gë
(
≠r_sockë_t
 *
sock
, 
≠r_öãrvÆ_time_t
 *
t
)

343 *
t
 = 
sock
->
timeout
;

344  
APR_SUCCESS
;

345 
	}
}

348 
≠r_°©us_t
 
	$≠r_sockë_›t_gë
(
≠r_sockë_t
 *
sock
,

349 
≠r_öt32_t
 
›t
,á¥_öt32_à*
⁄
)

351 
›t
) {

353 *
⁄
 = 
	`≠r_is_›ti⁄_£t
(
sock
, 
›t
);

355  
APR_SUCCESS
;

356 
	}
}

359 
≠r_°©us_t
 
	$≠r_sockë_©m¨k
(
≠r_sockë_t
 *
sock
, *
©m¨k
)

361 #i‚de‡
BEOS_R5


362 
oobm¨k
;

364 i‡(
	`io˘l
(
sock
->
sockëdes
, 
SIOCATMARK
, (*Ë&
oobm¨k
) < 0)

365  
	`≠r_gë_√tos_îr‹
();

367 *
©m¨k
 = (
oobm¨k
 != 0);

369  
APR_SUCCESS
;

371  
APR_ENOTIMPL
;

373 
	}
}

375 
≠r_°©us_t
 
	$≠r_gëho°«me
(*
buf
, 
≠r_öt32_t
 
Àn
, 
≠r_poﬁ_t
 *
c⁄t
)

377 #ifde‡
BEOS_R5


378 i‡(
	`gëho°«me
(
buf
, 
Àn
) == 0) {

380 i‡(
	`gëho°«me
(
buf
, 
Àn
) != 0) {

382 
buf
[0] = '\0';

383  
î∫o
;

385 i‡(!
	`memchr
(
buf
, '\0', 
Àn
)) {

389 
buf
[0] = '\0';

390  
APR_ENAMETOOLONG
;

392  
APR_SUCCESS
;

393 
	}
}

395 #i‡
APR_HAS_SO_ACCEPTFILTER


396 
≠r_°©us_t
 
	$≠r_sockë_ac˚±_fûãr
(
≠r_sockë_t
 *
sock
, *
n⁄c⁄°_«me
,

397 *
n⁄c⁄°_¨gs
)

400 c⁄° *
«me
 = 
n⁄c⁄°_«me
;

401 c⁄° *
¨gs
 = 
n⁄c⁄°_¨gs
;

403 
ac˚±_fûãr_¨g
 
af
;

404 
sockÀn_t
 
›éí
 = (
af
);

409 i‡((
	`gësock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

410 &
af
, &
›éí
)) == 0) {

411 i‡(!
	`°rcmp
(
«me
, 
af
.
af_«me
Ë&& !°rcmp(
¨gs
,áf.
af_¨g
)) {

412  
APR_SUCCESS
;

421 
	`≠r_˝y°∫
(
af
.
af_«me
, 
«me
, 16);

422 
	`≠r_˝y°∫
(
af
.
af_¨g
, 
¨gs
, 256 - 16);

424 i‡((
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

425 &
af
, (af))) < 0) {

426  
î∫o
;

428  
APR_SUCCESS
;

429 
	}
}

	@network_io/win32/sendrecv.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_√tw‹k_io.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 #i‡
APR_HAVE_TIME_H


24 
	~<time.h
>

36 
	#MAX_SEGMENT_SIZE
 65536

	)

37 
	#WSABUF_ON_STACK
 50

	)

39 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£nd
(
≠r_sockë_t
 *
sock
, c⁄° *
buf
,

40 
≠r_size_t
 *
Àn
)

42 
≠r_ssize_t
 
rv
;

43 
WSABUF
 
wßD©a
;

44 
œ°îr‹
;

45 
DWORD
 
dwByãs
 = 0;

47 
wßD©a
.
Àn
 = (
u_l⁄g
)*len;

48 
wßD©a
.
buf
 = (*) buf;

50 #i‚de‡
_WIN32_WCE


51 
rv
 = 
	`WSASíd
(
sock
->
sockëdes
, &
wßD©a
, 1, &
dwByãs
, 0, 
NULL
, NULL);

53 
rv
 = 
	`£nd
(
sock
->
sockëdes
, 
wßD©a
.
buf
, wßD©a.
Àn
, 0);

54 
dwByãs
 = 
rv
;

56 i‡(
rv
 =
SOCKET_ERROR
) {

57 
œ°îr‹
 = 
	`≠r_gë_√tos_îr‹
();

58 *
Àn
 = 0;

59  
œ°îr‹
;

62 *
Àn
 = 
dwByãs
;

64  
APR_SUCCESS
;

65 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv
(
≠r_sockë_t
 *
sock
, *
buf
,

69 
≠r_size_t
 *
Àn
)

71 
≠r_ssize_t
 
rv
;

72 
WSABUF
 
wßD©a
;

73 
œ°îr‹
;

74 
DWORD
 
dwByãs
 = 0;

75 
DWORD
 
Êags
 = 0;

77 
wßD©a
.
Àn
 = (
u_l⁄g
)*len;

78 
wßD©a
.
buf
 = (*) buf;

80 #i‚de‡
_WIN32_WCE


81 
rv
 = 
	`WSARecv
(
sock
->
sockëdes
, &
wßD©a
, 1, &
dwByãs
, &
Êags
, 
NULL
, NULL);

83 
rv
 = 
	`ªcv
(
sock
->
sockëdes
, 
wßD©a
.
buf
, wßD©a.
Àn
, 0);

84 
dwByãs
 = 
rv
;

86 i‡(
rv
 =
SOCKET_ERROR
) {

87 
œ°îr‹
 = 
	`≠r_gë_√tos_îr‹
();

88 *
Àn
 = 0;

89  
œ°îr‹
;

92 *
Àn
 = 
dwByãs
;

93  
dwByãs
 =0 ? 
APR_EOF
 : 
APR_SUCCESS
;

94 
	}
}

97 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndv
(
≠r_sockë_t
 *
sock
,

98 c⁄° 
iovec
 *
vec
,

99 
≠r_öt32_t
 
ö_vec
, 
≠r_size_t
 *
nbyãs
)

101 
≠r_°©us_t
 
rc
 = 
APR_SUCCESS
;

102 
≠r_ssize_t
 
rv
;

103 
≠r_size_t
 
cur_Àn
;

104 
≠r_öt32_t
 
nvec
 = 0;

105 
i
, 
j
 = 0;

106 
DWORD
 
dwByãs
 = 0;

107 
WSABUF
 *
pWßBuf
;

109 
i
 = 0; i < 
ö_vec
; i++) {

110 
cur_Àn
 = 
vec
[
i
].
iov_Àn
;

111 
nvec
++;

112 
cur_Àn
 > 
APR_DWORD_MAX
) {

113 
nvec
++;

114 
cur_Àn
 -
APR_DWORD_MAX
;

118 
pWßBuf
 = (
nvec
 <
WSABUF_ON_STACK
Ë? 
	`_Æloˇ
((
WSABUF
) * (nvec))

119 : 
	`mÆloc
((
WSABUF
Ë* (
nvec
));

120 i‡(!
pWßBuf
)

121  
APR_ENOMEM
;

123 
i
 = 0; i < 
ö_vec
; i++) {

124 * 
ba£
 = 
vec
[
i
].
iov_ba£
;

125 
cur_Àn
 = 
vec
[
i
].
iov_Àn
;

128 i‡(
cur_Àn
 > 
APR_DWORD_MAX
) {

129 
pWßBuf
[
j
].
buf
 = 
ba£
;

130 
pWßBuf
[
j
].
Àn
 = 
APR_DWORD_MAX
;

131 
cur_Àn
 -
APR_DWORD_MAX
;

132 
ba£
 +
APR_DWORD_MAX
;

135 
pWßBuf
[
j
].
buf
 = 
ba£
;

136 
pWßBuf
[
j
].
Àn
 = (
DWORD
)
cur_Àn
;

137 
cur_Àn
 = 0;

139 
j
++;

141 } 
cur_Àn
 > 0);

143 #i‚de‡
_WIN32_WCE


144 
rv
 = 
	`WSASíd
(
sock
->
sockëdes
, 
pWßBuf
, 
nvec
, &
dwByãs
, 0, 
NULL
, NULL);

145 i‡(
rv
 =
SOCKET_ERROR
) {

146 
rc
 = 
	`≠r_gë_√tos_îr‹
();

149 
i
 = 0; i < 
nvec
; i++) {

150 
rv
 = 
	`£nd
(
sock
->
sockëdes
, 
pWßBuf
[
i
].
buf
,ÖWßBuf[i].
Àn
, 0);

151 i‡(
rv
 =
SOCKET_ERROR
) {

152 
rc
 = 
	`≠r_gë_√tos_îr‹
();

155 
dwByãs
 +
rv
;

158 i‡(
nvec
 > 
WSABUF_ON_STACK
)

159 
	`‰ì
(
pWßBuf
);

161 *
nbyãs
 = 
dwByãs
;

162  
rc
;

163 
	}
}

166 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndto
(
≠r_sockë_t
 *
sock
,

167 
≠r_sockaddr_t
 *
whîe
,

168 
≠r_öt32_t
 
Êags
, c⁄° *
buf
,

169 
≠r_size_t
 *
Àn
)

171 
≠r_ssize_t
 
rv
;

173 
rv
 = 
	`£ndto
(
sock
->
sockëdes
, 
buf
, ()*
Àn
, 
Êags
,

174 (c⁄° 
sockaddr
*)&
whîe
->
ß
,

175 
whîe
->
ßÀn
);

176 i‡(
rv
 =
SOCKET_ERROR
) {

177 *
Àn
 = 0;

178  
	`≠r_gë_√tos_îr‹
();

181 *
Àn
 = 
rv
;

182  
APR_SUCCESS
;

183 
	}
}

186 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ªcv‰om
(
≠r_sockaddr_t
 *
‰om
,

187 
≠r_sockë_t
 *
sock
,

188 
≠r_öt32_t
 
Êags
,

189 *
buf
, 
≠r_size_t
 *
Àn
)

191 
≠r_ssize_t
 
rv
;

193 
‰om
->
ßÀn
 = (‰om->
ß
);

195 
rv
 = 
	`ªcv‰om
(
sock
->
sockëdes
, 
buf
, ()*
Àn
, 
Êags
,

196 (
sockaddr
*)&
‰om
->
ß
, &‰om->
ßÀn
);

197 i‡(
rv
 =
SOCKET_ERROR
) {

198 (*
Àn
) = 0;

199  
	`≠r_gë_√tos_îr‹
();

202 
	`≠r_sockaddr_v¨s_£t
(
‰om
, from->
ß
.
sö
.
sö_Ámûy
,

203 
	`¡ohs
(
‰om
->
ß
.
sö
.
sö_p‹t
));

205 (*
Àn
Ë
rv
;

206 i‡(
rv
 =0 && 
sock
->
ty≥
 =
SOCK_STREAM
)

207  
APR_EOF
;

209  
APR_SUCCESS
;

210 
	}
}

213 #i‡
APR_HAS_SENDFILE


214 
≠r_°©us_t
 
	$cﬁœp£_iovec
(**
off
, 
≠r_size_t
 *
Àn
,

215 
iovec
 *iovec, 
numvec
,

216 *
buf
, 
≠r_size_t
 
buÊí
)

218 i‡(
numvec
 == 1) {

219 *
off
 = 
iovec
[0].
iov_ba£
;

220 *
Àn
 = 
iovec
[0].
iov_Àn
;

223 
i
;

224 
i
 = 0; i < 
numvec
; i++) {

225 *
Àn
 +
iovec
[
i
].
iov_Àn
;

228 i‡(*
Àn
 > 
buÊí
) {

229 *
Àn
 = 0;

230  
APR_INCOMPLETE
;

233 *
off
 = 
buf
;

235 
i
 = 0; i < 
numvec
; i++) {

236 
	`mem˝y
(
buf
, 
iovec
[
i
].
iov_ba£
, iovec[i].
iov_Àn
);

237 
buf
 +
iovec
[
i
].
iov_Àn
;

240  
APR_SUCCESS
;

241 
	}
}

256 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_£ndfûe
(
≠r_sockë_t
 *
sock
,

257 
≠r_fûe_t
 *
fûe
,

258 
≠r_hdå_t
 *
hdå
,

259 
≠r_off_t
 *
off£t
,

260 
≠r_size_t
 *
Àn
,

261 
≠r_öt32_t
 
Êags
)

263 
≠r_°©us_t
 
°©us
 = 
APR_SUCCESS
;

264 
≠r_°©us_t
 
rv
;

265 
≠r_off_t
 
curoff
 = *
off£t
;

266 
DWORD
 
dwFœgs
 = 0;

267 
≠r_size_t
 
nbyãs
;

268 
TRANSMIT_FILE_BUFFERS
 
tfb
, *
±fb
 = 
NULL
;

269 
≠r_size_t
 
byãs_to_£nd
;

270 
disc⁄√˘ed
 = 0;

271 
£ndv_åaûîs
 = 0;

272 
hdåbuf
[4096];

274 i‡(
≠r_os_Àvñ
 < 
APR_WIN_NT
) {

275  
APR_ENOTIMPL
;

279 
byãs_to_£nd
 = *
Àn
;

280 *
Àn
 = 0;

283 i‡(!
byãs_to_£nd
 && 
hdå
) {

284 i‡(
hdå
->
numhódîs
) {

285 
rv
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
hódîs
, hdå->
numhódîs
,

286 &
nbyãs
);

287 i‡(
rv
 !
APR_SUCCESS
)

288  
rv
;

289 *
Àn
 +
nbyãs
;

291 i‡(
hdå
->
numåaûîs
) {

292 
rv
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
åaûîs
, hdå->
numåaûîs
,

293 &
nbyãs
);

294 i‡(
rv
 !
APR_SUCCESS
)

295  
rv
;

296 *
Àn
 +
nbyãs
;

298  
APR_SUCCESS
;

301 
	`mem£t
(&
tfb
, '\0',  (tfb));

304 i‡(
hdå
 && hdå->
numhódîs
) {

305 
≠r_size_t
 
hód_Àngth
 = 
tfb
.
HódLígth
;

306 
±fb
 = &
tfb
;

307 
nbyãs
 = 0;

308 
rv
 = 
	`cﬁœp£_iovec
((**)&
±fb
->
Hód
, &
hód_Àngth
,

309 
hdå
->
hódîs
, hdå->
numhódîs
,

310 
hdåbuf
, (hdtrbuf));

312 
tfb
.
HódLígth
 = (
DWORD
)
hód_Àngth
;

315 i‡(
rv
 =
APR_INCOMPLETE
) {

316 
rv
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
hódîs
, hdå->
numhódîs
, &
nbyãs
);

317 i‡(
rv
 !
APR_SUCCESS
)

318  
rv
;

319 *
Àn
 +
nbyãs
;

320 
±fb
 = 
NULL
;

326 i‡(!
sock
->
ovîœµed
) {

327 
sock
->
ovîœµed
 = 
	`≠r_pˇŒoc
(sock->
poﬁ
, (
OVERLAPPED
));

328 
sock
->
ovîœµed
->
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

330 
byãs_to_£nd
) {

331 
DWORD
 
xmôbyãs
;

333 i‡(
byãs_to_£nd
 > 
MAX_SEGMENT_SIZE
) {

334 
xmôbyãs
 = 
MAX_SEGMENT_SIZE
;

338 
xmôbyãs
 = (
DWORD
)
byãs_to_£nd
;

340 i‡(
hdå
 && hdå->
numåaûîs
) {

341 
≠r_size_t
 
èû_Àngth
 = 
tfb
.
TaûLígth
;

342 
±fb
 = &
tfb
;

343 
rv
 = 
	`cﬁœp£_iovec
((**Ë&
±fb
->
Taû
, &
èû_Àngth
,

344 
hdå
->
åaûîs
, hdå->
numåaûîs
,

345 
hdåbuf
 + 
±fb
->
HódLígth
,

346 (
hdåbuf
Ë- 
±fb
->
HódLígth
);

348 
tfb
.
TaûLígth
 = (
DWORD
)
èû_Àngth
;

350 i‡(
rv
 =
APR_INCOMPLETE
) {

352 
£ndv_åaûîs
 = 1;

356 i‡((
Êags
 & 
APR_SENDFILE_DISCONNECT_SOCKET
)

357 && !
£ndv_åaûîs
) {

358 
dwFœgs
 |
TF_REUSE_SOCKET
;

359 
dwFœgs
 |
TF_DISCONNECT
;

360 
disc⁄√˘ed
 = 1;

364 
sock
->
ovîœµed
->
Off£t
 = (
DWORD
)(
curoff
);

365 #i‡
APR_HAS_LARGE_FILES


366 
sock
->
ovîœµed
->
Off£tHigh
 = (
DWORD
)(
curoff
 >> 32);

369 
rv
 = 
	`TønsmôFûe
(
sock
->
sockëdes
,

370 
fûe
->
fûeh™d
,

371 
xmôbyãs
,

373 
sock
->
ovîœµed
,

374 
±fb
,

375 
dwFœgs
);

376 i‡(!
rv
) {

377 
°©us
 = 
	`≠r_gë_√tos_îr‹
();

378 i‡((
°©us
 =
	`APR_FROM_OS_ERROR
(
ERROR_IO_PENDING
)) ||

379 (
°©us
 =
	`APR_FROM_OS_ERROR
(
WSA_IO_PENDING
)))

381 
rv
 = 
	`WaôF‹SögÀObje˘
(
sock
->
ovîœµed
->
hEvít
,

382 (
DWORD
)(
sock
->
timeout
 >= 0

383 ? 
sock
->
timeout_ms
 : 
INFINITE
));

384 i‡(
rv
 =
WAIT_OBJECT_0
) {

385 
°©us
 = 
APR_SUCCESS
;

386 i‡(!
disc⁄√˘ed
) {

387 i‡(!
	`WSAGëOvîœµedResu…
(
sock
->
sockëdes
,

388 
sock
->
ovîœµed
,

389 &
xmôbyãs
,

390 
FALSE
,

391 &
dwFœgs
)) {

392 
°©us
 = 
	`≠r_gë_√tos_îr‹
();

398 i‡(
±fb
) {

399 
xmôbyãs
 -(
±fb
->
HódLígth
 +Ötfb->
TaûLígth
);

403 i‡(
rv
 =
WAIT_TIMEOUT
) {

404 
°©us
 = 
	`APR_FROM_OS_ERROR
(
WAIT_TIMEOUT
);

406 i‡(
rv
 =
WAIT_ABANDONED
) {

413 
°©us
 = 
	`APR_FROM_OS_ERROR
(
WAIT_TIMEOUT
);

416 
°©us
 = 
	`≠r_gë_os_îr‹
();

419 i‡(
°©us
 !
APR_SUCCESS
)

422 
byãs_to_£nd
 -
xmôbyãs
;

423 
curoff
 +
xmôbyãs
;

424 *
Àn
 +
xmôbyãs
;

426 i‡(
±fb
) {

427 *
Àn
 +(
±fb
->
HódLígth
 +Ötfb->
TaûLígth
);

428 
	`mem£t
(&
tfb
, '\0',  (tfb));

429 
±fb
 = 
NULL
;

433 i‡(
°©us
 =
APR_SUCCESS
) {

434 i‡(
£ndv_åaûîs
) {

435 
rv
 = 
	`≠r_sockë_£ndv
(
sock
, 
hdå
->
åaûîs
, hdå->
numåaûîs
, &
nbyãs
);

436 i‡(
rv
 !
APR_SUCCESS
)

437  
rv
;

438 *
Àn
 +
nbyãs
;

447 i‡(
disc⁄√˘ed
) {

448 
sock
->
disc⁄√˘ed
 = 1;

449 
sock
->
sockëdes
 = 
INVALID_SOCKET
;

453  
°©us
;

454 
	}
}

	@network_io/win32/sockets.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_√tw‹k_io.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 
	~"≠r_°rögs.h
"

23 
	~<°rög.h
>

24 
	~"≠r_¨ch_öhîô.h
"

25 
	~"≠r_¨ch_misc.h
"

27 
	ggíîic_öaddr_™y
[16] = {0};

29 
≠r_°©us_t
 
	$sockë_˛ónup
(*
sock
)

31 
≠r_sockë_t
 *
thesockë
 = 
sock
;

33 i‡(
thesockë
->
sockëdes
 !
INVALID_SOCKET
) {

34 i‡(
	`˛o£sockë
(
thesockë
->
sockëdes
Ë=
SOCKET_ERROR
) {

35  
	`≠r_gë_√tos_îr‹
();

37 
thesockë
->
sockëdes
 = 
INVALID_SOCKET
;

39 #i‡
APR_HAS_SENDFILE


40 i‡(
thesockë
->
ovîœµed
) {

41 
	`Clo£H™dÀ
(
thesockë
->
ovîœµed
->
hEvít
);

42 
thesockë
->
ovîœµed
 = 
NULL
;

45  
APR_SUCCESS
;

46 
	}
}

48 
	$£t_sockë_v¨s
(
≠r_sockë_t
 *
sock
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
)

50 
sock
->
ty≥
 =Åype;

51 
sock
->
¥Ÿocﬁ
 =Örotocol;

52 
	`≠r_sockaddr_v¨s_£t
(
sock
->
loˇl_addr
, 
Ámûy
, 0);

53 
	`≠r_sockaddr_v¨s_£t
(
sock
->
ªmŸe_addr
, 
Ámûy
, 0);

54 #i‡
APR_HAVE_IPV6


56 i‡(
≠r_os_Àvñ
 < 
APR_WIN_VISTA
 && 
Ámûy
 =
AF_INET6
) {

57 
	`≠r_£t_›ti⁄
(
sock
, 
APR_IPV6_V6ONLY
, 1);

60 
	}
}

61 
	$Æloc_sockë
(
≠r_sockë_t
 **
√w
, 
≠r_poﬁ_t
 *
p
)

63 *
√w
 = (
≠r_sockë_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_socket_t));

64 (*
√w
)->
poﬁ
 = 
p
;

65 (*
√w
)->
loˇl_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

66 (
≠r_sockaddr_t
));

67 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
p
;

69 (*
√w
)->
ªmŸe_addr
 = (
≠r_sockaddr_t
 *)
	`≠r_pˇŒoc
((*√w)->
poﬁ
,

70 (
≠r_sockaddr_t
));

71 (*
√w
)->
ªmŸe_addr
->
poﬁ
 = 
p
;

72 (*
√w
)->
ªmŸe_addr_unknown
 = 1;

76 (Ë
	`≠r_pﬁl£t_¸óã
(&(*
√w
)->
pﬁl£t
, 1, 
p
, 0);

77 
	}
}

79 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_¥Ÿocﬁ_gë
(
≠r_sockë_t
 *
sock
,

80 *
¥Ÿocﬁ
)

82 *
¥Ÿocﬁ
 = 
sock
->protocol;

83  
APR_SUCCESS
;

84 
	}
}

86 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_¸óã
(
≠r_sockë_t
 **
√w
, 
Ámûy
,

87 
ty≥
, 
¥Ÿocﬁ
,

88 
≠r_poﬁ_t
 *
c⁄t
)

90 #i‡
APR_HAVE_IPV6


91 
downgøde
 = (
Ámûy
 =
AF_UNSPEC
);

94 i‡(
Ámûy
 =
AF_UNSPEC
) {

95 #i‡
APR_HAVE_IPV6


96 
Ámûy
 = 
AF_INET6
;

98 
Ámûy
 = 
AF_INET
;

102 
	`Æloc_sockë
(
√w
, 
c⁄t
);

107 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

108 #i‡
APR_HAVE_IPV6


109 i‡((*
√w
)->
sockëdes
 =
INVALID_SOCKET
 && 
downgøde
) {

110 
Ámûy
 = 
AF_INET
;

111 (*
√w
)->
sockëdes
 = 
	`sockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

115 i‡((*
√w
)->
sockëdes
 =
INVALID_SOCKET
) {

116  
	`≠r_gë_√tos_îr‹
();

119 #ifde‡
WIN32


125 #i‡
APR_HAS_UNICODE_FS
 && !
	`deföed
(
_WIN32_WCE
)

126 
IF_WIN_OS_IS_UNICODE
 {

136 
	`SëH™dÀInf‹m©i⁄
((
HANDLE
Ë(*
√w
)->
sockëdes
,

137 
HANDLE_FLAG_INHERIT
, 0);

139 #i‡
APR_HAS_ANSI_FS


141 
ELSE_WIN_OS_IS_ANSI


144 #i‡
APR_HAS_ANSI_FS
 || 
	`deföed
(
_WIN32_WCE
)

146 
HANDLE
 
hPro˚ss
 = 
	`GëCuºítPro˚ss
();

147 
HANDLE
 
dup
;

148 i‡(
	`Du∂iˇãH™dÀ
(
hPro˚ss
, (
HANDLE
Ë(*
√w
)->
sockëdes
, hProcess,

149 &
dup
, 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
)) {

150 
	`˛o£sockë
((*
√w
)->
sockëdes
);

151 (*
√w
)->
sockëdes
 = (
SOCKET
Ë
dup
;

158 
	`£t_sockë_v¨s
(*
√w
, 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

160 (*
√w
)->
timeout
 = -1;

161 (*
√w
)->
disc⁄√˘ed
 = 0;

163 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*new),

164 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

166  
APR_SUCCESS
;

167 
	}
}

169 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_shutdown
(
≠r_sockë_t
 *
thesockë
,

170 
≠r_shutdown_how_e
 
how
)

172 
wöhow
 = 0;

174 #ifde‡
SD_RECEIVE


175 
how
) {

176 
APR_SHUTDOWN_READ
: {

177 
wöhow
 = 
SD_RECEIVE
;

180 
APR_SHUTDOWN_WRITE
: {

181 
wöhow
 = 
SD_SEND
;

184 
APR_SHUTDOWN_READWRITE
: {

185 
wöhow
 = 
SD_BOTH
;

189  
APR_BADARG
;

192 i‡(
	`shutdown
(
thesockë
->
sockëdes
, 
wöhow
) == 0) {

193  
APR_SUCCESS
;

196  
	`≠r_gë_√tos_îr‹
();

198 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_˛o£
(
≠r_sockë_t
 *
thesockë
)

202 
	`≠r_poﬁ_˛ónup_kûl
(
thesockë
->
poﬁ
,Åhesockë, 
sockë_˛ónup
);

203  
	`sockë_˛ónup
(
thesockë
);

204 
	}
}

206 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_böd
(
≠r_sockë_t
 *
sock
,

207 
≠r_sockaddr_t
 *
ß
)

209 i‡(
	`böd
(
sock
->
sockëdes
,

210 (
sockaddr
 *)&
ß
->sa,

211 
ß
->
ßÀn
) == -1) {

212  
	`≠r_gë_√tos_îr‹
();

215 
sock
->
loˇl_addr
 = 
ß
;

216 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_p‹t
 == 0) {

217 
sock
->
loˇl_p‹t_unknown
 = 1;

219  
APR_SUCCESS
;

221 
	}
}

223 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_li°í
(
≠r_sockë_t
 *
sock
,

224 
≠r_öt32_t
 
backlog
)

226 i‡(
	`li°í
(
sock
->
sockëdes
, 
backlog
Ë=
SOCKET_ERROR
)

227  
	`≠r_gë_√tos_îr‹
();

229  
APR_SUCCESS
;

230 
	}
}

232 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ac˚±
(
≠r_sockë_t
 **
√w
,

233 
≠r_sockë_t
 *
sock
, 
≠r_poﬁ_t
 *
p
)

235 
SOCKET
 
s
;

236 #i‡
APR_HAVE_IPV6


237 
sockaddr_°‹age
 
ß
;

239 
sockaddr
 
ß
;

241 
ßÀn
 = (
sock
->
ªmŸe_addr
->
ß
);

245 
s
 = 
	`ac˚±
(
sock
->
sockëdes
, (
sockaddr
 *)&
ß
, &
ßÀn
);

246 i‡(
s
 =
INVALID_SOCKET
) {

247  
	`≠r_gë_√tos_îr‹
();

250 
	`Æloc_sockë
(
√w
, 
p
);

251 
	`£t_sockë_v¨s
(*
√w
, 
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
, 
SOCK_STREAM
,

252 
sock
->
¥Ÿocﬁ
);

254 (*
√w
)->
timeout
 = -1;

255 (*
√w
)->
disc⁄√˘ed
 = 0;

257 (*
√w
)->
sockëdes
 = 
s
;

259 (*
√w
)->
ªmŸe_addr
->
ßÀn
 = ((*√w)->ªmŸe_addr->
ß
);

260 
	`mem˝y
 (&(*
√w
)->
ªmŸe_addr
->
ß
, &ß, 
ßÀn
);

261 *(*
√w
)->
loˇl_addr
 = *
sock
->local_addr;

262 (*
√w
)->
ªmŸe_addr_unknown
 = 0;

268 (*
√w
)->
loˇl_addr
->
poﬁ
 = 
p
;

271 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
) {

272 (*
√w
)->
loˇl_addr
->
ùaddr_±r
 = &(*√w)->loˇl_addr->
ß
.
sö
.
sö_addr
;

274 #i‡
APR_HAVE_IPV6


275 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET6
) {

276 (*
√w
)->
loˇl_addr
->
ùaddr_±r
 = &(*√w)->loˇl_addr->
ß
.
sö6
.
sö6_addr
;

279 (*
√w
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*√w)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

280 i‡(
sock
->
loˇl_p‹t_unknown
) {

282 (*
√w
)->
loˇl_p‹t_unknown
 = 1;

285 #i‡
APR_TCP_NODELAY_INHERITED


286 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NODELAY
) == 1) {

287 
	`≠r_£t_›ti⁄
(*
√w
, 
APR_TCP_NODELAY
, 1);

290 #i‡
APR_O_NONBLOCK_INHERITED


291 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
) == 1) {

292 
	`≠r_£t_›ti⁄
(*
√w
, 
APR_SO_NONBLOCK
, 1);

296 i‡(
sock
->
loˇl_öãrÁ˚_unknown
 ||

297 !
	`memcmp
(
sock
->
loˇl_addr
->
ùaddr_±r
,

298 
gíîic_öaddr_™y
,

299 
sock
->
loˇl_addr
->
ùaddr_Àn
)) {

306 (*
√w
)->
loˇl_öãrÁ˚_unknown
 = 1;

309 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
√w
)->
poﬁ
, (*)(*new),

310 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

311  
APR_SUCCESS
;

312 
	}
}

314 
≠r_°©us_t
 
	$waô_f‹_c⁄√˘
(
≠r_sockë_t
 *
sock
)

316 
rc
;

317 
timevÆ
 
tv
, *
tv±r
;

318 
fd_£t
 
wfd£t
, 
efd£t
;

321 
	`FD_ZERO
(&
wfd£t
);

322 
	`FD_SET
(
sock
->
sockëdes
, &
wfd£t
);

323 
	`FD_ZERO
(&
efd£t
);

324 
	`FD_SET
(
sock
->
sockëdes
, &
efd£t
);

326 i‡(
sock
->
timeout
 < 0) {

327 
tv±r
 = 
NULL
;

331 
tv
.
tv_£c
 = ()
	`≠r_time_£c
(
sock
->
timeout
);

332 
tv
.
tv_u£c
 = ()
	`≠r_time_u£c
(
sock
->
timeout
);

333 
tv±r
 = &
tv
;

335 
rc
 = 
	`£À˘
(
FD_SETSIZE
+1, 
NULL
, &
wfd£t
, &
efd£t
, 
tv±r
);

336 i‡(
rc
 =
SOCKET_ERROR
) {

337  
	`≠r_gë_√tos_îr‹
();

339 i‡(!
rc
) {

340  
	`APR_FROM_OS_ERROR
(
WSAETIMEDOUT
);

343 i‡(
	`FD_ISSET
(
sock
->
sockëdes
, &
efd£t
)) {

345 
r˛í
 = (
rc
);

346 i‡(
	`gësock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
rc
, &
r˛í
)) {

347  
	`≠r_gë_√tos_îr‹
();

349  
	`APR_FROM_OS_ERROR
(
rc
);

352  
APR_SUCCESS
;

353 
	}
}

355 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_c⁄√˘
(
≠r_sockë_t
 *
sock
,

356 
≠r_sockaddr_t
 *
ß
)

358 
≠r_°©us_t
 
rv
;

360 i‡((
sock
->
sockëdes
 =
INVALID_SOCKET
Ë|| (!sock->
loˇl_addr
)) {

361  
APR_ENOTSOCK
;

364 i‡(
	`c⁄√˘
(
sock
->
sockëdes
, (c⁄° 
sockaddr
 *)&
ß
->ß.
sö
,

365 
ß
->
ßÀn
Ë=
SOCKET_ERROR
) {

366 
rv
 = 
	`≠r_gë_√tos_îr‹
();

369 
rv
 = 
APR_SUCCESS
;

372 i‡(
rv
 =
	`APR_FROM_OS_ERROR
(
WSAEWOULDBLOCK
)) {

373 i‡(
sock
->
timeout
 == 0) {

379 
rv
 = 
	`APR_FROM_OS_ERROR
(
WSAEINPROGRESS
);

382 
rv
 = 
	`waô_f‹_c⁄√˘
(
sock
);

383 i‡(
rv
 !
APR_SUCCESS
) {

384  
rv
;

389 i‡(
	`memcmp
(
ß
->
ùaddr_±r
, 
gíîic_öaddr_™y
, sa->
ùaddr_Àn
)) {

393 
sock
->
ªmŸe_addr_unknown
 = 0;

396 
sock
->
ªmŸe_addr
 = 
ß
;

399 i‡(
sock
->
loˇl_addr
->
ß
.
sö
.
sö_p‹t
 == 0) {

401 
sock
->
loˇl_p‹t_unknown
 = 1;

403 i‡(!
	`memcmp
(
sock
->
loˇl_addr
->
ùaddr_±r
,

404 
gíîic_öaddr_™y
,

405 
sock
->
loˇl_addr
->
ùaddr_Àn
)) {

409 
sock
->
loˇl_öãrÁ˚_unknown
 = 1;

412 i‡(
rv
 !
APR_SUCCESS
 &&Ñv !
	`APR_FROM_OS_ERROR
(
WSAEISCONN
)) {

413  
rv
;

416  
APR_SUCCESS
;

417 
	}
}

419 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_ty≥_gë
(
≠r_sockë_t
 *
sock
, *
ty≥
)

421 *
ty≥
 = 
sock
->type;

422  
APR_SUCCESS
;

423 
	}
}

425 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_d©a_gë
(**
d©a
, c⁄° *
key
,

426 
≠r_sockë_t
 *
sock
)

428 
sock_u£rd©a_t
 *
cur
 = 
sock
->
u£rd©a
;

430 *
d©a
 = 
NULL
;

432 
cur
) {

433 i‡(!
	`°rcmp
(
cur
->
key
, key)) {

434 *
d©a
 = 
cur
->data;

437 
cur
 = cur->
√xt
;

440  
APR_SUCCESS
;

441 
	}
}

443 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_sockë_d©a_£t
(
≠r_sockë_t
 *
sock
, *
d©a
,

444 c⁄° *
key
,

445 
	$≠r_°©us_t
 (*
˛ónup
)(*))

447 
sock_u£rd©a_t
 *
√w
 = 
	`≠r_∑Œoc
(
sock
->
poﬁ
, (sock_userdata_t));

449 
√w
->
key
 = 
	`≠r_p°rdup
(
sock
->
poﬁ
, key);

450 
√w
->
d©a
 = data;

451 
√w
->
√xt
 = 
sock
->
u£rd©a
;

452 
sock
->
u£rd©a
 = 
√w
;

454 i‡(
˛ónup
) {

455 
	`≠r_poﬁ_˛ónup_ªgi°î
(
sock
->
poﬁ
, 
d©a
, 
˛ónup
, cleanup);

458  
APR_SUCCESS
;

459 
	}
}

461 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_gë
(
≠r_os_sock_t
 *
thesock
,

462 
≠r_sockë_t
 *
sock
)

464 *
thesock
 = 
sock
->
sockëdes
;

465  
APR_SUCCESS
;

466 
	}
}

468 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_make
(
≠r_sockë_t
 **
≠r_sock
,

469 
≠r_os_sock_öfo_t
 *
os_sock_öfo
,

470 
≠r_poﬁ_t
 *
c⁄t
)

472 
	`Æloc_sockë
(
≠r_sock
, 
c⁄t
);

473 
	`£t_sockë_v¨s
(*
≠r_sock
, 
os_sock_öfo
->
Ámûy
, os_sock_öfo->
ty≥
, os_sock_öfo->
¥Ÿocﬁ
);

474 (*
≠r_sock
)->
timeout
 = -1;

475 (*
≠r_sock
)->
disc⁄√˘ed
 = 0;

476 (*
≠r_sock
)->
sockëdes
 = *
os_sock_öfo
->
os_sock
;

477 i‡(
os_sock_öfo
->
loˇl
) {

478 
	`mem˝y
(&(*
≠r_sock
)->
loˇl_addr
->
ß
.
sö
,

479 
os_sock_öfo
->
loˇl
,

480 (*
≠r_sock
)->
loˇl_addr
->
ßÀn
);

481 (*
≠r_sock
)->
loˇl_addr
->
poﬁ
 = 
c⁄t
;

483 (*
≠r_sock
)->
loˇl_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->loˇl_addr->
ß
.
sö
.
sö_p‹t
);

486 (*
≠r_sock
)->
loˇl_p‹t_unknown
 = (*≠r_sock)->
loˇl_öãrÁ˚_unknown
 = 1;

488 i‡(
os_sock_öfo
->
ªmŸe
) {

489 
	`mem˝y
(&(*
≠r_sock
)->
ªmŸe_addr
->
ß
.
sö
,

490 
os_sock_öfo
->
ªmŸe
,

491 (*
≠r_sock
)->
ªmŸe_addr
->
ßÀn
);

492 (*
≠r_sock
)->
ªmŸe_addr
->
poﬁ
 = 
c⁄t
;

494 (*
≠r_sock
)->
ªmŸe_addr
->
p‹t
 = 
	`¡ohs
((*≠r_sock)->ªmŸe_addr->
ß
.
sö
.
sö_p‹t
);

495 (*
≠r_sock
)->
ªmŸe_addr_unknown
 = 0;

498 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
≠r_sock
)->
poﬁ
, (*)(*apr_sock),

499 
sockë_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

501  
APR_SUCCESS
;

502 
	}
}

504 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_sock_put
(
≠r_sockë_t
 **
sock
,

505 
≠r_os_sock_t
 *
thesock
,

506 
≠r_poﬁ_t
 *
c⁄t
)

508 i‡((*
sock
Ë=
NULL
) {

509 
	`Æloc_sockë
(
sock
, 
c⁄t
);

512 
	`£t_sockë_v¨s
(*
sock
, 
AF_INET
, 
SOCK_STREAM
, 0);

513 (*
sock
)->
timeout
 = -1;

514 (*
sock
)->
disc⁄√˘ed
 = 0;

516 (*
sock
)->
loˇl_p‹t_unknown
 = (*sock)->
loˇl_öãrÁ˚_unknown
 = 1;

517 (*
sock
)->
ªmŸe_addr_unknown
 = 1;

518 (*
sock
)->
sockëdes
 = *
thesock
;

519  
APR_SUCCESS
;

520 
	}
}

528 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_öhîô_£t
(
≠r_sockë_t
 *
sockë
)

530  
APR_ENOTIMPL
;

531 
	}
}

533 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_öhîô_un£t
(
≠r_sockë_t
 *
sockë
)

535  
APR_ENOTIMPL
;

536 
	}
}

538 
APR_POOL_IMPLEMENT_ACCESSOR
(
sockë
);

	@network_io/win32/sockopt.c

17 
	~"≠r_¨ch_√tw‹kio.h
"

18 
	~"≠r_¨ch_misc.h
"

19 
	~"≠r_√tw‹k_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_°rögs.h
"

22 
	~<°rög.h
>

28 #i‚de‡
IPV6_V6ONLY


29 
	#IPV6_V6ONLY
 27

	)

32 
≠r_°©us_t
 
	$soblock
(
SOCKET
 
sd
)

34 
u_l⁄g
 
zîo
 = 0;

36 i‡(
	`io˘lsockë
(
sd
, 
FIONBIO
, &
zîo
Ë=
SOCKET_ERROR
) {

37  
	`≠r_gë_√tos_îr‹
();

39  
APR_SUCCESS
;

40 
	}
}

42 
≠r_°©us_t
 
	$s⁄⁄block
(
SOCKET
 
sd
)

44 
u_l⁄g
 
⁄e
 = 1;

46 i‡(
	`io˘lsockë
(
sd
, 
FIONBIO
, &
⁄e
Ë=
SOCKET_ERROR
) {

47  
	`≠r_gë_√tos_îr‹
();

49  
APR_SUCCESS
;

50 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_timeout_£t
(
≠r_sockë_t
 *
sock
, 
≠r_öãrvÆ_time_t
 
t
)

55 
≠r_°©us_t
 
°©
;

57 i‡(
t
 == 0) {

59 i‡(
sock
->
timeout
 != 0) {

60 i‡((
°©
 = 
	`s⁄⁄block
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

61  
°©
;

64 i‡(
t
 > 0) {

66 i‡(
sock
->
timeout
 =0 || 
	`≠r_is_›ti⁄_£t
(sock, 
APR_SO_NONBLOCK
)) {

67 i‡((
°©
 = 
	`soblock
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

68  
°©
;

69 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_NONBLOCK
, 0);

72 i‡(
sock
->
timeout
 !
t
)

75 
sock
->
timeout_ms
 = ()
	`≠r_time_as_m£c
(
t
);

76 
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_RCVTIMEO
,

77 (*Ë&
sock
->
timeout_ms
,

78 (
sock
->
timeout_ms
));

79 
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_SNDTIMEO
,

80 (*Ë&
sock
->
timeout_ms
,

81 (
sock
->
timeout_ms
));

84 i‡(
t
 < 0) {

85 
zîo
 = 0;

87 i‡((
°©
 = 
	`soblock
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

88  
°©
;

89 
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_RCVTIMEO
,

90 (*Ë&
zîo
, (zero));

91 
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_SNDTIMEO
,

92 (*Ë&
zîo
, (zero));

94 
sock
->
timeout
 = 
t
;

95  
APR_SUCCESS
;

96 
	}
}

99 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_›t_£t
(
≠r_sockë_t
 *
sock
,

100 
≠r_öt32_t
 
›t
,á¥_öt32_à
⁄
)

102 
⁄e
;

103 
≠r_°©us_t
 
°©
;

105 
⁄e
 = 
⁄
 ? 1 : 0;

107 
›t
) {

108 
APR_SO_KEEPALIVE
:

109 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_KEEPALIVE
)) {

110 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

111 (*)&
⁄e
, ()) == -1) {

112  
	`≠r_gë_√tos_îr‹
();

114 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_KEEPALIVE
, 
⁄
);

117 
APR_SO_DEBUG
:

118 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_DEBUG
)) {

119 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_DEBUG
,

120 (*)&
⁄e
, ()) == -1) {

121  
	`≠r_gë_√tos_îr‹
();

123 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_DEBUG
, 
⁄
);

126 
APR_SO_SNDBUF
:

127 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_SNDBUF
,

128 (*)&
⁄
, ()) == -1) {

129  
	`≠r_gë_√tos_îr‹
();

132 
APR_SO_RCVBUF
:

133 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_RCVBUF
,

134 (*)&
⁄
, ()) == -1) {

135  
	`≠r_gë_√tos_îr‹
();

138 
APR_SO_BROADCAST
:

139 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_BROADCAST
)) {

140 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_BROADCAST
,

141 (*)&
⁄e
, ()) == -1) {

142  
	`≠r_gë_√tos_îr‹
();

144 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_BROADCAST
, 
⁄
);

147 
APR_SO_REUSEADDR
:

148 i‡(
⁄
 !
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_REUSEADDR
)) {

149 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

150 (*)&
⁄e
, ()) == -1) {

151  
	`≠r_gë_√tos_îr‹
();

153 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_REUSEADDR
, 
⁄
);

156 
APR_SO_NONBLOCK
:

157 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_NONBLOCK
Ë!
⁄
) {

158 i‡(
⁄
) {

159 i‡((
°©
 = 
	`s⁄⁄block
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

160  
°©
;

163 i‡((
°©
 = 
	`soblock
(
sock
->
sockëdes
)Ë!
APR_SUCCESS
)

164  
°©
;

166 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_NONBLOCK
, 
⁄
);

169 
APR_SO_LINGER
:

171 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_SO_LINGER
Ë!
⁄
) {

172 
lögî
 
li
;

173 
li
.
l_⁄off
 = 
⁄
;

174 
li
.
l_lögî
 = 
APR_MAX_SECS_TO_LINGER
;

175 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
SOL_SOCKET
, 
SO_LINGER
,

176 (*Ë&
li
, (
lögî
)) == -1) {

177  
	`≠r_gë_√tos_îr‹
();

179 
	`≠r_£t_›ti⁄
(
sock
, 
APR_SO_LINGER
, 
⁄
);

183 
APR_TCP_DEFER_ACCEPT
:

184 #i‡
	`deföed
(
TCP_DEFER_ACCEPT
)

185 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_DEFER_ACCEPT
Ë!
⁄
) {

186 
›éevñ
 = 
IPPROTO_TCP
;

187 
›äame
 = 
TCP_DEFER_ACCEPT
;

189 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
,

190 (*)&
⁄
, ()) == -1) {

191  
	`≠r_gë_√tos_îr‹
();

193 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_DEFER_ACCEPT
, 
⁄
);

196  
APR_ENOTIMPL
;

198 
APR_TCP_NODELAY
:

199 i‡(
	`≠r_is_›ti⁄_£t
(
sock
, 
APR_TCP_NODELAY
Ë!
⁄
) {

200 
›éevñ
 = 
IPPROTO_TCP
;

201 
›äame
 = 
TCP_NODELAY
;

203 #i‡
APR_HAVE_SCTP


204 i‡(
sock
->
¥Ÿocﬁ
 =
IPPROTO_SCTP
) {

205 
›éevñ
 = 
IPPROTO_SCTP
;

206 
›äame
 = 
SCTP_NODELAY
;

209 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
›éevñ
, 
›äame
,

210 (*)&
⁄
, ()) == -1) {

211  
	`≠r_gë_√tos_îr‹
();

213 
	`≠r_£t_›ti⁄
(
sock
, 
APR_TCP_NODELAY
, 
⁄
);

216 
APR_IPV6_V6ONLY
:

217 #i‡
APR_HAVE_IPV6


218 i‡(
≠r_os_Àvñ
 < 
APR_WIN_VISTA
 &&

219 
sock
->
loˇl_addr
->
Ámûy
 =
AF_INET6
) {

221 i‡(
⁄
) {

222  
APR_SUCCESS
;

225  
APR_ENOTIMPL
;

232 i‡(
	`£tsock›t
(
sock
->
sockëdes
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

233 (*)&
⁄
, ()) == -1) {

234  
	`≠r_gë_√tos_îr‹
();

236 
	`≠r_£t_›ti⁄
(
sock
, 
APR_IPV6_V6ONLY
, 
⁄
);

238  
APR_ENOTIMPL
;

242  
APR_EINVAL
;

245  
APR_SUCCESS
;

246 
	}
}

249 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_timeout_gë
(
≠r_sockë_t
 *
sock
, 
≠r_öãrvÆ_time_t
 *
t
)

251 *
t
 = 
sock
->
timeout
;

252  
APR_SUCCESS
;

253 
	}
}

256 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_›t_gë
(
≠r_sockë_t
 *
sock
,

257 
≠r_öt32_t
 
›t
,á¥_öt32_à*
⁄
)

259 
›t
) {

260 
APR_SO_DISCONNECTED
:

261 *
⁄
 = 
sock
->
disc⁄√˘ed
;

263 
APR_SO_KEEPALIVE
:

264 
APR_SO_DEBUG
:

265 
APR_SO_REUSEADDR
:

266 
APR_SO_NONBLOCK
:

267 
APR_SO_LINGER
:

269 *
⁄
 = 
	`≠r_is_›ti⁄_£t
(
sock
, 
›t
);

272  
APR_SUCCESS
;

273 
	}
}

276 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sockë_©m¨k
(
≠r_sockë_t
 *
sock
, *
©m¨k
)

278 
u_l⁄g
 
oobm¨k
;

280 i‡(
	`io˘lsockë
(
sock
->
sockëdes
, 
SIOCATMARK
, (*Ë&
oobm¨k
) < 0)

281  
	`≠r_gë_√tos_îr‹
();

283 *
©m¨k
 = (
oobm¨k
 != 0);

285  
APR_SUCCESS
;

286 
	}
}

289 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gëho°«me
(*
buf
, 
Àn
,

290 
≠r_poﬁ_t
 *
c⁄t
)

292 i‡(
	`gëho°«me
(
buf
, 
Àn
) == -1) {

293 
buf
[0] = '\0';

294  
	`≠r_gë_√tos_îr‹
();

296 i‡(!
	`memchr
(
buf
, '\0', 
Àn
)) {

297 
buf
[0] = '\0';

298  
APR_ENAMETOOLONG
;

300  
APR_SUCCESS
;

301 
	}
}

	@passwd/apr_getpass.c

22 
	~"≠r_¥iv©e.h
"

23 
	~"≠r_°rögs.h
"

24 
	~"≠r_lib.h
"

25 
	~"≠r_î∫o.h
"

26 #i‡
APR_HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

29 #i‡
APR_HAVE_ERRNO_H


30 
	~<î∫o.h
>

33 #i‡
APR_HAVE_UNISTD_H


34 
	~<uni°d.h
>

36 #i‡
APR_HAVE_CONIO_H


37 #ifde‡
_MSC_VER


38 #¥agm®
w¨nög
(
dißbÀ
: 4032)

39 
	~<c⁄io.h
>

40 #¥agm®
w¨nög
(: 4032)

42 
	~<c⁄io.h
>

45 #i‡
APR_HAVE_STDLIB_H


46 
	~<°dlib.h
>

48 #i‡
APR_HAVE_STRING_H


49 
	~<°rög.h
>

51 #i‡
APR_HAVE_STRINGS_H


52 
	~<°rögs.h
>

54 #i‡
APR_HAVE_STDIO_H


55 
	~<°dio.h
>

63 #i‡
deföed
(
HAVE_GETPASS
) && \

64 (
deföed
(
PASS_MAX
Ë&& 
	gPASS_MAX
 < 32Ë|| deföed(
__hpux
Ë|| 
	$deföed
(
__hpux__
)

65 #unde‡
HAVE_GETPASS


68 #i‡
	`deföed
(
HAVE_TERMIOS_H
Ë&& !deföed(
HAVE_GETPASS
)

69 
	~<ãrmios.h
>

72 #i‡!
APR_CHARSET_EBCDIC


73 
	#LF
 10

	)

74 
	#CR
 13

	)

76 
	#LF
 '\n'

	)

77 
	#CR
 '\r'

	)

80 
	#MAX_STRING_LEN
 256

	)

82 
	#ERR_OVERFLOW
 5

	)

84 #i‡!
	`deföed
(
HAVE_GETPASS
Ë&& !deföed(
HAVE_GETPASSPHRASE
Ë&& !deföed(
HAVE_GETPASS_R
)

88 #i‡!
	`deföed
(
HAVE_TERMIOS_H
Ë&& !deföed(
WIN32
)

94 *
	$gë_∑ssw‹d
(c⁄° *
¥om±
)

96 
∑ssw‹d
[
MAX_STRING_LEN
];

98 
	`Âuts
(
¥om±
, 
°dîr
);

99 
	`fgës
((*Ë&
∑ssw‹d
, ’assw‹d), 
°dö
);

101  (*Ë&
∑ssw‹d
;

102 
	}
}

104 #ñi‡
deföed
(
WIN32
)

110 *
	$gë_∑ssw‹d
(c⁄° *
¥om±
)

116 #ifde‡
_WIN32_WCE


117  
NULL
;

119 
∑ssw‹d
[128];

120 
n
 = 0;

121 
ch
;

123 
	`Âuts
(
¥om±
, 
°dîr
);

125 (
ch
 = 
	`_gëch
()) != '\r') {

126 i‡(
ch
 =
EOF
) {

127 
	`Âuts
("[EOF]\n", 
°dîr
);

128  
NULL
;

130 i‡(
ch
 == 0 || ch == 0xE0) {

132 
ch
 = (ch << 4Ë| 
	`_gëch
();

134 i‡((
ch
 =0xE53 || ch =0xE4B || ch =0x053 || ch =0x04bË&& 
n
) {

135 
∑ssw‹d
[--
n
] = '\0';

136 
	`Âuts
("\b \b", 
°dîr
);

139 
	`Âutc
('\a', 
°dîr
);

142 i‡((
ch
 ='\b' || ch =127Ë&& 
n
) {

143 
∑ssw‹d
[--
n
] = '\0';

144 
	`Âuts
("\b \b", 
°dîr
);

146 i‡(
ch
 == 3) {

148 
	`Âuts
("^C\n", 
°dîr
);

149 
	`exô
(-1);

151 i‡(
ch
 == 26) {

152 
	`Âuts
("^Z\n", 
°dîr
);

153  
NULL
;

155 i‡(
ch
 == 27) {

156 
	`Âutc
('\n', 
°dîr
);

157 
	`Âuts
(
¥om±
, 
°dîr
);

158 
n
 = 0;

160 i‡((
n
 < (
∑ssw‹d
Ë- 1Ë&& !
	`≠r_is˙ål
(
ch
)) {

161 
∑ssw‹d
[
n
++] = 
ch
;

162 
	`Âutc
('*', 
°dîr
);

165 
	`Âutc
('\a', 
°dîr
);

169 
	`Âutc
('\n', 
°dîr
);

170 
∑ssw‹d
[
n
] = '\0';

171  
∑ssw‹d
;

173 
	}
}

175 #ñi‡
deföed
 (
HAVE_TERMIOS_H
)

177 *
	$gë_∑ssw‹d
(c⁄° *
¥om±
)

179 
ãrmios
 
©å
;

180 
∑ssw‹d
[
MAX_STRING_LEN
];

181 
n
=0;

182 
	`Âuts
(
¥om±
, 
°dîr
);

183 
	`fÊush
(
°dîr
);

185 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
©å
) != 0)

186  
NULL
;

187 
©å
.
c_lÊag
 &~(
ECHO
);

189 i‡(
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
©å
) != 0)

190  
NULL
;

191 (
∑ssw‹d
[
n
] = 
	`gëch¨
()) != '\n') {

192 i‡(
n
 < (
∑ssw‹d
) - 1 &&Öassword[n] >= ' ' &&Öassword[n] <= '~') {

193 
n
++;

195 
	`Ârötf
(
°dîr
,"\n");

196 
	`Âuts
(
¥om±
, 
°dîr
);

197 
	`fÊush
(
°dîr
);

198 
n
 = 0;

202 
∑ssw‹d
[
n
] = '\0';

203 
	`¥ötf
("\n");

204 i‡(
n
 > (
MAX_STRING_LEN
 - 1)) {

205 
∑ssw‹d
[
MAX_STRING_LEN
 - 1] = '\0';

208 
©å
.
c_lÊag
 |
ECHO
;

209 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
©å
);

210  (*Ë&
∑ssw‹d
;

211 
	}
}

232 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_∑ssw‹d_gë
(c⁄° *
¥om±
, *
pwbuf
, 
≠r_size_t
 *
bufsiz
)

234 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

235 #i‡
	`deföed
(
HAVE_GETPASS_R
)

236 i‡(
	`gë∑ss_r
(
¥om±
, 
pwbuf
, *
bufsiz
Ë=
NULL
)

237  
APR_EINVAL
;

239 #i‡
	`deföed
(
HAVE_GETPASSPHRASE
)

240 *
pw_gŸ
 = 
	`gë∑s•hø£
(
¥om±
);

241 #ñi‡
	`deföed
(
HAVE_GETPASS
)

242 *
pw_gŸ
 = 
	`gë∑ss
(
¥om±
);

244 *
pw_gŸ
 = 
	`gë_∑ssw‹d
(
¥om±
);

247 i‡(!
pw_gŸ
)

248  
APR_EINVAL
;

249 i‡(
	`°æí
(
pw_gŸ
Ë>*
bufsiz
) {

250 
rv
 = 
APR_ENAMETOOLONG
;

252 
	`≠r_˝y°∫
(
pwbuf
, 
pw_gŸ
, *
bufsiz
);

253 
	`mem£t
(
pw_gŸ
, 0, 
	`°æí
(pw_got));

255  
rv
;

256 
	}
}

	@poll/os2/poll.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_¨ch_√tw‹kio.h
"

21 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl
(
≠r_pﬁlfd_t
 *
≠r£t
, 
≠r_öt32_t
 
num
,

22 
≠r_öt32_t
 *
nsds
, 
≠r_öãrvÆ_time_t
 
timeout
)

24 *
pﬁl£t
;

25 
i
;

26 
num_ªad
 = 0, 
num_wrôe
 = 0, 
num_ex˚±
 = 0, 
num_tŸÆ
;

27 
pos_ªad
, 
pos_wrôe
, 
pos_ex˚±
;

29 
i
 = 0; i < 
num
; i++) {

30 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

31 
num_ªad
 +(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) != 0;

32 
num_wrôe
 +(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) != 0;

33 
num_ex˚±
 +(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLPRI
) != 0;

37 
num_tŸÆ
 = 
num_ªad
 + 
num_wrôe
 + 
num_ex˚±
;

38 
pﬁl£t
 = 
	`Æloˇ
((Ë* 
num_tŸÆ
);

39 
	`mem£t
(
pﬁl£t
, 0, (Ë* 
num_tŸÆ
);

41 
pos_ªad
 = 0;

42 
pos_wrôe
 = 
num_ªad
;

43 
pos_ex˚±
 = 
pos_wrôe
 + 
num_wrôe
;

45 
i
 = 0; i < 
num
; i++) {

46 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

47 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) {

48 
pﬁl£t
[
pos_ªad
++] = 
≠r£t
[
i
].
desc
.
s
->
sockëdes
;

51 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) {

52 
pﬁl£t
[
pos_wrôe
++] = 
≠r£t
[
i
].
desc
.
s
->
sockëdes
;

55 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLPRI
) {

56 
pﬁl£t
[
pos_ex˚±
++] = 
≠r£t
[
i
].
desc
.
s
->
sockëdes
;

59 
≠r£t
[
i
].
π√víts
 = 0;

63 i‡(
timeout
 > 0) {

64 
timeout
 /= 1000;

67 
i
 = 
	`£À˘
(
pﬁl£t
, 
num_ªad
, 
num_wrôe
, 
num_ex˚±
, 
timeout
);

68 (*
nsds
Ë
i
;

70 i‡((*
nsds
) < 0) {

71  
	`APR_FROM_OS_ERROR
(
	`sock_î∫o
());

74 i‡((*
nsds
) == 0) {

75  
APR_TIMEUP
;

78 
pos_ªad
 = 0;

79 
pos_wrôe
 = 
num_ªad
;

80 
pos_ex˚±
 = 
pos_wrôe
 + 
num_wrôe
;

82 
i
 = 0; i < 
num
; i++) {

83 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

84 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) {

85 i‡(
pﬁl£t
[
pos_ªad
++] > 0) {

86 
≠r£t
[
i
].
π√víts
 |
APR_POLLIN
;

90 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) {

91 i‡(
pﬁl£t
[
pos_wrôe
++] > 0) {

92 
≠r£t
[
i
].
π√víts
 |
APR_POLLOUT
;

96 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLPRI
) {

97 i‡(
pﬁl£t
[
pos_ex˚±
++] > 0) {

98 
≠r£t
[
i
].
π√víts
 |
APR_POLLPRI
;

104  
APR_SUCCESS
;

105 
	}
}

	@poll/os2/pollset.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_¨ch_√tw‹kio.h
"

23 
	s≠r_pﬁl£t_t
 {

24 
≠r_poﬁ_t
 *
	mpoﬁ
;

25 
≠r_uöt32_t
 
	m√…s
;

26 
≠r_uöt32_t
 
	m«Œoc
;

27 *
	mpﬁl£t
;

28 
	mnum_ªad
;

29 
	mnum_wrôe
;

30 
	mnum_ex˚±
;

31 
	mnum_tŸÆ
;

32 
≠r_pﬁlfd_t
 *
	mquîy_£t
;

33 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

38 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 **
pﬁl£t
,

39 
≠r_uöt32_t
 
size
,

40 
≠r_poﬁ_t
 *
p
,

41 
≠r_uöt32_t
 
Êags
)

43 *
pﬁl£t
 = 
	`≠r_∑Œoc
(
p
, (**pollset));

44 (*
pﬁl£t
)->
poﬁ
 = 
p
;

45 (*
pﬁl£t
)->
√…s
 = 0;

46 (*
pﬁl£t
)->
«Œoc
 = 
size
;

47 (*
pﬁl£t
)->pﬁl£à
	`≠r_∑Œoc
(
p
, 
size
 * () * 3);

48 (*
pﬁl£t
)->
quîy_£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
≠r_pﬁlfd_t
));

49 (*
pﬁl£t
)->
ªsu…_£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
≠r_pﬁlfd_t
));

50 (*
pﬁl£t
)->
num_ªad
 = -1;

51  
APR_SUCCESS
;

52 
	}
}

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_¸óã_ex
(
≠r_pﬁl£t_t
 **
pﬁl£t
,

55 
≠r_uöt32_t
 
size
,

56 
≠r_poﬁ_t
 *
p
,

57 
≠r_uöt32_t
 
Êags
,

58 
≠r_pﬁl£t_mëhod_e
 
mëhod
)

60  
	`≠r_pﬁl£t_¸óã
(
pﬁl£t
, 
size
, 
p
, 
Êags
);

61 
	}
}

63 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_de°roy
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

68  
APR_SUCCESS
;

69 
	}
}

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

74 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

76 i‡(
pﬁl£t
->
√…s
 =pﬁl£t->
«Œoc
) {

77  
APR_ENOMEM
;

80 
pﬁl£t
->
quîy_£t
[pﬁl£t->
√…s
] = *
des¸ùt‹
;

82 i‡(
des¸ùt‹
->
desc_ty≥
 !
APR_POLL_SOCKET
) {

83  
APR_EBADF
;

86 
pﬁl£t
->
√…s
++;

87 
pﬁl£t
->
num_ªad
 = -1;

88  
APR_SUCCESS
;

89 
	}
}

93 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

94 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

96 
≠r_uöt32_t
 
i
;

98 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

99 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
quîy_£t
[
i
].desc.s) {

101 
≠r_uöt32_t
 
d°
 = 
i
;

102 
≠r_uöt32_t
 
ﬁd_√…s
 = 
pﬁl£t
->
√…s
;

103 
pﬁl£t
->
√…s
--;

105 
i
++; i < 
ﬁd_√…s
; i++) {

106 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
quîy_£t
[
i
].desc.s) {

107 
pﬁl£t
->
√…s
--;

110 
pﬁl£t
->pﬁl£t[
d°
] =Öﬁl£t->pﬁl£t[
i
];

111 
pﬁl£t
->
quîy_£t
[
d°
] =Öﬁl£t->quîy_£t[
i
];

112 
d°
++;

116 
pﬁl£t
->
num_ªad
 = -1;

117  
APR_SUCCESS
;

121  
APR_NOTFOUND
;

122 
	}
}

126 
	$make_pﬁl£t
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

128 
i
;

129 
pos
 = 0;

131 
pﬁl£t
->
num_ªad
 = 0;

132 
pﬁl£t
->
num_wrôe
 = 0;

133 
pﬁl£t
->
num_ex˚±
 = 0;

135 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

136 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) {

137 
pﬁl£t
->pﬁl£t[
pos
++] =Öﬁl£t->
quîy_£t
[
i
].
desc
.
s
->
sockëdes
;

138 
pﬁl£t
->
num_ªad
++;

142 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

143 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) {

144 
pﬁl£t
->pﬁl£t[
pos
++] =Öﬁl£t->
quîy_£t
[
i
].
desc
.
s
->
sockëdes
;

145 
pﬁl£t
->
num_wrôe
++;

149 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

150 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLPRI
) {

151 
pﬁl£t
->pﬁl£t[
pos
++] =Öﬁl£t->
quîy_£t
[
i
].
desc
.
s
->
sockëdes
;

152 
pﬁl£t
->
num_ex˚±
++;

156 
pﬁl£t
->
num_tŸÆ
 =Öﬁl£t->
num_ªad
 +Öﬁl£t->
num_wrôe
 +Öﬁl£t->
num_ex˚±
;

157 
	}
}

161 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

162 
≠r_öãrvÆ_time_t
 
timeout
,

163 
≠r_öt32_t
 *
num
,

164 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

166 
rv
;

167 
≠r_uöt32_t
 
i
;

168 *
pﬁÃesu…
;

169 
ªad_pos
, 
wrôe_pos
, 
ex˚±_pos
;

171 i‡(
pﬁl£t
->
num_ªad
 < 0) {

172 
	`make_pﬁl£t
(
pﬁl£t
);

175 
pﬁÃesu…
 = 
	`Æloˇ
((Ë* 
pﬁl£t
->
num_tŸÆ
);

176 
	`mem˝y
(
pﬁÃesu…
, 
pﬁl£t
->pﬁl£t, (Ë*Öﬁl£t->
num_tŸÆ
);

177 (*
num
) = 0;

179 i‡(
timeout
 > 0) {

180 
timeout
 /= 1000;

183 
rv
 = 
	`£À˘
(
pﬁÃesu…
, 
pﬁl£t
->
num_ªad
,Öﬁl£t->
num_wrôe
,Öﬁl£t->
num_ex˚±
, 
timeout
);

185 i‡(
rv
 < 0) {

186  
	`APR_FROM_OS_ERROR
(
	`sock_î∫o
());

189 i‡(
rv
 == 0) {

190  
APR_TIMEUP
;

193 
ªad_pos
 = 0;

194 
wrôe_pos
 = 
pﬁl£t
->
num_ªad
;

195 
ex˚±_pos
 = 
pﬁl£t
->
num_ªad
 +Öﬁl£t->
num_wrôe
;

197 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

198 
π√víts
 = 0;

200 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) {

201 i‡(
pﬁÃesu…
[
ªad_pos
++] != -1) {

202 
π√víts
 |
APR_POLLIN
;

206 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) {

207 i‡(
pﬁÃesu…
[
wrôe_pos
++] != -1) {

208 
π√víts
 |
APR_POLLOUT
;

212 i‡(
pﬁl£t
->
quîy_£t
[
i
].
ªqevíts
 & 
APR_POLLPRI
) {

213 i‡(
pﬁÃesu…
[
ex˚±_pos
++] != -1) {

214 
π√víts
 |
APR_POLLPRI
;

218 i‡(
π√víts
) {

219 
pﬁl£t
->
ªsu…_£t
[*
num
] =Öﬁl£t->
quîy_£t
[
i
];

220 
pﬁl£t
->
ªsu…_£t
[*
num
].
π√víts
 =Ñtnevents;

221 (*
num
)++;

225 i‡(
des¸ùt‹s
) {

226 *
des¸ùt‹s
 = 
pﬁl£t
->
ªsu…_£t
;

229  
APR_SUCCESS
;

230 
	}
}

	@poll/unix/epoll.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_time.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

22 
	~"≠r_¨ch_√tw‹kio.h
"

23 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

24 
	~"≠r_¨ch_öhîô.h
"

26 #i‡
deföed
(
HAVE_EPOLL
)

28 
≠r_öt16_t
 
	$gë_ïﬁl_evít
(
≠r_öt16_t
 
evít
)

30 
≠r_öt16_t
 
rv
 = 0;

32 i‡(
evít
 & 
APR_POLLIN
)

33 
rv
 |
EPOLLIN
;

34 i‡(
evít
 & 
APR_POLLPRI
)

35 
rv
 |
EPOLLPRI
;

36 i‡(
evít
 & 
APR_POLLOUT
)

37 
rv
 |
EPOLLOUT
;

40  
rv
;

41 
	}
}

43 
≠r_öt16_t
 
	$gë_ïﬁl_ªvít
(
≠r_öt16_t
 
evít
)

45 
≠r_öt16_t
 
rv
 = 0;

47 i‡(
evít
 & 
EPOLLIN
)

48 
rv
 |
APR_POLLIN
;

49 i‡(
evít
 & 
EPOLLPRI
)

50 
rv
 |
APR_POLLPRI
;

51 i‡(
evít
 & 
EPOLLOUT
)

52 
rv
 |
APR_POLLOUT
;

53 i‡(
evít
 & 
EPOLLERR
)

54 
rv
 |
APR_POLLERR
;

55 i‡(
evít
 & 
EPOLLHUP
)

56 
rv
 |
APR_POLLHUP
;

59  
rv
;

60 
	}
}

62 
	s≠r_pﬁl£t_¥iv©e_t


64 
	mïﬁl_fd
;

65 
ïﬁl_evít
 *
	mpﬁl£t
;

66 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

67 #i‡
APR_HAS_THREADS


69 
≠r_thªad_muãx_t
 *
	mrög_lock
;

72 
APR_RING_HEAD
(
pfd_quîy_rög_t
, 
pfd_ñem_t
Ë
	mquîy_rög
;

74 
APR_RING_HEAD
(
pfd_‰ì_rög_t
, 
pfd_ñem_t
Ë
	m‰ì_rög
;

77 
APR_RING_HEAD
(
pfd_dód_rög_t
, 
pfd_ñem_t
Ë
	mdód_rög
;

80 
≠r_°©us_t
 
	$im∂_pﬁl£t_˛ónup
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

82 
	`˛o£
(
pﬁl£t
->
p
->
ïﬁl_fd
);

83  
APR_SUCCESS
;

84 
	}
}

87 
≠r_°©us_t
 
	$im∂_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

88 
≠r_uöt32_t
 
size
,

89 
≠r_poﬁ_t
 *
p
,

90 
≠r_uöt32_t
 
Êags
)

92 
≠r_°©us_t
 
rv
;

93 
fd
;

95 #ifde‡
HAVE_EPOLL_CREATE1


96 
fd
 = 
	`ïﬁl_¸óã1
(
EPOLL_CLOEXEC
);

98 
fd
 = 
	`ïﬁl_¸óã
(
size
);

100 i‡(
fd
 < 0) {

101 
pﬁl£t
->
p
 = 
NULL
;

102  
	`≠r_gë_√tos_îr‹
();

105 #i‚de‡
HAVE_EPOLL_CREATE1


107 
Êags
;

109 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
)) == -1)

110  
î∫o
;

112 
Êags
 |
FD_CLOEXEC
;

113 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1)

114  
î∫o
;

118 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
’, (
≠r_pﬁl£t_¥iv©e_t
));

119 #i‡
APR_HAS_THREADS


120 i‡((
Êags
 & 
APR_POLLSET_THREADSAFE
) &&

121 !(
Êags
 & 
APR_POLLSET_NOCOPY
) &&

122 ((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
pﬁl£t
->
p
->
rög_lock
,

123 
APR_THREAD_MUTEX_DEFAULT
,

124 
p
)Ë!
APR_SUCCESS
)) {

125 
pﬁl£t
->
p
 = 
NULL
;

126  
rv
;

129 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

130 
pﬁl£t
->
p
 = 
NULL
;

131  
APR_ENOTIMPL
;

134 
pﬁl£t
->
p
->
ïﬁl_fd
 = 
fd
;

135 
pﬁl£t
->
p
->pﬁl£à
	`≠r_∑Œoc
’, 
size
 * (
ïﬁl_evít
));

136 
pﬁl£t
->
p
->
ªsu…_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

138 i‡(!(
Êags
 & 
APR_POLLSET_NOCOPY
)) {

139 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
quîy_rög
, 
pfd_ñem_t
, 
lök
);

140 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
‰ì_rög
, 
pfd_ñem_t
, 
lök
);

141 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
dód_rög
, 
pfd_ñem_t
, 
lök
);

143  
APR_SUCCESS
;

144 
	}
}

146 
≠r_°©us_t
 
	$im∂_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

147 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

149 
ïﬁl_evít
 
ev
 = {0};

150 
ªt
 = -1;

151 
pfd_ñem_t
 *
ñem
 = 
NULL
;

152 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

154 
ev
.
evíts
 = 
	`gë_ïﬁl_evít
(
des¸ùt‹
->
ªqevíts
);

156 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_NOCOPY
) {

157 
ev
.
d©a
.
±r
 = (*)
des¸ùt‹
;

160 
	`pﬁl£t_lock_rögs
();

162 i‡(!
	`APR_RING_EMPTY
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
pfd_ñem_t
, 
lök
)) {

163 
ñem
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
‰ì_rög
));

164 
	`APR_RING_REMOVE
(
ñem
, 
lök
);

167 
ñem
 = (
pfd_ñem_t
 *Ë
	`≠r_∑Œoc
(
pﬁl£t
->
poﬁ
, (pfd_elem_t));

168 
	`APR_RING_ELEM_INIT
(
ñem
, 
lök
);

170 
ñem
->
pfd
 = *
des¸ùt‹
;

171 
ev
.
d©a
.
±r
 = 
ñem
;

173 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

174 
ªt
 = 
	`ïﬁl_˘l
(
pﬁl£t
->
p
->
ïﬁl_fd
, 
EPOLL_CTL_ADD
,

175 
des¸ùt‹
->
desc
.
s
->
sockëdes
, &
ev
);

178 
ªt
 = 
	`ïﬁl_˘l
(
pﬁl£t
->
p
->
ïﬁl_fd
, 
EPOLL_CTL_ADD
,

179 
des¸ùt‹
->
desc
.
f
->
fûedes
, &
ev
);

182 i‡(0 !
ªt
) {

183 
rv
 = 
	`≠r_gë_√tos_îr‹
();

186 i‡(!(
pﬁl£t
->
Êags
 & 
APR_POLLSET_NOCOPY
)) {

187 i‡(
rv
 !
APR_SUCCESS
) {

188 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

191 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
quîy_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

193 
	`pﬁl£t_u∆ock_rögs
();

196  
rv
;

197 
	}
}

199 
≠r_°©us_t
 
	$im∂_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

200 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

202 
pfd_ñem_t
 *
ï
;

203 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

204 
ïﬁl_evít
 
ev
 = {0};

207 
ªt
 = -1;

209 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

210 
ªt
 = 
	`ïﬁl_˘l
(
pﬁl£t
->
p
->
ïﬁl_fd
, 
EPOLL_CTL_DEL
,

211 
des¸ùt‹
->
desc
.
s
->
sockëdes
, &
ev
);

214 
ªt
 = 
	`ïﬁl_˘l
(
pﬁl£t
->
p
->
ïﬁl_fd
, 
EPOLL_CTL_DEL
,

215 
des¸ùt‹
->
desc
.
f
->
fûedes
, &
ev
);

217 i‡(
ªt
 < 0) {

218 
rv
 = 
APR_NOTFOUND
;

221 i‡(!(
pﬁl£t
->
Êags
 & 
APR_POLLSET_NOCOPY
)) {

222 
	`pﬁl£t_lock_rögs
();

224 
ï
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
quîy_rög
));

225 
ï
 !
	`APR_RING_SENTINEL
(&(
pﬁl£t
->
p
->
quîy_rög
),

226 
pfd_ñem_t
, 
lök
);

227 
ï
 = 
	`APR_RING_NEXT
”p, 
lök
)) {

229 i‡(
des¸ùt‹
->
desc
.
s
 =
ï
->
pfd
.desc.s) {

230 
	`APR_RING_REMOVE
(
ï
, 
lök
);

231 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
dód_rög
),

232 
ï
, 
pfd_ñem_t
, 
lök
);

237 
	`pﬁl£t_u∆ock_rögs
();

240  
rv
;

241 
	}
}

243 
≠r_°©us_t
 
	$im∂_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

244 
≠r_öãrvÆ_time_t
 
timeout
,

245 
≠r_öt32_t
 *
num
,

246 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

248 
ªt
, 
i
, 
j
;

249 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

250 
≠r_pﬁlfd_t
 *
fd±r
;

252 i‡(
timeout
 > 0) {

253 
timeout
 /= 1000;

256 
ªt
 = 
	`ïﬁl_waô
(
pﬁl£t
->
p
->
ïﬁl_fd
,Öﬁl£t->p->pﬁl£t,Öﬁl£t->
«Œoc
,

257 
timeout
);

258 (*
num
Ë
ªt
;

260 i‡(
ªt
 < 0) {

261 
rv
 = 
	`≠r_gë_√tos_îr‹
();

263 i‡(
ªt
 == 0) {

264 
rv
 = 
APR_TIMEUP
;

267 
i
 = 0, 
j
 = 0; i < 
ªt
; i++) {

268 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_NOCOPY
) {

269 
fd±r
 = (
≠r_pﬁlfd_t
 *)(
pﬁl£t
->
p
->pﬁl£t[
i
].
d©a
.
±r
);

272 
fd±r
 = &(((
pfd_ñem_t
 *Ë(
pﬁl£t
->
p
->pﬁl£t[
i
].
d©a
.
±r
))->
pfd
);

277 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

278 
fd±r
->
desc_ty≥
 =
APR_POLL_FILE
 &&

279 
fd±r
->
desc
.
f
 =
pﬁl£t
->
wakeup_pùe
[0]) {

280 
	`≠r_pﬁl£t_døö_wakeup_pùe
(
pﬁl£t
);

281 
rv
 = 
APR_EINTR
;

284 
pﬁl£t
->
p
->
ªsu…_£t
[
j
] = *
fd±r
;

285 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 =

286 
	`gë_ïﬁl_ªvít
(
pﬁl£t
->
p
->pﬁl£t[
i
].
evíts
);

287 
j
++;

290 i‡(((*
num
Ë
j
)) {

291 
rv
 = 
APR_SUCCESS
;

293 i‡(
des¸ùt‹s
) {

294 *
des¸ùt‹s
 = 
pﬁl£t
->
p
->
ªsu…_£t
;

299 i‡(!(
pﬁl£t
->
Êags
 & 
APR_POLLSET_NOCOPY
)) {

300 
	`pﬁl£t_lock_rögs
();

303 
	`APR_RING_CONCAT
(&(
pﬁl£t
->
p
->
‰ì_rög
), &’ﬁl£t->p->
dód_rög
), 
pfd_ñem_t
, 
lök
);

305 
	`pﬁl£t_u∆ock_rögs
();

308  
rv
;

309 
	}
}

311 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

312 
im∂_pﬁl£t_¸óã
,

313 
im∂_pﬁl£t_add
,

314 
im∂_pﬁl£t_ªmove
,

315 
im∂_pﬁl£t_pﬁl
,

316 
im∂_pﬁl£t_˛ónup
,

320 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_ïﬁl
 = &
im∂
;

322 
≠r_°©us_t
 
	$cb_˛ónup
(*
p_
)

324 
≠r_pﬁlcb_t
 *
pﬁlcb
 = (≠r_pﬁlcb_à*Ë
p_
;

325 
	`˛o£
(
pﬁlcb
->
fd
);

326  
APR_SUCCESS
;

327 
	}
}

329 
≠r_°©us_t
 
	$im∂_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

330 
≠r_uöt32_t
 
size
,

331 
≠r_poﬁ_t
 *
p
,

332 
≠r_uöt32_t
 
Êags
)

334 
fd
;

336 #ifde‡
HAVE_EPOLL_CREATE1


337 
fd
 = 
	`ïﬁl_¸óã1
(
EPOLL_CLOEXEC
);

339 
fd
 = 
	`ïﬁl_¸óã
(
size
);

342 i‡(
fd
 < 0) {

343  
	`≠r_gë_√tos_îr‹
();

346 #i‚de‡
HAVE_EPOLL_CREATE1


348 
Êags
;

350 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
)) == -1)

351  
î∫o
;

353 
Êags
 |
FD_CLOEXEC
;

354 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1)

355  
î∫o
;

359 
pﬁlcb
->
fd
 = fd;

360 
pﬁlcb
->
pﬁl£t
.
ïﬁl
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
ïﬁl_evít
));

361 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
pﬁlcb
, 
cb_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

363  
APR_SUCCESS
;

364 
	}
}

366 
≠r_°©us_t
 
	$im∂_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

367 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

369 
ïﬁl_evít
 
ev
;

370 
ªt
;

372 
ev
.
evíts
 = 
	`gë_ïﬁl_evít
(
des¸ùt‹
->
ªqevíts
);

373 
ev
.
d©a
.
±r
 = (*)
des¸ùt‹
;

375 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

376 
ªt
 = 
	`ïﬁl_˘l
(
pﬁlcb
->
fd
, 
EPOLL_CTL_ADD
,

377 
des¸ùt‹
->
desc
.
s
->
sockëdes
, &
ev
);

380 
ªt
 = 
	`ïﬁl_˘l
(
pﬁlcb
->
fd
, 
EPOLL_CTL_ADD
,

381 
des¸ùt‹
->
desc
.
f
->
fûedes
, &
ev
);

384 i‡(
ªt
 == -1) {

385  
	`≠r_gë_√tos_îr‹
();

388  
APR_SUCCESS
;

389 
	}
}

391 
≠r_°©us_t
 
	$im∂_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

392 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

394 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

395 
ïﬁl_evít
 
ev
 = {0};

398 
ªt
 = -1;

400 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

401 
ªt
 = 
	`ïﬁl_˘l
(
pﬁlcb
->
fd
, 
EPOLL_CTL_DEL
,

402 
des¸ùt‹
->
desc
.
s
->
sockëdes
, &
ev
);

405 
ªt
 = 
	`ïﬁl_˘l
(
pﬁlcb
->
fd
, 
EPOLL_CTL_DEL
,

406 
des¸ùt‹
->
desc
.
f
->
fûedes
, &
ev
);

409 i‡(
ªt
 < 0) {

410 
rv
 = 
APR_NOTFOUND
;

413  
rv
;

414 
	}
}

417 
≠r_°©us_t
 
	$im∂_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

418 
≠r_öãrvÆ_time_t
 
timeout
,

419 
≠r_pﬁlcb_cb_t
 
func
,

420 *
b©⁄
)

422 
ªt
, 
i
;

423 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

425 i‡(
timeout
 > 0) {

426 
timeout
 /= 1000;

429 
ªt
 = 
	`ïﬁl_waô
(
pﬁlcb
->
fd
,Öﬁlcb->
pﬁl£t
.
ïﬁl
,Öﬁlcb->
«Œoc
,

430 
timeout
);

431 i‡(
ªt
 < 0) {

432 
rv
 = 
	`≠r_gë_√tos_îr‹
();

434 i‡(
ªt
 == 0) {

435 
rv
 = 
APR_TIMEUP
;

438 
i
 = 0; i < 
ªt
; i++) {

439 
≠r_pﬁlfd_t
 *
pﬁlfd
 = (≠r_pﬁlfd_à*)(
pﬁlcb
->
pﬁl£t
.
ïﬁl
[
i
].
d©a
.
±r
);

440 
pﬁlfd
->
π√víts
 = 
	`gë_ïﬁl_ªvít
(
pﬁlcb
->
pﬁl£t
.
ïﬁl
[
i
].
evíts
);

442 
rv
 = 
	`func
(
b©⁄
, 
pﬁlfd
);

443 i‡(
rv
) {

444  
rv
;

449  
rv
;

450 
	}
}

452 
≠r_pﬁlcb_¥ovidî_t
 
	gim∂_cb
 = {

453 
im∂_pﬁlcb_¸óã
,

454 
im∂_pﬁlcb_add
,

455 
im∂_pﬁlcb_ªmove
,

456 
im∂_pﬁlcb_pﬁl
,

460 
≠r_pﬁlcb_¥ovidî_t
 *
	g≠r_pﬁlcb_¥ovidî_ïﬁl
 = &
im∂_cb
;

	@poll/unix/kqueue.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_time.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

22 
	~"≠r_¨ch_√tw‹kio.h
"

23 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

24 
	~"≠r_¨ch_öhîô.h
"

26 #ifde‡
HAVE_KQUEUE


28 
≠r_öt16_t
 
	$gë_kqueue_ªvít
(
≠r_öt16_t
 
evít
,á¥_öt16_à
Êags
)

30 
≠r_öt16_t
 
rv
 = 0;

32 i‡(
evít
 =
EVFILT_READ
)

33 
rv
 |
APR_POLLIN
;

34 i‡(
evít
 =
EVFILT_WRITE
)

35 
rv
 |
APR_POLLOUT
;

36 i‡(
Êags
 & 
EV_EOF
)

37 
rv
 |
APR_POLLHUP
;

43  
rv
;

44 
	}
}

46 
	s≠r_pﬁl£t_¥iv©e_t


48 
	mkqueue_fd
;

49 
kevít
 
	mkevít
;

50 
≠r_uöt32_t
 
	m£tsize
;

51 
kevít
 *
	mke_£t
;

52 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

53 #i‡
APR_HAS_THREADS


55 
≠r_thªad_muãx_t
 *
	mrög_lock
;

58 
APR_RING_HEAD
(
pfd_quîy_rög_t
, 
pfd_ñem_t
Ë
	mquîy_rög
;

60 
APR_RING_HEAD
(
pfd_‰ì_rög_t
, 
pfd_ñem_t
Ë
	m‰ì_rög
;

63 
APR_RING_HEAD
(
pfd_dód_rög_t
, 
pfd_ñem_t
Ë
	mdód_rög
;

66 
≠r_°©us_t
 
	$im∂_pﬁl£t_˛ónup
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

68 
	`˛o£
(
pﬁl£t
->
p
->
kqueue_fd
);

69  
APR_SUCCESS
;

70 
	}
}

72 
≠r_°©us_t
 
	$im∂_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

73 
≠r_uöt32_t
 
size
,

74 
≠r_poﬁ_t
 *
p
,

75 
≠r_uöt32_t
 
Êags
)

77 
≠r_°©us_t
 
rv
;

78 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
’, (
≠r_pﬁl£t_¥iv©e_t
));

79 #i‡
APR_HAS_THREADS


80 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
 &&

81 ((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
pﬁl£t
->
p
->
rög_lock
,

82 
APR_THREAD_MUTEX_DEFAULT
,

83 
p
)Ë!
APR_SUCCESS
)) {

84 
pﬁl£t
->
p
 = 
NULL
;

85  
rv
;

88 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

89 
pﬁl£t
->
p
 = 
NULL
;

90  
APR_ENOTIMPL
;

101 
pﬁl£t
->
p
->
£tsize
 = 2 * 
size
;

103 
pﬁl£t
->
p
->
ke_£t
 =

104 (
kevít
 *Ë
	`≠r_∑Œoc
(
p
, 
pﬁl£t
->p->
£tsize
 * (kevent));

106 
	`mem£t
(
pﬁl£t
->
p
->
ke_£t
, 0,Öﬁl£t->p->
£tsize
 * (
kevít
));

108 
pﬁl£t
->
p
->
kqueue_fd
 = 
	`kqueue
();

110 i‡(
pﬁl£t
->
p
->
kqueue_fd
 == -1) {

111 
pﬁl£t
->
p
 = 
NULL
;

112  
	`≠r_gë_√tos_îr‹
();

116 
Êags
;

118 i‡((
Êags
 = 
	`f˙é
(
pﬁl£t
->
p
->
kqueue_fd
, 
F_GETFD
)) == -1)

119  
î∫o
;

121 
Êags
 |
FD_CLOEXEC
;

122 i‡(
	`f˙é
(
pﬁl£t
->
p
->
kqueue_fd
, 
F_SETFD
, 
Êags
) == -1)

123  
î∫o
;

126 
pﬁl£t
->
p
->
ªsu…_£t
 = 
	`≠r_∑Œoc
’,Öﬁl£t->p->
£tsize
 * (
≠r_pﬁlfd_t
));

128 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
quîy_rög
, 
pfd_ñem_t
, 
lök
);

129 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
‰ì_rög
, 
pfd_ñem_t
, 
lök
);

130 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
dód_rög
, 
pfd_ñem_t
, 
lök
);

132  
APR_SUCCESS
;

133 
	}
}

135 
≠r_°©us_t
 
	$im∂_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

136 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

138 
≠r_os_sock_t
 
fd
;

139 
pfd_ñem_t
 *
ñem
;

140 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

142 
	`pﬁl£t_lock_rögs
();

144 i‡(!
	`APR_RING_EMPTY
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
pfd_ñem_t
, 
lök
)) {

145 
ñem
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
‰ì_rög
));

146 
	`APR_RING_REMOVE
(
ñem
, 
lök
);

149 
ñem
 = (
pfd_ñem_t
 *Ë
	`≠r_∑Œoc
(
pﬁl£t
->
poﬁ
, (pfd_elem_t));

150 
	`APR_RING_ELEM_INIT
(
ñem
, 
lök
);

152 
ñem
->
pfd
 = *
des¸ùt‹
;

154 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

155 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

158 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

161 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLIN
) {

162 
	`EV_SET
(&
pﬁl£t
->
p
->
kevít
, 
fd
, 
EVFILT_READ
, 
EV_ADD
, 0, 0, 
ñem
);

164 i‡(
	`kevít
(
pﬁl£t
->
p
->
kqueue_fd
, &pﬁl£t->p->
kevít
, 1, 
NULL
, 0,

165 
NULL
) == -1) {

166 
rv
 = 
	`≠r_gë_√tos_îr‹
();

170 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLOUT
 && 
rv
 =
APR_SUCCESS
) {

171 
	`EV_SET
(&
pﬁl£t
->
p
->
kevít
, 
fd
, 
EVFILT_WRITE
, 
EV_ADD
, 0, 0, 
ñem
);

173 i‡(
	`kevít
(
pﬁl£t
->
p
->
kqueue_fd
, &pﬁl£t->p->
kevít
, 1, 
NULL
, 0,

174 
NULL
) == -1) {

175 
rv
 = 
	`≠r_gë_√tos_îr‹
();

179 i‡(
rv
 =
APR_SUCCESS
) {

180 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
quîy_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

183 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

186 
	`pﬁl£t_u∆ock_rögs
();

188  
rv
;

189 
	}
}

191 
≠r_°©us_t
 
	$im∂_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

192 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

194 
pfd_ñem_t
 *
ï
;

195 
≠r_°©us_t
 
rv
;

196 
≠r_os_sock_t
 
fd
;

198 
	`pﬁl£t_lock_rögs
();

200 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

201 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

204 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

207 
rv
 = 
APR_NOTFOUND
;

208 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLIN
) {

209 
	`EV_SET
(&
pﬁl£t
->
p
->
kevít
, 
fd
, 
EVFILT_READ
, 
EV_DELETE
, 0, 0, 
NULL
);

211 i‡(
	`kevít
(
pﬁl£t
->
p
->
kqueue_fd
, &pﬁl£t->p->
kevít
, 1, 
NULL
, 0,

212 
NULL
) != -1) {

213 
rv
 = 
APR_SUCCESS
;

217 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLOUT
) {

218 
	`EV_SET
(&
pﬁl£t
->
p
->
kevít
, 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0, 0, 
NULL
);

220 i‡(
	`kevít
(
pﬁl£t
->
p
->
kqueue_fd
, &pﬁl£t->p->
kevít
, 1, 
NULL
, 0,

221 
NULL
) != -1) {

222 
rv
 = 
APR_SUCCESS
;

226 
ï
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
quîy_rög
));

227 
ï
 !
	`APR_RING_SENTINEL
(&(
pﬁl£t
->
p
->
quîy_rög
),

228 
pfd_ñem_t
, 
lök
);

229 
ï
 = 
	`APR_RING_NEXT
”p, 
lök
)) {

231 i‡(
des¸ùt‹
->
desc
.
s
 =
ï
->
pfd
.desc.s) {

232 
	`APR_RING_REMOVE
(
ï
, 
lök
);

233 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
dód_rög
),

234 
ï
, 
pfd_ñem_t
, 
lök
);

239 
	`pﬁl£t_u∆ock_rögs
();

241  
rv
;

242 
	}
}

244 
≠r_°©us_t
 
	$im∂_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

245 
≠r_öãrvÆ_time_t
 
timeout
,

246 
≠r_öt32_t
 *
num
,

247 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

249 
ªt
, 
i
, 
j
;

250 
time•ec
 
tv
, *
tv±r
;

251 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

252 
≠r_pﬁlfd_t
 
fd
;

254 i‡(
timeout
 < 0) {

255 
tv±r
 = 
NULL
;

258 
tv
.
tv_£c
 = (Ë
	`≠r_time_£c
(
timeout
);

259 
tv
.
tv_n£c
 = (Ë
	`≠r_time_u£c
(
timeout
) * 1000;

260 
tv±r
 = &
tv
;

263 
ªt
 = 
	`kevít
(
pﬁl£t
->
p
->
kqueue_fd
, 
NULL
, 0,Öﬁl£t->p->
ke_£t
,

264 
pﬁl£t
->
p
->
£tsize
, 
tv±r
);

265 (*
num
Ë
ªt
;

266 i‡(
ªt
 < 0) {

267 
rv
 = 
	`≠r_gë_√tos_îr‹
();

269 i‡(
ªt
 == 0) {

270 
rv
 = 
APR_TIMEUP
;

273 
i
 = 0, 
j
 = 0; i < 
ªt
; i++) {

274 
fd
 = (((
pfd_ñem_t
*)(
pﬁl£t
->
p
->
ke_£t
[
i
].
ud©a
))->
pfd
);

275 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

276 
fd
.
desc_ty≥
 =
APR_POLL_FILE
 &&

277 
fd
.
desc
.
f
 =
pﬁl£t
->
wakeup_pùe
[0]) {

278 
	`≠r_pﬁl£t_døö_wakeup_pùe
(
pﬁl£t
);

279 
rv
 = 
APR_EINTR
;

282 
pﬁl£t
->
p
->
ªsu…_£t
[
j
] = 
fd
;

283 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 =

284 
	`gë_kqueue_ªvít
(
pﬁl£t
->
p
->
ke_£t
[
i
].
fûãr
,

285 
pﬁl£t
->
p
->
ke_£t
[
i
].
Êags
);

286 
j
++;

289 i‡((*
num
 = 
j
)) {

290 
rv
 = 
APR_SUCCESS
;

291 i‡(
des¸ùt‹s
) {

292 *
des¸ùt‹s
 = 
pﬁl£t
->
p
->
ªsu…_£t
;

298 
	`pﬁl£t_lock_rögs
();

301 
	`APR_RING_CONCAT
(&(
pﬁl£t
->
p
->
‰ì_rög
), &’ﬁl£t->p->
dód_rög
),

302 
pfd_ñem_t
, 
lök
);

304 
	`pﬁl£t_u∆ock_rögs
();

306  
rv
;

307 
	}
}

309 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

310 
im∂_pﬁl£t_¸óã
,

311 
im∂_pﬁl£t_add
,

312 
im∂_pﬁl£t_ªmove
,

313 
im∂_pﬁl£t_pﬁl
,

314 
im∂_pﬁl£t_˛ónup
,

318 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_kqueue
 = &
im∂
;

320 
≠r_°©us_t
 
	$cb_˛ónup
(*
b_
)

322 
≠r_pﬁlcb_t
 *
pﬁlcb
 = (≠r_pﬁlcb_à*Ë
b_
;

323 
	`˛o£
(
pﬁlcb
->
fd
);

324  
APR_SUCCESS
;

325 
	}
}

327 
≠r_°©us_t
 
	$im∂_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

328 
≠r_uöt32_t
 
size
,

329 
≠r_poﬁ_t
 *
p
,

330 
≠r_uöt32_t
 
Êags
)

332 
fd
;

334 
fd
 = 
	`kqueue
();

335 i‡(
fd
 < 0) {

336  
	`≠r_gë_√tos_îr‹
();

340 
Êags
;

342 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
)) == -1)

343  
î∫o
;

345 
Êags
 |
FD_CLOEXEC
;

346 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1)

347  
î∫o
;

350 
pﬁlcb
->
fd
 = fd;

351 
pﬁlcb
->
pﬁl£t
.
ke
 = (
kevít
 *)
	`≠r_pˇŒoc
(
p
, 2 * 
size
 * (kevent));

352 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
pﬁlcb
, 
cb_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

354  
APR_SUCCESS
;

355 
	}
}

357 
≠r_°©us_t
 
	$im∂_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

358 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

360 
≠r_os_sock_t
 
fd
;

361 
kevít
 
ev
;

362 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

364 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

365 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

368 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

371 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLIN
) {

372 
	`EV_SET
(&
ev
, 
fd
, 
EVFILT_READ
, 
EV_ADD
, 0, 0, 
des¸ùt‹
);

374 i‡(
	`kevít
(
pﬁlcb
->
fd
, &
ev
, 1, 
NULL
, 0, NULL) == -1) {

375 
rv
 = 
	`≠r_gë_√tos_îr‹
();

379 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLOUT
 && 
rv
 =
APR_SUCCESS
) {

380 
	`EV_SET
(&
ev
, 
fd
, 
EVFILT_WRITE
, 
EV_ADD
, 0, 0, 
des¸ùt‹
);

382 i‡(
	`kevít
(
pﬁlcb
->
fd
, &
ev
, 1, 
NULL
, 0, NULL) == -1) {

383 
rv
 = 
	`≠r_gë_√tos_îr‹
();

387  
rv
;

388 
	}
}

390 
≠r_°©us_t
 
	$im∂_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

391 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

393 
≠r_°©us_t
 
rv
;

394 
kevít
 
ev
;

395 
≠r_os_sock_t
 
fd
;

397 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

398 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

401 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

404 
rv
 = 
APR_NOTFOUND
;

405 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLIN
) {

406 
	`EV_SET
(&
ev
, 
fd
, 
EVFILT_READ
, 
EV_DELETE
, 0, 0, 
NULL
);

408 i‡(
	`kevít
(
pﬁlcb
->
fd
, &
ev
, 1, 
NULL
, 0, NULL) != -1) {

409 
rv
 = 
APR_SUCCESS
;

413 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLOUT
) {

414 
	`EV_SET
(&
ev
, 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0, 0, 
NULL
);

416 i‡(
	`kevít
(
pﬁlcb
->
fd
, &
ev
, 1, 
NULL
, 0, NULL) != -1) {

417 
rv
 = 
APR_SUCCESS
;

421  
rv
;

422 
	}
}

425 
≠r_°©us_t
 
	$im∂_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

426 
≠r_öãrvÆ_time_t
 
timeout
,

427 
≠r_pﬁlcb_cb_t
 
func
,

428 *
b©⁄
)

430 
ªt
, 
i
;

431 
time•ec
 
tv
, *
tv±r
;

432 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

434 i‡(
timeout
 < 0) {

435 
tv±r
 = 
NULL
;

438 
tv
.
tv_£c
 = (Ë
	`≠r_time_£c
(
timeout
);

439 
tv
.
tv_n£c
 = (Ë
	`≠r_time_u£c
(
timeout
) * 1000;

440 
tv±r
 = &
tv
;

443 
ªt
 = 
	`kevít
(
pﬁlcb
->
fd
, 
NULL
, 0,Öﬁlcb->
pﬁl£t
.
ke
, 2 *Öﬁlcb->
«Œoc
,

444 
tv±r
);

446 i‡(
ªt
 < 0) {

447 
rv
 = 
	`≠r_gë_√tos_îr‹
();

449 i‡(
ªt
 == 0) {

450 
rv
 = 
APR_TIMEUP
;

453 
i
 = 0; i < 
ªt
; i++) {

454 
≠r_pﬁlfd_t
 *
pﬁlfd
 = (≠r_pﬁlfd_à*)(
pﬁlcb
->
pﬁl£t
.
ke
[
i
].
ud©a
);

456 
pﬁlfd
->
π√víts
 = 
	`gë_kqueue_ªvít
(
pﬁlcb
->
pﬁl£t
.
ke
[
i
].
fûãr
,

457 
pﬁlcb
->
pﬁl£t
.
ke
[
i
].
Êags
);

459 
rv
 = 
	`func
(
b©⁄
, 
pﬁlfd
);

461 i‡(
rv
) {

462  
rv
;

467  
rv
;

468 
	}
}

470 
≠r_pﬁlcb_¥ovidî_t
 
	gim∂_cb
 = {

471 
im∂_pﬁlcb_¸óã
,

472 
im∂_pﬁlcb_add
,

473 
im∂_pﬁlcb_ªmove
,

474 
im∂_pﬁlcb_pﬁl
,

478 
≠r_pﬁlcb_¥ovidî_t
 *
	g≠r_pﬁlcb_¥ovidî_kqueue
 = &
im∂_cb
;

	@poll/unix/poll.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_time.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

22 
	~"≠r_¨ch_√tw‹kio.h
"

23 
	~"≠r_¨ch_misc.h
"

24 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

26 #i‡
deföed
(
HAVE_POLL
)

28 #ifde‡
HAVE_ALLOCA_H


29 
	~<Æloˇ.h
>

32 
≠r_öt16_t
 
	$gë_evít
(
≠r_öt16_t
 
evít
)

34 
≠r_öt16_t
 
rv
 = 0;

36 i‡(
evít
 & 
APR_POLLIN
)

37 
rv
 |
POLLIN
;

38 i‡(
evít
 & 
APR_POLLPRI
)

39 
rv
 |
POLLPRI
;

40 i‡(
evít
 & 
APR_POLLOUT
)

41 
rv
 |
POLLOUT
;

44  
rv
;

45 
	}
}

47 
≠r_öt16_t
 
	$gë_ªvít
(
≠r_öt16_t
 
evít
)

49 
≠r_öt16_t
 
rv
 = 0;

51 i‡(
evít
 & 
POLLIN
)

52 
rv
 |
APR_POLLIN
;

53 i‡(
evít
 & 
POLLPRI
)

54 
rv
 |
APR_POLLPRI
;

55 i‡(
evít
 & 
POLLOUT
)

56 
rv
 |
APR_POLLOUT
;

57 i‡(
evít
 & 
POLLERR
)

58 
rv
 |
APR_POLLERR
;

59 i‡(
evít
 & 
POLLHUP
)

60 
rv
 |
APR_POLLHUP
;

61 i‡(
evít
 & 
POLLNVAL
)

62 
rv
 |
APR_POLLNVAL
;

64  
rv
;

65 
	}
}

67 #ifde‡
POLL_USES_POLL


69 
	#SMALL_POLLSET_LIMIT
 8

	)

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl
(
≠r_pﬁlfd_t
 *
≠r£t
, 
≠r_öt32_t
 
num
,

72 
≠r_öt32_t
 *
nsds
,

73 
≠r_öãrvÆ_time_t
 
timeout
)

75 
i
, 
num_to_pﬁl
;

76 #ifde‡
HAVE_VLA


78 
pﬁlfd
 
pﬁl£t
[
num
];

79 #ñi‡
	`deföed
(
HAVE_ALLOCA
)

80 
pﬁlfd
 *
pﬁl£t
 = 
	`Æloˇ
((pﬁlfdË* 
num
);

81 i‡(!
pﬁl£t
)

82  
APR_ENOMEM
;

84 
pﬁlfd
 
tmp_pﬁl£t
[
SMALL_POLLSET_LIMIT
];

85 
pﬁlfd
 *
pﬁl£t
;

87 i‡(
num
 <
SMALL_POLLSET_LIMIT
) {

88 
pﬁl£t
 = 
tmp_pﬁl£t
;

94 
pﬁl£t
 = 
	`mÆloc
((
pﬁlfd
Ë* 
num
);

98 i‡(!
pﬁl£t
)

99  
APR_ENOMEM
;

102 
i
 = 0; i < 
num
; i++) {

103 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

104 
pﬁl£t
[
i
].
fd
 = 
≠r£t
[i].
desc
.
s
->
sockëdes
;

106 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_FILE
) {

107 
pﬁl£t
[
i
].
fd
 = 
≠r£t
[i].
desc
.
f
->
fûedes
;

112 
pﬁl£t
[
i
].
evíts
 = 
	`gë_evít
(
≠r£t
[i].
ªqevíts
);

114 
num_to_pﬁl
 = 
i
;

116 i‡(
timeout
 > 0) {

117 
timeout
 /= 1000;

120 
i
 = 
	`pﬁl
(
pﬁl£t
, 
num_to_pﬁl
, 
timeout
);

121 (*
nsds
Ë
i
;

123 i‡(
i
 > 0) {

127 
i
 = 0; i < 
num
; i++) {

128 
≠r£t
[
i
].
π√víts
 = 
	`gë_ªvít
(
pﬁl£t
[i].
ªvíts
);

132 #i‡!
	`deföed
(
HAVE_VLA
Ë&& !deföed(
HAVE_ALLOCA
)

133 i‡(
num
 > 
SMALL_POLLSET_LIMIT
) {

134 
	`‰ì
(
pﬁl£t
);

138 i‡((*
nsds
) < 0) {

139  
	`≠r_gë_√tos_îr‹
();

141 i‡((*
nsds
) == 0) {

142  
APR_TIMEUP
;

144  
APR_SUCCESS
;

145 
	}
}

150 
	s≠r_pﬁl£t_¥iv©e_t


152 
pﬁlfd
 *
	mpﬁl£t
;

153 
≠r_pﬁlfd_t
 *
	mquîy_£t
;

154 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

157 
≠r_°©us_t
 
	$im∂_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

158 
≠r_uöt32_t
 
size
,

159 
≠r_poﬁ_t
 *
p
,

160 
≠r_uöt32_t
 
Êags
)

162 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

163  
APR_ENOTIMPL
;

165 #ifde‡
WIN32


166 i‡(!
	`APR_HAVE_LATE_DLL_FUNC
(
WSAPﬁl
)) {

167  
APR_ENOTIMPL
;

170 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
’, (
≠r_pﬁl£t_¥iv©e_t
));

171 
pﬁl£t
->
p
->pﬁl£à
	`≠r_∑Œoc
’, 
size
 * (
pﬁlfd
));

172 
pﬁl£t
->
p
->
quîy_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

173 
pﬁl£t
->
p
->
ªsu…_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

175  
APR_SUCCESS
;

176 
	}
}

178 
≠r_°©us_t
 
	$im∂_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

179 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

181 i‡(
pﬁl£t
->
√…s
 =pﬁl£t->
«Œoc
) {

182  
APR_ENOMEM
;

185 
pﬁl£t
->
p
->
quîy_£t
[pﬁl£t->
√…s
] = *
des¸ùt‹
;

187 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

188 
pﬁl£t
->
p
->pﬁl£t[pﬁl£t->
√…s
].
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

191 #i‡
APR_FILES_AS_SOCKETS


192 
pﬁl£t
->
p
->pﬁl£t[pﬁl£t->
√…s
].
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

194 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

195 
des¸ùt‹
->
desc
.
f
 =
pﬁl£t
->
wakeup_pùe
[0])

196 
pﬁl£t
->
p
->pﬁl£t[pﬁl£t->
√…s
].
fd
 = (
SOCKET
)
des¸ùt‹
->
desc
.
f
->
fûedes
;

198  
APR_EBADF
;

201 
pﬁl£t
->
p
->pﬁl£t[pﬁl£t->
√…s
].
evíts
 =

202 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
);

203 
pﬁl£t
->
√…s
++;

205  
APR_SUCCESS
;

206 
	}
}

208 
≠r_°©us_t
 
	$im∂_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

209 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

211 
≠r_uöt32_t
 
i
;

213 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

214 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
p
->
quîy_£t
[
i
].desc.s) {

216 
≠r_uöt32_t
 
d°
 = 
i
;

217 
≠r_uöt32_t
 
ﬁd_√…s
 = 
pﬁl£t
->
√…s
;

218 
pﬁl£t
->
√…s
--;

219 
i
++; i < 
ﬁd_√…s
; i++) {

220 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
p
->
quîy_£t
[
i
].desc.s) {

221 
pﬁl£t
->
√…s
--;

224 
pﬁl£t
->
p
->pﬁl£t[
d°
] =Öﬁl£t->p->pﬁl£t[
i
];

225 
pﬁl£t
->
p
->
quîy_£t
[
d°
] =Öﬁl£t->p->quîy_£t[
i
];

226 
d°
++;

229  
APR_SUCCESS
;

233  
APR_NOTFOUND
;

234 
	}
}

236 
≠r_°©us_t
 
	$im∂_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

237 
≠r_öãrvÆ_time_t
 
timeout
,

238 
≠r_öt32_t
 *
num
,

239 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

241 
ªt
;

242 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

243 #ifde‡
WIN32


244 
≠r_öãrvÆ_time_t
 
‹ig_timeout
 = 
timeout
;

247 i‡(
timeout
 > 0) {

248 
timeout
 /= 1000;

250 #ifde‡
WIN32


252 i‡(
pﬁl£t
->
√…s
 == 0) {

253 *
num
 = 0;

254 i‡(
‹ig_timeout
 > 0) {

255 
	`≠r_¶ìp
(
‹ig_timeout
);

256  
APR_TIMEUP
;

258  
APR_SUCCESS
;

261 
ªt
 = 
	`WSAPﬁl
(
pﬁl£t
->
p
->pﬁl£t,Öﬁl£t->
√…s
, ()
timeout
);

263 
ªt
 = 
	`pﬁl
(
pﬁl£t
->
p
->pﬁl£t,Öﬁl£t->
√…s
, 
timeout
);

265 (*
num
Ë
ªt
;

266 i‡(
ªt
 < 0) {

267  
	`≠r_gë_√tos_îr‹
();

269 i‡(
ªt
 == 0) {

270  
APR_TIMEUP
;

273 
≠r_uöt32_t
 
i
, 
j
;

275 
i
 = 0, 
j
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

276 i‡(
pﬁl£t
->
p
->pﬁl£t[
i
].
ªvíts
 != 0) {

280 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

281 
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc_ty≥
 =
APR_POLL_FILE
 &&

282 
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc
.
f
 =pﬁl£t->
wakeup_pùe
[0]) {

283 
	`≠r_pﬁl£t_døö_wakeup_pùe
(
pﬁl£t
);

284 
rv
 = 
APR_EINTR
;

287 
pﬁl£t
->
p
->
ªsu…_£t
[
j
] =Öﬁl£t->p->
quîy_£t
[
i
];

288 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 =

289 
	`gë_ªvít
(
pﬁl£t
->
p
->pﬁl£t[
i
].
ªvíts
);

290 
j
++;

294 i‡(((*
num
Ë
j
) > 0)

295 
rv
 = 
APR_SUCCESS
;

297 i‡(
des¸ùt‹s
 && (*
num
))

298 *
des¸ùt‹s
 = 
pﬁl£t
->
p
->
ªsu…_£t
;

299  
rv
;

300 
	}
}

302 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

303 
im∂_pﬁl£t_¸óã
,

304 
im∂_pﬁl£t_add
,

305 
im∂_pﬁl£t_ªmove
,

306 
im∂_pﬁl£t_pﬁl
,

307 
NULL
,

311 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_pﬁl
 = &
im∂
;

316 
≠r_°©us_t
 
	$im∂_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

317 
≠r_uöt32_t
 
size
,

318 
≠r_poﬁ_t
 *
p
,

319 
≠r_uöt32_t
 
Êags
)

321 #i‡
APR_HAS_THREADS


322  
APR_ENOTIMPL
;

324 
pﬁlcb
->
fd
 = -1;

325 #ifde‡
WIN32


326 i‡(!
	`APR_HAVE_LATE_DLL_FUNC
(
WSAPﬁl
)) {

327  
APR_ENOTIMPL
;

331 
pﬁlcb
->
pﬁl£t
.
ps
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
pﬁlfd
));

332 
pﬁlcb
->
c›y£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
≠r_pﬁlfd_t
 *));

334  
APR_SUCCESS
;

336 
	}
}

338 
≠r_°©us_t
 
	$im∂_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

339 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

341 i‡(
pﬁlcb
->
√…s
 =pﬁlcb->
«Œoc
) {

342  
APR_ENOMEM
;

345 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

346 
pﬁlcb
->
pﬁl£t
.
ps
[pﬁlcb->
√…s
].
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

349 #i‡
APR_FILES_AS_SOCKETS


350 
pﬁlcb
->
pﬁl£t
.
ps
[pﬁlcb->
√…s
].
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

352  
APR_EBADF
;

356 
pﬁlcb
->
pﬁl£t
.
ps
[pﬁlcb->
√…s
].
evíts
 =

357 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
);

358 
pﬁlcb
->
c›y£t
[pﬁlcb->
√…s
] = 
des¸ùt‹
;

359 
pﬁlcb
->
√…s
++;

361  
APR_SUCCESS
;

362 
	}
}

364 
≠r_°©us_t
 
	$im∂_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

365 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

367 
≠r_uöt32_t
 
i
;

369 
i
 = 0; i < 
pﬁlcb
->
√…s
; i++) {

370 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁlcb
->
c›y£t
[
i
]->desc.s) {

372 
≠r_uöt32_t
 
d°
 = 
i
;

373 
≠r_uöt32_t
 
ﬁd_√…s
 = 
pﬁlcb
->
√…s
;

374 
pﬁlcb
->
√…s
--;

375 
i
++; i < 
ﬁd_√…s
; i++) {

376 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁlcb
->
c›y£t
[
i
]->desc.s) {

377 
pﬁlcb
->
√…s
--;

380 
pﬁlcb
->
pﬁl£t
.
ps
[
d°
] =Öﬁlcb->pﬁl£t.ps[
i
];

381 
pﬁlcb
->
c›y£t
[
d°
] =Öﬁlcb->c›y£t[
i
];

382 
d°
++;

385  
APR_SUCCESS
;

389  
APR_NOTFOUND
;

390 
	}
}

392 
≠r_°©us_t
 
	$im∂_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

393 
≠r_öãrvÆ_time_t
 
timeout
,

394 
≠r_pﬁlcb_cb_t
 
func
,

395 *
b©⁄
)

397 
ªt
;

398 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

399 
≠r_uöt32_t
 
i
;

401 i‡(
timeout
 > 0) {

402 
timeout
 /= 1000;

404 #ifde‡
WIN32


405 
ªt
 = 
	`WSAPﬁl
(
pﬁlcb
->
pﬁl£t
.
ps
,Öﬁlcb->
√…s
, ()
timeout
);

407 
ªt
 = 
	`pﬁl
(
pﬁlcb
->
pﬁl£t
.
ps
,Öﬁlcb->
√…s
, 
timeout
);

409 i‡(
ªt
 < 0) {

410  
	`≠r_gë_√tos_îr‹
();

412 i‡(
ªt
 == 0) {

413  
APR_TIMEUP
;

416 
i
 = 0; i < 
pﬁlcb
->
√…s
; i++) {

417 i‡(
pﬁlcb
->
pﬁl£t
.
ps
[
i
].
ªvíts
 != 0) {

418 
≠r_pﬁlfd_t
 *
pﬁlfd
 = 
pﬁlcb
->
c›y£t
[
i
];

419 
pﬁlfd
->
π√víts
 = 
	`gë_ªvít
(
pﬁlcb
->
pﬁl£t
.
ps
[
i
].
ªvíts
);

420 
rv
 = 
	`func
(
b©⁄
, 
pﬁlfd
);

421 i‡(
rv
) {

422  
rv
;

427  
rv
;

428 
	}
}

430 
≠r_pﬁlcb_¥ovidî_t
 
	gim∂_cb
 = {

431 
im∂_pﬁlcb_¸óã
,

432 
im∂_pﬁlcb_add
,

433 
im∂_pﬁlcb_ªmove
,

434 
im∂_pﬁlcb_pﬁl
,

438 
≠r_pﬁlcb_¥ovidî_t
 *
	g≠r_pﬁlcb_¥ovidî_pﬁl
 = &
im∂_cb
;

	@poll/unix/pollcb.c

17 #ifde‡
WIN32


19 
	#FD_SETSIZE
 1024

	)

22 
	~"≠r.h
"

23 
	~"≠r_pﬁl.h
"

24 
	~"≠r_time.h
"

25 
	~"≠r_p‹èbÀ.h
"

26 
	~"≠r_¨ch_fûe_io.h
"

27 
	~"≠r_¨ch_√tw‹kio.h
"

28 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

30 
≠r_pﬁl£t_mëhod_e
 
	gpﬁl£t_deÁu…_mëhod
 = 
POLLSET_DEFAULT_METHOD
;

31 #i‡
deföed
(
HAVE_KQUEUE
)

32 
≠r_pﬁlcb_¥ovidî_t
 *
≠r_pﬁlcb_¥ovidî_kqueue
;

34 #i‡
deföed
(
HAVE_PORT_CREATE
)

35 
≠r_pﬁlcb_¥ovidî_t
 *
≠r_pﬁlcb_¥ovidî_p‹t
;

37 #i‡
deföed
(
HAVE_EPOLL
)

38 
≠r_pﬁlcb_¥ovidî_t
 *
≠r_pﬁlcb_¥ovidî_ïﬁl
;

40 #i‡
deföed
(
HAVE_POLL
)

41 
≠r_pﬁlcb_¥ovidî_t
 *
≠r_pﬁlcb_¥ovidî_pﬁl
;

44 
≠r_pﬁlcb_¥ovidî_t
 *
	$pﬁlcb_¥ovidî
(
≠r_pﬁl£t_mëhod_e
 
mëhod
)

46 
≠r_pﬁlcb_¥ovidî_t
 *
¥ovidî
 = 
NULL
;

47 
mëhod
) {

48 
APR_POLLSET_KQUEUE
:

49 #i‡
	`deföed
(
HAVE_KQUEUE
)

50 
¥ovidî
 = 
≠r_pﬁlcb_¥ovidî_kqueue
;

53 
APR_POLLSET_PORT
:

54 #i‡
	`deföed
(
HAVE_PORT_CREATE
)

55 
¥ovidî
 = 
≠r_pﬁlcb_¥ovidî_p‹t
;

58 
APR_POLLSET_EPOLL
:

59 #i‡
	`deföed
(
HAVE_EPOLL
)

60 
¥ovidî
 = 
≠r_pﬁlcb_¥ovidî_ïﬁl
;

63 
APR_POLLSET_POLL
:

64 #i‡
	`deföed
(
HAVE_POLL
)

65 
¥ovidî
 = 
≠r_pﬁlcb_¥ovidî_pﬁl
;

68 
APR_POLLSET_SELECT
:

69 
APR_POLLSET_AIO_MSGQ
:

70 
APR_POLLSET_DEFAULT
:

73  
¥ovidî
;

74 
	}
}

76 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁlcb_¸óã_ex
(
≠r_pﬁlcb_t
 **
ªt_pﬁlcb
,

77 
≠r_uöt32_t
 
size
,

78 
≠r_poﬁ_t
 *
p
,

79 
≠r_uöt32_t
 
Êags
,

80 
≠r_pﬁl£t_mëhod_e
 
mëhod
)

82 
≠r_°©us_t
 
rv
;

83 
≠r_pﬁlcb_t
 *
pﬁlcb
;

84 
≠r_pﬁlcb_¥ovidî_t
 *
¥ovidî
 = 
NULL
;

86 *
ªt_pﬁlcb
 = 
NULL
;

88 #ifde‡
WIN32


94 i‡(
mëhod
 =
APR_POLLSET_DEFAULT
) {

95 
mëhod
 = 
APR_POLLSET_POLL
;

99 i‡(
mëhod
 =
APR_POLLSET_DEFAULT
)

100 
mëhod
 = 
pﬁl£t_deÁu…_mëhod
;

101 
¥ovidî
 =
NULL
) {

102 
¥ovidî
 = 
	`pﬁlcb_¥ovidî
(
mëhod
);

103 i‡(!
¥ovidî
) {

104 i‡((
Êags
 & 
APR_POLLSET_NODEFAULT
) == APR_POLLSET_NODEFAULT)

105  
APR_ENOTIMPL
;

106 i‡(
mëhod
 =
pﬁl£t_deÁu…_mëhod
)

107  
APR_ENOTIMPL
;

108 
mëhod
 = 
pﬁl£t_deÁu…_mëhod
;

112 
pﬁlcb
 = 
	`≠r_∑Œoc
(
p
, (*pollcb));

113 
pﬁlcb
->
√…s
 = 0;

114 
pﬁlcb
->
«Œoc
 = 
size
;

115 
pﬁlcb
->
poﬁ
 = 
p
;

116 
pﬁlcb
->
¥ovidî
 =Örovider;

118 
rv
 = (*
¥ovidî
->
¸óã
)(
pﬁlcb
, 
size
, 
p
, 
Êags
);

119 i‡(
rv
 =
APR_ENOTIMPL
) {

120 i‡(
mëhod
 =
pﬁl£t_deÁu…_mëhod
) {

121  
rv
;

124 i‡((
Êags
 & 
APR_POLLSET_NODEFAULT
) == APR_POLLSET_NODEFAULT) {

125  
rv
;

129 
¥ovidî
 = 
	`pﬁlcb_¥ovidî
(
pﬁl£t_deÁu…_mëhod
);

130 i‡(!
¥ovidî
) {

131  
APR_ENOTIMPL
;

133 
rv
 = (*
¥ovidî
->
¸óã
)(
pﬁlcb
, 
size
, 
p
, 
Êags
);

134 i‡(
rv
 !
APR_SUCCESS
) {

135  
rv
;

137 
pﬁlcb
->
¥ovidî
 =Örovider;

140 *
ªt_pﬁlcb
 = 
pﬁlcb
;

141  
APR_SUCCESS
;

142 
	}
}

144 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 **
pﬁlcb
,

145 
≠r_uöt32_t
 
size
,

146 
≠r_poﬁ_t
 *
p
,

147 
≠r_uöt32_t
 
Êags
)

149 
≠r_pﬁl£t_mëhod_e
 
mëhod
 = 
APR_POLLSET_DEFAULT
;

150  
	`≠r_pﬁlcb_¸óã_ex
(
pﬁlcb
, 
size
, 
p
, 
Êags
, 
mëhod
);

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

154 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

156  (*
pﬁlcb
->
¥ovidî
->
add
)’ﬁlcb, 
des¸ùt‹
);

157 
	}
}

159 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

160 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

162  (*
pﬁlcb
->
¥ovidî
->
ªmove
)’ﬁlcb, 
des¸ùt‹
);

163 
	}
}

166 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

167 
≠r_öãrvÆ_time_t
 
timeout
,

168 
≠r_pﬁlcb_cb_t
 
func
,

169 *
b©⁄
)

171  (*
pﬁlcb
->
¥ovidî
->
pﬁl
)’ﬁlcb, 
timeout
, 
func
, 
b©⁄
);

172 
	}
}

	@poll/unix/pollset.c

17 #ifde‡
WIN32


19 
	#FD_SETSIZE
 1024

	)

22 
	~"≠r.h
"

23 
	~"≠r_pﬁl.h
"

24 
	~"≠r_time.h
"

25 
	~"≠r_p‹èbÀ.h
"

26 
	~"≠r_¨ch_fûe_io.h
"

27 
	~"≠r_¨ch_√tw‹kio.h
"

28 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

29 
	~"≠r_¨ch_öhîô.h
"

31 
≠r_pﬁl£t_mëhod_e
 
	gpﬁl£t_deÁu…_mëhod
 = 
POLLSET_DEFAULT_METHOD
;

33 #i‡!
APR_FILES_AS_SOCKETS


34 #i‡
deföed
 (
WIN32
)

38 
≠r_°©us_t
 
	$¸óã_wakeup_pùe
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

40 
≠r_°©us_t
 
rv
;

42 i‡((
rv
 = 
	`≠r_fûe_sockë_pùe_¸óã
(&
pﬁl£t
->
wakeup_pùe
[0],

43 &
pﬁl£t
->
wakeup_pùe
[1],

44 
pﬁl£t
->
poﬁ
)Ë!
APR_SUCCESS
)

45  
rv
;

47 
pﬁl£t
->
wakeup_pfd
.
p
 =Öﬁl£t->
poﬁ
;

48 
pﬁl£t
->
wakeup_pfd
.
ªqevíts
 = 
APR_POLLIN
;

49 
pﬁl£t
->
wakeup_pfd
.
desc_ty≥
 = 
APR_POLL_FILE
;

50 
pﬁl£t
->
wakeup_pfd
.
desc
.
f
 =Öﬁl£t->
wakeup_pùe
[0];

52  
	`≠r_pﬁl£t_add
(
pﬁl£t
, &pﬁl£t->
wakeup_pfd
);

53 
	}
}

56 
≠r_°©us_t
 
	$¸óã_wakeup_pùe
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

58  
APR_ENOTIMPL
;

59 
	}
}

61 
≠r_°©us_t
 
	$≠r_fûe_sockë_pùe_˛o£
(
≠r_fûe_t
 *
fûe
)

63  
APR_ENOTIMPL
;

64 
	}
}

71 
≠r_°©us_t
 
	$¸óã_wakeup_pùe
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

73 
≠r_°©us_t
 
rv
;

75 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
pﬁl£t
->
wakeup_pùe
[0],

76 &
pﬁl£t
->
wakeup_pùe
[1],

77 
pﬁl£t
->
poﬁ
)Ë!
APR_SUCCESS
)

78  
rv
;

80 
pﬁl£t
->
wakeup_pfd
.
p
 =Öﬁl£t->
poﬁ
;

81 
pﬁl£t
->
wakeup_pfd
.
ªqevíts
 = 
APR_POLLIN
;

82 
pﬁl£t
->
wakeup_pfd
.
desc_ty≥
 = 
APR_POLL_FILE
;

83 
pﬁl£t
->
wakeup_pfd
.
desc
.
f
 =Öﬁl£t->
wakeup_pùe
[0];

86 
Êags
;

88 i‡((
Êags
 = 
	`f˙é
(
pﬁl£t
->
wakeup_pùe
[0]->
fûedes
, 
F_GETFD
)) == -1)

89  
î∫o
;

91 
Êags
 |
FD_CLOEXEC
;

92 i‡(
	`f˙é
(
pﬁl£t
->
wakeup_pùe
[0]->
fûedes
, 
F_SETFD
, 
Êags
) == -1)

93  
î∫o
;

96 
Êags
;

98 i‡((
Êags
 = 
	`f˙é
(
pﬁl£t
->
wakeup_pùe
[1]->
fûedes
, 
F_GETFD
)) == -1)

99  
î∫o
;

101 
Êags
 |
FD_CLOEXEC
;

102 i‡(
	`f˙é
(
pﬁl£t
->
wakeup_pùe
[1]->
fûedes
, 
F_SETFD
, 
Êags
) == -1)

103  
î∫o
;

106  
	`≠r_pﬁl£t_add
(
pﬁl£t
, &pﬁl£t->
wakeup_pfd
);

107 
	}
}

112 
	$≠r_pﬁl£t_døö_wakeup_pùe
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

114 
rb
[512];

115 
≠r_size_t
 
ƒ
 = (
rb
);

117 
	`≠r_fûe_ªad
(
pﬁl£t
->
wakeup_pùe
[0], 
rb
, &
ƒ
Ë=
APR_SUCCESS
) {

123 i‡(
ƒ
 !(
rb
))

126 
	}
}

128 
≠r_°©us_t
 
	$pﬁl£t_˛ónup
(*
p
)

130 
≠r_pﬁl£t_t
 *
pﬁl£t
 = (≠r_pﬁl£t_à*Ë
p
;

131 i‡(
pﬁl£t
->
¥ovidî
->
˛ónup
) {

132 (*
pﬁl£t
->
¥ovidî
->
˛ónup
)(pollset);

134 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) {

136 i‡(
pﬁl£t
->
wakeup_pùe
[0]) {

137 #i‡
APR_FILES_AS_SOCKETS


138 
	`≠r_fûe_˛o£
(
pﬁl£t
->
wakeup_pùe
[0]);

140 
	`≠r_fûe_sockë_pùe_˛o£
(
pﬁl£t
->
wakeup_pùe
[0]);

142 
pﬁl£t
->
wakeup_pùe
[0] = 
NULL
;

144 i‡(
pﬁl£t
->
wakeup_pùe
[1]) {

145 #i‡
APR_FILES_AS_SOCKETS


146 
	`≠r_fûe_˛o£
(
pﬁl£t
->
wakeup_pùe
[1]);

148 
	`≠r_fûe_sockë_pùe_˛o£
(
pﬁl£t
->
wakeup_pùe
[1]);

150 
pﬁl£t
->
wakeup_pùe
[1] = 
NULL
;

154  
APR_SUCCESS
;

155 
	}
}

157 #i‡
deföed
(
HAVE_KQUEUE
)

158 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_kqueue
;

160 #i‡
deföed
(
HAVE_PORT_CREATE
)

161 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_p‹t
;

163 #i‡
deföed
(
HAVE_EPOLL
)

164 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_ïﬁl
;

166 #i‡
deföed
(
HAVE_AIO_MSGQ
)

167 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_aio_msgq
;

169 #i‡
deföed
(
HAVE_POLL
)

170 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_pﬁl
;

172 
≠r_pﬁl£t_¥ovidî_t
 *
≠r_pﬁl£t_¥ovidî_£À˘
;

174 
≠r_pﬁl£t_¥ovidî_t
 *
	$pﬁl£t_¥ovidî
(
≠r_pﬁl£t_mëhod_e
 
mëhod
)

176 
≠r_pﬁl£t_¥ovidî_t
 *
¥ovidî
 = 
NULL
;

177 
mëhod
) {

178 
APR_POLLSET_KQUEUE
:

179 #i‡
	`deföed
(
HAVE_KQUEUE
)

180 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_kqueue
;

183 
APR_POLLSET_PORT
:

184 #i‡
	`deföed
(
HAVE_PORT_CREATE
)

185 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_p‹t
;

188 
APR_POLLSET_EPOLL
:

189 #i‡
	`deföed
(
HAVE_EPOLL
)

190 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_ïﬁl
;

193 
APR_POLLSET_AIO_MSGQ
:

194 #i‡
	`deföed
(
HAVE_AIO_MSGQ
)

195 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_aio_msgq
;

198 
APR_POLLSET_POLL
:

199 #i‡
	`deföed
(
HAVE_POLL
)

200 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_pﬁl
;

203 
APR_POLLSET_SELECT
:

204 
¥ovidî
 = 
≠r_pﬁl£t_¥ovidî_£À˘
;

206 
APR_POLLSET_DEFAULT
:

209  
¥ovidî
;

210 
	}
}

212 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_¸óã_ex
(
≠r_pﬁl£t_t
 **
ªt_pﬁl£t
,

213 
≠r_uöt32_t
 
size
,

214 
≠r_poﬁ_t
 *
p
,

215 
≠r_uöt32_t
 
Êags
,

216 
≠r_pﬁl£t_mëhod_e
 
mëhod
)

218 
≠r_°©us_t
 
rv
;

219 
≠r_pﬁl£t_t
 *
pﬁl£t
;

220 
≠r_pﬁl£t_¥ovidî_t
 *
¥ovidî
 = 
NULL
;

222 *
ªt_pﬁl£t
 = 
NULL
;

224 #ifde‡
WIN32


230 i‡(
mëhod
 =
APR_POLLSET_DEFAULT
) {

231 
mëhod
 = 
APR_POLLSET_POLL
;

235 i‡(
mëhod
 =
APR_POLLSET_DEFAULT
)

236 
mëhod
 = 
pﬁl£t_deÁu…_mëhod
;

237 
¥ovidî
 =
NULL
) {

238 
¥ovidî
 = 
	`pﬁl£t_¥ovidî
(
mëhod
);

239 i‡(!
¥ovidî
) {

240 i‡((
Êags
 & 
APR_POLLSET_NODEFAULT
) == APR_POLLSET_NODEFAULT)

241  
APR_ENOTIMPL
;

242 i‡(
mëhod
 =
pﬁl£t_deÁu…_mëhod
)

243  
APR_ENOTIMPL
;

244 
mëhod
 = 
pﬁl£t_deÁu…_mëhod
;

247 i‡(
Êags
 & 
APR_POLLSET_WAKEABLE
) {

249 
size
++;

252 
pﬁl£t
 = 
	`≠r_∑Œoc
(
p
, (*pollset));

253 
pﬁl£t
->
√…s
 = 0;

254 
pﬁl£t
->
«Œoc
 = 
size
;

255 
pﬁl£t
->
poﬁ
 = 
p
;

256 
pﬁl£t
->
Êags
 = flags;

257 
pﬁl£t
->
¥ovidî
 =Örovider;

259 
rv
 = (*
¥ovidî
->
¸óã
)(
pﬁl£t
, 
size
, 
p
, 
Êags
);

260 i‡(
rv
 =
APR_ENOTIMPL
) {

261 i‡(
mëhod
 =
pﬁl£t_deÁu…_mëhod
) {

262  
rv
;

264 
¥ovidî
 = 
	`pﬁl£t_¥ovidî
(
pﬁl£t_deÁu…_mëhod
);

265 i‡(!
¥ovidî
) {

266  
APR_ENOTIMPL
;

268 
rv
 = (*
¥ovidî
->
¸óã
)(
pﬁl£t
, 
size
, 
p
, 
Êags
);

269 i‡(
rv
 !
APR_SUCCESS
) {

270  
rv
;

272 
pﬁl£t
->
¥ovidî
 =Örovider;

274 i‡(
rv
 !
APR_SUCCESS
) {

275  
rv
;

277 i‡(
Êags
 & 
APR_POLLSET_WAKEABLE
) {

279 i‡((
rv
 = 
	`¸óã_wakeup_pùe
(
pﬁl£t
)Ë!
APR_SUCCESS
) {

280  
rv
;

283 i‡((
Êags
 & 
APR_POLLSET_WAKEABLE
Ë|| 
¥ovidî
->
˛ónup
)

284 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
pﬁl£t
, 
pﬁl£t_˛ónup
,

285 
≠r_poﬁ_˛ónup_nuŒ
);

287 *
ªt_pﬁl£t
 = 
pﬁl£t
;

288  
APR_SUCCESS
;

289 
	}
}

291 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_pﬁl£t_mëhod_«me
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

293  
pﬁl£t
->
¥ovidî
->
«me
;

294 
	}
}

296 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_pﬁl_mëhod_de‚ame
()

298 
≠r_pﬁl£t_¥ovidî_t
 *
¥ovidî
 = 
NULL
;

300 
¥ovidî
 = 
	`pﬁl£t_¥ovidî
(
pﬁl£t_deÁu…_mëhod
);

301 i‡(
¥ovidî
)

302  
¥ovidî
->
«me
;

305 
	}
}

307 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 **
pﬁl£t
,

308 
≠r_uöt32_t
 
size
,

309 
≠r_poﬁ_t
 *
p
,

310 
≠r_uöt32_t
 
Êags
)

312 
≠r_pﬁl£t_mëhod_e
 
mëhod
 = 
APR_POLLSET_DEFAULT
;

313  
	`≠r_pﬁl£t_¸óã_ex
(
pﬁl£t
, 
size
, 
p
, 
Êags
, 
mëhod
);

314 
	}
}

316 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_de°roy
(
≠r_pﬁl£t_t
 * 
pﬁl£t
)

318 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
 ||

319 
pﬁl£t
->
¥ovidî
->
˛ónup
)

320  
	`≠r_poﬁ_˛ónup_run
(
pﬁl£t
->
poﬁ
,Öollset,

321 
pﬁl£t_˛ónup
);

323  
APR_SUCCESS
;

324 
	}
}

326 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_wakeup
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

328 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
)

329  
	`≠r_fûe_putc
(1, 
pﬁl£t
->
wakeup_pùe
[1]);

331  
APR_EINIT
;

332 
	}
}

334 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

335 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

337  (*
pﬁl£t
->
¥ovidî
->
add
)’ﬁl£t, 
des¸ùt‹
);

338 
	}
}

340 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

341 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

343  (*
pﬁl£t
->
¥ovidî
->
ªmove
)’ﬁl£t, 
des¸ùt‹
);

344 
	}
}

346 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

347 
≠r_öãrvÆ_time_t
 
timeout
,

348 
≠r_öt32_t
 *
num
,

349 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

351  (*
pﬁl£t
->
¥ovidî
->
pﬁl
)’ﬁl£t, 
timeout
, 
num
, 
des¸ùt‹s
);

352 
	}
}

	@poll/unix/port.c

17 
	~"≠r.h
"

18 
	~"≠r_pﬁl.h
"

19 
	~"≠r_time.h
"

20 
	~"≠r_p‹èbÀ.h
"

21 
	~"≠r_©omic.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~"≠r_¨ch_√tw‹kio.h
"

24 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

25 
	~"≠r_¨ch_öhîô.h
"

27 #i‡
deföed
(
HAVE_PORT_CREATE
)

29 
≠r_öt16_t
 
	$gë_evít
(
≠r_öt16_t
 
evít
)

31 
≠r_öt16_t
 
rv
 = 0;

33 i‡(
evít
 & 
APR_POLLIN
)

34 
rv
 |
POLLIN
;

35 i‡(
evít
 & 
APR_POLLPRI
)

36 
rv
 |
POLLPRI
;

37 i‡(
evít
 & 
APR_POLLOUT
)

38 
rv
 |
POLLOUT
;

41  
rv
;

42 
	}
}

44 
≠r_öt16_t
 
	$gë_ªvít
(
≠r_öt16_t
 
evít
)

46 
≠r_öt16_t
 
rv
 = 0;

48 i‡(
evít
 & 
POLLIN
)

49 
rv
 |
APR_POLLIN
;

50 i‡(
evít
 & 
POLLPRI
)

51 
rv
 |
APR_POLLPRI
;

52 i‡(
evít
 & 
POLLOUT
)

53 
rv
 |
APR_POLLOUT
;

54 i‡(
evít
 & 
POLLERR
)

55 
rv
 |
APR_POLLERR
;

56 i‡(
evít
 & 
POLLHUP
)

57 
rv
 |
APR_POLLHUP
;

58 i‡(
evít
 & 
POLLNVAL
)

59 
rv
 |
APR_POLLNVAL
;

61  
rv
;

62 
	}
}

65 
	s≠r_pﬁl£t_¥iv©e_t


67 
	mp‹t_fd
;

68 
p‹t_evít_t
 *
	mp‹t_£t
;

69 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

70 #i‡
APR_HAS_THREADS


72 
≠r_thªad_muãx_t
 *
	mrög_lock
;

75 
APR_RING_HEAD
(
pfd_quîy_rög_t
, 
pfd_ñem_t
Ë
	mquîy_rög
;

79 
APR_RING_HEAD
(
pfd_add_rög_t
, 
pfd_ñem_t
Ë
	madd_rög
;

81 
APR_RING_HEAD
(
pfd_‰ì_rög_t
, 
pfd_ñem_t
Ë
	m‰ì_rög
;

84 
APR_RING_HEAD
(
pfd_dód_rög_t
, 
pfd_ñem_t
Ë
	mdód_rög
;

86 vﬁ©ûê
≠r_uöt32_t
 
	mwaôög
;

89 
≠r_°©us_t
 
	$ˇŒ_p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[],

90 
max
, *
ngë
,

91 
≠r_öãrvÆ_time_t
 
timeout
)

93 
time•ec
 
tv
, *
tv±r
;

94 
ªt
;

95 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

97 i‡(
timeout
 < 0) {

98 
tv±r
 = 
NULL
;

101 
tv
.
tv_£c
 = (Ë
	`≠r_time_£c
(
timeout
);

102 
tv
.
tv_n£c
 = (Ë
	`≠r_time_u£c
(
timeout
) * 1000;

103 
tv±r
 = &
tv
;

106 
li°
[0].
p‹ãv_u£r
 = (*)-1;

110 
ªt
 = 
	`p‹t_gën
(
p‹t
, 
li°
, 
max
, 
ngë
, 
tv±r
);

115 i‡(
ªt
 == -1) {

116 
rv
 = 
	`≠r_gë_√tos_îr‹
();

118 
rv
) {

119 
EINTR
:

120 
ETIME
:

121 i‡(*
ngë
 > 0 && 
li°
[0].
p‹ãv_u£r
 != (*)-1) {

132 
rv
 = 
APR_SUCCESS
;

135 i‡(
rv
 =
ETIME
) {

136 
rv
 = 
APR_TIMEUP
;

140 *
ngë
 = 0;

143 i‡(*
ngë
 == 0) {

144 
rv
 = 
APR_TIMEUP
;

147  
rv
;

148 
	}
}

150 
≠r_°©us_t
 
	$im∂_pﬁl£t_˛ónup
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

152 
	`˛o£
(
pﬁl£t
->
p
->
p‹t_fd
);

153  
APR_SUCCESS
;

154 
	}
}

156 
≠r_°©us_t
 
	$im∂_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

157 
≠r_uöt32_t
 
size
,

158 
≠r_poﬁ_t
 *
p
,

159 
≠r_uöt32_t
 
Êags
)

161 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

162 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
’, (
≠r_pﬁl£t_¥iv©e_t
));

163 #i‡
APR_HAS_THREADS


164 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
 &&

165 ((
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
pﬁl£t
->
p
->
rög_lock
,

166 
APR_THREAD_MUTEX_DEFAULT
,

167 
p
)Ë!
APR_SUCCESS
)) {

168 
pﬁl£t
->
p
 = 
NULL
;

169  
rv
;

172 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

173 
pﬁl£t
->
p
 = 
NULL
;

174  
APR_ENOTIMPL
;

177 
pﬁl£t
->
p
->
waôög
 = 0;

179 
pﬁl£t
->
p
->
p‹t_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
p‹t_evít_t
));

181 
pﬁl£t
->
p
->
p‹t_fd
 = 
	`p‹t_¸óã
();

183 i‡(
pﬁl£t
->
p
->
p‹t_fd
 < 0) {

184 
pﬁl£t
->
p
 = 
NULL
;

185  
	`≠r_gë_√tos_îr‹
();

189 
Êags
;

191 i‡((
Êags
 = 
	`f˙é
(
pﬁl£t
->
p
->
p‹t_fd
, 
F_GETFD
)) == -1)

192  
î∫o
;

194 
Êags
 |
FD_CLOEXEC
;

195 i‡(
	`f˙é
(
pﬁl£t
->
p
->
p‹t_fd
, 
F_SETFD
, 
Êags
) == -1)

196  
î∫o
;

199 
pﬁl£t
->
p
->
ªsu…_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

201 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
quîy_rög
, 
pfd_ñem_t
, 
lök
);

202 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
add_rög
, 
pfd_ñem_t
, 
lök
);

203 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
‰ì_rög
, 
pfd_ñem_t
, 
lök
);

204 
	`APR_RING_INIT
(&
pﬁl£t
->
p
->
dód_rög
, 
pfd_ñem_t
, 
lök
);

206  
rv
;

207 
	}
}

209 
≠r_°©us_t
 
	$im∂_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

210 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

212 
≠r_os_sock_t
 
fd
;

213 
pfd_ñem_t
 *
ñem
;

214 
ªs
;

215 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

217 
	`pﬁl£t_lock_rögs
();

219 i‡(!
	`APR_RING_EMPTY
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
pfd_ñem_t
, 
lök
)) {

220 
ñem
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
‰ì_rög
));

221 
	`APR_RING_REMOVE
(
ñem
, 
lök
);

224 
ñem
 = (
pfd_ñem_t
 *Ë
	`≠r_∑Œoc
(
pﬁl£t
->
poﬁ
, (pfd_elem_t));

225 
	`APR_RING_ELEM_INIT
(
ñem
, 
lök
);

226 
ñem
->
⁄_quîy_rög
 = 0;

228 
ñem
->
pfd
 = *
des¸ùt‹
;

230 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

231 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

234 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

240 i‡(
	`≠r_©omic_ªad32
(&
pﬁl£t
->
p
->
waôög
)) {

241 
ªs
 = 
	`p‹t_assocüã
(
pﬁl£t
->
p
->
p‹t_fd
, 
PORT_SOURCE_FD
, 
fd
,

242 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
), (*)
ñem
);

244 i‡(
ªs
 < 0) {

245 
rv
 = 
	`≠r_gë_√tos_îr‹
();

246 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

249 
ñem
->
⁄_quîy_rög
 = 1;

250 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
quîy_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

254 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
add_rög
), 
ñem
, 
pfd_ñem_t
, 
lök
);

257 
	`pﬁl£t_u∆ock_rögs
();

259  
rv
;

260 
	}
}

262 
≠r_°©us_t
 
	$im∂_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

263 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

265 
≠r_os_sock_t
 
fd
;

266 
pfd_ñem_t
 *
ï
;

267 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

268 
ªs
;

269 
îr
 = 0;

270 
found
;

272 
	`pﬁl£t_lock_rögs
();

274 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

275 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

278 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

291 
found
 = 0;

292 
ï
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
add_rög
));

293 
ï
 !
	`APR_RING_SENTINEL
(&(
pﬁl£t
->
p
->
add_rög
),

294 
pfd_ñem_t
, 
lök
);

295 
ï
 = 
	`APR_RING_NEXT
”p, 
lök
)) {

297 i‡(
des¸ùt‹
->
desc
.
s
 =
ï
->
pfd
.desc.s) {

298 
found
 = 1;

299 
	`APR_RING_REMOVE
(
ï
, 
lök
);

300 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
),

301 
ï
, 
pfd_ñem_t
, 
lök
);

306 i‡(!
found
) {

307 
ªs
 = 
	`p‹t_dissocüã
(
pﬁl£t
->
p
->
p‹t_fd
, 
PORT_SOURCE_FD
, 
fd
);

309 i‡(
ªs
 < 0) {

316 
îr
 = 
î∫o
;

317 
rv
 = 
APR_NOTFOUND
;

320 
ï
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
quîy_rög
));

321 
ï
 !
	`APR_RING_SENTINEL
(&(
pﬁl£t
->
p
->
quîy_rög
),

322 
pfd_ñem_t
, 
lök
);

323 
ï
 = 
	`APR_RING_NEXT
”p, 
lök
)) {

325 i‡(
des¸ùt‹
->
desc
.
s
 =
ï
->
pfd
.desc.s) {

326 
	`APR_RING_REMOVE
(
ï
, 
lök
);

327 
ï
->
⁄_quîy_rög
 = 0;

328 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
dód_rög
),

329 
ï
, 
pfd_ñem_t
, 
lök
);

330 i‡(
ENOENT
 =
îr
) {

331 
rv
 = 
APR_SUCCESS
;

338 
	`pﬁl£t_u∆ock_rögs
();

340  
rv
;

341 
	}
}

343 
≠r_°©us_t
 
	$im∂_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

344 
≠r_öãrvÆ_time_t
 
timeout
,

345 
≠r_öt32_t
 *
num
,

346 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

348 
≠r_os_sock_t
 
fd
;

349 
ªt
, 
i
, 
j
;

350 
ngë
;

351 
pfd_ñem_t
 *
ï
;

352 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

353 
≠r_pﬁlfd_t
 
Â
;

355 
ngë
 = 1;

357 
	`pﬁl£t_lock_rögs
();

359 
	`≠r_©omic_öc32
(&
pﬁl£t
->
p
->
waôög
);

361 !
	`APR_RING_EMPTY
(&(
pﬁl£t
->
p
->
add_rög
), 
pfd_ñem_t
, 
lök
)) {

362 
ï
 = 
	`APR_RING_FIRST
(&(
pﬁl£t
->
p
->
add_rög
));

363 
	`APR_RING_REMOVE
(
ï
, 
lök
);

365 i‡(
ï
->
pfd
.
desc_ty≥
 =
APR_POLL_SOCKET
) {

366 
fd
 = 
ï
->
pfd
.
desc
.
s
->
sockëdes
;

369 
fd
 = 
ï
->
pfd
.
desc
.
f
->
fûedes
;

372 
ªt
 = 
	`p‹t_assocüã
(
pﬁl£t
->
p
->
p‹t_fd
, 
PORT_SOURCE_FD
,

373 
fd
, 
	`gë_evít
(
ï
->
pfd
.
ªqevíts
),Ép);

374 i‡(
ªt
 < 0) {

375 
rv
 = 
	`≠r_gë_√tos_îr‹
();

376 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
ï
, 
pfd_ñem_t
, 
lök
);

380 
ï
->
⁄_quîy_rög
 = 1;

381 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
quîy_rög
), 
ï
, 
pfd_ñem_t
, 
lök
);

384 
	`pﬁl£t_u∆ock_rögs
();

386 i‡(
rv
 !
APR_SUCCESS
) {

387 
	`≠r_©omic_dec32
(&
pﬁl£t
->
p
->
waôög
);

388  
rv
;

391 
rv
 = 
	`ˇŒ_p‹t_gën
(
pﬁl£t
->
p
->
p‹t_fd
,Öﬁl£t->p->
p‹t_£t
,

392 
pﬁl£t
->
«Œoc
, &
ngë
, 
timeout
);

396 
	`≠r_©omic_dec32
(&
pﬁl£t
->
p
->
waôög
);

398 (*
num
Ë
ngë
;

399 i‡(
ngë
) {

401 
	`pﬁl£t_lock_rögs
();

403 
i
 = 0, 
j
 = 0; i < 
ngë
; i++) {

404 
Â
 = (((
pfd_ñem_t
*)(
pﬁl£t
->
p
->
p‹t_£t
[
i
].
p‹ãv_u£r
))->
pfd
);

405 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

406 
Â
.
desc_ty≥
 =
APR_POLL_FILE
 &&

407 
Â
.
desc
.
f
 =
pﬁl£t
->
wakeup_pùe
[0]) {

408 
	`≠r_pﬁl£t_døö_wakeup_pùe
(
pﬁl£t
);

409 
rv
 = 
APR_EINTR
;

412 
pﬁl£t
->
p
->
ªsu…_£t
[
j
] = 
Â
;

413 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 =

414 
	`gë_ªvít
(
pﬁl£t
->
p
->
p‹t_£t
[
i
].
p‹ãv_evíts
);

421 
ï
 = (
pfd_ñem_t
 *)
pﬁl£t
->
p
->
p‹t_£t
[
i
].
p‹ãv_u£r
;

422 i‡(
ï
->
⁄_quîy_rög
) {

423 
	`APR_RING_REMOVE
(
ï
, 
lök
);

424 
ï
->
⁄_quîy_rög
 = 0;

425 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
add_rög
), 
ï
,

426 
pfd_ñem_t
, 
lök
);

428 
j
++;

431 
	`pﬁl£t_u∆ock_rögs
();

432 i‡((*
num
 = 
j
)) {

433 
rv
 = 
APR_SUCCESS
;

434 i‡(
des¸ùt‹s
) {

435 *
des¸ùt‹s
 = 
pﬁl£t
->
p
->
ªsu…_£t
;

440 
	`pﬁl£t_lock_rögs
();

443 
	`APR_RING_CONCAT
(&(
pﬁl£t
->
p
->
‰ì_rög
), &’ﬁl£t->p->
dód_rög
), 
pfd_ñem_t
, 
lök
);

445 
	`pﬁl£t_u∆ock_rögs
();

447  
rv
;

448 
	}
}

450 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

451 
im∂_pﬁl£t_¸óã
,

452 
im∂_pﬁl£t_add
,

453 
im∂_pﬁl£t_ªmove
,

454 
im∂_pﬁl£t_pﬁl
,

455 
im∂_pﬁl£t_˛ónup
,

459 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_p‹t
 = &
im∂
;

461 
≠r_°©us_t
 
	$cb_˛ónup
(*
p_
)

463 
≠r_pﬁlcb_t
 *
pﬁlcb
 = (≠r_pﬁlcb_à*Ë
p_
;

464 
	`˛o£
(
pﬁlcb
->
fd
);

465  
APR_SUCCESS
;

466 
	}
}

468 
≠r_°©us_t
 
	$im∂_pﬁlcb_¸óã
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

469 
≠r_uöt32_t
 
size
,

470 
≠r_poﬁ_t
 *
p
,

471 
≠r_uöt32_t
 
Êags
)

473 
pﬁlcb
->
fd
 = 
	`p‹t_¸óã
();

475 i‡(
pﬁlcb
->
fd
 < 0) {

476  
	`≠r_gë_√tos_îr‹
();

480 
Êags
;

482 i‡((
Êags
 = 
	`f˙é
(
pﬁlcb
->
fd
, 
F_GETFD
)) == -1)

483  
î∫o
;

485 
Êags
 |
FD_CLOEXEC
;

486 i‡(
	`f˙é
(
pﬁlcb
->
fd
, 
F_SETFD
, 
Êags
) == -1)

487  
î∫o
;

490 
pﬁlcb
->
pﬁl£t
.
p‹t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
p‹t_evít_t
));

491 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
pﬁlcb
, 
cb_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

493  
APR_SUCCESS
;

494 
	}
}

496 
≠r_°©us_t
 
	$im∂_pﬁlcb_add
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

497 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

499 
ªt
, 
fd
;

501 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

502 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

505 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

508 
ªt
 = 
	`p‹t_assocüã
(
pﬁlcb
->
fd
, 
PORT_SOURCE_FD
, fd,

509 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
), descriptor);

511 i‡(
ªt
 == -1) {

512  
	`≠r_gë_√tos_îr‹
();

515  
APR_SUCCESS
;

516 
	}
}

518 
≠r_°©us_t
 
	$im∂_pﬁlcb_ªmove
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

519 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

521 
fd
, 
ªt
;

523 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

524 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

527 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

530 
ªt
 = 
	`p‹t_dissocüã
(
pﬁlcb
->
fd
, 
PORT_SOURCE_FD
, fd);

532 i‡(
ªt
 < 0) {

533  
APR_NOTFOUND
;

536  
APR_SUCCESS
;

537 
	}
}

539 
≠r_°©us_t
 
	$im∂_pﬁlcb_pﬁl
(
≠r_pﬁlcb_t
 *
pﬁlcb
,

540 
≠r_öãrvÆ_time_t
 
timeout
,

541 
≠r_pﬁlcb_cb_t
 
func
,

542 *
b©⁄
)

544 
≠r_pﬁlfd_t
 *
pﬁlfd
;

545 
≠r_°©us_t
 
rv
;

546 
i
, 
ngë
 = 1;

548 
rv
 = 
	`ˇŒ_p‹t_gën
(
pﬁlcb
->
fd
,Öﬁlcb->
pﬁl£t
.
p‹t
,Öﬁlcb->
«Œoc
,

549 &
ngë
, 
timeout
);

551 i‡(
ngë
) {

552 
i
 = 0; i < 
ngë
; i++) {

553 
pﬁlfd
 = (
≠r_pﬁlfd_t
 *)(
pﬁlcb
->
pﬁl£t
.
p‹t
[
i
].
p‹ãv_u£r
);

554 
pﬁlfd
->
π√víts
 = 
	`gë_ªvít
(
pﬁlcb
->
pﬁl£t
.
p‹t
[
i
].
p‹ãv_evíts
);

556 
rv
 = 
	`func
(
b©⁄
, 
pﬁlfd
);

557 i‡(
rv
) {

558  
rv
;

560 
rv
 = 
	`≠r_pﬁlcb_add
(
pﬁlcb
, 
pﬁlfd
);

564  
rv
;

565 
	}
}

567 
≠r_pﬁlcb_¥ovidî_t
 
	gim∂_cb
 = {

568 
im∂_pﬁlcb_¸óã
,

569 
im∂_pﬁlcb_add
,

570 
im∂_pﬁlcb_ªmove
,

571 
im∂_pﬁlcb_pﬁl
,

575 
≠r_pﬁlcb_¥ovidî_t
 *
	g≠r_pﬁlcb_¥ovidî_p‹t
 = &
im∂_cb
;

	@poll/unix/select.c

17 #ifde‡
WIN32


19 
	#FD_SETSIZE
 1024

	)

22 
	~"≠r.h
"

23 
	~"≠r_pﬁl.h
"

24 
	~"≠r_time.h
"

25 
	~"≠r_p‹èbÀ.h
"

26 
	~"≠r_¨ch_fûe_io.h
"

27 
	~"≠r_¨ch_√tw‹kio.h
"

28 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

30 #ifde‡
POLL_USES_SELECT


32 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_pﬁl
(
≠r_pﬁlfd_t
 *
≠r£t
, 
num
,

33 
≠r_öt32_t
 *
nsds
,

34 
≠r_öãrvÆ_time_t
 
timeout
)

36 
fd_£t
 
ªad£t
, 
wrôe£t
, 
ex˚±£t
;

37 
rv
, 
i
;

38 
maxfd
 = -1;

39 
timevÆ
 
tv
, *
tv±r
;

40 #ifde‡
NETWARE


41 
≠r_d©©y≥_e
 
£t_ty≥
 = 
APR_NO_DESC
;

44 #ifde‡
WIN32


49 i‡(
num
 == 0) {

50 (*
nsds
) = 0;

51 i‡(
timeout
 > 0) {

52 
	`≠r_¶ìp
(
timeout
);

53  
APR_TIMEUP
;

55  
APR_SUCCESS
;

59 i‡(
timeout
 < 0) {

60 
tv±r
 = 
NULL
;

63 
tv
.
tv_£c
 = (Ë
	`≠r_time_£c
(
timeout
);

64 
tv
.
tv_u£c
 = (Ë
	`≠r_time_u£c
(
timeout
);

65 
tv±r
 = &
tv
;

68 
	`FD_ZERO
(&
ªad£t
);

69 
	`FD_ZERO
(&
wrôe£t
);

70 
	`FD_ZERO
(&
ex˚±£t
);

72 
i
 = 0; i < 
num
; i++) {

73 
≠r_os_sock_t
 
fd
;

75 
≠r£t
[
i
].
π√víts
 = 0;

77 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

78 #ifde‡
NETWARE


79 i‡(
	`HAS_PIPES
(
£t_ty≥
)) {

80  
APR_EBADF
;

83 
£t_ty≥
 = 
APR_POLL_SOCKET
;

86 
fd
 = 
≠r£t
[
i
].
desc
.
s
->
sockëdes
;

88 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_FILE
) {

89 #i‡!
APR_FILES_AS_SOCKETS


90  
APR_EBADF
;

92 #ifde‡
NETWARE


93 i‡(
≠r£t
[
i
].
desc
.
f
->
is_pùe
 && !
	`HAS_SOCKETS
(
£t_ty≥
)) {

94 
£t_ty≥
 = 
APR_POLL_FILE
;

97  
APR_EBADF
;

100 
fd
 = 
≠r£t
[
i
].
desc
.
f
->
fûedes
;

107 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
NETWARE
)

108 i‡(
fd
 >
FD_SETSIZE
) {

110  
APR_EBADF
;

113 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLIN
) {

114 
	`FD_SET
(
fd
, &
ªad£t
);

116 i‡(
≠r£t
[
i
].
ªqevíts
 & 
APR_POLLOUT
) {

117 
	`FD_SET
(
fd
, &
wrôe£t
);

119 i‡(
≠r£t
[
i
].
ªqevíts
 &

120 (
APR_POLLPRI
 | 
APR_POLLERR
 | 
APR_POLLHUP
 | 
APR_POLLNVAL
)) {

121 
	`FD_SET
(
fd
, &
ex˚±£t
);

123 i‡((Ë
fd
 > 
maxfd
) {

124 
maxfd
 = (Ë
fd
;

128 #ifde‡
NETWARE


129 i‡(
	`HAS_PIPES
(
£t_ty≥
)) {

130 
rv
 = 
	`pùe_£À˘
(
maxfd
 + 1, &
ªad£t
, &
wrôe£t
, &
ex˚±£t
, 
tv±r
);

135 
rv
 = 
	`£À˘
(
maxfd
 + 1, &
ªad£t
, &
wrôe£t
, &
ex˚±£t
, 
tv±r
);

137 #ifde‡
NETWARE


141 (*
nsds
Ë
rv
;

142 i‡((*
nsds
) == 0) {

143  
APR_TIMEUP
;

145 i‡((*
nsds
) < 0) {

146  
	`≠r_gë_√tos_îr‹
();

149 (*
nsds
) = 0;

150 
i
 = 0; i < 
num
; i++) {

151 
≠r_os_sock_t
 
fd
;

153 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

154 
fd
 = 
≠r£t
[
i
].
desc
.
s
->
sockëdes
;

156 i‡(
≠r£t
[
i
].
desc_ty≥
 =
APR_POLL_FILE
) {

157 #i‡!
APR_FILES_AS_SOCKETS


158  
APR_EBADF
;

160 
fd
 = 
≠r£t
[
i
].
desc
.
f
->
fûedes
;

166 i‡(
	`FD_ISSET
(
fd
, &
ªad£t
)) {

167 
≠r£t
[
i
].
π√víts
 |
APR_POLLIN
;

169 i‡(
	`FD_ISSET
(
fd
, &
wrôe£t
)) {

170 
≠r£t
[
i
].
π√víts
 |
APR_POLLOUT
;

172 i‡(
	`FD_ISSET
(
fd
, &
ex˚±£t
)) {

173 
≠r£t
[
i
].
π√víts
 |
APR_POLLERR
;

175 i‡(
≠r£t
[
i
].
π√víts
) {

176 (*
nsds
)++;

180  
APR_SUCCESS
;

181 
	}
}

185 
	s≠r_pﬁl£t_¥iv©e_t


187 
fd_£t
 
	mªad£t
, 
	mwrôe£t
, 
	mex˚±£t
;

188 
	mmaxfd
;

189 
≠r_pﬁlfd_t
 *
	mquîy_£t
;

190 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

191 
≠r_uöt32_t
 
	mÊags
;

192 #ifde‡
NETWARE


193 
	m£t_ty≥
;

197 
≠r_°©us_t
 
	$im∂_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

198 
≠r_uöt32_t
 
size
,

199 
≠r_poﬁ_t
 *
p
,

200 
≠r_uöt32_t
 
Êags
)

202 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

203 
pﬁl£t
->
p
 = 
NULL
;

204  
APR_ENOTIMPL
;

206 #ifde‡
FD_SETSIZE


207 i‡(
size
 > 
FD_SETSIZE
) {

208 
pﬁl£t
->
p
 = 
NULL
;

209  
APR_EINVAL
;

212 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
’, (
≠r_pﬁl£t_¥iv©e_t
));

213 
	`FD_ZERO
(&(
pﬁl£t
->
p
->
ªad£t
));

214 
	`FD_ZERO
(&(
pﬁl£t
->
p
->
wrôe£t
));

215 
	`FD_ZERO
(&(
pﬁl£t
->
p
->
ex˚±£t
));

216 
pﬁl£t
->
p
->
maxfd
 = 0;

217 #ifde‡
NETWARE


218 
pﬁl£t
->
p
->
£t_ty≥
 = 
APR_NO_DESC
;

220 
pﬁl£t
->
p
->
quîy_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

221 
pﬁl£t
->
p
->
ªsu…_£t
 = 
	`≠r_∑Œoc
’, 
size
 * (
≠r_pﬁlfd_t
));

223  
APR_SUCCESS
;

224 
	}
}

226 
≠r_°©us_t
 
	$im∂_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

227 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

229 
≠r_os_sock_t
 
fd
;

231 i‡(
pﬁl£t
->
√…s
 =pﬁl£t->
«Œoc
) {

232  
APR_ENOMEM
;

235 
pﬁl£t
->
p
->
quîy_£t
[pﬁl£t->
√…s
] = *
des¸ùt‹
;

237 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

238 #ifde‡
NETWARE


240 i‡(
	`HAS_PIPES
(
pﬁl£t
->
p
->
£t_ty≥
)) {

241  
APR_EBADF
;

244 
pﬁl£t
->
p
->
£t_ty≥
 = 
APR_POLL_SOCKET
;

247 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

250 #i‡!
APR_FILES_AS_SOCKETS


251 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

252 
des¸ùt‹
->
desc
.
f
 =
pﬁl£t
->
wakeup_pùe
[0])

253 
fd
 = (
≠r_os_sock_t
)
des¸ùt‹
->
desc
.
f
->
fûedes
;

255  
APR_EBADF
;

257 #ifde‡
NETWARE


259 i‡(
des¸ùt‹
->
desc
.
f
->
is_pùe
 && !
	`HAS_SOCKETS
(
pﬁl£t
->
p
->
£t_ty≥
)) {

260 
pﬁl£t
->
p
->
£t_ty≥
 = 
APR_POLL_FILE
;

261 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

264  
APR_EBADF
;

267 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

271 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
NETWARE
)

272 i‡(
fd
 >
FD_SETSIZE
) {

274  
APR_EBADF
;

277 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLIN
) {

278 
	`FD_SET
(
fd
, &(
pﬁl£t
->
p
->
ªad£t
));

280 i‡(
des¸ùt‹
->
ªqevíts
 & 
APR_POLLOUT
) {

281 
	`FD_SET
(
fd
, &(
pﬁl£t
->
p
->
wrôe£t
));

283 i‡(
des¸ùt‹
->
ªqevíts
 &

284 (
APR_POLLPRI
 | 
APR_POLLERR
 | 
APR_POLLHUP
 | 
APR_POLLNVAL
)) {

285 
	`FD_SET
(
fd
, &(
pﬁl£t
->
p
->
ex˚±£t
));

287 i‡((Ë
fd
 > 
pﬁl£t
->
p
->
maxfd
) {

288 
pﬁl£t
->
p
->
maxfd
 = (Ë
fd
;

290 
pﬁl£t
->
√…s
++;

291  
APR_SUCCESS
;

292 
	}
}

294 
≠r_°©us_t
 
	$im∂_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 * 
pﬁl£t
,

295 c⁄° 
≠r_pﬁlfd_t
 * 
des¸ùt‹
)

297 
≠r_uöt32_t
 
i
;

298 
≠r_os_sock_t
 
fd
;

300 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

301 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

304 #i‡!
APR_FILES_AS_SOCKETS


305  
APR_EBADF
;

307 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

311 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

312 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
p
->
quîy_£t
[
i
].desc.s) {

314 
≠r_uöt32_t
 
d°
 = 
i
;

315 
≠r_uöt32_t
 
ﬁd_√…s
 = 
pﬁl£t
->
√…s
;

316 
pﬁl£t
->
√…s
--;

317 
i
++; i < 
ﬁd_√…s
; i++) {

318 i‡(
des¸ùt‹
->
desc
.
s
 =
pﬁl£t
->
p
->
quîy_£t
[
i
].desc.s) {

319 
pﬁl£t
->
√…s
--;

322 
pﬁl£t
->
p
->
quîy_£t
[
d°
] =Öﬁl£t->p->quîy_£t[
i
];

323 
d°
++;

326 
	`FD_CLR
(
fd
, &(
pﬁl£t
->
p
->
ªad£t
));

327 
	`FD_CLR
(
fd
, &(
pﬁl£t
->
p
->
wrôe£t
));

328 
	`FD_CLR
(
fd
, &(
pﬁl£t
->
p
->
ex˚±£t
));

329 i‡(((Ë
fd
 =
pﬁl£t
->
p
->
maxfd
) && (pollset->p->maxfd > 0)) {

330 
pﬁl£t
->
p
->
maxfd
--;

332  
APR_SUCCESS
;

336  
APR_NOTFOUND
;

337 
	}
}

339 
≠r_°©us_t
 
	$im∂_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

340 
≠r_öãrvÆ_time_t
 
timeout
,

341 
≠r_öt32_t
 *
num
,

342 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

344 
rs
;

345 
≠r_uöt32_t
 
i
, 
j
;

346 
timevÆ
 
tv
, *
tv±r
;

347 
fd_£t
 
ªad£t
, 
wrôe£t
, 
ex˚±£t
;

348 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

350 #ifde‡
WIN32


355 i‡(
pﬁl£t
->
√…s
 == 0) {

356 (*
num
) = 0;

357 i‡(
timeout
 > 0) {

358 
	`≠r_¶ìp
(
timeout
);

359  
APR_TIMEUP
;

361  
APR_SUCCESS
;

365 i‡(
timeout
 < 0) {

366 
tv±r
 = 
NULL
;

369 
tv
.
tv_£c
 = (Ë
	`≠r_time_£c
(
timeout
);

370 
tv
.
tv_u£c
 = (Ë
	`≠r_time_u£c
(
timeout
);

371 
tv±r
 = &
tv
;

374 
	`mem˝y
(&
ªad£t
, &(
pﬁl£t
->
p
->ªad£t), (
fd_£t
));

375 
	`mem˝y
(&
wrôe£t
, &(
pﬁl£t
->
p
->wrôe£t), (
fd_£t
));

376 
	`mem˝y
(&
ex˚±£t
, &(
pﬁl£t
->
p
->ex˚±£t), (
fd_£t
));

378 #ifde‡
NETWARE


379 i‡(
	`HAS_PIPES
(
pﬁl£t
->
p
->
£t_ty≥
)) {

380 
rs
 = 
	`pùe_£À˘
(
pﬁl£t
->
p
->
maxfd
 + 1, &
ªad£t
, &
wrôe£t
, &
ex˚±£t
,

381 
tv±r
);

385 
rs
 = 
	`£À˘
(
pﬁl£t
->
p
->
maxfd
 + 1, &
ªad£t
, &
wrôe£t
, &
ex˚±£t
,

386 
tv±r
);

388 (*
num
Ë
rs
;

389 i‡(
rs
 < 0) {

390  
	`≠r_gë_√tos_îr‹
();

392 i‡(
rs
 == 0) {

393  
APR_TIMEUP
;

395 
j
 = 0;

396 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

397 
≠r_os_sock_t
 
fd
;

398 i‡(
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc_ty≥
 =
APR_POLL_SOCKET
) {

399 
fd
 = 
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc
.
s
->
sockëdes
;

402 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_WAKEABLE
) &&

403 
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc
.
f
 =pﬁl£t->
wakeup_pùe
[0]) {

404 
	`≠r_pﬁl£t_døö_wakeup_pùe
(
pﬁl£t
);

405 
rv
 = 
APR_EINTR
;

409 #i‡!
APR_FILES_AS_SOCKETS


410  
APR_EBADF
;

412 
fd
 = 
pﬁl£t
->
p
->
quîy_£t
[
i
].
desc
.
f
->
fûedes
;

416 i‡(
	`FD_ISSET
(
fd
, &
ªad£t
Ë|| FD_ISSET(fd, &
wrôe£t
) ||

417 
	`FD_ISSET
(
fd
, &
ex˚±£t
)) {

418 
pﬁl£t
->
p
->
ªsu…_£t
[
j
] =Öﬁl£t->p->
quîy_£t
[
i
];

419 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 = 0;

420 i‡(
	`FD_ISSET
(
fd
, &
ªad£t
)) {

421 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 |
APR_POLLIN
;

423 i‡(
	`FD_ISSET
(
fd
, &
wrôe£t
)) {

424 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 |
APR_POLLOUT
;

426 i‡(
	`FD_ISSET
(
fd
, &
ex˚±£t
)) {

427 
pﬁl£t
->
p
->
ªsu…_£t
[
j
].
π√víts
 |
APR_POLLERR
;

429 
j
++;

432 i‡(((*
num
Ë
j
) != 0)

433 
rv
 = 
APR_SUCCESS
;

435 i‡(
des¸ùt‹s
)

436 *
des¸ùt‹s
 = 
pﬁl£t
->
p
->
ªsu…_£t
;

437  
rv
;

438 
	}
}

440 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

441 
im∂_pﬁl£t_¸óã
,

442 
im∂_pﬁl£t_add
,

443 
im∂_pﬁl£t_ªmove
,

444 
im∂_pﬁl£t_pﬁl
,

445 
NULL
,

449 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_£À˘
 = &
im∂
;

	@poll/unix/z_asio.c

35 
	~"≠r.h
"

36 
	~"≠r_hash.h
"

37 
	~"≠r_pﬁl.h
"

38 
	~"≠r_time.h
"

39 
	~"≠r_p‹èbÀ.h
"

40 
	~"≠r_¨ch_öhîô.h
"

41 
	~"≠r_¨ch_fûe_io.h
"

42 
	~"≠r_¨ch_√tw‹kio.h
"

43 
	~"≠r_¨ch_pﬁl_¥iv©e.h
"

45 #ifde‡
HAVE_AIO_MSGQ


47 
	~<sys/msg.h
>

48 
	~<time.h
>

49 
	~<pﬁl.h
>

50 
	~<limôs.h
>

52 
	s≠r_pﬁl£t_¥iv©e_t


54 
	mmsg_q
;

58 
≠r_pﬁlfd_t
 *
	mªsu…_£t
;

59 
≠r_uöt32_t
 
	msize
;

61 #i‡
APR_HAS_THREADS


63 
≠r_thªad_muãx_t
 *
	mrög_lock
;

67 
≠r_hash_t
 *
	mñems
;

69 
APR_RING_HEAD
(
ªady_rög_t
, 
asio_ñem_t
Ë
	mªady_rög
;

70 
APR_RING_HEAD
(
¥i‹_ªady_rög_t
, 
asio_ñem_t
Ë
	m¥i‹_ªady_rög
;

71 
APR_RING_HEAD
(
‰ì_rög_t
, 
asio_ñem_t
Ë
	m‰ì_rög
;

74 
pﬁlfd
 *
	mpﬁl£t
;

75 
≠r_pﬁlfd_t
 *
	mquîy_£t
;

79 
	mASIO_INIT
 = 0,

80 
	mASIO_REMOVED
,

81 
	mASIO_COMPLETE


82 } 
	tasio_°©e_e
;

84 
asio_ñem_t
 
	tasio_ñem_t
;

86 
	sasio_msgbuf_t
 {

87 
	mmsg_ty≥
;

88 
asio_ñem_t
 *
	mmsg_ñem
;

91 
	sasio_ñem_t


93 
APR_RING_ENTRY
(
asio_ñem_t
Ë
	mlök
;

94 
≠r_pﬁlfd_t
 
	mpfd
;

95 
pﬁlfd
 
	mos_pfd
;

96 
aiocb
 
	ma
;

97 
asio_°©e_e
 
	m°©e
;

98 
asio_msgbuf_t
 
	mmsg
;

101 
	#DEBUG
 0

	)

114 #i‡
DEBUG


116 
	~<as£π.h
>

117 
	~<uni°d.h
>

119 
	#DBG_BUFF
 
dbg_msg_buff
[256];

	)

121 
	#DBG_TEST
(
lvl
Ëi‡÷v»<
DEBUG
Ë{

	)

123 
	#DBG_CORE
(
msg
Ë
	`•rötf
(
dbg_msg_buff
, "% 8d " 
__FUNCTION__
 \

124 " " 
msg
, 
	`gëpid
()), \

125 
	`Ârötf
(
°dîr
, "%s", 
dbg_msg_buff
);

	)

126 
	#DBG_CORE1
(
msg
, 
v¨1
Ë
	`•rötf
(
dbg_msg_buff
, "% 8d " 
__FUNCTION__
 \

127 " " 
msg
, 
	`gëpid
(), 
v¨1
), \

128 
	`Ârötf
(
°dîr
, "%s", 
dbg_msg_buff
);

	)

129 
	#DBG_CORE2
(
msg
, 
v¨1
, 
v¨2
Ë
	`•rötf
(
dbg_msg_buff
, "% 8d " 
__FUNCTION__
 \

130 " " 
msg
, 
	`gëpid
(), 
v¨1
, 
v¨2
), \

131 
	`Ârötf
(
°dîr
, "%s", 
dbg_msg_buff
);

	)

132 
	#DBG_CORE3
(
msg
, 
v¨1
, 
v¨2
, 
v¨3
) \

133 
	`•rötf
(
dbg_msg_buff
, "% 8d " 
__FUNCTION__
 \

134 " " 
msg
, 
	`gëpid
(), 
v¨1
, 
v¨2
, 
v¨3
), \

135 
	`Ârötf
(
°dîr
, "%s", 
dbg_msg_buff
);

	)

136 
	#DBG_CORE4
(
msg
, 
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
) \

137 
	`•rötf
(
dbg_msg_buff
, "% 8d " 
__FUNCTION__
 \

138 " " 
msg
, 
	`gëpid
(), 
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
),\

139 
	`Ârötf
(
°dîr
, "%s", 
dbg_msg_buff
);

	)

141 
	#DBG_END
 }

	)

143 
	#DBG
(
lvl
, 
msg
Ë
	`DBG_TEST
(lvl) \

144 
	`DBG_CORE
(
msg
) \

145 
DBG_END


	)

147 
	#DBG1
(
lvl
, 
msg
, 
v¨1
Ë
	`DBG_TEST
(lvl) \

148 
	`DBG_CORE1
(
msg
, 
v¨1
) \

149 
DBG_END


	)

151 
	#DBG2
(
lvl
, 
msg
, 
v¨1
, 
v¨2
Ë
	`DBG_TEST
(lvl) \

152 
	`DBG_CORE2
(
msg
, 
v¨1
, 
v¨2
) \

153 
DBG_END


	)

155 
	#DBG3
(
lvl
, 
msg
, 
v¨1
, 
v¨2
, 
v¨3
) \

156 
	`DBG_TEST
(
lvl
) \

157 
	`DBG_CORE3
(
msg
, 
v¨1
, 
v¨2
, 
v¨3
) \

158 
DBG_END


	)

160 
	#DBG4
(
lvl
, 
msg
, 
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
) \

161 
	`DBG_TEST
(
lvl
) \

162 
	`DBG_CORE4
(
msg
, 
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
) \

163 
DBG_END


	)

166 
	#DBG_BUFF


	)

167 
	#DBG
(
lvl
, 
msg
Ë(()0)

	)

168 
	#DBG1
(
lvl
, 
msg
, 
v¨1
Ë(()0)

	)

169 
	#DBG2
(
lvl
, 
msg
, 
v¨1
, 
v¨2
Ë(()0)

	)

170 
	#DBG3
(
lvl
, 
msg
, 
v¨1
, 
v¨2
, 
v¨3
Ë(()0)

	)

171 
	#DBG4
(
lvl
, 
msg
, 
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
Ë(()0)

	)

175 
	$asyncio
(
aiocb
 *
a
)

177 
DBG_BUFF


178 
rv
;

180 #ifde‡
_LP64


181 
	#AIO
 
BPX4AIO


	)

183 
	#AIO
 
BPX1AIO


	)

186 
	`AIO
((
aiocb
), 
a
, &
rv
, &
î∫o
, 
	`__îr2ad
());

187 
	`DBG2
(4, "BPX4AIOáiocb %pÑv %d\n",

188 
a
, 
rv
);

189 #ifde‡
DEBUG


190 i‡(
rv
 < 0) {

191 
	`DBG2
(4, "errno %dÉrrnojr %08x\n",

192 
î∫o
, *
	`__îr2ad
());

195  
rv
;

196 
	}
}

198 
≠r_öt16_t
 
	$gë_evít
(
≠r_öt16_t
 
evít
)

200 
DBG_BUFF


201 
≠r_öt16_t
 
rv
 = 0;

202 
	`DBG
(4, "entered\n");

204 i‡(
evít
 & 
APR_POLLIN
)

205 
rv
 |
POLLIN
;

206 i‡(
evít
 & 
APR_POLLPRI
)

207 
rv
 |
POLLPRI
;

208 i‡(
evít
 & 
APR_POLLOUT
)

209 
rv
 |
POLLOUT
;

210 i‡(
evít
 & 
APR_POLLERR
)

211 
rv
 |
POLLERR
;

212 i‡(
evít
 & 
APR_POLLHUP
)

213 
rv
 |
POLLHUP
;

214 i‡(
evít
 & 
APR_POLLNVAL
)

215 
rv
 |
POLLNVAL
;

217 
	`DBG
(4, "exiting\n");

218  
rv
;

219 
	}
}

221 
≠r_öt16_t
 
	$gë_ªvít
(
≠r_öt16_t
 
evít
)

223 
DBG_BUFF


224 
≠r_öt16_t
 
rv
 = 0;

225 
	`DBG
(4, "entered\n");

227 i‡(
evít
 & 
POLLIN
)

228 
rv
 |
APR_POLLIN
;

229 i‡(
evít
 & 
POLLPRI
)

230 
rv
 |
APR_POLLPRI
;

231 i‡(
evít
 & 
POLLOUT
)

232 
rv
 |
APR_POLLOUT
;

233 i‡(
evít
 & 
POLLERR
)

234 
rv
 |
APR_POLLERR
;

235 i‡(
evít
 & 
POLLHUP
)

236 
rv
 |
APR_POLLHUP
;

237 i‡(
evít
 & 
POLLNVAL
)

238 
rv
 |
APR_POLLNVAL
;

240 
	`DBG
(4, "exiting\n");

241  
rv
;

242 
	}
}

244 
≠r_°©us_t
 
	$asio_pﬁl£t_˛ónup
(
≠r_pﬁl£t_t
 *
pﬁl£t
)

246 
DBG_BUFF


247 
rv
;

249 
	`DBG
(4, "entered\n");

250 
rv
 = 
	`msg˘l
(
pﬁl£t
->
p
->
msg_q
, 
IPC_RMID
, 
NULL
);

252 
	`DBG1
(4, "exôög, msg˘l(IPC_RMIDËªtu∫ed %d\n", 
rv
);

253  
rv
;

254 
	}
}

256 
≠r_°©us_t
 
	$asio_pﬁl£t_¸óã
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

257 
≠r_uöt32_t
 
size
,

258 
≠r_poﬁ_t
 *
p
,

259 
≠r_uöt32_t
 
Êags
)

261 
DBG_BUFF


262 
≠r_°©us_t
 
rv
;

263 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
;

265 
	`DBG1
(2, "íãªd, fœgs: %x\n", 
Êags
);

267 
¥iv
 = 
pﬁl£t
->
p
 = 
	`≠r_∑Œoc
(p, (*priv));

269 i‡(
Êags
 & 
APR_POLLSET_THREADSAFE
) {

270 #i‡
APR_HAS_THREADS


271 i‡(
rv
 = 
	`≠r_thªad_muãx_¸óã
(&(
¥iv
->
rög_lock
),

272 
APR_THREAD_MUTEX_DEFAULT
,

273 
p
Ë!
APR_SUCCESS
) {

274 
	`DBG1
(1, "≠r_thªad_muãx_¸óãÑëu∫ed %d\n", 
rv
);

275 
pﬁl£t
 = 
NULL
;

276  
rv
;

278 
rv
 = 
	`msggë
(
IPC_PRIVATE
, 
S_IWUSR
+
S_IRUSR
);

279 i‡(
rv
 < 0) {

280 #i‡
DEBUG


281 
	`≥º‹
(
__FUNCTION__
 " msggetÑeturned < 0 ");

283 
pﬁl£t
 = 
NULL
;

284  
rv
;

287 
	`DBG2
(4, "pﬁl£à%∞msggë wa†OK,Ñv=%d\n", 
pﬁl£t
, 
rv
);

288 
¥iv
->
msg_q
 = 
rv
;

289 
¥iv
->
ñems
 = 
	`≠r_hash_make
(
p
);

291 
	`APR_RING_INIT
(&
¥iv
->
‰ì_rög
, 
asio_ñem_t
, 
lök
);

292 
	`APR_RING_INIT
(&
¥iv
->
¥i‹_ªady_rög
, 
asio_ñem_t
, 
lök
);

295 
pﬁl£t
 = 
NULL
;

296  
APR_ENOTIMPL
;

303 
¥iv
->
pﬁl£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
pﬁlfd
));

304 
¥iv
->
quîy_£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
≠r_pﬁlfd_t
));

306 i‡((!
¥iv
->
pﬁl£t
Ë|| (!¥iv->
quîy_£t
)) {

307  
APR_ENOMEM
;

311 
pﬁl£t
->
√…s
 = 0;

312 
pﬁl£t
->
Êags
 = flags;

313 
pﬁl£t
->
poﬁ
 = 
p
;

314 
¥iv
->
size
 = size;

315 
¥iv
->
ªsu…_£t
 = 
	`≠r_∑Œoc
(
p
, 
size
 * (
≠r_pﬁlfd_t
));

316 i‡(!
¥iv
->
ªsu…_£t
) {

317  
APR_ENOMEM
;

320 
	`DBG2
(2, "exiting,Öollset: %p,Åype: %s\n",

321 
pﬁl£t
,

322 
Êags
 & 
APR_POLLSET_THREADSAFE
 ? "async" : "POSIX");

325  
APR_SUCCESS
;

327 
	}
}

329 
≠r_°©us_t
 
	$posix_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

330 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

332 
DBG_BUFF


333 
fd
;

334 
≠r_poﬁ_t
 *
p
 = 
pﬁl£t
->
poﬁ
;

335 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

337 
	`DBG
(4, "entered\n");

339 i‡(
pﬁl£t
->
√…s
 =
¥iv
->
size
) {

340  
APR_ENOMEM
;

343 
¥iv
->
quîy_£t
[
pﬁl£t
->
√…s
] = *
des¸ùt‹
;

344 i‡(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
) {

345 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

348 
fd
 = 
des¸ùt‹
->
desc
.
f
->
fûedes
;

351 
¥iv
->
pﬁl£t
[pﬁl£t->
√…s
].
fd
 = fd;

353 
¥iv
->
pﬁl£t
[pﬁl£t->
√…s
].
evíts
 =

354 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
);

356 
pﬁl£t
->
√…s
++;

358 
	`DBG2
(4, "exôög, fd %dáddedÅÿpﬁl£à%p\n", 
fd
, 
pﬁl£t
);

360  
APR_SUCCESS
;

361 
	}
}

364 
≠r_°©us_t
 
	$asio_pﬁl£t_add
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

365 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

367 
DBG_BUFF


368 
asio_ñem_t
 *
ñem
;

369 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

370 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

372 
	`pﬁl£t_lock_rögs
();

373 
	`DBG
(2, "entered\n");

375 i‡(
pﬁl£t
->
Êags
 & 
APR_POLLSET_THREADSAFE
) {

377 i‡(!
	`APR_RING_EMPTY
(&(
¥iv
->
‰ì_rög
), 
asio_ñem_t
, 
lök
)) {

378 
ñem
 = 
	`APR_RING_FIRST
(&(
¥iv
->
‰ì_rög
));

379 
	`APR_RING_REMOVE
(
ñem
, 
lök
);

380 
	`DBG1
(3, "u£dÑecy˛ed mem‹yáà%08p\n", 
ñem
);

381 
ñem
->
°©e
 = 
ASIO_INIT
;

384 
ñem
 = (
asio_ñem_t
 *Ë
	`≠r_pˇŒoc
(
pﬁl£t
->
poﬁ
, (asio_elem_t));

385 
	`DBG1
(3, "Ælo˚dÇew mem‹yáà%08p\n", 
ñem
);

387 
ñem
->
a
.
aio_nŸifyty≥
 = 
AIO_MSGQ
;

388 
ñem
->
a
.
aio_msgev_qid
 = 
¥iv
->
msg_q
;

389 
	`DBG1
(5, "aio_msgev_quid = %d \n", 
ñem
->
a
.
aio_msgev_qid
);

390 
ñem
->
a
.
aio_msgev_size
 = (
asio_ñem_t
 *);

391 
ñem
->
a
.
aio_msgev_Êag
 = 0;

392 
ñem
->
a
.
aio_msgev_addr
 = &”Àm->
msg
);

393 
ñem
->
a
.
aio_buf
 = &”Àm->
os_pfd
);

394 
ñem
->
a
.
aio_nbyãs
 = 1;

395 
ñem
->
msg
.
msg_ty≥
 = 1;

396 
ñem
->
msg
.
msg_ñem
 =Élem;

400 
ñem
->
os_pfd
.
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

402 
	`APR_RING_ELEM_INIT
(
ñem
, 
lök
);

403 
ñem
->
a
.
aio_cmd
 = 
AIO_SELPOLL
;

404 
ñem
->
a
.
aio_cÊags
 &~
AIO_OK2COMPIMD
;

405 
ñem
->
pfd
 = *
des¸ùt‹
;

406 
ñem
->
os_pfd
.
evíts
 = 
	`gë_evít
(
des¸ùt‹
->
ªqevíts
);

408 i‡(0 !
	`asyncio
(&
ñem
->
a
)) {

409 
rv
 = 
î∫o
;

410 
	`DBG3
(4, "pollset %pásio failed fd %d,Érrno %p\n",

411 
pﬁl£t
, 
ñem
->
os_pfd
.
fd
, 
rv
);

412 #i‡
DEBUG


413 
	`≥º‹
(
__FUNCTION__
 "ásio failure");

417 
	`DBG2
(4, "goodásio call,ádding fd %dÅoÖollset %p\n",

418 
ñem
->
os_pfd
.
fd
, 
pﬁl£t
);

420 
pﬁl£t
->
√…s
++;

421 
	`≠r_hash_£t
(
¥iv
->
ñems
, &(
ñem
->
os_pfd
.
fd
), (),Élem);

429 
rv
 = 
	`posix_add
(
pﬁl£t
, 
des¸ùt‹
);

432 
	`DBG1
(2, "exôög,Ñv = %d\n", 
rv
);

434 
	`pﬁl£t_u∆ock_rögs
();

435  
rv
;

436 
	}
}

438 
	$posix_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
, c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

440 
DBG_BUFF


441 
≠r_uöt32_t
 
i
;

442 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

444 
	`DBG
(4, "entered\n");

445 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

446 i‡(
des¸ùt‹
->
desc
.
s
 =
¥iv
->
quîy_£t
[
i
].desc.s) {

448 
≠r_uöt32_t
 
d°
 = 
i
;

449 
≠r_uöt32_t
 
ﬁd_√…s
 = 
pﬁl£t
->
√…s
;

450 
pﬁl£t
->
√…s
--;

451 
i
++; i < 
ﬁd_√…s
; i++) {

452 i‡(
des¸ùt‹
->
desc
.
s
 =
¥iv
->
quîy_£t
[
i
].desc.s) {

453 
pﬁl£t
->
√…s
--;

456 
¥iv
->
pﬁl£t
[
d°
] =Öriv->pﬁl£t[
i
];

457 
¥iv
->
quîy_£t
[
d°
] =Öriv->quîy_£t[
i
];

458 
d°
++;

461 
	`DBG
(4, "returning OK\n");

462  
APR_SUCCESS
;

466 
	`DBG
(1, "returning APR_NOTFOUND\n");

467  
APR_NOTFOUND
;

469 
	}
}

471 
≠r_°©us_t
 
	$asio_pﬁl£t_ªmove
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

472 c⁄° 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

474 
DBG_BUFF


475 
asio_ñem_t
 *
ñem
;

476 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

477 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

478 
aiocb
 
ˇn˚l_a
;

480 
fd
;

482 
	`DBG
(2, "entered\n");

484 i‡(!(
pﬁl£t
->
Êags
 & 
APR_POLLSET_THREADSAFE
)) {

485  
	`posix_ªmove
(
pﬁl£t
, 
des¸ùt‹
);

488 
	`pﬁl£t_lock_rögs
();

490 #i‡
DEBUG


491 
	`as£π
(
des¸ùt‹
->
desc_ty≥
 =
APR_POLL_SOCKET
);

494 
fd
 = 
des¸ùt‹
->
desc
.
s
->
sockëdes
;

496 
ñem
 = 
	`≠r_hash_gë
(
¥iv
->
ñems
, &(
fd
), ());

497 i‡(
ñem
 =
NULL
) {

498 
	`DBG1
(1, "couldn'àföd fd %d\n", 
fd
);

499 
rv
 = 
APR_NOTFOUND
;

501 
	`DBG1
(5, "hash found fd %d\n", 
fd
);

503 
	`≠r_hash_£t
(
¥iv
->
ñems
, &(
fd
), (), 
NULL
);

505 i‡(
ñem
->
°©e
 =
ASIO_INIT
) {

507 
ˇn˚l_a
.
aio_cmd
 = 
AIO_CANCEL
;

508 
ˇn˚l_a
.
aio_buf
 = &
ñem
->
a
;

510 
ˇn˚l_a
.
aio_cÊags
 = 0;

511 
ˇn˚l_a
.
aio_cÊags2
 = 0;

517 
rv
 = 
	`asyncio
(&
ˇn˚l_a
);

518 
	`DBG1
(4, "asynciÿªtu∫ed %d\n", 
rv
);

520 #i‡
DEBUG


521 
	`as£π
(
rv
 == 1);

524 
ñem
->
°©e
 = 
ASIO_REMOVED
;

525 
rv
 = 
APR_SUCCESS
;

528 
	`DBG1
(2, "exôög,Ñv: %d\n", 
rv
);

530 
	`pﬁl£t_u∆ock_rögs
();

532  
rv
;

533 
	}
}

535 
	$posix_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

536 
≠r_öãrvÆ_time_t
 
timeout
,

537 
≠r_öt32_t
 *
num
,

538 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

540 
DBG_BUFF


541 
rv
;

542 
≠r_uöt32_t
 
i
, 
j
;

543 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

545 
	`DBG
(4, "entered\n");

547 i‡(
timeout
 > 0) {

548 
timeout
 /= 1000;

550 
rv
 = 
	`pﬁl
(
¥iv
->
pﬁl£t
,Öﬁl£t->
√…s
, 
timeout
);

551 (*
num
Ë
rv
;

552 i‡(
rv
 < 0) {

553  
	`≠r_gë_√tos_îr‹
();

555 i‡(
rv
 == 0) {

556  
APR_TIMEUP
;

558 
j
 = 0;

559 
i
 = 0; i < 
pﬁl£t
->
√…s
; i++) {

560 i‡(
¥iv
->
pﬁl£t
[
i
].
ªvíts
 != 0) {

561 
¥iv
->
ªsu…_£t
[
j
] =Öriv->
quîy_£t
[
i
];

562 
¥iv
->
ªsu…_£t
[
j
].
π√víts
 =

563 
	`gë_ªvít
(
¥iv
->
pﬁl£t
[
i
].
ªvíts
);

564 
j
++;

567 i‡(
des¸ùt‹s
)

568 *
des¸ùt‹s
 = 
¥iv
->
ªsu…_£t
;

570 
	`DBG
(4, "exiting ok\n");

571  
APR_SUCCESS
;

573 
	}
}

575 
	$¥o˚ss_msg
(
≠r_pﬁl£t_t
 *
pﬁl£t
, 
asio_msgbuf_t
 *
msg
)

577 
DBG_BUFF


578 
asio_ñem_t
 *
ñem
 = 
msg
->
msg_ñem
;

580 
ñem
->
°©e
) {

581 
ASIO_REMOVED
:

582 
	`DBG2
(5, "for cancelledÉlem,Ñecycling memory -Élem %08p, fd %d\n",

583 
ñem
,ÉÀm->
os_pfd
.
fd
);

584 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
‰ì_rög
), 
ñem
,

585 
asio_ñem_t
, 
lök
);

587 
ASIO_INIT
:

588 
	`DBG2
(4, "addingÅoÑeadyÑing:Élem %08p, fd %d\n",

589 
ñem
,ÉÀm->
os_pfd
.
fd
);

590 
ñem
->
°©e
 = 
ASIO_COMPLETE
;

591 
	`APR_RING_INSERT_TAIL
(&(
pﬁl£t
->
p
->
ªady_rög
), 
ñem
,

592 
asio_ñem_t
, 
lök
);

595 
	`DBG3
(1, "unexpected state:Élem %08p, fd %d, state %d\n",

596 
ñem
,ÉÀm->
os_pfd
.
fd
,ÉÀm->
°©e
);

597 #i‡
DEBUG


598 
	`as£π
(0);

601 
	}
}

603 
≠r_°©us_t
 
	$asio_pﬁl£t_pﬁl
(
≠r_pﬁl£t_t
 *
pﬁl£t
,

604 
≠r_öãrvÆ_time_t
 
timeout
,

605 
≠r_öt32_t
 *
num
,

606 c⁄° 
≠r_pﬁlfd_t
 **
des¸ùt‹s
)

608 
DBG_BUFF


609 
i
, 
ªt
;

610 
asio_ñem_t
 *
ñem
, *
√xt_ñem
;

611 
asio_msgbuf_t
 
msg_buff
;

612 
time•ec
 
tv
;

613 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

614 
≠r_pﬁl£t_¥iv©e_t
 *
¥iv
 = 
pﬁl£t
->
p
;

616 
	`DBG
(6, "entered\n");

618 i‡((
pﬁl£t
->
Êags
 & 
APR_POLLSET_THREADSAFE
) == 0 ) {

619  
	`posix_pﬁl
(
pﬁl£t
, 
timeout
, 
num
, 
des¸ùt‹s
);

622 
	`pﬁl£t_lock_rögs
();

623 
	`APR_RING_INIT
(&(
¥iv
->
ªady_rög
), 
asio_ñem_t
, 
lök
);

625 !
	`APR_RING_EMPTY
(&(
¥iv
->
¥i‹_ªady_rög
), 
asio_ñem_t
, 
lök
)) {

626 
ñem
 = 
	`APR_RING_FIRST
(&(
¥iv
->
¥i‹_ªady_rög
));

627 
	`DBG3
(5, "pollset %pÉlem %p fd %d onÖriorÑeadyÑing\n",

628 
pﬁl£t
,

629 
ñem
,

630 
ñem
->
os_pfd
.
fd
);

632 
	`APR_RING_REMOVE
(
ñem
, 
lök
);

642 i‡(
ñem
->
°©e
 =
ASIO_REMOVED
) {

650 
	`APR_RING_INSERT_TAIL
(&(
¥iv
->
‰ì_rög
), 
ñem
,

651 
asio_ñem_t
, 
lök
);

655 
ñem
->
°©e
 = 
ASIO_INIT
;

656 
ñem
->
a
.
aio_cÊags
 = 
AIO_OK2COMPIMD
;

658 i‡(0 !(
ªt
 = 
	`asyncio
(&
ñem
->
a
))) {

659 i‡(
ªt
 == 1) {

660 
	`DBG
(4, "asyncio() completed inline\n");

662 
	`APR_RING_INSERT_TAIL
(&(
¥iv
->
ªady_rög
), 
ñem
, 
asio_ñem_t
,

663 
lök
);

666 
	`DBG2
(1, "asyncio() failed,Ñet: %d,Érrno: %d\n",

667 
ªt
, 
î∫o
);

668 
	`pﬁl£t_u∆ock_rögs
();

669  
î∫o
;

672 
	`DBG1
(4, "asyncio(Ëcom∂ëedÑ¯%d\n", 
ªt
);

675 
	`DBG
(6, "afterÖriorÑeadyÜoop\n");

678 0 < 
	`msgrcv
(
¥iv
->
msg_q
, &
msg_buff
, (
asio_ñem_t
 *), 0,

679 
IPC_NOWAIT
)) {

680 
	`¥o˚ss_msg
(
pﬁl£t
, &
msg_buff
);

684 i‡(
	`APR_RING_EMPTY
(&(
¥iv
->
ªady_rög
), 
asio_ñem_t
, 
lök
)) {

686 i‡(
timeout
 >= 0) {

687 
tv
.
tv_£c
 = 
	`≠r_time_£c
(
timeout
);

688 
tv
.
tv_n£c
 = 
	`≠r_time_u£c
(
timeout
) * 1000;

690 
tv
.
tv_£c
 = 
INT_MAX
;

693 
	`DBG2
(6, "nothing onÅheÑeadyÑing "

695 
tv
.
tv_£c
,Åv.
tv_n£c
);

697 
	`pﬁl£t_u∆ock_rögs
();

699 i‡(0 >(
ªt
 = 
	`__msgrcv_timed
(
¥iv
->
msg_q
, &
msg_buff
,

700 (
asio_ñem_t
 *), 0, 
NULL
, &
tv
))) {

701 #i‡
DEBUG


702 i‡(
î∫o
 =
EAGAIN
) {

703 
	`DBG
(6, "__msgrcv_timedÅimed out\n");

706 
	`DBG
(1, "__msgrcv_timed failed!\n");

709  (
î∫o
 =
EAGAIN
Ë? 
APR_TIMEUP
 :Érrno;

712 
	`pﬁl£t_lock_rögs
();

714 
	`¥o˚ss_msg
(
pﬁl£t
, &
msg_buff
);

717 
	`APR_RING_INIT
(&
¥iv
->
¥i‹_ªady_rög
, 
asio_ñem_t
, 
lök
);

719 (*
num
) = 0;

720 
ñem
 = 
	`APR_RING_FIRST
(&(
¥iv
->
ªady_rög
));

722 
i
 = 0;

724 
i
 < 
¥iv
->
size


725 && 
ñem
 !
	`APR_RING_SENTINEL
(&(
¥iv
->
ªady_rög
), 
asio_ñem_t
, 
lök
);

726 
i
++) {

727 
	`DBG2
(5, "ªadyÑög:ÉÀm %08p, fd %d\n", 
ñem
,ÉÀm->
os_pfd
.
fd
);

729 
¥iv
->
ªsu…_£t
[
i
] = 
ñem
->
pfd
;

730 
¥iv
->
ªsu…_£t
[
i
].
π√víts


731 
	`gë_ªvít
(
ñem
->
os_pfd
.
ªvíts
);

732 (*
num
)++;

734 
ñem
 = 
	`APR_RING_NEXT
”Àm, 
lök
);

736 #i‡
DEBUG


737 i‡(
ñem
 =
	`APR_RING_SENTINEL
(&(
¥iv
->
ªady_rög
), 
asio_ñem_t
, 
lök
)) {

738 
	`DBG
(5, "end ofÑeadyÑingÑeached\n");

743 i‡(
des¸ùt‹s
) {

744 *
des¸ùt‹s
 = 
¥iv
->
ªsu…_£t
;

752 
	`APR_RING_CONCAT
(&
¥iv
->
¥i‹_ªady_rög
, &’riv->
ªady_rög
), 
asio_ñem_t
, 
lök
);

754 
	`DBG1
(2, "exôög,Ñv = %d\n", 
rv
);

756 
	`pﬁl£t_u∆ock_rögs
();

758  
rv
;

759 
	}
}

761 
≠r_pﬁl£t_¥ovidî_t
 
	gim∂
 = {

762 
asio_pﬁl£t_¸óã
,

763 
asio_pﬁl£t_add
,

764 
asio_pﬁl£t_ªmove
,

765 
asio_pﬁl£t_pﬁl
,

766 
asio_pﬁl£t_˛ónup
,

770 
≠r_pﬁl£t_¥ovidî_t
 *
	g≠r_pﬁl£t_¥ovidî_aio_msgq
 = &
im∂
;

	@random/unix/apr_random.c

23 
	~"≠r.h
"

24 
	~"≠r_poﬁs.h
"

25 
	~"≠r_øndom.h
"

26 
	~"≠r_thªad_¥oc.h
"

27 
	~<as£π.h
>

29 #ifde‡
mö


30 #unde‡
mö


32 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

34 
	#APR_RANDOM_DEFAULT_POOLS
 32

	)

35 
	#APR_RANDOM_DEFAULT_REHASH_SIZE
 1024

	)

36 
	#APR_RANDOM_DEFAULT_RESEED_SIZE
 32

	)

37 
	#APR_RANDOM_DEFAULT_HASH_SECRET_SIZE
 32

	)

38 
	#APR_RANDOM_DEFAULT_G_FOR_INSECURE
 32

	)

39 
	#APR_RANDOM_DEFAULT_G_FOR_SECURE
 320

	)

41 
	s≠r_øndom_poﬁ_t
 {

42 *
	mpoﬁ
;

43 
	mbyãs
;

44 
	mpoﬁ_size
;

45 } 
	t≠r_øndom_poﬁ_t
;

47 
	#hash_öô
(
h
Ë(h)->
	`öô
(h)

	)

48 
	#hash_add
(
h
,
b
,
n
Ë(h)->
	`add
(h,b,n)

	)

49 
	#hash_föish
(
h
,
r
Ë(h)->
	`föish
(h,r)

	)

51 
	#hash
(
h
,
r
,
b
,
n
Ë
	`hash_öô
(h),
	`hash_add
(h,b,n),
	`hash_föish
(h,r)

	)

53 
	#¸y±_£tkey
(
c
,
k
Ë(c)->
	`£t_key
((c)->
d©a
,k)

	)

54 
	#¸y±_¸y±
(
c
,
out
,
ö
Ë(c)->
	`¸y±
((c)->
d©e
,out,ö)

	)

56 
	s≠r_øndom_t
 {

57 
≠r_poﬁ_t
 *
	m≠r_poﬁ
;

58 
≠r_¸y±o_hash_t
 *
	mpoﬁ_hash
;

59 
	m≈oﬁs
;

60 
≠r_øndom_poﬁ_t
 *
	mpoﬁs
;

61 
	m√xt_poﬁ
;

62 
	mgíî©i⁄
;

63 
≠r_size_t
 
	mªhash_size
;

64 
≠r_size_t
 
	mª£ed_size
;

65 
≠r_¸y±o_hash_t
 *
	mkey_hash
;

66 
	#K_size
(
g
Ë((g)->
key_hash
->
size
)

	)

67 
≠r_¸y±o_hash_t
 *
	m¥ng_hash
;

68 
	#B_size
(
g
Ë((g)->
¥ng_hash
->
size
)

	)

70 *
	mH
;

71 *
	mH_waôög
;

72 
	#H_size
(
g
Ë(
	`B_size
(g)+
	`K_size
(g))

	)

73 
	#H_cuºít
(
g
Ë(((g)->
ö£cuª_°¨ãd
 && !(g)->
£cuª_°¨ãd
) \

74 ? (
g
)->
H_waôög
 : (g)->
H
)

	)

76 *
	møndom√ss
;

77 
≠r_size_t
 
	møndom_byãs
;

78 
	mg_f‹_ö£cuª
;

79 
	mg_f‹_£cuª
;

80 
	m£cuª_ba£
;

81 
	mö£cuª_°¨ãd
:1;

82 
	m£cuª_°¨ãd
:1;

84 
≠r_øndom_t
 *
	m√xt
;

87 
≠r_øndom_t
 *
	gÆl_øndom
;

89 
≠r_°©us_t
 
	$øndom_˛ónup
(*
d©a
)

91 
≠r_øndom_t
 *
ªmove_this
 = 
d©a
,

92 *
cur
 = 
Æl_øndom
,

93 **
¥ev_±r
 = &
Æl_øndom
;

94 
cur
) {

95 i‡(
cur
 =
ªmove_this
) {

96 *
¥ev_±r
 = 
cur
->
√xt
;

99 
¥ev_±r
 = &
cur
->
√xt
;

100 
cur
 = cur->
√xt
;

102  
APR_SUCCESS
;

103 
	}
}

106 
	$APR_DECLARE
(Ë
	$≠r_øndom_öô
(
≠r_øndom_t
 *
g
,
≠r_poﬁ_t
 *
p
,

107 
≠r_¸y±o_hash_t
 *
poﬁ_hash
,

108 
≠r_¸y±o_hash_t
 *
key_hash
,

109 
≠r_¸y±o_hash_t
 *
¥ng_hash
)

111 
n
;

113 
g
->
≠r_poﬁ
 = 
p
;

115 
g
->
poﬁ_hash
 =Öool_hash;

116 
g
->
key_hash
 = key_hash;

117 
g
->
¥ng_hash
 =Örng_hash;

119 
g
->
≈oﬁs
 = 
APR_RANDOM_DEFAULT_POOLS
;

120 
g
->
poﬁs
 = 
	`≠r_∑Œoc
(
p
,g->
≈oﬁs
* *g->pools);

121 
n
 = 0;Ç < 
g
->
≈oﬁs
; ++n) {

122 
g
->
poﬁs
[
n
].
byãs
 = g->poﬁs[n].
poﬁ_size
 = 0;

123 
g
->
poﬁs
[
n
].
poﬁ
 = 
NULL
;

125 
g
->
√xt_poﬁ
 = 0;

127 
g
->
gíî©i⁄
 = 0;

129 
g
->
ªhash_size
 = 
APR_RANDOM_DEFAULT_REHASH_SIZE
;

131 
g
->
ªhash_size
 = ((g->ªhash_size+2*g->
poﬁ_hash
->
size
-1)/g->pool_hash->size

132 /2)*
g
->
poﬁ_hash
->
size
*2;

133 
g
->
ª£ed_size
 = 
APR_RANDOM_DEFAULT_RESEED_SIZE
;

135 
g
->
H
 = 
	`≠r_pˇŒoc
(
p
,
	`H_size
(g));

136 
g
->
H_waôög
 = 
	`≠r_pˇŒoc
(
p
,
	`H_size
(g));

138 
g
->
øndom√ss
 = 
	`≠r_∑Œoc
(
p
,
	`B_size
(g));

139 
g
->
øndom_byãs
 = 0;

141 
g
->
g_f‹_ö£cuª
 = 
APR_RANDOM_DEFAULT_G_FOR_INSECURE
;

142 
g
->
£cuª_ba£
 = 0;

143 
g
->
g_f‹_£cuª
 = 
APR_RANDOM_DEFAULT_G_FOR_SECURE
;

144 
g
->
£cuª_°¨ãd
 = g->
ö£cuª_°¨ãd
 = 0;

146 
g
->
√xt
 = 
Æl_øndom
;

147 
Æl_øndom
 = 
g
;

148 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
g
, 
øndom_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

149 
	}
}

151 
	$mix_pid
(
≠r_øndom_t
 *
g
,*
H
,
pid_t
 
pid
)

153 
	`hash_öô
(
g
->
key_hash
);

154 
	`hash_add
(
g
->
key_hash
,
H
,
	`H_size
(g));

155 
	`hash_add
(
g
->
key_hash
,&
pid
,Öid);

156 
	`hash_föish
(
g
->
key_hash
,
H
);

157 
	}
}

159 
	$mixî
(
≠r_øndom_t
 *
g
,
pid_t
 
pid
)

161 *
H
 = 
	`H_cuºít
(
g
);

164 
	`mix_pid
(
g
,
H
,
pid
);

166 i‡(
H
 !
g
->H)

167 
	`mix_pid
(
g
,g->
H
,
pid
);

170 --
g
->
gíî©i⁄
;

172 
g
->
øndom_byãs
 = 0;

173 
	}
}

175 
	$APR_DECLARE
(Ë
	$≠r_øndom_a·î_f‹k
(
≠r_¥oc_t
 *
¥oc
)

177 
≠r_øndom_t
 *
r
;

179 
r
 = 
Æl_øndom
;Ñ;Ñ =Ñ->
√xt
)

185 
	`mixî
(
r
,
¥oc
->
pid
);

186 
	}
}

188 
	$APR_DECLARE
(
≠r_øndom_t
 *Ë
	$≠r_øndom_°™d¨d_√w
(
≠r_poﬁ_t
 *
p
)

190 
≠r_øndom_t
 *
r
 = 
	`≠r_∑Œoc
(
p
, *r);

192 
	`≠r_øndom_öô
(
r
,
p
,
	`≠r_¸y±o_sha256_√w
(p),apr_crypto_sha256_new(p),

193 
	`≠r_¸y±o_sha256_√w
(
p
));

194  
r
;

195 
	}
}

197 
	$ªkey
(
≠r_øndom_t
 *
g
)

199 
n
;

200 *
H
 = 
	`H_cuºít
(
g
);

202 
	`hash_öô
(
g
->
key_hash
);

203 
	`hash_add
(
g
->
key_hash
,
H
,
	`H_size
(g));

204 
n
 = 0 ;Ç < 
g
->
≈oﬁs
 && (¿=0 || g->
gíî©i⁄
&(1 << (n-1)))

205 ; ++
n
) {

206 
	`hash_add
(
g
->
key_hash
,g->
poﬁs
[
n
].
poﬁ
,g->poﬁs[n].
byãs
);

207 
g
->
poﬁs
[
n
].
byãs
 = 0;

209 
	`hash_föish
(
g
->
key_hash
,
H
+
	`B_size
(g));

211 ++
g
->
gíî©i⁄
;

212 i‡(!
g
->
ö£cuª_°¨ãd
 && g->
gíî©i⁄
 > g->
g_f‹_ö£cuª
) {

213 
g
->
ö£cuª_°¨ãd
 = 1;

214 i‡(!
g
->
£cuª_°¨ãd
) {

215 
	`mem˝y
(
g
->
H_waôög
,g->
H
,
	`H_size
(g));

216 
g
->
£cuª_ba£
 = g->
gíî©i⁄
;

220 i‡(!
g
->
£cuª_°¨ãd
 && g->
gíî©i⁄
 > g->
£cuª_ba£
+g->
g_f‹_£cuª
) {

221 
g
->
£cuª_°¨ãd
 = 1;

222 
	`mem˝y
(
g
->
H
,g->
H_waôög
,
	`H_size
(g));

224 
	}
}

226 
	$APR_DECLARE
(Ë
	$≠r_øndom_add_íå›y
(
≠r_øndom_t
 *
g
,c⁄° *
íå›y_
,

227 
≠r_size_t
 
byãs
)

229 
n
;

230 c⁄° *
íå›y
 = 
íå›y_
;

232 
n
 = 0;Ç < 
byãs
; ++n) {

233 
≠r_øndom_poﬁ_t
 *
p
 = &
g
->
poﬁs
[g->
√xt_poﬁ
];

235 i‡(++
g
->
√xt_poﬁ
 =g->
≈oﬁs
)

236 
g
->
√xt_poﬁ
 = 0;

238 i‡(
p
->
poﬁ_size
 <Ö->
byãs
+1) {

239 *
≈
 = 
	`≠r_∑Œoc
(
g
->
≠r_poﬁ
,(
p
->
byãs
+1)*2);

241 
	`mem˝y
(
≈
,
p
->
poﬁ
,p->
byãs
);

242 
p
->
poﬁ
 = 
≈
;

243 
p
->
poﬁ_size
 = (p->
byãs
+1)*2;

245 
p
->
poﬁ
[p->
byãs
++] = 
íå›y
[
n
];

247 i‡(
p
->
byãs
 =
g
->
ªhash_size
) {

248 
≠r_size_t
 
r
;

250 
r
 = 0;Ñ < 
p
->
byãs
/2;Ñ+=
g
->
poﬁ_hash
->
size
)

251 
	`hash
(
g
->
poﬁ_hash
,
p
->
poﬁ
+
r
,p->poﬁ+r*2,g->poﬁ_hash->
size
*2);

252 
p
->
byãs
/=2;

254 
	`as£π
(
p
->
byãs
 < 
g
->
ªhash_size
);

257 i‡(
g
->
poﬁs
[0].
byãs
 >g->
ª£ed_size
)

258 
	`ªkey
(
g
);

259 
	}
}

262 
	$≠r_øndom_block
(
≠r_øndom_t
 *
g
,*
øndom
)

265 
	`hash
(
g
->
¥ng_hash
,g->
H
,g->H,
	`H_size
(g));

266 
	`hash
(
g
->
¥ng_hash
,
øndom
,g->
H
,
	`B_size
(g));

267 
	}
}

269 
	$≠r_øndom_byãs
(
≠r_øndom_t
 *
g
,*
øndom
,

270 
≠r_size_t
 
byãs
)

272 
≠r_size_t
 
n
;

274 
n
 = 0;Ç < 
byãs
; ) {

275 
≠r_size_t
 
l
;

277 i‡(
g
->
øndom_byãs
 == 0) {

278 
	`≠r_øndom_block
(
g
,g->
øndom√ss
);

279 
g
->
øndom_byãs
 = 
	`B_size
(g);

281 
l
 = 
	`mö
(
byãs
-
n
,
g
->
øndom_byãs
);

282 
	`mem˝y
(&
øndom
[
n
],
g
->
øndom√ss
+
	`B_size
(g)-g->
øndom_byãs
,
l
);

283 
g
->
øndom_byãs
-=
l
;

284 
n
+=
l
;

286 
	}
}

288 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_øndom_£cuª_byãs
(
≠r_øndom_t
 *
g
,

289 *
øndom
,

290 
≠r_size_t
 
byãs
)

292 i‡(!
g
->
£cuª_°¨ãd
)

293  
APR_ENOTENOUGHENTROPY
;

294 
	`≠r_øndom_byãs
(
g
,
øndom
,
byãs
);

295  
APR_SUCCESS
;

296 
	}
}

298 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_øndom_ö£cuª_byãs
(
≠r_øndom_t
 *
g
,

299 *
øndom
,

300 
≠r_size_t
 
byãs
)

302 i‡(!
g
->
ö£cuª_°¨ãd
)

303  
APR_ENOTENOUGHENTROPY
;

304 
	`≠r_øndom_byãs
(
g
,
øndom
,
byãs
);

305  
APR_SUCCESS
;

306 
	}
}

308 
	$APR_DECLARE
(Ë
	$≠r_øndom_b¨rõr
(
≠r_øndom_t
 *
g
)

310 
g
->
£cuª_°¨ãd
 = 0;

311 
g
->
£cuª_ba£
 = g->
gíî©i⁄
;

312 
	}
}

314 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_øndom_£cuª_ªady
(
≠r_øndom_t
 *
r
)

316 i‡(!
r
->
£cuª_°¨ãd
)

317  
APR_ENOTENOUGHENTROPY
;

318  
APR_SUCCESS
;

319 
	}
}

321 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_øndom_ö£cuª_ªady
(
≠r_øndom_t
 *
r
)

323 i‡(!
r
->
ö£cuª_°¨ãd
)

324  
APR_ENOTENOUGHENTROPY
;

325  
APR_SUCCESS
;

326 
	}
}

	@random/unix/sha2.c

23 
	~<°rög.h
>

24 
	~<as£π.h
>

25 
	~"sha2.h
"

48 
≠r_byã_t
 
	tsha2_byã
;

49 
≠r_uöt32_t
 
	tsha2_w‹d32
;

50 
≠r_uöt64_t
 
	tsha2_w‹d64
;

54 
	#SHA256_SHORT_BLOCK_LENGTH
 (
SHA256_BLOCK_LENGTH
 - 8)

	)

58 #i‡!
APR_IS_BIGENDIAN


59 
	#REVERSE32
(
w
,
x
) { \

60 
sha2_w‹d32
 
tmp
 = (
w
); \

61 
tmp
 = (tmp >> 16) | (tmp << 16); \

62 (
x
Ë((
tmp
 & 0xff00ff00UL) >> 8) | ((tmp & 0x00ff00ffUL) << 8); \

63 }

	)

64 
	#REVERSE64
(
w
,
x
) { \

65 
sha2_w‹d64
 
tmp
 = (
w
); \

66 
tmp
 = (tmp >> 32) | (tmp << 32); \

67 
tmp
 = (—m∞& 
	`APR_UINT64_C
(0xff00ff00ff00ff00)) >> 8) | \

68 ((
tmp
 & 
	`APR_UINT64_C
(0x00ff00ff00ff00ff)) << 8); \

69 (
x
Ë((
tmp
 & 
	`APR_UINT64_C
(0xffff0000ffff0000)) >> 16) | \

70 ((
tmp
 & 
	`APR_UINT64_C
(0x0000ffff0000ffff)) << 16); \

71 }

	)

79 
	#ADDINC128
(
w
,
n
) { \

80 (
w
)[0] +(
sha2_w‹d64
)(
n
); \

81 i‡((
w
)[0] < (
n
)) { \

82 (
w
)[1]++; \

84 }

	)

95 #i‡!
deföed
(
SHA2_USE_MEMSET_MEMCPY
Ë&& !deföed(
SHA2_USE_BZERO_BCOPY
)

97 
	#SHA2_USE_MEMSET_MEMCPY
 1

	)

99 #i‡
deföed
(
SHA2_USE_MEMSET_MEMCPY
Ë&& deföed(
SHA2_USE_BZERO_BCOPY
)

101 #îr‹ 
Deföe
 
eôhî
 
SHA2_USE_MEMSET_MEMCPY
 
‹
 
SHA2_USE_BZERO_BCOPY
, 
nŸ
 
bŸh
!

104 #ifde‡
SHA2_USE_MEMSET_MEMCPY


105 
	#MEMSET_BZERO
(
p
,
l
Ë
	`mem£t
(’), 0, (l))

	)

106 
	#MEMCPY_BCOPY
(
d
,
s
,
l
Ë
	`mem˝y
((d), (s), (l))

	)

108 #ifde‡
SHA2_USE_BZERO_BCOPY


109 
	#MEMSET_BZERO
(
p
,
l
Ë
	`bzîo
(’), (l))

	)

110 
	#MEMCPY_BCOPY
(
d
,
s
,
l
Ë
	`bc›y
((s), (d), (l))

	)

124 
	#R
(
b
,
x
Ë((xË>> (b))

	)

126 
	#S32
(
b
,
x
Ë(((xË>> (b)Ë| ((xË<< (32 - (b))))

	)

128 
	#S64
(
b
,
x
Ë(((xË>> (b)Ë| ((xË<< (64 - (b))))

	)

131 
	#Ch
(
x
,
y
,
z
Ë(((xË& (y)Ë^ ((~(x)Ë& (z)))

	)

132 
	#Maj
(
x
,
y
,
z
Ë(((xË& (y)Ë^ ((xË& (z)Ë^ ((yË& (z)))

	)

135 
	#Sigma0_256
(
x
Ë(
	`S32
(2, (x)Ë^ S32(13, (x)Ë^ S32(22, (x)))

	)

136 
	#Sigma1_256
(
x
Ë(
	`S32
(6, (x)Ë^ S32(11, (x)Ë^ S32(25, (x)))

	)

137 
	#sigma0_256
(
x
Ë(
	`S32
(7, (x)Ë^ S32(18, (x)Ë^ 
	`R
(3 , (x)))

	)

138 
	#sigma1_256
(
x
Ë(
	`S32
(17, (x)Ë^ S32(19, (x)Ë^ 
	`R
(10, (x)))

	)

141 
	#Sigma0_512
(
x
Ë(
	`S64
(28, (x)Ë^ S64(34, (x)Ë^ S64(39, (x)))

	)

142 
	#Sigma1_512
(
x
Ë(
	`S64
(14, (x)Ë^ S64(18, (x)Ë^ S64(41, (x)))

	)

143 
	#sigma0_512
(
x
Ë(
	`S64
–1, (x)Ë^ S64–8, (x)Ë^ 
	`R
–7, (x)))

	)

144 
	#sigma1_512
(
x
Ë(
	`S64
(19, (x)Ë^ S64(61, (x)Ë^ 
	`R
–6, (x)))

	)

151 
≠r__SHA256_Tønsf‹m
(
SHA256_CTX
*, c⁄° 
sha2_w‹d32
*);

156 c⁄° 
sha2_w‹d32
 
	gK256
[64] = {

176 c⁄° 
sha2_w‹d32
 
	gsha256_öôül_hash_vÆue
[8] = {

191 c⁄° *
	gsha2_hex_digôs
 = "0123456789abcdef";

195 
	$≠r__SHA256_Inô
(
SHA256_CTX
* 
c⁄ãxt
) {

196 i‡(
c⁄ãxt
 =(
SHA256_CTX
*)0) {

199 
	`MEMCPY_BCOPY
(
c⁄ãxt
->
°©e
, 
sha256_öôül_hash_vÆue
, 
SHA256_DIGEST_LENGTH
);

200 
	`MEMSET_BZERO
(
c⁄ãxt
->
buf„r
, 
SHA256_BLOCK_LENGTH
);

201 
c⁄ãxt
->
bôcou¡
 = 0;

202 
	}
}

204 #ifde‡
SHA2_UNROLL_TRANSFORM


208 #i‡!
APR_IS_BIGENDIAN


210 
	#ROUND256_0_TO_15
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
) \

211 
	`REVERSE32
(*
d©a
++, 
W256
[
j
]); \

212 
T1
 = (
h
Ë+ 
	`Sigma1_256
(
e
Ë+ 
	`Ch
(”), (
f
), (
g
)) + \

213 
K256
[
j
] + 
W256
[j]; \

214 (
d
Ë+
T1
; \

215 (
h
Ë
T1
 + 
	`Sigma0_256
(
a
Ë+ 
	`Maj
(◊), (
b
), (
c
)); \

216 
j
++

	)

221 
	#ROUND256_0_TO_15
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
) \

222 
T1
 = (
h
Ë+ 
	`Sigma1_256
(
e
Ë+ 
	`Ch
(”), (
f
), (
g
)) + \

223 
K256
[
j
] + (
W256
[j] = *
d©a
++); \

224 (
d
Ë+
T1
; \

225 (
h
Ë
T1
 + 
	`Sigma0_256
(
a
Ë+ 
	`Maj
(◊), (
b
), (
c
)); \

226 
j
++

	)

230 
	#ROUND256
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
) \

231 
s0
 = 
W256
[(
j
+1)&0x0f]; \

232 
s0
 = 
	`sigma0_256
(s0); \

233 
s1
 = 
W256
[(
j
+14)&0x0f]; \

234 
s1
 = 
	`sigma1_256
(s1); \

235 
T1
 = (
h
Ë+ 
	`Sigma1_256
(
e
Ë+ 
	`Ch
(”), (
f
), (
g
)Ë+ 
K256
[
j
] + \

236 (
W256
[
j
&0x0f] +
s1
 + W256[(j+9)&0x0f] + 
s0
); \

237 (
d
Ë+
T1
; \

238 (
h
Ë
T1
 + 
	`Sigma0_256
(
a
Ë+ 
	`Maj
(◊), (
b
), (
c
)); \

239 
j
++

	)

241 
	$≠r__SHA256_Tønsf‹m
(
SHA256_CTX
* 
c⁄ãxt
, c⁄° 
sha2_w‹d32
* 
d©a
) {

242 
sha2_w‹d32
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
s0
, 
s1
;

243 
sha2_w‹d32
 
T1
, *
W256
;

244 
j
;

246 
W256
 = (
sha2_w‹d32
*)
c⁄ãxt
->
buf„r
;

249 
a
 = 
c⁄ãxt
->
°©e
[0];

250 
b
 = 
c⁄ãxt
->
°©e
[1];

251 
c
 = 
c⁄ãxt
->
°©e
[2];

252 
d
 = 
c⁄ãxt
->
°©e
[3];

253 
e
 = 
c⁄ãxt
->
°©e
[4];

254 
f
 = 
c⁄ãxt
->
°©e
[5];

255 
g
 = 
c⁄ãxt
->
°©e
[6];

256 
h
 = 
c⁄ãxt
->
°©e
[7];

258 
j
 = 0;

261 
	`ROUND256_0_TO_15
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
);

262 
	`ROUND256_0_TO_15
(
h
,
a
,
b
,
c
,
d
,
e
,
f
,
g
);

263 
	`ROUND256_0_TO_15
(
g
,
h
,
a
,
b
,
c
,
d
,
e
,
f
);

264 
	`ROUND256_0_TO_15
(
f
,
g
,
h
,
a
,
b
,
c
,
d
,
e
);

265 
	`ROUND256_0_TO_15
(
e
,
f
,
g
,
h
,
a
,
b
,
c
,
d
);

266 
	`ROUND256_0_TO_15
(
d
,
e
,
f
,
g
,
h
,
a
,
b
,
c
);

267 
	`ROUND256_0_TO_15
(
c
,
d
,
e
,
f
,
g
,
h
,
a
,
b
);

268 
	`ROUND256_0_TO_15
(
b
,
c
,
d
,
e
,
f
,
g
,
h
,
a
);

269 } 
j
 < 16);

273 
	`ROUND256
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
);

274 
	`ROUND256
(
h
,
a
,
b
,
c
,
d
,
e
,
f
,
g
);

275 
	`ROUND256
(
g
,
h
,
a
,
b
,
c
,
d
,
e
,
f
);

276 
	`ROUND256
(
f
,
g
,
h
,
a
,
b
,
c
,
d
,
e
);

277 
	`ROUND256
(
e
,
f
,
g
,
h
,
a
,
b
,
c
,
d
);

278 
	`ROUND256
(
d
,
e
,
f
,
g
,
h
,
a
,
b
,
c
);

279 
	`ROUND256
(
c
,
d
,
e
,
f
,
g
,
h
,
a
,
b
);

280 
	`ROUND256
(
b
,
c
,
d
,
e
,
f
,
g
,
h
,
a
);

281 } 
j
 < 64);

284 
c⁄ãxt
->
°©e
[0] +
a
;

285 
c⁄ãxt
->
°©e
[1] +
b
;

286 
c⁄ãxt
->
°©e
[2] +
c
;

287 
c⁄ãxt
->
°©e
[3] +
d
;

288 
c⁄ãxt
->
°©e
[4] +
e
;

289 
c⁄ãxt
->
°©e
[5] +
f
;

290 
c⁄ãxt
->
°©e
[6] +
g
;

291 
c⁄ãxt
->
°©e
[7] +
h
;

294 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
T1
 = 0;

295 
	}
}

299 
	$≠r__SHA256_Tønsf‹m
(
SHA256_CTX
* 
c⁄ãxt
, c⁄° 
sha2_w‹d32
* 
d©a
) {

300 
sha2_w‹d32
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
s0
, 
s1
;

301 
sha2_w‹d32
 
T1
, 
T2
, *
W256
;

302 
j
;

304 
W256
 = (
sha2_w‹d32
*)
c⁄ãxt
->
buf„r
;

307 
a
 = 
c⁄ãxt
->
°©e
[0];

308 
b
 = 
c⁄ãxt
->
°©e
[1];

309 
c
 = 
c⁄ãxt
->
°©e
[2];

310 
d
 = 
c⁄ãxt
->
°©e
[3];

311 
e
 = 
c⁄ãxt
->
°©e
[4];

312 
f
 = 
c⁄ãxt
->
°©e
[5];

313 
g
 = 
c⁄ãxt
->
°©e
[6];

314 
h
 = 
c⁄ãxt
->
°©e
[7];

316 
j
 = 0;

318 #i‡!
APR_IS_BIGENDIAN


320 
	`REVERSE32
(*
d©a
++,
W256
[
j
]);

322 
T1
 = 
h
 + 
	`Sigma1_256
(
e
Ë+ 
	`Ch
”, 
f
, 
g
Ë+ 
K256
[
j
] + 
W256
[j];

325 
T1
 = 
h
 + 
	`Sigma1_256
(
e
Ë+ 
	`Ch
”, 
f
, 
g
Ë+ 
K256
[
j
] + (
W256
[j] = *
d©a
++);

327 
T2
 = 
	`Sigma0_256
(
a
Ë+ 
	`Maj
◊, 
b
, 
c
);

328 
h
 = 
g
;

329 
g
 = 
f
;

330 
f
 = 
e
;

331 
e
 = 
d
 + 
T1
;

332 
d
 = 
c
;

333 
c
 = 
b
;

334 
b
 = 
a
;

335 
a
 = 
T1
 + 
T2
;

337 
j
++;

338 } 
j
 < 16);

342 
s0
 = 
W256
[(
j
+1)&0x0f];

343 
s0
 = 
	`sigma0_256
(s0);

344 
s1
 = 
W256
[(
j
+14)&0x0f];

345 
s1
 = 
	`sigma1_256
(s1);

348 
T1
 = 
h
 + 
	`Sigma1_256
(
e
Ë+ 
	`Ch
”, 
f
, 
g
Ë+ 
K256
[
j
] +

349 (
W256
[
j
&0x0f] +
s1
 + W256[(j+9)&0x0f] + 
s0
);

350 
T2
 = 
	`Sigma0_256
(
a
Ë+ 
	`Maj
◊, 
b
, 
c
);

351 
h
 = 
g
;

352 
g
 = 
f
;

353 
f
 = 
e
;

354 
e
 = 
d
 + 
T1
;

355 
d
 = 
c
;

356 
c
 = 
b
;

357 
b
 = 
a
;

358 
a
 = 
T1
 + 
T2
;

360 
j
++;

361 } 
j
 < 64);

364 
c⁄ãxt
->
°©e
[0] +
a
;

365 
c⁄ãxt
->
°©e
[1] +
b
;

366 
c⁄ãxt
->
°©e
[2] +
c
;

367 
c⁄ãxt
->
°©e
[3] +
d
;

368 
c⁄ãxt
->
°©e
[4] +
e
;

369 
c⁄ãxt
->
°©e
[5] +
f
;

370 
c⁄ãxt
->
°©e
[6] +
g
;

371 
c⁄ãxt
->
°©e
[7] +
h
;

374 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
T1
 = 
T2
 = 0;

375 
	}
}

379 
	$≠r__SHA256_Upd©e
(
SHA256_CTX
* 
c⁄ãxt
, c⁄° 
sha2_byã
 *
d©a
, 
size_t
 
Àn
) {

380 
‰ì•a˚
, 
u£d•a˚
;

382 i‡(
Àn
 == 0) {

388 
	`as£π
(
c⁄ãxt
 !(
SHA256_CTX
*)0 && 
d©a
 !(
sha2_byã
*)0);

390 
u£d•a˚
 = ()((
c⁄ãxt
->
bôcou¡
 >> 3)

391 % 
SHA256_BLOCK_LENGTH
);

392 i‡(
u£d•a˚
 > 0) {

394 
‰ì•a˚
 = 
SHA256_BLOCK_LENGTH
 - 
u£d•a˚
;

396 i‡(
Àn
 >
‰ì•a˚
) {

398 
	`MEMCPY_BCOPY
(&
c⁄ãxt
->
buf„r
[
u£d•a˚
], 
d©a
, 
‰ì•a˚
);

399 
c⁄ãxt
->
bôcou¡
 +
‰ì•a˚
 << 3;

400 
Àn
 -
‰ì•a˚
;

401 
d©a
 +
‰ì•a˚
;

402 
	`≠r__SHA256_Tønsf‹m
(
c⁄ãxt
, (
sha2_w‹d32
*)c⁄ãxt->
buf„r
);

405 
	`MEMCPY_BCOPY
(&
c⁄ãxt
->
buf„r
[
u£d•a˚
], 
d©a
, 
Àn
);

406 
c⁄ãxt
->
bôcou¡
 +
Àn
 << 3;

408 
u£d•a˚
 = 
‰ì•a˚
 = 0;

412 
Àn
 >
SHA256_BLOCK_LENGTH
) {

414 
	`≠r__SHA256_Tønsf‹m
(
c⁄ãxt
, (
sha2_w‹d32
*)
d©a
);

415 
c⁄ãxt
->
bôcou¡
 +
SHA256_BLOCK_LENGTH
 << 3;

416 
Àn
 -
SHA256_BLOCK_LENGTH
;

417 
d©a
 +
SHA256_BLOCK_LENGTH
;

419 i‡(
Àn
 > 0) {

421 
	`MEMCPY_BCOPY
(
c⁄ãxt
->
buf„r
, 
d©a
, 
Àn
);

422 
c⁄ãxt
->
bôcou¡
 +
Àn
 << 3;

425 
u£d•a˚
 = 
‰ì•a˚
 = 0;

426 
	}
}

428 
	$≠r__SHA256_FöÆ
(
sha2_byã
 
dige°
[], 
SHA256_CTX
* 
c⁄ãxt
) {

429 
sha2_w‹d32
 *
d
 = (sha2_w‹d32*)
dige°
;

430 
u£d•a˚
;

433 
	`as£π
(
c⁄ãxt
 !(
SHA256_CTX
*)0);

436 i‡(
dige°
 !(
sha2_byã
*)0) {

437 
u£d•a˚
 = ()((
c⁄ãxt
->
bôcou¡
 >> 3)

438 % 
SHA256_BLOCK_LENGTH
);

439 #i‡!
APR_IS_BIGENDIAN


441 
	`REVERSE64
(
c⁄ãxt
->
bôcou¡
,context->bitcount);

443 i‡(
u£d•a˚
 > 0) {

445 
c⁄ãxt
->
buf„r
[
u£d•a˚
++] = 0x80;

447 i‡(
u£d•a˚
 <
SHA256_SHORT_BLOCK_LENGTH
) {

449 
	`MEMSET_BZERO
(&
c⁄ãxt
->
buf„r
[
u£d•a˚
], 
SHA256_SHORT_BLOCK_LENGTH
 - usedspace);

451 i‡(
u£d•a˚
 < 
SHA256_BLOCK_LENGTH
) {

452 
	`MEMSET_BZERO
(&
c⁄ãxt
->
buf„r
[
u£d•a˚
], 
SHA256_BLOCK_LENGTH
 - usedspace);

455 
	`≠r__SHA256_Tønsf‹m
(
c⁄ãxt
, (
sha2_w‹d32
*)c⁄ãxt->
buf„r
);

458 
	`MEMSET_BZERO
(
c⁄ãxt
->
buf„r
, 
SHA256_SHORT_BLOCK_LENGTH
);

462 
	`MEMSET_BZERO
(
c⁄ãxt
->
buf„r
, 
SHA256_SHORT_BLOCK_LENGTH
);

465 *
c⁄ãxt
->
buf„r
 = 0x80;

469 
	udummy
 {

470 
≠r_uöt64_t
 
bôcou¡
;

471 
≠r_byã_t
 
byãs
[8];

472 } 
bôcou¡
;

473 
bôcou¡
.bôcou¡ = 
c⁄ãxt
->bitcount;

474 
	`MEMCPY_BCOPY
(&
c⁄ãxt
->
buf„r
[
SHA256_SHORT_BLOCK_LENGTH
], 
bôcou¡
.
byãs
, 8);

478 
	`≠r__SHA256_Tønsf‹m
(
c⁄ãxt
, (
sha2_w‹d32
*)c⁄ãxt->
buf„r
);

480 #i‡!
APR_IS_BIGENDIAN


483 
j
;

484 
j
 = 0; j < 8; j++) {

485 
	`REVERSE32
(
c⁄ãxt
->
°©e
[
j
],context->state[j]);

486 *
d
++ = 
c⁄ãxt
->
°©e
[
j
];

490 
	`MEMCPY_BCOPY
(
d
, 
c⁄ãxt
->
°©e
, 
SHA256_DIGEST_LENGTH
);

495 
	`MEMSET_BZERO
(
c⁄ãxt
, (*context));

496 
u£d•a˚
 = 0;

497 
	}
}

499 *
	$≠r__SHA256_End
(
SHA256_CTX
* 
c⁄ãxt
, 
buf„r
[]) {

500 
sha2_byã
 
dige°
[
SHA256_DIGEST_LENGTH
], *
d
 = digest;

501 
i
;

504 
	`as£π
(
c⁄ãxt
 !(
SHA256_CTX
*)0);

506 i‡(
buf„r
 != (*)0) {

507 
	`≠r__SHA256_FöÆ
(
dige°
, 
c⁄ãxt
);

509 
i
 = 0; i < 
SHA256_DIGEST_LENGTH
; i++) {

510 *
buf„r
++ = 
sha2_hex_digôs
[(*
d
 & 0xf0) >> 4];

511 *
buf„r
++ = 
sha2_hex_digôs
[*
d
 & 0x0f];

512 
d
++;

514 *
buf„r
 = ()0;

516 
	`MEMSET_BZERO
(
c⁄ãxt
, (*context));

518 
	`MEMSET_BZERO
(
dige°
, 
SHA256_DIGEST_LENGTH
);

519  
buf„r
;

520 
	}
}

522 * 
	$≠r__SHA256_D©a
(c⁄° 
sha2_byã
* 
d©a
, 
size_t
 
Àn
, 
dige°
[
SHA256_DIGEST_STRING_LENGTH
]) {

523 
SHA256_CTX
 
c⁄ãxt
;

525 
	`≠r__SHA256_Inô
(&
c⁄ãxt
);

526 
	`≠r__SHA256_Upd©e
(&
c⁄ãxt
, 
d©a
, 
Àn
);

527  
	`≠r__SHA256_End
(&
c⁄ãxt
, 
dige°
);

528 
	}
}

	@random/unix/sha2.h

23 #i‚de‡
__SHA2_H__


24 
	#__SHA2_H__


	)

26 #ifde‡
__˝lu•lus


30 
	~"≠r.h
"

33 
	#SHA256_BLOCK_LENGTH
 64

	)

34 
	#SHA256_DIGEST_LENGTH
 32

	)

35 
	#SHA256_DIGEST_STRING_LENGTH
 (
SHA256_DIGEST_LENGTH
 * 2 + 1)

	)

39 
	s_SHA256_CTX
 {

40 
≠r_uöt32_t
 
°©e
[8];

41 
≠r_uöt64_t
 
bôcou¡
;

42 
≠r_byã_t
 
buf„r
[
SHA256_BLOCK_LENGTH
];

43 } 
	tSHA256_CTX
;

47 
≠r__SHA256_Inô
(
SHA256_CTX
 *);

48 
≠r__SHA256_Upd©e
(
SHA256_CTX
 *, c⁄° 
≠r_byã_t
 *, 
size_t
);

49 
≠r__SHA256_FöÆ
(
≠r_byã_t
 [
SHA256_DIGEST_LENGTH
], 
SHA256_CTX
 *);

50 * 
≠r__SHA256_End
(
SHA256_CTX
 *, [
SHA256_DIGEST_STRING_LENGTH
]);

51 * 
≠r__SHA256_D©a
(c⁄° 
≠r_byã_t
 *, 
size_t
,

52 [
SHA256_DIGEST_STRING_LENGTH
]);

54 #ifde‡ 
__˝lu•lus


	@random/unix/sha2_glue.c

17 
	~<≠r.h
>

18 
	~<≠r_øndom.h
>

19 
	~<≠r_poﬁs.h
>

20 
	~"sha2.h
"

22 
	$sha256_öô
(
≠r_¸y±o_hash_t
 *
h
)

24 
	`≠r__SHA256_Inô
(
h
->
d©a
);

25 
	}
}

27 
	$sha256_add
(
≠r_¸y±o_hash_t
 *
h
,c⁄° *
d©a
,

28 
≠r_size_t
 
byãs
)

30 
	`≠r__SHA256_Upd©e
(
h
->
d©a
,d©a,
byãs
);

31 
	}
}

33 
	$sha256_föish
(
≠r_¸y±o_hash_t
 *
h
,*
ªsu…
)

35 
	`≠r__SHA256_FöÆ
(
ªsu…
,
h
->
d©a
);

36 
	}
}

38 
	$APR_DECLARE
(
≠r_¸y±o_hash_t
 *Ë
	$≠r_¸y±o_sha256_√w
(
≠r_poﬁ_t
 *
p
)

40 
≠r_¸y±o_hash_t
 *
h
=
	`≠r_∑Œoc
(
p
, *h);

42 
h
->
d©a
=
	`≠r_∑Œoc
(
p
,(
SHA256_CTX
));

43 
h
->
öô
=
sha256_öô
;

44 
h
->
add
=
sha256_add
;

45 
h
->
föish
=
sha256_föish
;

46 
h
->
size
=256/8;

48  
h
;

49 
	}
}

	@shmem/beos/shm.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_shm.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<kî√l/OS.h
>

25 
	~"≠r_p‹èbÀ.h
"

27 
	s≠r_shm_t
 {

28 
≠r_poﬁ_t
 *
	mpoﬁ
;

29 *
	mmemblock
;

30 *
	m±r
;

31 
≠r_size_t
 
	mªqsize
;

32 
≠r_size_t
 
	mavaû
;

33 
¨ó_id
 
	maid
;

36 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã
(
≠r_shm_t
 **
m
,

37 
≠r_size_t
 
ªqsize
,

38 c⁄° *
fûíame
,

39 
≠r_poﬁ_t
 *
p
)

41 
≠r_size_t
 
∑gesize
;

42 
¨ó_id
 
√wid
;

43 *
addr
;

44 
sh«me
[
B_OS_NAME_LENGTH
];

46 (*
m
Ë(
≠r_shm_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_shm_t));

48 
∑gesize
 = ((
ªqsize
 + 
B_PAGE_SIZE
 - 1) / B_PAGE_SIZE) * B_PAGE_SIZE;

50 i‡(!
fûíame
) {

51 
num
 = 0;

52 
	`¢¥ötf
(
sh«me
, 
B_OS_NAME_LENGTH
, "≠r_shmem_%ld", 
	`föd_thªad
(
NULL
));

53 
	`föd_¨ó
(
sh«me
) >= 0)

54 
	`¢¥ötf
(
sh«me
, 
B_OS_NAME_LENGTH
, "apr_shmem_%ld_%d",

55 
	`föd_thªad
(
NULL
), 
num
++);

57 
√wid
 = 
	`¸óã_¨ó
(
fûíame
 ? fûíamê: 
sh«me
,

58 (*)&
addr
, 
B_ANY_ADDRESS
,

59 
∑gesize
, 
B_LAZY_LOCK
, 
B_READ_AREA
|
B_WRITE_AREA
);

61 i‡(
√wid
 < 0)

62  
î∫o
;

64 (*
m
)->
poﬁ
 = 
p
;

65 (*
m
)->
aid
 = 
√wid
;

66 (*
m
)->
memblock
 = 
addr
;

67 (*
m
)->
±r
 = (*)
addr
;

68 (*
m
)->
avaû
 = 
∑gesize
;

69 (*
m
)->
ªqsize
 =Ñeqsize;

71  
APR_SUCCESS
;

72 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã_ex
(
≠r_shm_t
 **
m
,

75 
≠r_size_t
 
ªqsize
,

76 c⁄° *
fûíame
,

77 
≠r_poﬁ_t
 *
p
,

78 
≠r_öt32_t
 
Êags
)

80  
	`≠r_shm_¸óã
(
m
, 
ªqsize
, 
fûíame
, 
p
);

81 
	}
}

83 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_de°roy
(
≠r_shm_t
 *
m
)

85 
	`dñëe_¨ó
(
m
->
aid
);

86 
m
->
avaû
 = 0;

87 
m
->
memblock
 = 
NULL
;

88  
APR_SUCCESS
;

89 
	}
}

91 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_ªmove
(c⁄° *
fûíame
,

92 
≠r_poﬁ_t
 *
poﬁ
)

94 
¨ó_id
 
dñëeme
 = 
	`föd_¨ó
(
fûíame
);

96 i‡(
dñëeme
 =
B_NAME_NOT_FOUND
)

97  
APR_EINVAL
;

99 
	`dñëe_¨ó
(
dñëeme
);

100  
APR_SUCCESS
;

101 
	}
}

103 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch
(
≠r_shm_t
 **
m
,

104 c⁄° *
fûíame
,

105 
≠r_poﬁ_t
 *
poﬁ
)

107 
¨ó_öfo
 
ai
;

108 
thªad_öfo
 
ti
;

109 
≠r_shm_t
 *
√w_m
;

110 
¨ó_id
 
dñëeme
 = 
	`föd_¨ó
(
fûíame
);

112 i‡(
dñëeme
 =
B_NAME_NOT_FOUND
)

113  
APR_EINVAL
;

115 
√w_m
 = (
≠r_shm_t
*)
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t*));

116 i‡(
√w_m
 =
NULL
)

117  
APR_ENOMEM
;

118 
√w_m
->
poﬁ
 =Öool;

120 
	`gë_¨ó_öfo
(
dñëeme
, &
ai
);

121 
	`gë_thªad_öfo
(
	`föd_thªad
(
NULL
), &
ti
);

123 i‡(
ti
.
ãam
 !
ai
.team) {

124 
¨ó_id
 
«ªa
;

126 
«ªa
 = 
	`˛⁄e_¨ó
(
ai
.
«me
, &◊i.
addªss
), 
B_CLONE_ADDRESS
,

127 
B_READ_AREA
|
B_WRITE_AREA
, 
ai
.
¨ó
);

129 i‡(
«ªa
 < 
B_OK
)

130  
«ªa
;

132 
	`gë_¨ó_öfo
(
«ªa
, &
ai
);

133 
√w_m
->
aid
 = 
«ªa
;

134 
√w_m
->
memblock
 = 
ai
.
addªss
;

135 
√w_m
->
±r
 = (*)
ai
.
addªss
;

136 
√w_m
->
avaû
 = 
ai
.
size
;

137 
√w_m
->
ªqsize
 = 
ai
.
size
;

140 (*
m
Ë
√w_m
;

142  
APR_SUCCESS
;

143 
	}
}

145 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch_ex
(
≠r_shm_t
 **
m
,

146 c⁄° *
fûíame
,

147 
≠r_poﬁ_t
 *
poﬁ
,

148 
≠r_öt32_t
 
Êags
)

150  
	`≠r_shm_©èch
(
m
, 
fûíame
, 
poﬁ
);

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_dëach
(
≠r_shm_t
 *
m
)

155 
	`dñëe_¨ó
(
m
->
aid
);

156  
APR_SUCCESS
;

157 
	}
}

159 
	$APR_DECLARE
(*Ë
	$≠r_shm_ba£addr_gë
(c⁄° 
≠r_shm_t
 *
m
)

161  
m
->
memblock
;

162 
	}
}

164 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_shm_size_gë
(c⁄° 
≠r_shm_t
 *
m
)

166  
m
->
ªqsize
;

167 
	}
}

169 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
shm
)

171 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_gë
(
≠r_os_shm_t
 *
osshm
,

172 
≠r_shm_t
 *
shm
)

174  
APR_ENOTIMPL
;

175 
	}
}

177 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_put
(
≠r_shm_t
 **
m
,

178 
≠r_os_shm_t
 *
osshm
,

179 
≠r_poﬁ_t
 *
poﬁ
)

181  
APR_ENOTIMPL
;

182 
	}
}

	@shmem/os2/shm.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_shm.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
	s≠r_shm_t
 {

25 
≠r_poﬁ_t
 *
	mpoﬁ
;

26 *
	mmemblock
;

29 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã
(
≠r_shm_t
 **
m
,

30 
≠r_size_t
 
ªqsize
,

31 c⁄° *
fûíame
,

32 
≠r_poﬁ_t
 *
poﬁ
)

34 
rc
;

35 
≠r_shm_t
 *
√wm
 = (≠r_shm_à*)
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

36 *
«me
 = 
NULL
;

37 
ULONG
 
Êags
 = 
PAG_COMMIT
|
PAG_READ
|
PAG_WRITE
;

39 
√wm
->
poﬁ
 =Öool;

41 i‡(
fûíame
) {

42 
«me
 = 
	`≠r_p°rˇt
(
poﬁ
, "\\SHAREMEM\\", 
fûíame
, 
NULL
);

45 i‡(
«me
 =
NULL
) {

46 
Êags
 |
OBJ_GETTABLE
;

49 
rc
 = 
	`DosAŒocSh¨edMem
(&(
√wm
->
memblock
), 
«me
, 
ªqsize
, 
Êags
);

51 i‡(
rc
) {

52  
	`APR_OS2_STATUS
(
rc
);

55 *
m
 = 
√wm
;

56  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã_ex
(
≠r_shm_t
 **
m
,

60 
≠r_size_t
 
ªqsize
,

61 c⁄° *
fûíame
,

62 
≠r_poﬁ_t
 *
p
,

63 
≠r_öt32_t
 
Êags
)

65  
	`≠r_shm_¸óã
(
m
, 
ªqsize
, 
fûíame
, 
p
);

66 
	}
}

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_de°roy
(
≠r_shm_t
 *
m
)

70 
	`DosFªeMem
(
m
->
memblock
);

71  
APR_SUCCESS
;

72 
	}
}

74 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_ªmove
(c⁄° *
fûíame
,

75 
≠r_poﬁ_t
 *
poﬁ
)

77  
APR_ENOTIMPL
;

78 
	}
}

80 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch
(
≠r_shm_t
 **
m
,

81 c⁄° *
fûíame
,

82 
≠r_poﬁ_t
 *
poﬁ
)

84 
rc
;

85 
≠r_shm_t
 *
√wm
 = (≠r_shm_à*)
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

86 *
«me
 = 
NULL
;

87 
ULONG
 
Êags
 = 
PAG_READ
|
PAG_WRITE
;

89 
√wm
->
poﬁ
 =Öool;

90 
«me
 = 
	`≠r_p°rˇt
(
poﬁ
, "\\SHAREMEM\\", 
fûíame
, 
NULL
);

92 
rc
 = 
	`DosGëNamedSh¨edMem
(&(
√wm
->
memblock
), 
«me
, 
Êags
);

94 i‡(
rc
) {

95  
	`APR_FROM_OS_ERROR
(
rc
);

98 *
m
 = 
√wm
;

99  
APR_SUCCESS
;

100 
	}
}

102 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch_ex
(
≠r_shm_t
 **
m
,

103 c⁄° *
fûíame
,

104 
≠r_poﬁ_t
 *
poﬁ
,

105 
≠r_öt32_t
 
Êags
)

107  
	`≠r_shm_©èch
(
m
, 
fûíame
, 
poﬁ
);

108 
	}
}

110 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_dëach
(
≠r_shm_t
 *
m
)

112 
rc
 = 0;

114 i‡(
m
->
memblock
) {

115 
rc
 = 
	`DosFªeMem
(
m
->
memblock
);

118  
	`APR_FROM_OS_ERROR
(
rc
);

119 
	}
}

121 
	$APR_DECLARE
(*Ë
	$≠r_shm_ba£addr_gë
(c⁄° 
≠r_shm_t
 *
m
)

123  
m
->
memblock
;

124 
	}
}

126 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_shm_size_gë
(c⁄° 
≠r_shm_t
 *
m
)

128 
ULONG
 
Êags
, 
size
 = 0x1000000;

129 
	`DosQuîyMem
(
m
->
memblock
, &
size
, &
Êags
);

130  
size
;

131 
	}
}

133 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
shm
)

135 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_gë
(
≠r_os_shm_t
 *
osshm
,

136 
≠r_shm_t
 *
shm
)

138 *
osshm
 = 
shm
->
memblock
;

139  
APR_SUCCESS
;

140 
	}
}

142 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_put
(
≠r_shm_t
 **
m
,

143 
≠r_os_shm_t
 *
osshm
,

144 
≠r_poﬁ_t
 *
poﬁ
)

146 
rc
;

147 
≠r_shm_t
 *
√wm
 = (≠r_shm_à*)
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

148 
ULONG
 
Êags
 = 
PAG_COMMIT
|
PAG_READ
|
PAG_WRITE
;

150 
√wm
->
poﬁ
 =Öool;

152 
rc
 = 
	`DosGëSh¨edMem
(&(
√wm
->
memblock
), 
Êags
);

154 i‡(
rc
) {

155  
	`APR_FROM_OS_ERROR
(
rc
);

158 *
m
 = 
√wm
;

159  
APR_SUCCESS
;

160 
	}
}

	@shmem/unix/shm.c

17 
	~"≠r_¨ch_shm.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_u£r.h
"

22 
	~"≠r_°rögs.h
"

24 
≠r_°©us_t
 
	$shm_˛ónup_ow√r
(*
m_
)

26 
≠r_shm_t
 *
m
 = (≠r_shm_à*)
m_
;

29 i‡(
m
->
fûíame
 =
NULL
) {

30 #i‡
APR_USE_SHMEM_MMAP_ZERO
 || 
APR_USE_SHMEM_MMAP_ANON


31 i‡(
	`munm≠
(
m
->
ba£
, m->
ªÆsize
) == -1) {

32  
î∫o
;

34  
APR_SUCCESS
;

35 #ñi‡
APR_USE_SHMEM_SHMGET_ANON


36 i‡(
	`shmdt
(
m
->
ba£
) == -1) {

37  
î∫o
;

41  
APR_SUCCESS
;

47 #i‡
APR_USE_SHMEM_MMAP_TMP


48 i‡(
	`munm≠
(
m
->
ba£
, m->
ªÆsize
) == -1) {

49  
î∫o
;

51 i‡(
	`ac˚ss
(
m
->
fûíame
, 
F_OK
)) {

52  
APR_SUCCESS
;

55  
	`≠r_fûe_ªmove
(
m
->
fûíame
, m->
poﬁ
);

57 #ñi‡
APR_USE_SHMEM_MMAP_SHM


58 i‡(
	`munm≠
(
m
->
ba£
, m->
ªÆsize
) == -1) {

59  
î∫o
;

61 i‡(
	`shm_u∆ök
(
m
->
fûíame
) == -1) {

62  
î∫o
;

64  
APR_SUCCESS
;

65 #ñi‡
APR_USE_SHMEM_SHMGET


69 i‡(
	`shm˘l
(
m
->
shmid
, 
IPC_RMID
, 
NULL
Ë=-1 && 
î∫o
 !
EINVAL
) {

70  
î∫o
;

72 i‡(
	`shmdt
(
m
->
ba£
) == -1) {

73  
î∫o
;

75 i‡(
	`ac˚ss
(
m
->
fûíame
, 
F_OK
)) {

76  
APR_SUCCESS
;

79  
	`≠r_fûe_ªmove
(
m
->
fûíame
, m->
poﬁ
);

82  
APR_ENOTIMPL
;

85 
	}
}

87 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã
(
≠r_shm_t
 **
m
,

88 
≠r_size_t
 
ªqsize
,

89 c⁄° *
fûíame
,

90 
≠r_poﬁ_t
 *
poﬁ
)

92 
≠r_shm_t
 *
√w_m
;

93 
≠r_°©us_t
 
°©us
;

94 #i‡
APR_USE_SHMEM_SHMGET
 || 
APR_USE_SHMEM_SHMGET_ANON


95 
shmid_ds
 
shmbuf
;

96 
≠r_uid_t
 
uid
;

97 
≠r_gid_t
 
gid
;

99 #i‡
APR_USE_SHMEM_MMAP_TMP
 || 
APR_USE_SHMEM_MMAP_SHM
 || \

100 
APR_USE_SHMEM_MMAP_ZERO


101 
tmpfd
;

103 #i‡
APR_USE_SHMEM_SHMGET


104 
≠r_size_t
 
nbyãs
;

105 
key_t
 
shmkey
;

107 #i‡
APR_USE_SHMEM_MMAP_ZERO
 || 
APR_USE_SHMEM_SHMGET
 || \

108 
APR_USE_SHMEM_MMAP_TMP
 || 
APR_USE_SHMEM_MMAP_SHM


109 
≠r_fûe_t
 *
fûe
;

113 i‡(
fûíame
 =
NULL
) {

114 #i‡
APR_USE_SHMEM_MMAP_ZERO
 || 
APR_USE_SHMEM_MMAP_ANON


115 
√w_m
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_shm_t
));

116 
√w_m
->
poﬁ
 =Öool;

117 
√w_m
->
ªqsize
 =Ñeqsize;

118 
√w_m
->
ªÆsize
 = 
ªqsize
 +

119 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

120 
√w_m
->
fûíame
 = 
NULL
;

122 #i‡
APR_USE_SHMEM_MMAP_ZERO


123 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, "/dev/zîo", 
APR_READ
 | 
APR_WRITE
,

124 
APR_OS_DEFAULT
, 
poﬁ
);

125 i‡(
°©us
 !
APR_SUCCESS
) {

126  
°©us
;

128 
°©us
 = 
	`≠r_os_fûe_gë
(&
tmpfd
, 
fûe
);

129 i‡(
°©us
 !
APR_SUCCESS
) {

130  
°©us
;

133 
√w_m
->
ba£
 = 
	`mm≠
(
NULL
,Çew_m->
ªÆsize
, 
PROT_READ
|
PROT_WRITE
,

134 
MAP_SHARED
, 
tmpfd
, 0);

135 i‡(
√w_m
->
ba£
 =(*)
MAP_FAILED
) {

136  
î∫o
;

139 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

140 i‡(
°©us
 !
APR_SUCCESS
) {

141  
°©us
;

145 *(
≠r_size_t
*)(
√w_m
->
ba£
Ë√w_m->
ªÆsize
;

147 
√w_m
->
ußbÀ
 = (*Íew_m->
ba£
 + 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

149 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_ow√r
,

150 
≠r_poﬁ_˛ónup_nuŒ
);

151 *
m
 = 
√w_m
;

152  
APR_SUCCESS
;

154 #ñi‡
APR_USE_SHMEM_MMAP_ANON


155 
√w_m
->
ba£
 = 
	`mm≠
(
NULL
,Çew_m->
ªÆsize
, 
PROT_READ
|
PROT_WRITE
,

156 
MAP_ANON
|
MAP_SHARED
, -1, 0);

157 i‡(
√w_m
->
ba£
 =(*)
MAP_FAILED
) {

158  
î∫o
;

162 *(
≠r_size_t
*)(
√w_m
->
ba£
Ë√w_m->
ªÆsize
;

164 
√w_m
->
ußbÀ
 = (*Íew_m->
ba£
 + 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

166 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_ow√r
,

167 
≠r_poﬁ_˛ónup_nuŒ
);

168 *
m
 = 
√w_m
;

169  
APR_SUCCESS
;

172 #ñi‡
APR_USE_SHMEM_SHMGET_ANON


173 
√w_m
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_shm_t
));

174 
√w_m
->
poﬁ
 =Öool;

175 
√w_m
->
ªqsize
 =Ñeqsize;

176 
√w_m
->
ªÆsize
 = 
ªqsize
;

177 
√w_m
->
fûíame
 = 
NULL
;

179 i‡((
√w_m
->
shmid
 = 
	`shmgë
(
IPC_PRIVATE
,Çew_m->
ªÆsize
,

180 
SHM_R
 | 
SHM_W
 | 
IPC_CREAT
)) < 0) {

181  
î∫o
;

184 i‡((
√w_m
->
ba£
 = 
	`shm©
“ew_m->
shmid
, 
NULL
, 0)) == (*)-1) {

185  
î∫o
;

187 
√w_m
->
ußbÀ
 =Çew_m->
ba£
;

189 i‡(
	`shm˘l
(
√w_m
->
shmid
, 
IPC_STAT
, &
shmbuf
) == -1) {

190  
î∫o
;

192 
	`≠r_uid_cuºít
(&
uid
, &
gid
, 
poﬁ
);

193 
shmbuf
.
shm_≥rm
.
uid
 = uid;

194 
shmbuf
.
shm_≥rm
.
gid
 = gid;

195 i‡(
	`shm˘l
(
√w_m
->
shmid
, 
IPC_SET
, &
shmbuf
) == -1) {

196  
î∫o
;

203 i‡(
	`shm˘l
(
√w_m
->
shmid
, 
IPC_RMID
, 
NULL
) == -1) {

204  
î∫o
;

207 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_ow√r
,

208 
≠r_poﬁ_˛ónup_nuŒ
);

209 *
m
 = 
√w_m
;

210  
APR_SUCCESS
;

213  
APR_ENOTIMPL
;

219 
√w_m
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_shm_t
));

220 
√w_m
->
poﬁ
 =Öool;

221 
√w_m
->
ªqsize
 =Ñeqsize;

222 
√w_m
->
fûíame
 = 
	`≠r_p°rdup
(
poﬁ
, filename);

224 #i‡
APR_USE_SHMEM_MMAP_TMP
 || 
APR_USE_SHMEM_MMAP_SHM


225 
√w_m
->
ªÆsize
 = 
ªqsize
 +

226 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

229 
°©us
 = 
APR_SUCCESS
;

231 #i‡
APR_USE_SHMEM_MMAP_TMP


233 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, 
fûíame
,

234 
APR_READ
 | 
APR_WRITE
 | 
APR_CREATE
 | 
APR_EXCL
,

235 
APR_OS_DEFAULT
, 
poﬁ
);

236 i‡(
°©us
 !
APR_SUCCESS
) {

237  
°©us
;

240 
°©us
 = 
	`≠r_os_fûe_gë
(&
tmpfd
, 
fûe
);

241 i‡(
°©us
 !
APR_SUCCESS
) {

242 
	`≠r_fûe_˛o£
(
fûe
);

243 
	`≠r_fûe_ªmove
(
√w_m
->
fûíame
,Çew_m->
poﬁ
);

244  
°©us
;

247 
°©us
 = 
	`≠r_fûe_åunc
(
fûe
, 
√w_m
->
ªÆsize
);

248 i‡(
°©us
 !
APR_SUCCESS
) {

249 
	`≠r_fûe_˛o£
(
fûe
);

250 
	`≠r_fûe_ªmove
(
√w_m
->
fûíame
,Çew_m->
poﬁ
);

251  
°©us
;

254 
√w_m
->
ba£
 = 
	`mm≠
(
NULL
,Çew_m->
ªÆsize
, 
PROT_READ
 | 
PROT_WRITE
,

255 
MAP_SHARED
, 
tmpfd
, 0);

258 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

259 i‡(
°©us
 !
APR_SUCCESS
) {

260  
°©us
;

263 #i‡
APR_USE_SHMEM_MMAP_SHM


264 
tmpfd
 = 
	`shm_›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 0644);

265 i‡(
tmpfd
 == -1) {

266  
î∫o
;

269 
°©us
 = 
	`≠r_os_fûe_put
(&
fûe
, &
tmpfd
,

270 
APR_READ
 | 
APR_WRITE
 | 
APR_CREATE
 | 
APR_EXCL
,

271 
poﬁ
);

272 i‡(
°©us
 !
APR_SUCCESS
) {

273  
°©us
;

276 
°©us
 = 
	`≠r_fûe_åunc
(
fûe
, 
√w_m
->
ªÆsize
);

277 i‡(
°©us
 !
APR_SUCCESS
) {

278 
	`shm_u∆ök
(
fûíame
);

279  
°©us
;

281 
√w_m
->
ba£
 = 
	`mm≠
(
NULL
, 
ªqsize
, 
PROT_READ
 | 
PROT_WRITE
,

282 
MAP_SHARED
, 
tmpfd
, 0);

286 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

287 i‡(
°©us
 !
APR_SUCCESS
) {

288  
°©us
;

293 *(
≠r_size_t
*)(
√w_m
->
ba£
Ë√w_m->
ªÆsize
;

295 
√w_m
->
ußbÀ
 = (*Íew_m->
ba£
 + 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

297 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_ow√r
,

298 
≠r_poﬁ_˛ónup_nuŒ
);

299 *
m
 = 
√w_m
;

300  
APR_SUCCESS
;

302 #ñi‡
APR_USE_SHMEM_SHMGET


303 
√w_m
->
ªÆsize
 = 
ªqsize
;

306 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, 
fûíame
,

307 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
,

308 
APR_OS_DEFAULT
, 
poﬁ
);

309 i‡(
°©us
 !
APR_SUCCESS
) {

310  
°©us
;

315 
shmkey
 = 
	`·ok
(
fûíame
, 1);

316 i‡(
shmkey
 =(
key_t
)-1) {

317 
	`≠r_fûe_˛o£
(
fûe
);

318  
î∫o
;

321 i‡((
√w_m
->
shmid
 = 
	`shmgë
(
shmkey
,Çew_m->
ªÆsize
,

322 
SHM_R
 | 
SHM_W
 | 
IPC_CREAT
 | 
IPC_EXCL
)) < 0) {

323 
	`≠r_fûe_˛o£
(
fûe
);

324  
î∫o
;

327 i‡((
√w_m
->
ba£
 = 
	`shm©
“ew_m->
shmid
, 
NULL
, 0)) == (*)-1) {

328 
	`≠r_fûe_˛o£
(
fûe
);

329  
î∫o
;

331 
√w_m
->
ußbÀ
 =Çew_m->
ba£
;

333 i‡(
	`shm˘l
(
√w_m
->
shmid
, 
IPC_STAT
, &
shmbuf
) == -1) {

334 
	`≠r_fûe_˛o£
(
fûe
);

335  
î∫o
;

337 
	`≠r_uid_cuºít
(&
uid
, &
gid
, 
poﬁ
);

338 
shmbuf
.
shm_≥rm
.
uid
 = uid;

339 
shmbuf
.
shm_≥rm
.
gid
 = gid;

340 i‡(
	`shm˘l
(
√w_m
->
shmid
, 
IPC_SET
, &
shmbuf
) == -1) {

341 
	`≠r_fûe_˛o£
(
fûe
);

342  
î∫o
;

345 
nbyãs
 = (
ªqsize
);

346 
°©us
 = 
	`≠r_fûe_wrôe
(
fûe
, (c⁄° *)&
ªqsize
,

347 &
nbyãs
);

348 i‡(
°©us
 !
APR_SUCCESS
) {

349 
	`≠r_fûe_˛o£
(
fûe
);

350  
°©us
;

352 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

353 i‡(
°©us
 !
APR_SUCCESS
) {

354  
°©us
;

357 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_ow√r
,

358 
≠r_poﬁ_˛ónup_nuŒ
);

359 *
m
 = 
√w_m
;

360  
APR_SUCCESS
;

363  
APR_ENOTIMPL
;

366 
	}
}

368 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã_ex
(
≠r_shm_t
 **
m
,

369 
≠r_size_t
 
ªqsize
,

370 c⁄° *
fûíame
,

371 
≠r_poﬁ_t
 *
p
,

372 
≠r_öt32_t
 
Êags
)

374  
	`≠r_shm_¸óã
(
m
, 
ªqsize
, 
fûíame
, 
p
);

375 
	}
}

377 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_ªmove
(c⁄° *
fûíame
,

378 
≠r_poﬁ_t
 *
poﬁ
)

380 #i‡
APR_USE_SHMEM_SHMGET


381 
≠r_°©us_t
 
°©us
;

382 
≠r_fûe_t
 *
fûe
;

383 
key_t
 
shmkey
;

384 
shmid
;

387 #i‡
APR_USE_SHMEM_MMAP_TMP


388  
	`≠r_fûe_ªmove
(
fûíame
, 
poﬁ
);

389 #ñi‡
APR_USE_SHMEM_MMAP_SHM


390 i‡(
	`shm_u∆ök
(
fûíame
) == -1) {

391  
î∫o
;

393  
APR_SUCCESS
;

394 #ñi‡
APR_USE_SHMEM_SHMGET


396 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, 
fûíame
, 
APR_FOPEN_WRITE
,

397 
APR_OS_DEFAULT
, 
poﬁ
);

398 i‡(
°©us
) {

399  
°©us
;

404 
shmkey
 = 
	`·ok
(
fûíame
, 1);

405 i‡(
shmkey
 =(
key_t
)-1) {

406 
shm_ªmove_Áûed
;

409 
	`≠r_fûe_˛o£
(
fûe
);

411 i‡((
shmid
 = 
	`shmgë
(
shmkey
, 0, 
SHM_R
 | 
SHM_W
)) < 0) {

412 
shm_ªmove_Áûed
;

418 i‡(
	`shm˘l
(
shmid
, 
IPC_RMID
, 
NULL
) == -1) {

419 
shm_ªmove_Áûed
;

421  
	`≠r_fûe_ªmove
(
fûíame
, 
poﬁ
);

423 
shm_ªmove_Áûed
:

424 
°©us
 = 
î∫o
;

426 
	`≠r_fûe_ªmove
(
fûíame
, 
poﬁ
);

427  
°©us
;

431  
APR_ENOTIMPL
;

433 
	}
}

435 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_de°roy
(
≠r_shm_t
 *
m
)

437  
	`≠r_poﬁ_˛ónup_run
(
m
->
poﬁ
, m, 
shm_˛ónup_ow√r
);

438 
	}
}

440 
≠r_°©us_t
 
	$shm_˛ónup_©èch
(*
m_
)

442 
≠r_shm_t
 *
m
 = (≠r_shm_à*)
m_
;

444 i‡(
m
->
fûíame
 =
NULL
) {

446  
APR_EINVAL
;

449 #i‡
APR_USE_SHMEM_MMAP_TMP
 || 
APR_USE_SHMEM_MMAP_SHM


450 i‡(
	`munm≠
(
m
->
ba£
, m->
ªÆsize
) == -1) {

451  
î∫o
;

453  
APR_SUCCESS
;

454 #ñi‡
APR_USE_SHMEM_SHMGET


455 i‡(
	`shmdt
(
m
->
ba£
) == -1) {

456  
î∫o
;

458  
APR_SUCCESS
;

460  
APR_ENOTIMPL
;

463 
	}
}

465 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch
(
≠r_shm_t
 **
m
,

466 c⁄° *
fûíame
,

467 
≠r_poﬁ_t
 *
poﬁ
)

469 i‡(
fûíame
 =
NULL
) {

472  
APR_EINVAL
;

475 #i‡
APR_USE_SHMEM_MMAP_TMP
 || 
APR_USE_SHMEM_MMAP_SHM


476 
≠r_shm_t
 *
√w_m
;

477 
≠r_°©us_t
 
°©us
;

478 
tmpfd
;

479 
≠r_fûe_t
 *
fûe
;

480 
≠r_size_t
 
nbyãs
;

482 
√w_m
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_shm_t
));

483 
√w_m
->
poﬁ
 =Öool;

484 
√w_m
->
fûíame
 = 
	`≠r_p°rdup
(
poﬁ
, filename);

486 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, 
fûíame
,

487 
APR_READ
 | 
APR_WRITE
,

488 
APR_OS_DEFAULT
, 
poﬁ
);

489 i‡(
°©us
 !
APR_SUCCESS
) {

490  
°©us
;

492 
°©us
 = 
	`≠r_os_fûe_gë
(&
tmpfd
, 
fûe
);

493 i‡(
°©us
 !
APR_SUCCESS
) {

494  
°©us
;

497 
nbyãs
 = (
√w_m
->
ªÆsize
);

498 
°©us
 = 
	`≠r_fûe_ªad
(
fûe
, (*)&(
√w_m
->
ªÆsize
),

499 &
nbyãs
);

500 i‡(
°©us
 !
APR_SUCCESS
) {

501  
°©us
;

504 
°©us
 = 
	`≠r_os_fûe_gë
(&
tmpfd
, 
fûe
);

505 i‡(
°©us
 !
APR_SUCCESS
) {

506 
	`≠r_fûe_˛o£
(
fûe
);

507 
	`≠r_fûe_ªmove
(
√w_m
->
fûíame
,Çew_m->
poﬁ
);

508  
°©us
;

511 
√w_m
->
ªqsize
 =Çew_m->
ªÆsize
 - (
≠r_size_t
);

513 
√w_m
->
ba£
 = 
	`mm≠
(
NULL
,Çew_m->
ªÆsize
, 
PROT_READ
 | 
PROT_WRITE
,

514 
MAP_SHARED
, 
tmpfd
, 0);

517 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

518 i‡(
°©us
 !
APR_SUCCESS
) {

519  
°©us
;

523 
√w_m
->
ußbÀ
 = (*Íew_m->
ba£
 + 
	`APR_ALIGN_DEFAULT
((
≠r_size_t
));

525 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_©èch
,

526 
≠r_poﬁ_˛ónup_nuŒ
);

527 *
m
 = 
√w_m
;

528  
APR_SUCCESS
;

530 #ñi‡
APR_USE_SHMEM_SHMGET


531 
≠r_shm_t
 *
√w_m
;

532 
≠r_°©us_t
 
°©us
;

533 
≠r_fûe_t
 *
fûe
;

534 
≠r_size_t
 
nbyãs
;

535 
key_t
 
shmkey
;

537 
√w_m
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_shm_t
));

539 
°©us
 = 
	`≠r_fûe_›í
(&
fûe
, 
fûíame
,

540 
APR_FOPEN_READ
, 
APR_OS_DEFAULT
, 
poﬁ
);

541 i‡(
°©us
 !
APR_SUCCESS
) {

542  
°©us
;

545 
nbyãs
 = (
√w_m
->
ªqsize
);

546 
°©us
 = 
	`≠r_fûe_ªad
(
fûe
, (*)&(
√w_m
->
ªqsize
),

547 &
nbyãs
);

548 i‡(
°©us
 !
APR_SUCCESS
) {

549  
°©us
;

551 
°©us
 = 
	`≠r_fûe_˛o£
(
fûe
);

552 i‡(
°©us
 !
APR_SUCCESS
) {

553  
°©us
;

556 
√w_m
->
fûíame
 = 
	`≠r_p°rdup
(
poﬁ
, filename);

557 
√w_m
->
poﬁ
 =Öool;

558 
shmkey
 = 
	`·ok
(
fûíame
, 1);

559 i‡(
shmkey
 =(
key_t
)-1) {

560  
î∫o
;

562 i‡((
√w_m
->
shmid
 = 
	`shmgë
(
shmkey
, 0, 
SHM_R
 | 
SHM_W
)) == -1) {

563  
î∫o
;

565 i‡((
√w_m
->
ba£
 = 
	`shm©
“ew_m->
shmid
, 
NULL
, 0)) == (*)-1) {

566  
î∫o
;

568 
√w_m
->
ußbÀ
 =Çew_m->
ba£
;

569 
√w_m
->
ªÆsize
 =Çew_m->
ªqsize
;

571 
	`≠r_poﬁ_˛ónup_ªgi°î
(
√w_m
->
poﬁ
,Çew_m, 
shm_˛ónup_©èch
,

572 
≠r_poﬁ_˛ónup_nuŒ
);

573 *
m
 = 
√w_m
;

574  
APR_SUCCESS
;

577  
APR_ENOTIMPL
;

580 
	}
}

582 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch_ex
(
≠r_shm_t
 **
m
,

583 c⁄° *
fûíame
,

584 
≠r_poﬁ_t
 *
poﬁ
,

585 
≠r_öt32_t
 
Êags
)

587  
	`≠r_shm_©èch
(
m
, 
fûíame
, 
poﬁ
);

588 
	}
}

590 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_dëach
(
≠r_shm_t
 *
m
)

592 
≠r_°©us_t
 
rv
 = 
	`shm_˛ónup_©èch
(
m
);

593 
	`≠r_poﬁ_˛ónup_kûl
(
m
->
poﬁ
, m, 
shm_˛ónup_©èch
);

594  
rv
;

595 
	}
}

597 
	$APR_DECLARE
(*Ë
	$≠r_shm_ba£addr_gë
(c⁄° 
≠r_shm_t
 *
m
)

599  
m
->
ußbÀ
;

600 
	}
}

602 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_shm_size_gë
(c⁄° 
≠r_shm_t
 *
m
)

604  
m
->
ªqsize
;

605 
	}
}

607 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
shm
)

609 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_gë
(
≠r_os_shm_t
 *
osshm
,

610 
≠r_shm_t
 *
shm
)

612  
APR_ENOTIMPL
;

613 
	}
}

615 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_put
(
≠r_shm_t
 **
m
,

616 
≠r_os_shm_t
 *
osshm
,

617 
≠r_poﬁ_t
 *
poﬁ
)

619  
APR_ENOTIMPL
;

620 
	}
}

	@shmem/win32/shm.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_shm.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_¨ch_fûe_io.h
"

23 
	~"limôs.h
"

25 
	smemblock_t
 {

26 
≠r_size_t
 
	msize
;

27 
≠r_size_t
 
	mÀngth
;

28 } 
	tmemblock_t
;

30 
	s≠r_shm_t
 {

31 
≠r_poﬁ_t
 *
	mpoﬁ
;

32 
memblock_t
 *
	mmemblk
;

33 *
	mu§mem
;

34 
≠r_size_t
 
	msize
;

35 
≠r_size_t
 
	mÀngth
;

36 
HANDLE
 
	mhM≠
;

37 c⁄° *
	mfûíame
;

40 
≠r_°©us_t
 
	$shm_˛ónup
(* 
shm
)

42 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

43 
≠r_shm_t
 *
m
 = 
shm
;

45 i‡(!
	`Unm≠VõwOfFûe
(
m
->
memblk
)) {

46 
rv
 = 
	`≠r_gë_os_îr‹
();

48 i‡(!
	`Clo£H™dÀ
(
m
->
hM≠
)) {

49 
rv
 =Ñv !
APR_SUCCESS
 ?Ñv : 
	`≠r_gë_os_îr‹
();

51 i‡(
m
->
fûíame
) {

53 
≠r_°©us_t
 
rc
 = 
	`≠r_fûe_ªmove
(
m
->
fûíame
, m->
poﬁ
);

54 
rv
 =Ñv !
APR_SUCCESS
 ?Ñv : 
rc
;

56  
rv
;

57 
	}
}

75 #ifde‡
SE_CREATE_GLOBAL_NAME


76 
	$ˇn_¸óã_globÆ_m≠s
()

78 
BOOL
 
ok
, 
has_¥iv
;

79 
LUID
 
¥iv_id
;

80 
PRIVILEGE_SET
 
¥ivs
;

81 
HANDLE
 
hTokí
;

83 
ok
 = 
	`O≥nThªadTokí
(
	`GëCuºítThªad
(), 
TOKEN_QUERY
, 
TRUE
, &
hTokí
);

84 i‡(!
ok
 && 
	`GëLa°Eº‹
(Ë=
ERROR_NO_TOKEN
) {

87 
ok
 = 
	`O≥nPro˚ssTokí
(
	`GëCuºítPro˚ss
(), 
TOKEN_QUERY
, &
hTokí
);

90 i‡(
ok
) {

91 
ok
 = 
	`LookupPrivûegeVÆue
(
NULL
, 
SE_CREATE_GLOBAL_NAME
, &
¥iv_id
);

94 i‡(
ok
) {

95 
¥ivs
.
PrivûegeCou¡
 = 1;

96 
¥ivs
.
C⁄åﬁ
 = 
PRIVILEGE_SET_ALL_NECESSARY
;

97 
¥ivs
.
Privûege
[0].
Luid
 = 
¥iv_id
;

98 
¥ivs
.
Privûege
[0].
Aâribuãs
 = 
SE_PRIVILEGE_ENABLED
;

99 
ok
 = 
	`PrivûegeCheck
(
hTokí
, &
¥ivs
, &
has_¥iv
);

102 i‡(
ok
 && !
has_¥iv
) {

108 
	}
}

111 
	$ˇn_¸óã_globÆ_m≠s
()

114 
	}
}

117 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã_ex
(
≠r_shm_t
 **
m
,

118 
≠r_size_t
 
ªqsize
,

119 c⁄° *
fûe
,

120 
≠r_poﬁ_t
 *
poﬁ
,

121 
≠r_öt32_t
 
Êags
)

123 
≠r_size_t
 
memblock
 = 0;

124 
HANDLE
 
hM≠
, 
hFûe
;

125 
≠r_°©us_t
 
rv
;

126 
≠r_size_t
 
size
;

127 
≠r_fûe_t
 *
f
;

128 *
ba£
;

129 *
m≠key
;

130 
DWORD
 
îr
, 
sizño
, 
sizehi
;

132 
ªqsize
 +(
memblock_t
);

134 i‡(!
memblock
)

136 
SYSTEM_INFO
 
si
;

137 
	`GëSy°emInfo
(&
si
);

138 
memblock
 = 
si
.
dwAŒoˇti⁄Gønuœrôy
;

142 
size
 = 
memblock
 * (1 + (
ªqsize
 - 1) / memblock);

143 
sizño
 = (
DWORD
)
size
;

144 #ifde‡
_WIN64


145 
sizehi
 = (
DWORD
)(
size
 >> 32);

147 
sizehi
 = 0;

150 i‡(!
fûe
) {

152 #i‚de‡
_WIN32_WCE


153 
hFûe
 = 
INVALID_HANDLE_VALUE
;

155 
m≠key
 = 
NULL
;

158 
globÆ
;

165 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
fûe
,

166 
APR_READ
 | 
APR_WRITE
 | 
APR_BINARY
 | 
APR_CREATE
,

167 
APR_UREAD
 | 
APR_UWRITE
, 
poﬁ
);

168 i‡((
rv
 !
APR_SUCCESS
)

169 || ((
rv
 = 
	`≠r_os_fûe_gë
(&
hFûe
, 
f
)Ë!
APR_SUCCESS
)) {

170  
rv
;

172 
rv
 = 
	`≠r_fûe_åunc
(
f
, 
size
);

178 i‡(
Êags
 & 
APR_SHM_NS_GLOBAL
) {

179 
globÆ
 = 1;

181 i‡(
Êags
 & 
APR_SHM_NS_LOCAL
) {

182 
globÆ
 = 0;

185 
globÆ
 = 
	`ˇn_¸óã_globÆ_m≠s
();

187 
m≠key
 = 
	`ªs_«me_‰om_fûíame
(
fûe
, 
globÆ
, 
poﬁ
);

190 #i‡
APR_HAS_UNICODE_FS


191 
IF_WIN_OS_IS_UNICODE


193 
hM≠
 = 
	`Cª©eFûeM≠pögW
(
hFûe
, 
NULL
, 
PAGE_READWRITE
,

194 
sizehi
, 
sizño
, 
m≠key
);

197 #i‡
APR_HAS_ANSI_FS


198 
ELSE_WIN_OS_IS_ANSI


200 
hM≠
 = 
	`Cª©eFûeM≠pögA
(
hFûe
, 
NULL
, 
PAGE_READWRITE
,

201 
sizehi
, 
sizño
, 
m≠key
);

204 
îr
 = 
	`≠r_gë_os_îr‹
();

206 i‡(
fûe
) {

207 
	`≠r_fûe_˛o£
(
f
);

210 i‡(
hM≠
 && 
	`APR_STATUS_IS_EEXIST
(
îr
)) {

211 
	`Clo£H™dÀ
(
hM≠
);

212  
APR_EEXIST
;

214 i‡(!
hM≠
) {

215  
îr
;

218 
ba£
 = 
	`M≠VõwOfFûe
(
hM≠
, 
FILE_MAP_READ
 | 
FILE_MAP_WRITE
,

219 0, 0, 
size
);

220 i‡(!
ba£
) {

221 
	`Clo£H™dÀ
(
hM≠
);

222  
	`≠r_gë_os_îr‹
();

225 *
m
 = (
≠r_shm_t
 *Ë
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

226 (*
m
)->
poﬁ
 =Öool;

227 (*
m
)->
hM≠
 = hMap;

228 (*
m
)->
memblk
 = 
ba£
;

229 (*
m
)->
size
 = size;

231 (*
m
)->
u§mem
 = (*)
ba£
 + (
memblock_t
);

232 (*
m
)->
Àngth
 = 
ªqsize
 - (
memblock_t
);;

234 (*
m
)->
memblk
->
Àngth
 = (*m)->length;

235 (*
m
)->
memblk
->
size
 = (*m)->size;

236 (*
m
)->
fûíame
 = 
fûe
 ? 
	`≠r_p°rdup
(
poﬁ
, fûeË: 
NULL
;

238 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
m
)->
poﬁ
, *m,

239 
shm_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

240  
APR_SUCCESS
;

241 
	}
}

243 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_¸óã
(
≠r_shm_t
 **
m
,

244 
≠r_size_t
 
ªqsize
,

245 c⁄° *
fûe
,

246 
≠r_poﬁ_t
 *
poﬁ
)

248  
	`≠r_shm_¸óã_ex
(
m
, 
ªqsize
, 
fûe
, 
poﬁ
, 0);

249 
	}
}

251 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_de°roy
(
≠r_shm_t
 *
m
)

253 
≠r_°©us_t
 
rv
 = 
	`shm_˛ónup
(
m
);

254 
	`≠r_poﬁ_˛ónup_kûl
(
m
->
poﬁ
, m, 
shm_˛ónup
);

255  
rv
;

256 
	}
}

258 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_ªmove
(c⁄° *
fûíame
,

259 
≠r_poﬁ_t
 *
poﬁ
)

261  
	`≠r_fûe_ªmove
(
fûíame
, 
poﬁ
);

262 
	}
}

264 
≠r_°©us_t
 
	$shm_©èch_öã∫Æ
(
≠r_shm_t
 **
m
,

265 c⁄° *
fûe
,

266 
≠r_poﬁ_t
 *
poﬁ
,

267 
globÆ
)

269 
HANDLE
 
hM≠
;

270 *
m≠key
;

271 *
ba£
;

277 
m≠key
 = 
	`ªs_«me_‰om_fûíame
(
fûe
, 
globÆ
, 
poﬁ
);

279 #i‡
APR_HAS_UNICODE_FS


280 
IF_WIN_OS_IS_UNICODE


282 #i‚de‡
_WIN32_WCE


283 
hM≠
 = 
	`O≥nFûeM≠pögW
(
FILE_MAP_READ
 | 
FILE_MAP_WRITE
, 
FALSE
, 
m≠key
);

288 
hM≠
 = 
	`Cª©eFûeM≠pögW
(
INVALID_HANDLE_VALUE
, 
NULL
,

289 
PAGE_READWRITE
, 0, (
≠r_shm_t
), 
m≠key
);

293 #i‡
APR_HAS_ANSI_FS


294 
ELSE_WIN_OS_IS_ANSI


296 
hM≠
 = 
	`O≥nFûeM≠pögA
(
FILE_MAP_READ
 | 
FILE_MAP_WRITE
, 
FALSE
, 
m≠key
);

300 i‡(!
hM≠
) {

301  
	`≠r_gë_os_îr‹
();

304 
ba£
 = 
	`M≠VõwOfFûe
(
hM≠
, 
FILE_MAP_READ
 | 
FILE_MAP_WRITE
, 0, 0, 0);

305 i‡(!
ba£
) {

306 
	`Clo£H™dÀ
(
hM≠
);

307  
	`≠r_gë_os_îr‹
();

310 *
m
 = (
≠r_shm_t
 *Ë
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

311 (*
m
)->
poﬁ
 =Öool;

312 (*
m
)->
memblk
 = 
ba£
;

314 (*
m
)->
size
 = (*m)->
memblk
->size;

315 #i‡
_WIN32_WCE


317 
	`Unm≠VõwOfFûe
(
ba£
);

318 
	`Clo£H™dÀ
(
hM≠
);

320 
hM≠
 = 
	`Cª©eFûeM≠pögW
(
INVALID_HANDLE_VALUE
, 
NULL
,

321 
PAGE_READWRITE
, 0, (*
m
)->
size
, 
m≠key
);

322 i‡(!
hM≠
) {

323  
	`≠r_gë_os_îr‹
();

325 
ba£
 = 
	`M≠VõwOfFûe
(
hM≠
, 
FILE_MAP_READ
 | 
FILE_MAP_WRITE
, 0, 0, 0);

326 i‡(!
ba£
) {

327 
	`Clo£H™dÀ
(
hM≠
);

328  
	`≠r_gë_os_îr‹
();

331 (*
m
)->
hM≠
 = hMap;

332 (*
m
)->
Àngth
 = (*m)->
memblk
->length;

333 (*
m
)->
u§mem
 = (*)
ba£
 + (
memblock_t
);

334 (*
m
)->
fûíame
 = 
NULL
;

336 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
m
)->
poﬁ
, *m,

337 
shm_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

338  
APR_SUCCESS
;

339 
	}
}

341 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch_ex
(
≠r_shm_t
 **
m
,

342 c⁄° *
fûe
,

343 
≠r_poﬁ_t
 *
poﬁ
,

344 
≠r_öt32_t
 
Êags
)

346 
≠r_°©us_t
 
rv
;

347 
ˇn_¸óã_globÆ
;

348 
åy_globÆ_loˇl
[3] = {-1, -1, -1};

349 
cur
;

351 i‡(!
fûe
) {

352  
APR_EINVAL
;

355 i‡(
Êags
 & 
APR_SHM_NS_LOCAL
) {

356 
åy_globÆ_loˇl
[0] = 0;

358 i‡(
Êags
 & 
APR_SHM_NS_GLOBAL
) {

359 
åy_globÆ_loˇl
[0] = 1;

362 
ˇn_¸óã_globÆ
 = 
	`ˇn_¸óã_globÆ_m≠s
();

363 i‡(!
ˇn_¸óã_globÆ
) {

364 
åy_globÆ_loˇl
[0] = 0;

365 
åy_globÆ_loˇl
[1] = 1;

368 
åy_globÆ_loˇl
[0] = 1;

369 
åy_globÆ_loˇl
[1] = 0;

373 
cur
 = 0; 
åy_globÆ_loˇl
[cur] != -1; cur++) {

374 
rv
 = 
	`shm_©èch_öã∫Æ
(
m
, 
fûe
, 
poﬁ
, 
åy_globÆ_loˇl
[
cur
]);

375 i‡(!
	`APR_STATUS_IS_ENOENT
(
rv
)) {

380  
rv
;

381 
	}
}

383 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_©èch
(
≠r_shm_t
 **
m
,

384 c⁄° *
fûe
,

385 
≠r_poﬁ_t
 *
poﬁ
)

387  
	`≠r_shm_©èch_ex
(
m
, 
fûe
, 
poﬁ
, 0);

388 
	}
}

390 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_shm_dëach
(
≠r_shm_t
 *
m
)

392 
≠r_°©us_t
 
rv
 = 
	`shm_˛ónup
(
m
);

393 
	`≠r_poﬁ_˛ónup_kûl
(
m
->
poﬁ
, m, 
shm_˛ónup
);

394  
rv
;

395 
	}
}

397 
	$APR_DECLARE
(*Ë
	$≠r_shm_ba£addr_gë
(c⁄° 
≠r_shm_t
 *
m
)

399  
m
->
u§mem
;

400 
	}
}

402 
	$APR_DECLARE
(
≠r_size_t
Ë
	$≠r_shm_size_gë
(c⁄° 
≠r_shm_t
 *
m
)

404  
m
->
Àngth
;

405 
	}
}

407 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
shm
)

409 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_gë
(
≠r_os_shm_t
 *
osshm
,

410 
≠r_shm_t
 *
shm
)

412 *
osshm
 = 
shm
->
hM≠
;

413  
APR_SUCCESS
;

414 
	}
}

416 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_shm_put
(
≠r_shm_t
 **
m
,

417 
≠r_os_shm_t
 *
osshm
,

418 
≠r_poﬁ_t
 *
poﬁ
)

420 * 
ba£
;

421 
ba£
 = 
	`M≠VõwOfFûe
(*
osshm
, 
FILE_MAP_READ
 | 
FILE_MAP_WRITE
, 0, 0, 0);

422 i‡(!
ba£
) {

423  
	`≠r_gë_os_îr‹
();

426 *
m
 = (
≠r_shm_t
 *Ë
	`≠r_∑Œoc
(
poﬁ
, (apr_shm_t));

427 (*
m
)->
poﬁ
 =Öool;

428 (*
m
)->
hM≠
 = *
osshm
;

429 (*
m
)->
memblk
 = 
ba£
;

430 (*
m
)->
u§mem
 = (*)
ba£
 + (
memblock_t
);

432 (*
m
)->
size
 = (*m)->
memblk
->size;

433 (*
m
)->
Àngth
 = (*m)->
memblk
->length;

434 (*
m
)->
fûíame
 = 
NULL
;

436 
	`≠r_poﬁ_˛ónup_ªgi°î
((*
m
)->
poﬁ
, *m,

437 
shm_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

438  
APR_SUCCESS
;

439 
	}
}

	@strings/apr_cpystrn.c

17 
	~"≠r.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_lib.h
"

22 #i‡
APR_HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

25 #i‡
APR_HAVE_STRING_H


26 
	~<°rög.h
>

28 #i‡
APR_HAVE_CTYPE_H


29 
	~<˘y≥.h
>

46 
	$APR_DECLARE
(*Ë
	$≠r_˝y°∫
(*
d°
, c⁄° *
§c
, 
≠r_size_t
 
d°_size
)

49 *
d
 = 
d°
, *
íd
;

51 i‡(
d°_size
 == 0) {

52  (
d°
);

55 i‡(
§c
) {

56 
íd
 = 
d°
 + 
d°_size
 - 1;

58 ; 
d
 < 
íd
; ++d, ++
§c
) {

59 i‡(!(*
d
 = *
§c
)) {

60  (
d
);

65 *
d
 = '\0';

67  (
d
);

68 
	}
}

87 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_tokíize_to_¨gv
(c⁄° *
¨g_°r
,

88 ***
¨gv_out
,

89 
≠r_poﬁ_t
 *
tokí_c⁄ãxt
)

91 c⁄° *
˝
;

92 c⁄° *
˘
;

93 *
˛ó√d
, *
dúty
;

94 
esˇ≥d
;

95 
isquŸed
, 
num¨gs
 = 0, 
¨gnum
;

97 
	#SKIP_WHITESPACE
(
˝
) \

98  ; *
˝
 == ' ' || *cp == '\t'; ) { \

99 
˝
++; \

100 };

	)

102 
	#CHECK_QUOTATION
(
˝
,
isquŸed
) \

103 
isquŸed
 = 0; \

104 i‡(*
˝
 == '"') { \

105 
isquŸed
 = 1; \

106 
˝
++; \

108 i‡(*
˝
 == '\'') { \

109 
isquŸed
 = 2; \

110 
˝
++; \

111 }

	)

117 
	#DETERMINE_NEXTSTRING
(
˝
,
isquŸed
) \

118  ; *
˝
 != '\0'; cp++) { \

119 i‡–(*
˝
 == '\\' && (*(cp+1) == ' ' || *(cp+1) == '\t' || \

120 *(
˝
+1) == '"' || *(cp+1) == '\''))) { \

121 
˝
++; \

124 i‡–(!
isquŸed
 && (*
˝
 == ' ' || *cp == '\t')) \

125 || (
isquŸed
 =1 && *
˝
 == '"') \

126 || (
isquŸed
 =2 && *
˝
 == '\'') ) { \

129 }

	)

135 
	#REMOVE_ESCAPE_CHARS
(
˛ó√d
, 
dúty
, 
esˇ≥d
) \

136 
esˇ≥d
 = 0; \

137 *
dúty
) { \

138 i‡(!
esˇ≥d
 && *
dúty
 == '\\') { \

139 
esˇ≥d
 = 1; \

142 
esˇ≥d
 = 0; \

143 *
˛ó√d
++ = *
dúty
; \

145 ++
dúty
; \

147 *
˛ó√d
 = 0;

	)

149 
˝
 = 
¨g_°r
;

150 
	`SKIP_WHITESPACE
(
˝
);

151 
˘
 = 
˝
;

159 
num¨gs
 = 1;

160 *
˘
 != '\0') {

161 
	`CHECK_QUOTATION
(
˘
, 
isquŸed
);

162 
	`DETERMINE_NEXTSTRING
(
˘
, 
isquŸed
);

163 i‡(*
˘
 != '\0') {

164 
˘
++;

166 
num¨gs
++;

167 
	`SKIP_WHITESPACE
(
˘
);

169 *
¨gv_out
 = 
	`≠r_∑Œoc
(
tokí_c⁄ãxt
, 
num¨gs
 * (*));

172 
¨gnum
 = 0;árgnum < (
num¨gs
-1);árgnum++) {

173 
	`SKIP_WHITESPACE
(
˝
);

174 
	`CHECK_QUOTATION
(
˝
, 
isquŸed
);

175 
˘
 = 
˝
;

176 
	`DETERMINE_NEXTSTRING
(
˝
, 
isquŸed
);

177 
˝
++;

178 (*
¨gv_out
)[
¨gnum
] = 
	`≠r_∑Œoc
(
tokí_c⁄ãxt
, 
˝
 - 
˘
);

179 
	`≠r_˝y°∫
((*
¨gv_out
)[
¨gnum
], 
˘
, 
˝
 - ct);

180 
˛ó√d
 = 
dúty
 = (*
¨gv_out
)[
¨gnum
];

181 
	`REMOVE_ESCAPE_CHARS
(
˛ó√d
, 
dúty
, 
esˇ≥d
);

183 (*
¨gv_out
)[
¨gnum
] = 
NULL
;

185  
APR_SUCCESS
;

186 
	}
}

198 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_fûï©h_«me_gë
(c⁄° *
∑th«me
)

200 c⁄° 
∑th_£∑øt‹
 = '/';

201 c⁄° *
s
 = 
	`°ºchr
(
∑th«me
, 
∑th_£∑øt‹
);

203 #ifde‡
WIN32


204 c⁄° 
∑th_£∑øt‹_wö
 = '\\';

205 c⁄° 
drive_£∑øt‹_wö
 = ':';

206 c⁄° *
s2
 = 
	`°ºchr
(
∑th«me
, 
∑th_£∑øt‹_wö
);

208 i‡(
s2
 > 
s
) s = s2;

210 i‡(!
s
Ë†
	`°ºchr
(
∑th«me
, 
drive_£∑øt‹_wö
);

213  
s
 ? ++†: 
∑th«me
;

214 
	}
}

220 
	$APR_DECLARE
(*Ë
	$≠r_cﬁœp£_•a˚s
(*
de°
, c⁄° *
§c
)

222 *
§c
) {

223 i‡(!
	`≠r_is•a˚
(*
§c
))

224 *
de°
++ = *
§c
;

225 ++
§c
;

227 *
de°
 = 0;

228  (
de°
);

229 
	}
}

231 #i‡!
APR_HAVE_STRDUP


232 *
	$°rdup
(c⁄° *
°r
)

234 *
sdup
;

235 
size_t
 
Àn
 = 
	`°æí
(
°r
) + 1;

237 
sdup
 = (*Ë
	`mÆloc
(
Àn
);

238 
	`mem˝y
(
sdup
, 
°r
, 
Àn
);

240  
sdup
;

241 
	}
}

245 #i‡(!
APR_HAVE_STRCASECMP
 && !
APR_HAVE_STRICMP
)

246 
	$°rˇ£cmp
(c⁄° *
a
, c⁄° *
b
)

248 c⁄° *
p
 = 
a
;

249 c⁄° *
q
 = 
b
;

250 
p
 = 
a
, 
q
 = 
b
; *p && *q;Ö++, q++) {

251 
diff
 = 
	`≠r_tﬁowî
(*
p
Ë-á¥_tﬁowî(*
q
);

252 i‡(
diff
)

253  
diff
;

255 i‡(*
p
)

257 i‡(*
q
)

260 
	}
}

264 #i‡(!
APR_HAVE_STRNCASECMP
 && !
APR_HAVE_STRNICMP
)

265 
	$°∫ˇ£cmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
n
)

267 c⁄° *
p
 = 
a
;

268 c⁄° *
q
 = 
b
;

270 
p
 = 
a
, 
q
 = 
b
; ;Ö++, q++) {

271 
diff
;

272 i‡(
p
 =
a
 + 
n
)

274 i‡(!(*
p
 && *
q
))

275  *
p
 - *
q
;

276 
diff
 = 
	`≠r_tﬁowî
(*
p
Ë-á¥_tﬁowî(*
q
);

277 i‡(
diff
)

278  
diff
;

281 
	}
}

285 #i‡(!
APR_HAVE_STRSTR
)

286 *
	$°r°r
(*
s1
, *
s2
)

288 *
p1
, *
p2
;

289 i‡(*
s2
 == '\0') {

291 (
s1
);

293 (
s1
 = 
	`°rchr
(s1, *
s2
)Ë!
NULL
) {

295 
p1
 = 
s1
;

296 
p2
 = 
s2
;

297 *++
p1
 =*++
p2
) {

298 i‡(*
p1
 == '\0') {

300 (
s1
);

303 i‡(*
p2
 == '\0') {

308 
s1
++;

310 (
s1
);

311 
	}
}

	@strings/apr_fnmatch.c

56 
	~"≠r_fûe_öfo.h
"

57 
	~"≠r_‚m©ch.h
"

58 
	~"≠r_èbÀs.h
"

59 
	~"≠r_lib.h
"

60 
	~"≠r_°rögs.h
"

61 
	~<°rög.h
>

62 #i‡
APR_HAVE_CTYPE_H


63 
	~<˘y≥.h
>

74 
APR_INLINE
 
	$‚m©ch_ch
(c⁄° **
∑âîn
, c⁄° **
°rög
, 
Êags
)

76 c⁄° * c⁄° 
mism©ch
 = *
∑âîn
;

77 c⁄° 
noˇ£
 = !!(
Êags
 & 
APR_FNM_CASE_BLIND
);

78 c⁄° 
esˇ≥
 = !(
Êags
 & 
APR_FNM_NOESCAPE
);

79 c⁄° 
¶ash
 = !!(
Êags
 & 
APR_FNM_PATHNAME
);

80 
ªsu…
 = 
APR_FNM_NOMATCH
;

81 c⁄° *
°¨tch
;

82 
√g©e
;

84 i‡(**
∑âîn
 == '[')

86 ++*
∑âîn
;

89 
√g©e
 = ((**
∑âîn
 == '!') || (**pattern == '^'));

90 i‡(
√g©e
)

91 ++*
∑âîn
;

94 i‡(**
∑âîn
 == ']')

95 
Àadög˛o£bø˚
;

97 **
∑âîn
)

99 i‡(**
∑âîn
 == ']') {

100 ++*
∑âîn
;

102 ++*
°rög
;

103  (
ªsu…
 ^ 
√g©e
);

106 i‡(
esˇ≥
 && (**
∑âîn
 == '\\')) {

107 ++*
∑âîn
;

110 i‡(!**
∑âîn
)

115 i‡(
¶ash
 && (**
∑âîn
 == '/'))

118 
Àadög˛o£bø˚
:

123 i‡(((*
∑âîn
)[1] == '-') && ((*pattern)[2] != ']'))

125 
°¨tch
 = *
∑âîn
;

126 *
∑âîn
 +(
esˇ≥
 && ((*pattern)[2] == '\\')) ? 3 : 2;

132 i‡(!**
∑âîn
 || (
¶ash
 && (**pattern == '/')))

136 i‡((**
°rög
 >*
°¨tch
Ë&& (**°rög <**
∑âîn
))

137 
ªsu…
 = 0;

138 i‡(
noˇ£
 && (
	`isuµî
(**
°rög
Ë|| isuµî(*
°¨tch
)

139 || 
	`isuµî
(**
∑âîn
))

140 && (
	`tﬁowî
(**
°rög
Ë>tﬁowî(*
°¨tch
))

141 && (
	`tﬁowî
(**
°rög
Ë<tﬁowî(**
∑âîn
)))

142 
ªsu…
 = 0;

144 ++*
∑âîn
;

149 i‡((**
°rög
 =**
∑âîn
))

150 
ªsu…
 = 0;

151 i‡(
noˇ£
 && (
	`isuµî
(**
°rög
Ë|| isuµî(**
∑âîn
))

152 && (
	`tﬁowî
(**
°rög
Ë=tﬁowî(**
∑âîn
)))

153 
ªsu…
 = 0;

155 ++*
∑âîn
;

161 *
∑âîn
 = 
mism©ch
;

162 
ªsu…
 = 
APR_FNM_NOMATCH
;

164 i‡(**
∑âîn
 == '?') {

166 i‡(!**
°rög
 || (
¶ash
 && (**string == '/')))

167  
APR_FNM_NOMATCH
;

168 
ªsu…
 = 0;

169 
‚m©ch_ch_suc˚ss
;

171 i‡(
esˇ≥
 && (**
∑âîn
 == '\\') && (*pattern)[1]) {

172 ++*
∑âîn
;

176 i‡(**
°rög
 =**
∑âîn
)

177 
ªsu…
 = 0;

178 i‡(
noˇ£
 && (
	`isuµî
(**
°rög
Ë|| isuµî(**
∑âîn
))

179 && (
	`tﬁowî
(**
°rög
Ë=tﬁowî(**
∑âîn
)))

180 
ªsu…
 = 0;

184 i‡(!**
°rög
 || !**
∑âîn
 || (
¶ash
 && ((**string == '/') || (**pattern == '/'))))

185  
ªsu…
;

187 
‚m©ch_ch_suc˚ss
:

188 ++*
∑âîn
;

189 ++*
°rög
;

190  
ªsu…
;

191 
	}
}

194 
	$APR_DECLARE
(Ë
	$≠r_‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
)

196 c⁄° 
dummy°rög
[2] = {' ', 0};

197 c⁄° 
esˇ≥
 = !(
Êags
 & 
APR_FNM_NOESCAPE
);

198 c⁄° 
¶ash
 = !!(
Êags
 & 
APR_FNM_PATHNAME
);

199 c⁄° *
°ªnd£g
;

200 c⁄° *
dummy±r
;

201 c⁄° *
m©ch±r
;

202 
wûd
;

206 c⁄° *
°r°¨t£g
 = 
NULL
;

207 c⁄° *
mism©ch
 = 
NULL
;

208 
m©chÀn
 = 0;

210 i‡(*
∑âîn
 == '*')

211 
fú°£gmít
;

213 *
∑âîn
 && *
°rög
)

218 i‡(
¶ash
 && 
esˇ≥
 && (*
∑âîn
 == '\\') && (pattern[1] == '/'))

219 ++
∑âîn
;

220 i‡(
¶ash
 && (*
∑âîn
 ='/'Ë&& (*
°rög
 == '/')) {

221 ++
∑âîn
;

222 ++
°rög
;

225 
fú°£gmít
:

228 i‡((
Êags
 & 
APR_FNM_PERIOD
Ë&& (*
°rög
 == '.'))

230 i‡(*
∑âîn
 == '.')

231 ++
∑âîn
;

232 i‡(
esˇ≥
 && (*
∑âîn
 == '\\') && (pattern[1] == '.'))

233 
∑âîn
 += 2;

235  
APR_FNM_NOMATCH
;

236 ++
°rög
;

243 i‡(
¶ash
) {

244 
°ªnd£g
 = 
	`°rchr
(
°rög
, '/');

245 i‡(!
°ªnd£g
)

246 
°ªnd£g
 = 
	`°rchr
(
°rög
, '\0');

249 
°ªnd£g
 = 
	`°rchr
(
°rög
, '\0');

254 *
∑âîn
)

256 i‡((
°rög
 > 
°ªnd£g
)

257 || ((
°rög
 =
°ªnd£g
Ë&& (*
∑âîn
 != '*')))

260 i‡(
¶ash
 && ((*
∑âîn
 == '/')

261 || (
esˇ≥
 && (*
∑âîn
 == '\\')

262 && (
∑âîn
[1] == '/'))))

268 
wûd
 = 0; ((*
∑âîn
 == '*') || (*pattern == '?')); ++pattern)

270 i‡(*
∑âîn
 == '*') {

271 
wûd
 = 1;

273 i‡(
°rög
 < 
°ªnd£g
) {

275 ++
°rög
;

278  
APR_FNM_NOMATCH
;

282 i‡(
wûd
)

284 
°r°¨t£g
 = 
°rög
;

285 
mism©ch
 = 
∑âîn
;

290 
m©ch±r
 = 
∑âîn
, 
m©chÀn
 = 0; 1; ++matchlen)

292 i‡((*
m©ch±r
 == '\0')

293 || (
¶ash
 && ((*
m©ch±r
 == '/')

294 || (
esˇ≥
 && (*
m©ch±r
 == '\\')

295 && (
m©ch±r
[1] == '/')))))

301 i‡(
°rög
 + 
m©chÀn
 > 
°ªnd£g
)

302  
APR_FNM_NOMATCH
;

304 
°rög
 = 
°ªnd£g
 - 
m©chÀn
;

305 
wûd
 = 0;

309 i‡(*
m©ch±r
 == '*')

315 i‡(
°rög
 + 
m©chÀn
 > 
°ªnd£g
)

316  
APR_FNM_NOMATCH
;

326 i‡(
esˇ≥
 && (*
m©ch±r
 == '\\') && matchptr[1]) {

327 
m©ch±r
 += 2;

329 i‡(*
m©ch±r
 == '[') {

330 
dummy±r
 = 
dummy°rög
;

331 
	`‚m©ch_ch
(&
m©ch±r
, &
dummy±r
, 
Êags
);

334 ++
m©ch±r
;

341 *
∑âîn
 && (
°rög
 < 
°ªnd£g
))

345 i‡(*
∑âîn
 == '*')

348 i‡(
¶ash
 && ((*
°rög
 == '/')

349 || (*
∑âîn
 == '/')

350 || (
esˇ≥
 && (*
∑âîn
 == '\\')

351 && (
∑âîn
[1] == '/'))))

357 i‡(!
	`‚m©ch_ch
(&
∑âîn
, &
°rög
, 
Êags
))

363 i‡(
wûd
) {

365 
°rög
 = ++
°r°¨t£g
;

366 i‡(
°rög
 + 
m©chÀn
 > 
°ªnd£g
)

367  
APR_FNM_NOMATCH
;

369 
∑âîn
 = 
mism©ch
;

373  
APR_FNM_NOMATCH
;

377 i‡(*
°rög
 && !(
¶ash
 && (*string == '/')))

378  
APR_FNM_NOMATCH
;

380 i‡(*
∑âîn
 && !(
¶ash
 && ((*pattern == '/')

381 || (
esˇ≥
 && (*
∑âîn
 == '\\')

382 && (
∑âîn
[1] == '/')))))

383  
APR_FNM_NOMATCH
;

388 i‡(!*
°rög
 && !*
∑âîn
)

392  
APR_FNM_NOMATCH
;

393 
	}
}

405 
	$APR_DECLARE
(Ë
	$≠r_‚m©ch_ã°
(c⁄° *
∑âîn
)

407 
√°ög
;

409 
√°ög
 = 0;

410 *
∑âîn
) {

411 *
∑âîn
) {

417 i‡(*++
∑âîn
 == '\0') {

423 ++
√°ög
;

427 i‡(
√°ög
) {

432 ++
∑âîn
; }

434 
	}
}

438 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_m©ch_glob
(c⁄° *
∑âîn
,

439 
≠r_¨øy_hódî_t
 **
ªsu…
,

440 
≠r_poﬁ_t
 *
p
)

442 
≠r_dú_t
 *
dú
;

443 
≠r_föfo_t
 
föfo
;

444 
≠r_°©us_t
 
rv
;

445 *
∑th
;

456 *
idx
 = 
	`°ºchr
(
∑âîn
, '/');

458 i‡(
idx
 =
NULL
) {

459 
idx
 = 
	`°ºchr
(
∑âîn
, '\\');

461 i‡(
idx
 =
NULL
) {

462 
∑th
 = ".";

465 
∑th
 = 
	`≠r_p°∫dup
(
p
, 
∑âîn
, 
idx
 -Öattern);

466 
∑âîn
 = 
idx
 + 1;

469 *
ªsu…
 = 
	`≠r_¨øy_make
(
p
, 0, (*));

470 
rv
 = 
	`≠r_dú_›í
(&
dú
, 
∑th
, 
p
);

471 i‡(
rv
 !
APR_SUCCESS
) {

472  
rv
;

475 
	`≠r_dú_ªad
(&
föfo
, 
APR_FINFO_NAME
, 
dú
Ë=
APR_SUCCESS
) {

476 i‡(
	`≠r_‚m©ch
(
∑âîn
, 
föfo
.
«me
, 0Ë=
APR_SUCCESS
) {

477 *(c⁄° **)
	`≠r_¨øy_push
(*
ªsu…
Ë
	`≠r_p°rdup
(
p
, 
föfo
.
«me
);

480 
	`≠r_dú_˛o£
(
dú
);

481  
APR_SUCCESS
;

482 
	}
}

	@strings/apr_snprintf.c

17 
	~"≠r.h
"

18 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_√tw‹k_io.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~"≠r_î∫o.h
"

25 
	~<m©h.h
>

26 #i‡
APR_HAVE_CTYPE_H


27 
	~<˘y≥.h
>

29 #i‡
APR_HAVE_NETINET_IN_H


30 
	~<√töë/ö.h
>

32 #i‡
APR_HAVE_SYS_SOCKET_H


33 
	~<sys/sockë.h
>

35 #i‡
APR_HAVE_ARPA_INET_H


36 
	~<¨∑/öë.h
>

38 #i‡
APR_HAVE_LIMITS_H


39 
	~<limôs.h
>

41 #i‡
APR_HAVE_STRING_H


42 
	~<°rög.h
>

46 
	mNO
 = 0, 
	mYES
 = 1

47 } 
	tboﬁón_e
;

49 #i‚de‡
FALSE


50 
	#FALSE
 0

	)

52 #i‚de‡
TRUE


53 
	#TRUE
 1

	)

55 
	#NUL
 '\0'

	)

57 c⁄° 
	gnuŒ_°rög
[] = "(null)";

58 
	#S_NULL
 ((*)
nuŒ_°rög
)

	)

59 
	#S_NULL_LEN
 6

	)

61 
	#FLOAT_DIGITS
 6

	)

62 
	#EXPONENT_LENGTH
 10

	)

69 
	#NUM_BUF_SIZE
 512

	)

83 
	#NDIG
 80

	)

86 *
	$≠r_cvt
(
¨g
, 
ndigôs
, *
de˝t
, *
sign
,

87 
eÊag
, *
buf
)

89 
r2
;

90 
fi
, 
fj
;

91 *
p
, *
p1
;

93 i‡(
ndigôs
 >
NDIG
 - 1)

94 
ndigôs
 = 
NDIG
 - 2;

95 
r2
 = 0;

96 *
sign
 = 0;

97 
p
 = &
buf
[0];

98 i‡(
¨g
 < 0) {

99 *
sign
 = 1;

100 
¨g
 = -arg;

102 
¨g
 = 
	`modf
◊rg, &
fi
);

103 
p1
 = &
buf
[
NDIG
];

107 i‡(
fi
 != 0) {

108 
p1
 = &
buf
[
NDIG
];

109 
p1
 > &
buf
[0] && 
fi
 != 0) {

110 
fj
 = 
	`modf
(
fi
 / 10, &fi);

111 *--
p1
 = (Ë((
fj
 + .03) * 10) + '0';

112 
r2
++;

114 
p1
 < &
buf
[
NDIG
])

115 *
p
++ = *
p1
++;

117 i‡(
¨g
 > 0) {

118 (
fj
 = 
¨g
 * 10) < 1) {

119 
¨g
 = 
fj
;

120 
r2
--;

123 
p1
 = &
buf
[
ndigôs
];

124 i‡(
eÊag
 == 0)

125 
p1
 +
r2
;

126 i‡(
p1
 < &
buf
[0]) {

127 *
de˝t
 = -
ndigôs
;

128 
buf
[0] = '\0';

129  (
buf
);

131 *
de˝t
 = 
r2
;

132 
p
 <
p1
 &&Ö < &
buf
[
NDIG
]) {

133 
¨g
 *= 10;

134 
¨g
 = 
	`modf
◊rg, &
fj
);

135 *
p
++ = (Ë
fj
 + '0';

137 i‡(
p1
 >&
buf
[
NDIG
]) {

138 
buf
[
NDIG
 - 1] = '\0';

139  (
buf
);

141 
p
 = 
p1
;

142 *
p1
 += 5;

143 *
p1
 > '9') {

144 *
p1
 = '0';

145 i‡(
p1
 > 
buf
)

146 ++ * --
p1
;

148 *
p1
 = '1';

149 (*
de˝t
)++;

150 i‡(
eÊag
 == 0) {

151 i‡(
p
 > 
buf
)

152 *
p
 = '0';

153 
p
++;

157 *
p
 = '\0';

158  (
buf
);

159 
	}
}

161 *
	$≠r_ecvt
(
¨g
, 
ndigôs
, *
de˝t
, *
sign
, *
buf
)

163  (
	`≠r_cvt
(
¨g
, 
ndigôs
, 
de˝t
, 
sign
, 1, 
buf
));

164 
	}
}

166 *
	$≠r_fcvt
(
¨g
, 
ndigôs
, *
de˝t
, *
sign
, *
buf
)

168  (
	`≠r_cvt
(
¨g
, 
ndigôs
, 
de˝t
, 
sign
, 0, 
buf
));

169 
	}
}

176 *
	$≠r_gcvt
(
numbî
, 
ndigô
, *
buf
, 
boﬁón_e
 
Ætf‹m
)

178 
sign
, 
de˝t
;

179 *
p1
, *
p2
;

180 
i
;

181 
buf1
[
NDIG
];

183 
p1
 = 
	`≠r_ecvt
(
numbî
, 
ndigô
, &
de˝t
, &
sign
, 
buf1
);

184 
p2
 = 
buf
;

185 i‡(
sign
)

186 *
p2
++ = '-';

187 
i
 = 
ndigô
 - 1; i > 0 && 
p1
[i] == '0'; i--)

188 
ndigô
--;

189 i‡((
de˝t
 >0 && de˝à- 
ndigô
 > 4)

190 || (
de˝t
 < 0 && decpt < -3)) {

191 
de˝t
--;

192 *
p2
++ = *
p1
++;

193 *
p2
++ = '.';

194 
i
 = 1; i < 
ndigô
; i++)

195 *
p2
++ = *
p1
++;

196 *
p2
++ = 'e';

197 i‡(
de˝t
 < 0) {

198 
de˝t
 = -decpt;

199 *
p2
++ = '-';

202 *
p2
++ = '+';

203 i‡(
de˝t
 / 100 > 0)

204 *
p2
++ = 
de˝t
 / 100 + '0';

205 i‡(
de˝t
 / 10 > 0)

206 *
p2
++ = (
de˝t
 % 100) / 10 + '0';

207 *
p2
++ = 
de˝t
 % 10 + '0';

210 i‡(
de˝t
 <= 0) {

211 i‡(*
p1
 != '0')

212 *
p2
++ = '.';

213 
de˝t
 < 0) {

214 
de˝t
++;

215 *
p2
++ = '0';

218 
i
 = 1; i <
ndigô
; i++) {

219 *
p2
++ = *
p1
++;

220 i‡(
i
 =
de˝t
)

221 *
p2
++ = '.';

223 i‡(
ndigô
 < 
de˝t
) {

224 
ndigô
++ < 
de˝t
)

225 *
p2
++ = '0';

226 *
p2
++ = '.';

229 i‡(
p2
[-1] ='.' && !
Ætf‹m
)

230 
p2
--;

231 *
p2
 = '\0';

232  (
buf
);

233 
	}
}

245 
	#INS_CHAR
(
c
, 
•
, 
bï
, 
cc
) \

247 i‡(
•
) { \

248 i‡(
•
 >
bï
) { \

249 
vbuff
->
cuΩos
 = 
•
; \

250 i‡(
	`Êush_func
(
vbuff
)) \

252 
•
 = 
vbuff
->
cuΩos
; \

253 
bï
 = 
vbuff
->
ídpos
; \

255 *
•
++ = (
c
); \

257 
cc
++; \

258 }

	)

260 
	#NUM
(
c
Ë(¯- '0')

	)

262 
	#STR_TO_DEC
(
°r
, 
num
) \

263 
num
 = 
	`NUM
(*
°r
++); \

264 
	`≠r_isdigô
(*
°r
)) \

266 
num
 *= 10 ; \

267 
num
 +
	`NUM
(*
°r
++); \

268 }

	)

280 
	#FIX_PRECISION
(
adju°
, 
¥ecisi⁄
, 
s
, 
s_Àn
) \

281 i‡(
adju°
) { \

282 
≠r_size_t
 
p
 = (
¥ecisi⁄
 + 1 < 
NUM_BUF_SIZE
) \

283 ? 
¥ecisi⁄
 : 
NUM_BUF_SIZE
 - 1; \

284 
s_Àn
 < 
p
) \

286 *--
s
 = '0'; \

287 
s_Àn
++; \

289 }

	)

295 
	#PAD
(
width
, 
Àn
, 
ch
) \

298 
	`INS_CHAR
(
ch
, 
•
, 
bï
, 
cc
); \

299 
width
--; \

301 
width
 > 
Àn
)

	)

308 
	#PREFIX
(
°r
, 
Àngth
, 
ch
) \

309 *--
°r
 = 
ch
; \

310 
Àngth
++; \

311 
has_¥efix
=
YES
;

	)

330 *
	$c⁄v_10
(
≠r_öt32_t
 
num
, 
is_unsig√d
,

331 *
is_√g©ive
, *
buf_íd
,

332 
≠r_size_t
 *
Àn
)

334 *
p
 = 
buf_íd
;

335 
≠r_uöt32_t
 
magnôude
 = 
num
;

337 i‡(
is_unsig√d
) {

338 *
is_√g©ive
 = 
FALSE
;

341 *
is_√g©ive
 = (
num
 < 0);

352 i‡(*
is_√g©ive
) {

353 
≠r_öt32_t
 
t
 = 
num
 + 1;

354 
magnôude
 = ((
≠r_uöt32_t
Ë-
t
) + 1;

362 
≠r_uöt32_t
 
√w_magnôude
 = 
magnôude
 / 10;

364 *--
p
 = (Ë(
magnôude
 - 
√w_magnôude
 * 10 + '0');

365 
magnôude
 = 
√w_magnôude
;

367 
magnôude
);

369 *
Àn
 = 
buf_íd
 - 
p
;

370  (
p
);

371 
	}
}

373 *
	$c⁄v_10_quad
(
≠r_öt64_t
 
num
, 
is_unsig√d
,

374 *
is_√g©ive
, *
buf_íd
,

375 
≠r_size_t
 *
Àn
)

377 *
p
 = 
buf_íd
;

378 
≠r_uöt64_t
 
magnôude
 = 
num
;

385 i‡((
magnôude
 <
APR_UINT32_MAX
 && 
is_unsig√d
)

386 || (
num
 <
APR_INT32_MAX
 &&Çum >
APR_INT32_MIN
 && !
is_unsig√d
))

387 (
	`c⁄v_10
((
≠r_öt32_t
)
num
, 
is_unsig√d
, 
is_√g©ive
, 
buf_íd
, 
Àn
));

389 i‡(
is_unsig√d
) {

390 *
is_√g©ive
 = 
FALSE
;

393 *
is_√g©ive
 = (
num
 < 0);

404 i‡(*
is_√g©ive
) {

405 
≠r_öt64_t
 
t
 = 
num
 + 1;

406 
magnôude
 = ((
≠r_uöt64_t
Ë-
t
) + 1;

414 
≠r_uöt64_t
 
√w_magnôude
 = 
magnôude
 / 10;

416 *--
p
 = (Ë(
magnôude
 - 
√w_magnôude
 * 10 + '0');

417 
magnôude
 = 
√w_magnôude
;

419 
magnôude
);

421 *
Àn
 = 
buf_íd
 - 
p
;

422  (
p
);

423 
	}
}

425 *
	$c⁄v_ö_addr
(
ö_addr
 *
ü
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

427 
addr
 = 
	`¡ohl
(
ü
->
s_addr
);

428 *
p
 = 
buf_íd
;

429 
is_√g©ive
;

430 
≠r_size_t
 
sub_Àn
;

432 
p
 = 
	`c⁄v_10
((
addr
 & 0x000000FFË, 
TRUE
, &
is_√g©ive
,Ö, &
sub_Àn
);

433 *--
p
 = '.';

434 
p
 = 
	`c⁄v_10
((
addr
 & 0x0000FF00Ë>> 8, 
TRUE
, &
is_√g©ive
,Ö, &
sub_Àn
);

435 *--
p
 = '.';

436 
p
 = 
	`c⁄v_10
((
addr
 & 0x00FF0000Ë>> 16, 
TRUE
, &
is_√g©ive
,Ö, &
sub_Àn
);

437 *--
p
 = '.';

438 
p
 = 
	`c⁄v_10
((
addr
 & 0xFF000000Ë>> 24, 
TRUE
, &
is_√g©ive
,Ö, &
sub_Àn
);

440 *
Àn
 = 
buf_íd
 - 
p
;

441  (
p
);

442 
	}
}

447 *
	$c⁄v_≠r_sockaddr
(
≠r_sockaddr_t
 *
ß
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

449 *
p
 = 
buf_íd
;

450 
is_√g©ive
;

451 
≠r_size_t
 
sub_Àn
;

452 *
ùaddr_°r
;

454 
p
 = 
	`c⁄v_10
(
ß
->
p‹t
, 
TRUE
, &
is_√g©ive
,Ö, &
sub_Àn
);

455 *--
p
 = ':';

456 
ùaddr_°r
 = 
buf_íd
 - 
NUM_BUF_SIZE
;

457 i‡(
	`≠r_sockaddr_ù_gëbuf
(
ùaddr_°r
, 
ß
->
addr_°r_Àn
, sa)) {

460 *--
p
 = '?';

461 *
Àn
 = 
buf_íd
 - 
p
;

462  
p
;

464 
sub_Àn
 = 
	`°æí
(
ùaddr_°r
);

465 #i‡
APR_HAVE_IPV6


466 i‡(
ß
->
Ámûy
 =
APR_INET6
 &&

467 !
	`IN6_IS_ADDR_V4MAPPED
(&
ß
->ß.
sö6
.
sö6_addr
)) {

468 *(
p
 - 1) = ']';

469 
p
 -
sub_Àn
 + 2;

470 *
p
 = '[';

471 
	`mem˝y
(
p
 + 1, 
ùaddr_°r
, 
sub_Àn
);

476 
p
 -
sub_Àn
;

477 
	`mem˝y
(
p
, 
ùaddr_°r
, 
sub_Àn
);

480 *
Àn
 = 
buf_íd
 - 
p
;

481  (
p
);

482 
	}
}

486 #i‡
APR_HAS_THREADS


487 *
	$c⁄v_os_thªad_t
(
≠r_os_thªad_t
 *
tid
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

490 
≠r_os_thªad_t
 
tid
;

491 
≠r_uöt64_t
 
u64
;

492 
≠r_uöt32_t
 
u32
;

493 } 
u
;

494 
is_√g©ive
;

496 
u
.
tid
 = *tid;

497 (
u
.
tid
)) {

498 (
≠r_öt32_t
):

499  
	`c⁄v_10
(
u
.
u32
, 
TRUE
, &
is_√g©ive
, 
buf_íd
, 
Àn
);

500 (
≠r_öt64_t
):

501  
	`c⁄v_10_quad
(
u
.
u64
, 
TRUE
, &
is_√g©ive
, 
buf_íd
, 
Àn
);

504  
	`c⁄v_10
(0, 
TRUE
, &
is_√g©ive
, 
buf_íd
, 
Àn
);

506 
	}
}

517 *
	$c⁄v_Â
(
f‹m©
, 
num
,

518 
boﬁón_e
 
add_dp
, 
¥ecisi⁄
, *
is_√g©ive
,

519 *
buf
, 
≠r_size_t
 *
Àn
)

521 *
s
 = 
buf
;

522 *
p
;

523 
decimÆ_poöt
;

524 
buf1
[
NDIG
];

526 i‡(
f‹m©
 == 'f')

527 
p
 = 
	`≠r_fcvt
(
num
, 
¥ecisi⁄
, &
decimÆ_poöt
, 
is_√g©ive
, 
buf1
);

529 
p
 = 
	`≠r_ecvt
(
num
, 
¥ecisi⁄
 + 1, &
decimÆ_poöt
, 
is_√g©ive
, 
buf1
);

534 i‡(
	`≠r_ißÕha
(*
p
)) {

535 *
Àn
 = 
	`°æí
(
p
);

536 
	`mem˝y
(
buf
, 
p
, *
Àn
 + 1);

537 *
is_√g©ive
 = 
FALSE
;

538  (
buf
);

541 i‡(
f‹m©
 == 'f') {

542 i‡(
decimÆ_poöt
 <= 0) {

543 *
s
++ = '0';

544 i‡(
¥ecisi⁄
 > 0) {

545 *
s
++ = '.';

546 
decimÆ_poöt
++ < 0)

547 *
s
++ = '0';

549 i‡(
add_dp
)

550 *
s
++ = '.';

553 
decimÆ_poöt
-- > 0)

554 *
s
++ = *
p
++;

555 i‡(
¥ecisi⁄
 > 0 || 
add_dp
)

556 *
s
++ = '.';

560 *
s
++ = *
p
++;

561 i‡(
¥ecisi⁄
 > 0 || 
add_dp
)

562 *
s
++ = '.';

568 *
p
)

569 *
s
++ = *
p
++;

571 i‡(
f‹m©
 != 'f') {

572 
ãmp
[
EXPONENT_LENGTH
];

573 
≠r_size_t
 
t_Àn
;

574 
exp⁄ít_is_√g©ive
;

576 *
s
++ = 
f‹m©
;

577 
decimÆ_poöt
--;

578 i‡(
decimÆ_poöt
 != 0) {

579 
p
 = 
	`c⁄v_10
((
≠r_öt32_t
Ë
decimÆ_poöt
, 
FALSE
, &
exp⁄ít_is_√g©ive
,

580 &
ãmp
[
EXPONENT_LENGTH
], &
t_Àn
);

581 *
s
++ = 
exp⁄ít_is_√g©ive
 ? '-' : '+';

586 i‡(
t_Àn
 == 1)

587 *
s
++ = '0';

588 
t_Àn
--)

589 *
s
++ = *
p
++;

592 *
s
++ = '+';

593 *
s
++ = '0';

594 *
s
++ = '0';

598 *
Àn
 = 
s
 - 
buf
;

599  (
buf
);

600 
	}
}

616 *
	$c⁄v_p2
(
≠r_uöt32_t
 
num
, 
nbôs
,

617 
f‹m©
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

619 
mask
 = (1 << 
nbôs
) - 1;

620 *
p
 = 
buf_íd
;

621 c⁄° 
low_digôs
[] = "0123456789abcdef";

622 c⁄° 
uµî_digôs
[] = "0123456789ABCDEF";

623 c⁄° *
digôs
 = (
f‹m©
 ='X'Ë? 
uµî_digôs
 : 
low_digôs
;

626 *--
p
 = 
digôs
[
num
 & 
mask
];

627 
num
 >>
nbôs
;

629 
num
);

631 *
Àn
 = 
buf_íd
 - 
p
;

632  (
p
);

633 
	}
}

635 *
	$c⁄v_p2_quad
(
≠r_uöt64_t
 
num
, 
nbôs
,

636 
f‹m©
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

638 
mask
 = (1 << 
nbôs
) - 1;

639 *
p
 = 
buf_íd
;

640 c⁄° 
low_digôs
[] = "0123456789abcdef";

641 c⁄° 
uµî_digôs
[] = "0123456789ABCDEF";

642 c⁄° *
digôs
 = (
f‹m©
 ='X'Ë? 
uµî_digôs
 : 
low_digôs
;

644 i‡(
num
 <
APR_UINT32_MAX
)

645 (
	`c⁄v_p2
((
≠r_uöt32_t
)
num
, 
nbôs
, 
f‹m©
, 
buf_íd
, 
Àn
));

648 *--
p
 = 
digôs
[
num
 & 
mask
];

649 
num
 >>
nbôs
;

651 
num
);

653 *
Àn
 = 
buf_íd
 - 
p
;

654  (
p
);

655 
	}
}

657 #i‡
APR_HAS_THREADS


658 *
	$c⁄v_os_thªad_t_hex
(
≠r_os_thªad_t
 *
tid
, *
buf_íd
, 
≠r_size_t
 *
Àn
)

661 
≠r_os_thªad_t
 
tid
;

662 
≠r_uöt64_t
 
u64
;

663 
≠r_uöt32_t
 
u32
;

664 } 
u
;

665 
is_√g©ive
;

667 
u
.
tid
 = *tid;

668 (
u
.
tid
)) {

669 (
≠r_öt32_t
):

670  
	`c⁄v_p2
(
u
.
u32
, 4, 'x', 
buf_íd
, 
Àn
);

671 (
≠r_öt64_t
):

672  
	`c⁄v_p2_quad
(
u
.
u64
, 4, 'x', 
buf_íd
, 
Àn
);

675  
	`c⁄v_10
(0, 
TRUE
, &
is_√g©ive
, 
buf_íd
, 
Àn
);

677 
	}
}

683 
	$APR_DECLARE
(Ë
	`≠r_vf‹m©ãr
((*
Êush_func
)(
≠r_vf‹m©ãr_buff_t
 *),

684 
≠r_vf‹m©ãr_buff_t
 *
vbuff
, c⁄° *
fmt
, 
va_li°
 
≠
)

686 *
•
;

687 *
bï
;

688 
cc
 = 0;

689 
≠r_size_t
 
i
;

691 *
s
 = 
NULL
;

692 *
q
;

693 
≠r_size_t
 
s_Àn
 = 0;

695 
≠r_size_t
 
mö_width
 = 0;

696 
≠r_size_t
 
¥ecisi⁄
 = 0;

698 
LEFT
, 
RIGHT


699 } 
adju°
;

700 
∑d_ch¨
;

701 
¥efix_ch¨
;

703 
Â_num
;

704 
≠r_öt64_t
 
i_quad
 = 0;

705 
≠r_uöt64_t
 
ui_quad
;

706 
≠r_öt32_t
 
i_num
 = 0;

707 
≠r_uöt32_t
 
ui_num
 = 0;

709 
num_buf
[
NUM_BUF_SIZE
];

710 
ch¨_buf
[2];

712 
	ev¨_ty≥_íum
 {

713 
IS_QUAD
, 
IS_LONG
, 
IS_SHORT
, 
IS_INT


715 
v¨_ty≥_íum
 
v¨_ty≥
 = 
IS_INT
;

720 
boﬁón_e
 
Æã∫©e_f‹m
;

721 
boﬁón_e
 
¥öt_sign
;

722 
boﬁón_e
 
¥öt_bœnk
;

723 
boﬁón_e
 
adju°_¥ecisi⁄
;

724 
boﬁón_e
 
adju°_width
;

725 
is_√g©ive
;

727 
•
 = 
vbuff
->
cuΩos
;

728 
bï
 = 
vbuff
->
ídpos
;

730 *
fmt
) {

731 i‡(*
fmt
 != '%') {

732 
	`INS_CHAR
(*
fmt
, 
•
, 
bï
, 
cc
);

738 
boﬁón_e
 
¥öt_somëhög
 = 
YES
;

739 
adju°
 = 
RIGHT
;

740 
Æã∫©e_f‹m
 = 
¥öt_sign
 = 
¥öt_bœnk
 = 
NO
;

741 
∑d_ch¨
 = ' ';

742 
¥efix_ch¨
 = 
NUL
;

744 
fmt
++;

749 i‡(!
	`≠r_i¶owî
(*
fmt
)) {

753 ;; 
fmt
++) {

754 i‡(*
fmt
 == '-')

755 
adju°
 = 
LEFT
;

756 i‡(*
fmt
 == '+')

757 
¥öt_sign
 = 
YES
;

758 i‡(*
fmt
 == '#')

759 
Æã∫©e_f‹m
 = 
YES
;

760 i‡(*
fmt
 == ' ')

761 
¥öt_bœnk
 = 
YES
;

762 i‡(*
fmt
 == '0')

763 
∑d_ch¨
 = '0';

771 i‡(
	`≠r_isdigô
(*
fmt
)) {

772 
	`STR_TO_DEC
(
fmt
, 
mö_width
);

773 
adju°_width
 = 
YES
;

775 i‡(*
fmt
 == '*') {

776 
v
 = 
	`va_¨g
(
≠
, );

777 
fmt
++;

778 
adju°_width
 = 
YES
;

779 i‡(
v
 < 0) {

780 
adju°
 = 
LEFT
;

781 
mö_width
 = (
≠r_size_t
)(-
v
);

784 
mö_width
 = (
≠r_size_t
)
v
;

787 
adju°_width
 = 
NO
;

792 i‡(*
fmt
 == '.') {

793 
adju°_¥ecisi⁄
 = 
YES
;

794 
fmt
++;

795 i‡(
	`≠r_isdigô
(*
fmt
)) {

796 
	`STR_TO_DEC
(
fmt
, 
¥ecisi⁄
);

798 i‡(*
fmt
 == '*') {

799 
v
 = 
	`va_¨g
(
≠
, );

800 
fmt
++;

801 
¥ecisi⁄
 = (
v
 < 0Ë? 0 : (
≠r_size_t
)v;

804 
¥ecisi⁄
 = 0;

807 
adju°_¥ecisi⁄
 = 
NO
;

810 
adju°_¥ecisi⁄
 = 
adju°_width
 = 
NO
;

820 i‡(((
APR_OFF_T_FMT
Ë> (
APR_INT64_T_FMT
)) &&

821 (((
APR_OFF_T_FMT
) == 4 &&

822 
fmt
[0] =
APR_OFF_T_FMT
[0] &&

823 
fmt
[1] =
APR_OFF_T_FMT
[1]) ||

824 ((
APR_OFF_T_FMT
) == 3 &&

825 
fmt
[0] =
APR_OFF_T_FMT
[0]) ||

826 ((
APR_OFF_T_FMT
) > 4 &&

827 
	`°∫cmp
(
fmt
, 
APR_OFF_T_FMT
,

828 (
APR_OFF_T_FMT
) - 2) == 0))) {

830 
v¨_ty≥
 = 
IS_QUAD
;

831 
fmt
 +((
APR_OFF_T_FMT
) - 2);

833 i‡(((
APR_INT64_T_FMT
) == 4 &&

834 
fmt
[0] =
APR_INT64_T_FMT
[0] &&

835 
fmt
[1] =
APR_INT64_T_FMT
[1]) ||

836 ((
APR_INT64_T_FMT
) == 3 &&

837 
fmt
[0] =
APR_INT64_T_FMT
[0]) ||

838 ((
APR_INT64_T_FMT
) > 4 &&

839 
	`°∫cmp
(
fmt
, 
APR_INT64_T_FMT
,

840 (
APR_INT64_T_FMT
) - 2) == 0)) {

842 
v¨_ty≥
 = 
IS_QUAD
;

843 
fmt
 +((
APR_INT64_T_FMT
) - 2);

845 i‡(*
fmt
 == 'q') {

846 
v¨_ty≥
 = 
IS_QUAD
;

847 
fmt
++;

849 i‡(*
fmt
 == 'l') {

850 
v¨_ty≥
 = 
IS_LONG
;

851 
fmt
++;

853 i‡(*
fmt
 == 'h') {

854 
v¨_ty≥
 = 
IS_SHORT
;

855 
fmt
++;

858 
v¨_ty≥
 = 
IS_INT
;

872 *
fmt
) {

874 i‡(
v¨_ty≥
 =
IS_QUAD
) {

875 
i_quad
 = 
	`va_¨g
(
≠
, 
≠r_uöt64_t
);

876 
s
 = 
	`c⁄v_10_quad
(
i_quad
, 1, &
is_√g©ive
,

877 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

880 i‡(
v¨_ty≥
 =
IS_LONG
)

881 
i_num
 = (
≠r_öt32_t
Ë
	`va_¨g
(
≠
, 
≠r_uöt32_t
);

882 i‡(
v¨_ty≥
 =
IS_SHORT
)

883 
i_num
 = (
≠r_öt32_t
Ë(Ë
	`va_¨g
(
≠
, );

885 
i_num
 = (
≠r_öt32_t
Ë
	`va_¨g
(
≠
, );

886 
s
 = 
	`c⁄v_10
(
i_num
, 1, &
is_√g©ive
,

887 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

889 
	`FIX_PRECISION
(
adju°_¥ecisi⁄
, 
¥ecisi⁄
, 
s
, 
s_Àn
);

894 i‡(
v¨_ty≥
 =
IS_QUAD
) {

895 
i_quad
 = 
	`va_¨g
(
≠
, 
≠r_öt64_t
);

896 
s
 = 
	`c⁄v_10_quad
(
i_quad
, 0, &
is_√g©ive
,

897 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

900 i‡(
v¨_ty≥
 =
IS_LONG
)

901 
i_num
 = 
	`va_¨g
(
≠
, 
≠r_öt32_t
);

902 i‡(
v¨_ty≥
 =
IS_SHORT
)

903 
i_num
 = (Ë
	`va_¨g
(
≠
, );

905 
i_num
 = 
	`va_¨g
(
≠
, );

906 
s
 = 
	`c⁄v_10
(
i_num
, 0, &
is_√g©ive
,

907 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

909 
	`FIX_PRECISION
(
adju°_¥ecisi⁄
, 
¥ecisi⁄
, 
s
, 
s_Àn
);

911 i‡(
is_√g©ive
)

912 
¥efix_ch¨
 = '-';

913 i‡(
¥öt_sign
)

914 
¥efix_ch¨
 = '+';

915 i‡(
¥öt_bœnk
)

916 
¥efix_ch¨
 = ' ';

921 i‡(
v¨_ty≥
 =
IS_QUAD
) {

922 
ui_quad
 = 
	`va_¨g
(
≠
, 
≠r_uöt64_t
);

923 
s
 = 
	`c⁄v_p2_quad
(
ui_quad
, 3, *
fmt
,

924 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

927 i‡(
v¨_ty≥
 =
IS_LONG
)

928 
ui_num
 = 
	`va_¨g
(
≠
, 
≠r_uöt32_t
);

929 i‡(
v¨_ty≥
 =
IS_SHORT
)

930 
ui_num
 = (Ë
	`va_¨g
(
≠
, );

932 
ui_num
 = 
	`va_¨g
(
≠
, );

933 
s
 = 
	`c⁄v_p2
(
ui_num
, 3, *
fmt
,

934 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

936 
	`FIX_PRECISION
(
adju°_¥ecisi⁄
, 
¥ecisi⁄
, 
s
, 
s_Àn
);

937 i‡(
Æã∫©e_f‹m
 && *
s
 != '0') {

938 *--
s
 = '0';

939 
s_Àn
++;

946 i‡(
v¨_ty≥
 =
IS_QUAD
) {

947 
ui_quad
 = 
	`va_¨g
(
≠
, 
≠r_uöt64_t
);

948 
s
 = 
	`c⁄v_p2_quad
(
ui_quad
, 4, *
fmt
,

949 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

952 i‡(
v¨_ty≥
 =
IS_LONG
)

953 
ui_num
 = 
	`va_¨g
(
≠
, 
≠r_uöt32_t
);

954 i‡(
v¨_ty≥
 =
IS_SHORT
)

955 
ui_num
 = (Ë
	`va_¨g
(
≠
, );

957 
ui_num
 = 
	`va_¨g
(
≠
, );

958 
s
 = 
	`c⁄v_p2
(
ui_num
, 4, *
fmt
,

959 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

961 
	`FIX_PRECISION
(
adju°_¥ecisi⁄
, 
¥ecisi⁄
, 
s
, 
s_Àn
);

962 i‡(
Æã∫©e_f‹m
 && 
ui_num
 != 0) {

963 *--
s
 = *
fmt
;

964 *--
s
 = '0';

965 
s_Àn
 += 2;

971 
s
 = 
	`va_¨g
(
≠
, *);

972 i‡(
s
 !
NULL
) {

973 i‡(!
adju°_¥ecisi⁄
) {

974 
s_Àn
 = 
	`°æí
(
s
);

999 c⁄° *
wÆk
;

1001 
wÆk
 = 
s
, 
s_Àn
 = 0;

1002 (
s_Àn
 < 
¥ecisi⁄
Ë&& (*
wÆk
 != '\0');

1003 ++
wÆk
, ++
s_Àn
);

1007 
s
 = 
S_NULL
;

1008 
s_Àn
 = 
S_NULL_LEN
;

1010 
∑d_ch¨
 = ' ';

1017 
Â_num
 = 
	`va_¨g
(
≠
, );

1021 
s
 = 
NULL
;

1022 #ifde‡
HAVE_ISNAN


1023 i‡(
	`i¢™
(
Â_num
)) {

1024 
s
 = "nan";

1025 
s_Àn
 = 3;

1028 #ifde‡
HAVE_ISINF


1029 i‡(!
s
 && 
	`isöf
(
Â_num
)) {

1030 
s
 = "inf";

1031 
s_Àn
 = 3;

1034 i‡(!
s
) {

1035 
s
 = 
	`c⁄v_Â
(*
fmt
, 
Â_num
, 
Æã∫©e_f‹m
,

1036 ()((
adju°_¥ecisi⁄
 =
NO
Ë? 
FLOAT_DIGITS
 : 
¥ecisi⁄
),

1037 &
is_√g©ive
, &
num_buf
[1], &
s_Àn
);

1038 i‡(
is_√g©ive
)

1039 
¥efix_ch¨
 = '-';

1040 i‡(
¥öt_sign
)

1041 
¥efix_ch¨
 = '+';

1042 i‡(
¥öt_bœnk
)

1043 
¥efix_ch¨
 = ' ';

1050 i‡(
adju°_¥ecisi⁄
 =
NO
)

1051 
¥ecisi⁄
 = 
FLOAT_DIGITS
;

1052 i‡(
¥ecisi⁄
 == 0)

1053 
¥ecisi⁄
 = 1;

1057 
s
 = 
	`≠r_gcvt
(
	`va_¨g
(
≠
, ), (Ë
¥ecisi⁄
, &
num_buf
[1],

1058 
Æã∫©e_f‹m
);

1059 i‡(*
s
 == '-')

1060 
¥efix_ch¨
 = *
s
++;

1061 i‡(
¥öt_sign
)

1062 
¥efix_ch¨
 = '+';

1063 i‡(
¥öt_bœnk
)

1064 
¥efix_ch¨
 = ' ';

1066 
s_Àn
 = 
	`°æí
(
s
);

1068 i‡(
Æã∫©e_f‹m
 && (
q
 = 
	`°rchr
(
s
, '.')Ë=
NULL
) {

1069 
s
[
s_Àn
++] = '.';

1070 
s
[
s_Àn
] = '\0';

1072 i‡(*
fmt
 ='G' && (
q
 = 
	`°rchr
(
s
, 'e')Ë!
NULL
)

1073 *
q
 = 'E';

1078 
ch¨_buf
[0] = (Ë(
	`va_¨g
(
≠
, ));

1079 
s
 = &
ch¨_buf
[0];

1080 
s_Àn
 = 1;

1081 
∑d_ch¨
 = ' ';

1086 
ch¨_buf
[0] = '%';

1087 
s
 = &
ch¨_buf
[0];

1088 
s_Àn
 = 1;

1089 
∑d_ch¨
 = ' ';

1094 i‡(
v¨_ty≥
 =
IS_QUAD
)

1095 *(
	`va_¨g
(
≠
, 
≠r_öt64_t
 *)Ë
cc
;

1096 i‡(
v¨_ty≥
 =
IS_LONG
)

1097 *(
	`va_¨g
(
≠
, *)Ë
cc
;

1098 i‡(
v¨_ty≥
 =
IS_SHORT
)

1099 *(
	`va_¨g
(
≠
, *)Ë
cc
;

1101 *(
	`va_¨g
(
≠
, *)Ë
cc
;

1102 
¥öt_somëhög
 = 
NO
;

1110 *++
fmt
) {

1118 #i‡
APR_SIZEOF_VOIDP
 == 8

1119 i‡((*Ë<(
≠r_uöt64_t
)) {

1120 
ui_quad
 = (
≠r_uöt64_t
Ë
	`va_¨g
(
≠
, *);

1121 
s
 = 
	`c⁄v_p2_quad
(
ui_quad
, 4, 'x',

1122 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1125 i‡((*Ë<(
≠r_uöt32_t
)) {

1126 
ui_num
 = (
≠r_uöt32_t
Ë
	`va_¨g
(
≠
, *);

1127 
s
 = 
	`c⁄v_p2
(
ui_num
, 4, 'x',

1128 &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1132 
s
 = "%p";

1133 
s_Àn
 = 2;

1134 
¥efix_ch¨
 = 
NUL
;

1136 
∑d_ch¨
 = ' ';

1142 
≠r_sockaddr_t
 *
ß
;

1144 
ß
 = 
	`va_¨g
(
≠
, 
≠r_sockaddr_t
 *);

1145 i‡(
ß
 !
NULL
) {

1146 
s
 = 
	`c⁄v_≠r_sockaddr
(
ß
, &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1147 i‡(
adju°_¥ecisi⁄
 && 
¥ecisi⁄
 < 
s_Àn
)

1148 
s_Àn
 = 
¥ecisi⁄
;

1151 
s
 = 
S_NULL
;

1152 
s_Àn
 = 
S_NULL_LEN
;

1154 
∑d_ch¨
 = ' ';

1161 
ö_addr
 *
ü
;

1163 
ü
 = 
	`va_¨g
(
≠
, 
ö_addr
 *);

1164 i‡(
ü
 !
NULL
) {

1165 
s
 = 
	`c⁄v_ö_addr
(
ü
, &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1166 i‡(
adju°_¥ecisi⁄
 && 
¥ecisi⁄
 < 
s_Àn
)

1167 
s_Àn
 = 
¥ecisi⁄
;

1170 
s
 = 
S_NULL
;

1171 
s_Àn
 = 
S_NULL_LEN
;

1173 
∑d_ch¨
 = ' ';

1180 
≠r_°©us_t
 *
mrv
;

1182 
mrv
 = 
	`va_¨g
(
≠
, 
≠r_°©us_t
 *);

1183 i‡(
mrv
 !
NULL
) {

1184 
s
 = 
	`≠r_°ªº‹
(*
mrv
, 
num_buf
, 
NUM_BUF_SIZE
-1);

1185 
s_Àn
 = 
	`°æí
(
s
);

1188 
s
 = 
S_NULL
;

1189 
s_Àn
 = 
S_NULL_LEN
;

1191 
∑d_ch¨
 = ' ';

1196 #i‡
APR_HAS_THREADS


1198 
≠r_os_thªad_t
 *
tid
;

1200 
tid
 = 
	`va_¨g
(
≠
, 
≠r_os_thªad_t
 *);

1201 i‡(
tid
 !
NULL
) {

1202 
s
 = 
	`c⁄v_os_thªad_t
(
tid
, &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1203 i‡(
adju°_¥ecisi⁄
 && 
¥ecisi⁄
 < 
s_Àn
)

1204 
s_Àn
 = 
¥ecisi⁄
;

1207 
s
 = 
S_NULL
;

1208 
s_Àn
 = 
S_NULL_LEN
;

1210 
∑d_ch¨
 = ' ';

1213 
ch¨_buf
[0] = '0';

1214 
s
 = &
ch¨_buf
[0];

1215 
s_Àn
 = 1;

1216 
∑d_ch¨
 = ' ';

1221 #i‡
APR_HAS_THREADS


1223 
≠r_os_thªad_t
 *
tid
;

1225 
tid
 = 
	`va_¨g
(
≠
, 
≠r_os_thªad_t
 *);

1226 i‡(
tid
 !
NULL
) {

1227 
s
 = 
	`c⁄v_os_thªad_t_hex
(
tid
, &
num_buf
[
NUM_BUF_SIZE
], &
s_Àn
);

1228 i‡(
adju°_¥ecisi⁄
 && 
¥ecisi⁄
 < 
s_Àn
)

1229 
s_Àn
 = 
¥ecisi⁄
;

1232 
s
 = 
S_NULL
;

1233 
s_Àn
 = 
S_NULL_LEN
;

1235 
∑d_ch¨
 = ' ';

1238 
ch¨_buf
[0] = '0';

1239 
s
 = &
ch¨_buf
[0];

1240 
s_Àn
 = 1;

1241 
∑d_ch¨
 = ' ';

1249 
buf
[5];

1250 
≠r_off_t
 
size
 = 0;

1252 i‡(*
fmt
 == 'B') {

1253 
≠r_uöt32_t
 *
¨g
 = 
	`va_¨g
(
≠
,ápr_uint32_t *);

1254 
size
 = (
¨g
) ? *arg : 0;

1256 i‡(*
fmt
 == 'F') {

1257 
≠r_off_t
 *
¨g
 = 
	`va_¨g
(
≠
,ápr_off_t *);

1258 
size
 = (
¨g
) ? *arg : 0;

1261 
≠r_size_t
 *
¨g
 = 
	`va_¨g
(
≠
,ápr_size_t *);

1262 
size
 = (
¨g
) ? *arg : 0;

1265 
s
 = 
	`≠r_°rfsize
(
size
, 
buf
);

1266 
s_Àn
 = 
	`°æí
(
s
);

1267 
∑d_ch¨
 = ' ';

1271 
NUL
:

1276 
s
 = "bogus %p";

1277 
s_Àn
 = 8;

1278 
¥efix_ch¨
 = 
NUL
;

1279 ()
	`va_¨g
(
≠
, *);

1284 
NUL
:

1303 
ch¨_buf
[0] = '%';

1304 
ch¨_buf
[1] = *
fmt
;

1305 
s
 = 
ch¨_buf
;

1306 
s_Àn
 = 2;

1307 
∑d_ch¨
 = ' ';

1311 i‡(
¥efix_ch¨
 !
NUL
 && 
s
 !
S_NULL
 && s !
ch¨_buf
) {

1312 *--
s
 = 
¥efix_ch¨
;

1313 
s_Àn
++;

1316 i‡(
adju°_width
 && 
adju°
 =
RIGHT
 && 
mö_width
 > 
s_Àn
) {

1317 i‡(
∑d_ch¨
 ='0' && 
¥efix_ch¨
 !
NUL
) {

1318 
	`INS_CHAR
(*
s
, 
•
, 
bï
, 
cc
);

1319 
s
++;

1320 
s_Àn
--;

1321 
mö_width
--;

1323 
	`PAD
(
mö_width
, 
s_Àn
, 
∑d_ch¨
);

1329 i‡(
¥öt_somëhög
 =
YES
) {

1330 
i
 = 
s_Àn
; i != 0; i--) {

1331 
	`INS_CHAR
(*
s
, 
•
, 
bï
, 
cc
);

1332 
s
++;

1336 i‡(
adju°_width
 && 
adju°
 =
LEFT
 && 
mö_width
 > 
s_Àn
)

1337 
	`PAD
(
mö_width
, 
s_Àn
, 
∑d_ch¨
);

1339 
fmt
++;

1341 
vbuff
->
cuΩos
 = 
•
;

1343  
cc
;

1344 
	}
}

1347 
	$¢¥ötf_Êush
(
≠r_vf‹m©ãr_buff_t
 *
vbuff
)

1353 
	}
}

1356 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_¢¥ötf
(*
buf
, 
≠r_size_t
 
Àn
,

1357 c⁄° *
f‹m©
, ...)

1359 
cc
;

1360 
va_li°
 
≠
;

1361 
≠r_vf‹m©ãr_buff_t
 
vbuff
;

1363 i‡(
Àn
 == 0) {

1371 
vbuff
.
cuΩos
 = 
NULL
;

1372 
vbuff
.
ídpos
 = 
NULL
;

1375 
vbuff
.
cuΩos
 = 
buf
;

1376 
vbuff
.
ídpos
 = 
buf
 + 
Àn
 - 1;

1378 
	`va_°¨t
(
≠
, 
f‹m©
);

1379 
cc
 = 
	`≠r_vf‹m©ãr
(
¢¥ötf_Êush
, &
vbuff
, 
f‹m©
, 
≠
);

1380 
	`va_íd
(
≠
);

1381 i‡(
Àn
 != 0) {

1382 *
vbuff
.
cuΩos
 = '\0';

1384  (
cc
 =-1Ë? ()
Àn
 - 1 : cc;

1385 
	}
}

1388 
	$APR_DECLARE
(Ë
	$≠r_v¢¥ötf
(*
buf
, 
≠r_size_t
 
Àn
, c⁄° *
f‹m©
,

1389 
va_li°
 
≠
)

1391 
cc
;

1392 
≠r_vf‹m©ãr_buff_t
 
vbuff
;

1394 i‡(
Àn
 == 0) {

1396 
vbuff
.
cuΩos
 = 
NULL
;

1397 
vbuff
.
ídpos
 = 
NULL
;

1400 
vbuff
.
cuΩos
 = 
buf
;

1401 
vbuff
.
ídpos
 = 
buf
 + 
Àn
 - 1;

1403 
cc
 = 
	`≠r_vf‹m©ãr
(
¢¥ötf_Êush
, &
vbuff
, 
f‹m©
, 
≠
);

1404 i‡(
Àn
 != 0) {

1405 *
vbuff
.
cuΩos
 = '\0';

1407  (
cc
 =-1Ë? ()
Àn
 - 1 : cc;

1408 
	}
}

	@strings/apr_strings.c

49 
	~"≠r.h
"

50 
	~"≠r_°rögs.h
"

51 
	~"≠r_gíîÆ.h
"

52 
	~"≠r_¥iv©e.h
"

53 
	~"≠r_lib.h
"

54 
	#APR_WANT_STDIO


	)

55 
	#APR_WANT_STRFUNC


	)

56 
	~"≠r_w™t.h
"

58 #ifde‡
HAVE_STDDEF_H


59 
	~<°ddef.h
>

62 #ifde‡
HAVE_STDLIB_H


63 
	~<°dlib.h
>

67 
	#MAX_SAVED_LENGTHS
 6

	)

69 
	$APR_DECLARE
(*Ë
	$≠r_p°rdup
(
≠r_poﬁ_t
 *
a
, c⁄° *
s
)

71 *
ªs
;

72 
≠r_size_t
 
Àn
;

74 i‡(
s
 =
NULL
) {

75  
NULL
;

77 
Àn
 = 
	`°æí
(
s
) + 1;

78 
ªs
 = 
	`≠r_pmemdup
(
a
, 
s
, 
Àn
);

79  
ªs
;

80 
	}
}

82 
	$APR_DECLARE
(*Ë
	$≠r_p°∫dup
(
≠r_poﬁ_t
 *
a
, c⁄° *
s
, 
≠r_size_t
 
n
)

84 *
ªs
;

85 c⁄° *
íd
;

87 i‡(
s
 =
NULL
) {

88  
NULL
;

90 
íd
 = 
	`memchr
(
s
, '\0', 
n
);

91 i‡(
íd
 !
NULL
)

92 
n
 = 
íd
 - 
s
;

93 
ªs
 = 
	`≠r_∑Œoc
(
a
, 
n
 + 1);

94 
	`mem˝y
(
ªs
, 
s
, 
n
);

95 
ªs
[
n
] = '\0';

96  
ªs
;

97 
	}
}

99 
	$APR_DECLARE
(*Ë
	$≠r_p°rmemdup
(
≠r_poﬁ_t
 *
a
, c⁄° *
s
, 
≠r_size_t
 
n
)

101 *
ªs
;

103 i‡(
s
 =
NULL
) {

104  
NULL
;

106 
ªs
 = 
	`≠r_∑Œoc
(
a
, 
n
 + 1);

107 
	`mem˝y
(
ªs
, 
s
, 
n
);

108 
ªs
[
n
] = '\0';

109  
ªs
;

110 
	}
}

112 
	$APR_DECLARE
(*Ë
	$≠r_pmemdup
(
≠r_poﬁ_t
 *
a
, c⁄° *
m
, 
≠r_size_t
 
n
)

114 *
ªs
;

116 i‡(
m
 =
NULL
)

117  
NULL
;

118 
ªs
 = 
	`≠r_∑Œoc
(
a
, 
n
);

119 
	`mem˝y
(
ªs
, 
m
, 
n
);

120  
ªs
;

121 
	}
}

123 
	$APR_DECLARE_NONSTD
(*Ë
	$≠r_p°rˇt
(
≠r_poﬁ_t
 *
a
, ...)

125 *
˝
, *
¨gp
, *
ªs
;

126 
≠r_size_t
 
ßved_Àngths
[
MAX_SAVED_LENGTHS
];

127 
«rgs
 = 0;

131 
≠r_size_t
 
Àn
 = 0;

132 
va_li°
 
adummy
;

134 
	`va_°¨t
(
adummy
, 
a
);

136 (
˝
 = 
	`va_¨g
(
adummy
, *)Ë!
NULL
) {

137 
≠r_size_t
 
˝Àn
 = 
	`°æí
(
˝
);

138 i‡(
«rgs
 < 
MAX_SAVED_LENGTHS
) {

139 
ßved_Àngths
[
«rgs
++] = 
˝Àn
;

141 
Àn
 +
˝Àn
;

144 
	`va_íd
(
adummy
);

148 
ªs
 = (*Ë
	`≠r_∑Œoc
(
a
, 
Àn
 + 1);

149 
˝
 = 
ªs
;

153 
	`va_°¨t
(
adummy
, 
a
);

155 
«rgs
 = 0;

156 (
¨gp
 = 
	`va_¨g
(
adummy
, *)Ë!
NULL
) {

157 i‡(
«rgs
 < 
MAX_SAVED_LENGTHS
) {

158 
Àn
 = 
ßved_Àngths
[
«rgs
++];

161 
Àn
 = 
	`°æí
(
¨gp
);

164 
	`mem˝y
(
˝
, 
¨gp
, 
Àn
);

165 
˝
 +
Àn
;

168 
	`va_íd
(
adummy
);

172 *
˝
 = '\0';

174  
ªs
;

175 
	}
}

177 
	$APR_DECLARE
(*Ë
	$≠r_p°rˇtv
(
≠r_poﬁ_t
 *
a
, c⁄° 
iovec
 *
vec
,

178 
≠r_size_t
 
nvec
,á¥_size_à*
nbyãs
)

180 
≠r_size_t
 
i
;

181 
≠r_size_t
 
Àn
;

182 c⁄° 
iovec
 *
§c
;

183 *
ªs
;

184 *
d°
;

187 
Àn
 = 0;

188 
§c
 = 
vec
;

189 
i
 = 
nvec
; i; i--) {

190 
Àn
 +
§c
->
iov_Àn
;

191 
§c
++;

193 i‡(
nbyãs
) {

194 *
nbyãs
 = 
Àn
;

198 
ªs
 = (*Ë
	`≠r_∑Œoc
(
a
, 
Àn
 + 1);

201 
§c
 = 
vec
;

202 
d°
 = 
ªs
;

203 
i
 = 
nvec
; i; i--) {

204 
	`mem˝y
(
d°
, 
§c
->
iov_ba£
, src->
iov_Àn
);

205 
d°
 +
§c
->
iov_Àn
;

206 
§c
++;

210 *
d°
 = '\0';

212  
ªs
;

213 
	}
}

215 #i‡(!
APR_HAVE_MEMCHR
)

216 *
	$memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
)

218 c⁄° *
˝
;

220 
˝
 = 
s
; 
n
 > 0;Ç--, cp++) {

221 i‡(*
˝
 =
c
)

222  (*Ë
˝
;

225  
NULL
;

226 
	}
}

229 #i‚de‡
INT64_MAX


230 
	#INT64_MAX
 
	`APR_INT64_C
(0x7fffffffffffffff)

	)

232 #i‚de‡
INT64_MIN


233 
	#INT64_MIN
 (-
	`APR_INT64_C
(0x7fffffffffffffffË- APR_INT64_C(1))

	)

236 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°πoff
(
≠r_off_t
 *
off£t
, c⁄° *
≈å
,

237 **
íd±r
, 
ba£
)

239 
î∫o
 = 0;

240 *
off£t
 = 
	`APR_OFF_T_STRFN
(
≈å
, 
íd±r
, 
ba£
);

241  
	`APR_FROM_OS_ERROR
(
î∫o
);

242 
	}
}

244 
	$APR_DECLARE
(
≠r_öt64_t
Ë
	$≠r_°πoi64
(c⁄° *
≈å
, **
íd±r
, 
ba£
)

246 #ifde‡
APR_INT64_STRFN


247 
î∫o
 = 0;

248  
	`APR_INT64_STRFN
(
≈å
, 
íd±r
, 
ba£
);

250 c⁄° *
s
;

251 
≠r_öt64_t
 
acc
;

252 
≠r_öt64_t
 
vÆ
;

253 
√g
, 
™y
;

254 
c
;

256 
î∫o
 = 0;

262 
s
 = 
≈å
;

264 
c
 = *
s
++;

265 } 
	`≠r_is•a˚
(
c
));

266 i‡(
c
 == '-') {

267 
√g
 = 1;

268 
c
 = *
s
++;

270 
√g
 = 0;

271 i‡(
c
 == '+')

272 
c
 = *
s
++;

274 i‡((
ba£
 == 0 || base == 16) &&

275 
c
 ='0' && (*
s
 == 'x' || *s == 'X')) {

276 
c
 = 
s
[1];

277 
s
 += 2;

278 
ba£
 = 16;

280 i‡(
ba£
 == 0)

281 
ba£
 = 
c
 == '0' ? 8 : 10;

282 
acc
 = 
™y
 = 0;

283 i‡(
ba£
 < 2 || base > 36) {

284 
î∫o
 = 
EINVAL
;

285 i‡(
íd±r
 !
NULL
)

286 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

287  
acc
;

300 
vÆ
 = 0;

301  ; ; 
c
 = *
s
++) {

302 i‡(
c
 >= '0' && c <= '9')

303 
c
 -= '0';

305 i‡(
c
 >= 'A' && c <= 'Z')

306 
c
 -= 'A' - 10;

307 i‡(
c
 >= 'a' && c <= 'z')

308 
c
 -= 'a' - 10;

309 #ñi‡
APR_CHARSET_EBCDIC


310 i‡(
c
 >= 'A' && c <= 'I')

311 
c
 -= 'A' - 10;

312 i‡(
c
 >= 'J' && c <= 'R')

313 
c
 -= 'J' - 19;

314 i‡(
c
 >= 'S' && c <= 'Z')

315 
c
 -= 'S' - 28;

316 i‡(
c
 >= 'a' && c <= 'i')

317 
c
 -= 'a' - 10;

318 i‡(
c
 >= 'j' && c <= 'r')

319 
c
 -= 'j' - 19;

320 i‡(
c
 >= 's' && c <= 'z')

321 
c
 -= 'z' - 28;

327 i‡(
c
 >
ba£
)

329 
vÆ
 *
ba£
;

330 i‡–(
™y
 < 0)

331 || (
√g
 && (
vÆ
 > 
acc
 || (vÆ -
c
) >ácc))

332 || (!
√g
 && (
vÆ
 < 
acc
 || (vÆ +
c
) <ácc))) {

333 
™y
 = -1;

334 #ifde‡
APR_STRTOI64_OVERFLOW_IS_BAD_CHAR


338 
acc
 = 
vÆ
;

339 
™y
 = 1;

343 i‡(
™y
 < 0) {

344 
acc
 = 
√g
 ? 
INT64_MIN
 : 
INT64_MAX
;

345 
î∫o
 = 
ERANGE
;

346 } i‡(!
™y
) {

347 
î∫o
 = 
EINVAL
;

349 i‡(
íd±r
 !
NULL
)

350 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

351  (
acc
);

353 
	}
}

355 
	$APR_DECLARE
(
≠r_öt64_t
Ë
	$≠r_©oi64
(c⁄° *
buf
)

357  
	`≠r_°πoi64
(
buf
, 
NULL
, 10);

358 
	}
}

360 
	$APR_DECLARE
(*Ë
	$≠r_ôﬂ
(
≠r_poﬁ_t
 *
p
, 
n
)

362 c⁄° 
BUFFER_SIZE
 = () * 3 + 2;

363 *
buf
 = 
	`≠r_∑Œoc
(
p
, 
BUFFER_SIZE
);

364 *
°¨t
 = 
buf
 + 
BUFFER_SIZE
 - 1;

365 
√g©ive
;

366 i‡(
n
 < 0) {

367 
√g©ive
 = 1;

368 
n
 = -n;

371 
√g©ive
 = 0;

373 *
°¨t
 = 0;

375 *--
°¨t
 = '0' + (
n
 % 10);

376 
n
 /= 10;

377 } 
n
);

378 i‡(
√g©ive
) {

379 *--
°¨t
 = '-';

381  
°¨t
;

382 
	}
}

384 
	$APR_DECLARE
(*Ë
	$≠r_…ﬂ
(
≠r_poﬁ_t
 *
p
, 
n
)

386 c⁄° 
BUFFER_SIZE
 = () * 3 + 2;

387 *
buf
 = 
	`≠r_∑Œoc
(
p
, 
BUFFER_SIZE
);

388 *
°¨t
 = 
buf
 + 
BUFFER_SIZE
 - 1;

389 
√g©ive
;

390 i‡(
n
 < 0) {

391 
√g©ive
 = 1;

392 
n
 = -n;

395 
√g©ive
 = 0;

397 *
°¨t
 = 0;

399 *--
°¨t
 = ()('0' + (
n
 % 10));

400 
n
 /= 10;

401 } 
n
);

402 i‡(
√g©ive
) {

403 *--
°¨t
 = '-';

405  
°¨t
;

406 
	}
}

408 
	$APR_DECLARE
(*Ë
	$≠r_off_t_tﬂ
(
≠r_poﬁ_t
 *
p
, 
≠r_off_t
 
n
)

410 c⁄° 
BUFFER_SIZE
 = (
≠r_off_t
) * 3 + 2;

411 *
buf
 = 
	`≠r_∑Œoc
(
p
, 
BUFFER_SIZE
);

412 *
°¨t
 = 
buf
 + 
BUFFER_SIZE
 - 1;

413 
√g©ive
;

414 i‡(
n
 < 0) {

415 
√g©ive
 = 1;

416 
n
 = -n;

419 
√g©ive
 = 0;

421 *
°¨t
 = 0;

423 *--
°¨t
 = '0' + ()(
n
 % 10);

424 
n
 /= 10;

425 } 
n
);

426 i‡(
√g©ive
) {

427 *--
°¨t
 = '-';

429  
°¨t
;

430 
	}
}

432 
	$APR_DECLARE
(*Ë
	$≠r_°rfsize
(
≠r_off_t
 
size
, *
buf
)

434 c⁄° 
‹d
[] = "KMGTPE";

435 c⁄° *
o
 = 
‹d
;

436 
ªmaö
;

438 i‡(
size
 < 0) {

439  
	`°r˝y
(
buf
, " - ");

441 i‡(
size
 < 973) {

442 i‡(
	`≠r_¢¥ötf
(
buf
, 5, "%3d ", (Ë
size
) < 0)

443  
	`°r˝y
(
buf
, "****");

444  
buf
;

447 
ªmaö
 = ()(
size
 & 1023);

448 
size
 >>= 10;

449 i‡(
size
 >= 973) {

450 ++
o
;

453 i‡(
size
 < 9 || (sizê=9 && 
ªmaö
 < 973)) {

454 i‡((
ªmaö
 = ((remain * 5) + 256) / 512) >= 10)

455 ++
size
, 
ªmaö
 = 0;

456 i‡(
	`≠r_¢¥ötf
(
buf
, 5, "%d.%d%c", (Ë
size
, 
ªmaö
, *
o
) < 0)

457  
	`°r˝y
(
buf
, "****");

458  
buf
;

460 i‡(
ªmaö
 >= 512)

461 ++
size
;

462 i‡(
	`≠r_¢¥ötf
(
buf
, 5, "%3d%c", (Ë
size
, *
o
) < 0)

463  
	`°r˝y
(
buf
, "****");

464  
buf
;

466 
	}
}

	@strings/apr_strnatcmp.c

23 
	~<˘y≥.h
>

24 
	~<°rög.h
>

25 
	~"≠r_°rögs.h
"

26 
	~"≠r_lib.h
"

28 #i‡
deföed
(
__GNUC__
)

29 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

31 
	#UNUSED


	)

37 
	$com∑ª_right
(c⁄° *
a
, c⁄° *
b
)

39 
büs
 = 0;

45 ;; 
a
++, 
b
++) {

46 i‡(!
	`≠r_isdigô
(*
a
Ë&& !≠r_isdigô(*
b
))

48 i‡(!
	`≠r_isdigô
(*
a
))

50 i‡(!
	`≠r_isdigô
(*
b
))

52 i‡(*
a
 < *
b
) {

53 i‡(!
büs
)

54 
büs
 = -1;

55 } i‡(*
a
 > *
b
) {

56 i‡(!
büs
)

57 
büs
 = +1;

58 } i‡(!*
a
 && !*
b
)

62  
büs
;

63 
	}
}

67 
	$com∑ª_À·
(c⁄° *
a
, c⁄° *
b
)

71 ;; 
a
++, 
b
++) {

72 i‡(!
	`≠r_isdigô
(*
a
Ë&& !≠r_isdigô(*
b
))

74 i‡(!
	`≠r_isdigô
(*
a
))

76 i‡(!
	`≠r_isdigô
(*
b
))

78 i‡(*
a
 < *
b
)

80 i‡(*
a
 > *
b
)

85 
	}
}

88 
	$°∫©cmp0
(c⁄° *
a
, c⁄° *
b
, 
fﬁd_ˇ£
)

90 
ai
, 
bi
;

91 
ˇ
, 
cb
;

92 
‰a˘i⁄Æ
, 
ªsu…
;

93 
ai
 = 
bi
 = 0;

95 
ˇ
 = 
a
[
ai
]; 
cb
 = 
b
[
bi
];

98 
	`≠r_is•a˚
(
ˇ
))

99 
ˇ
 = 
a
[++
ai
];

101 
	`≠r_is•a˚
(
cb
))

102 
cb
 = 
b
[++
bi
];

105 i‡(
	`≠r_isdigô
(
ˇ
Ë&&á¥_isdigô(
cb
)) {

106 
‰a˘i⁄Æ
 = (
ˇ
 ='0' || 
cb
 == '0');

108 i‡(
‰a˘i⁄Æ
) {

109 i‡((
ªsu…
 = 
	`com∑ª_À·
(
a
+
ai
, 
b
+
bi
)) != 0)

110  
ªsu…
;

112 i‡((
ªsu…
 = 
	`com∑ª_right
(
a
+
ai
, 
b
+
bi
)) != 0)

113  
ªsu…
;

117 i‡(!
ˇ
 && !
cb
) {

123 i‡(
fﬁd_ˇ£
) {

124 
ˇ
 = 
	`≠r_touµî
(ca);

125 
cb
 = 
	`≠r_touµî
(cb);

128 i‡(
ˇ
 < 
cb
)

130 i‡(
ˇ
 > 
cb
)

133 ++
ai
; ++
bi
;

135 
	}
}

139 
	$APR_DECLARE
(Ë
	$≠r_°∫©cmp
(c⁄° *
a
, c⁄° *
b
)

141  
	`°∫©cmp0
(
a
, 
b
, 0);

142 
	}
}

146 
	$APR_DECLARE
(Ë
	$≠r_°∫©ˇ£cmp
(c⁄° *
a
, c⁄° *
b
)

148  
	`°∫©cmp0
(
a
, 
b
, 1);

149 
	}
}

	@strings/apr_strtok.c

17 #ifde‡
HAVE_STDDEF_H


18 
	~<°ddef.h
>

21 
	~"≠r.h
"

22 
	~"≠r_°rögs.h
"

24 
	#APR_WANT_STRFUNC


	)

25 
	~"≠r_w™t.h
"

27 
	$APR_DECLARE
(*Ë
	$≠r_°πok
(*
°r
, c⁄° *
£p
, **
œ°
)

29 *
tokí
;

31 i‡(!
°r
)

32 
°r
 = *
œ°
;

35 *
°r
 && 
	`°rchr
(
£p
, *str))

36 ++
°r
;

38 i‡(!*
°r
)

39  
NULL
;

41 
tokí
 = 
°r
;

46 *
œ°
 = 
tokí
 + 1;

47 **
œ°
 && !
	`°rchr
(
£p
, **last))

48 ++*
œ°
;

50 i‡(**
œ°
) {

51 **
œ°
 = '\0';

52 ++*
œ°
;

55  
tokí
;

56 
	}
}

	@support/unix/waitio.c

17 
	~"≠r_¨ch_fûe_io.h
"

18 
	~"≠r_¨ch_√tw‹kio.h
"

19 
	~"≠r_pﬁl.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_suµ‹t.h
"

25 #i‡!
deföed
(
BEOS_R5
Ë&& !deföed(
OS2
Ë&& 
APR_FILES_AS_SOCKETS


26 
	#USE_WAIT_FOR_IO


	)

29 #ifde‡
USE_WAIT_FOR_IO


31 #ifde‡
WAITIO_USES_POLL


33 #ifde‡
HAVE_POLL_H


34 
	~<pﬁl.h
>

36 #ifde‡
HAVE_SYS_POLL_H


37 
	~<sys/pﬁl.h
>

40 
≠r_°©us_t
 
	$≠r_waô_f‹_io_‹_timeout
(
≠r_fûe_t
 *
f
, 
≠r_sockë_t
 *
s
,

41 
f‹_ªad
)

43 
pﬁlfd
 
pfd
;

44 
rc
, 
timeout
;

46 
timeout
 = 
f
 ? f->timeouà/ 1000 : 
s
->timeout / 1000;

47 
pfd
.
fd
 = 
f
 ? f->
fûedes
 : 
s
->
sockëdes
;

48 
pfd
.
evíts
 = 
f‹_ªad
 ? 
POLLIN
 : 
POLLOUT
;

51 
rc
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

52 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

53 i‡(
rc
 == 0) {

54  
APR_TIMEUP
;

56 i‡(
rc
 > 0) {

57  
APR_SUCCESS
;

60  
î∫o
;

62 
	}
}

66 
≠r_°©us_t
 
	$≠r_waô_f‹_io_‹_timeout
(
≠r_fûe_t
 *
f
, 
≠r_sockë_t
 *
s
,

67 
f‹_ªad
)

69 
≠r_öãrvÆ_time_t
 
timeout
;

70 
≠r_pﬁlfd_t
 
pfd
;

71 
ty≥
 = 
f‹_ªad
 ? 
APR_POLLIN
 : 
APR_POLLOUT
;

72 
≠r_pﬁl£t_t
 *
pﬁl£t
;

73 
≠r_°©us_t
 
°©us
;

76 i‡(
f
) {

77 
pfd
.
desc_ty≥
 = 
APR_POLL_FILE
;

78 
pfd
.
desc
.
f
 = f;

80 
pﬁl£t
 = 
f
->pollset;

81 i‡(
pﬁl£t
 =
NULL
) {

82 
°©us
 = 
	`≠r_pﬁl£t_¸óã
(&(
f
->
pﬁl£t
), 1, f->
poﬁ
, 0);

83 i‡(
°©us
 !
APR_SUCCESS
) {

84  
°©us
;

86 
pﬁl£t
 = 
f
->pollset;

88 
timeout
 = 
f
->timeout;

91 
pfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

92 
pfd
.
desc
.
s
 = s;

94 
pﬁl£t
 = 
s
->pollset;

95 
timeout
 = 
s
->timeout;

97 
pfd
.
ªqevíts
 = 
ty≥
;

103 (Ë
	`≠r_pﬁl£t_ªmove
(
pﬁl£t
, &
pfd
);

106 (Ë
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
pfd
);

109 
numdesc
;

110 c⁄° 
≠r_pﬁlfd_t
 *
pdesc
;

112 
°©us
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 
timeout
, &
numdesc
, &
pdesc
);

114 i‡(
numdesc
 =1 && (
pdesc
[0].
π√víts
 & 
ty≥
) != 0) {

115  
APR_SUCCESS
;

117 } 
	`APR_STATUS_IS_EINTR
(
°©us
));

119  
°©us
;

120 
	}
}

	@tables/apr_hash.c

17 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_poﬁs.h
"

21 
	~"≠r_time.h
"

23 
	~"≠r_hash.h
"

25 #i‡
APR_HAVE_STDLIB_H


26 
	~<°dlib.h
>

28 #i‡
APR_HAVE_STRING_H


29 
	~<°rög.h
>

32 #i‡
APR_POOL_DEBUG
 && 
APR_HAVE_STDIO_H


33 
	~<°dio.h
>

45 
≠r_hash_íåy_t
 
	t≠r_hash_íåy_t
;

47 
	s≠r_hash_íåy_t
 {

48 
≠r_hash_íåy_t
 *
	m√xt
;

49 
	mhash
;

50 c⁄° *
	mkey
;

51 
≠r_ssize_t
 
	mkÀn
;

52 c⁄° *
	mvÆ
;

62 
	s≠r_hash_ödex_t
 {

63 
≠r_hash_t
 *
	mht
;

64 
≠r_hash_íåy_t
 *
	mthis
, *
	m√xt
;

65 
	mödex
;

75 
	s≠r_hash_t
 {

76 
≠r_poﬁ_t
 *
	mpoﬁ
;

77 
≠r_hash_íåy_t
 **
	m¨øy
;

78 
≠r_hash_ödex_t
 
	môî©‹
;

79 
	mcou¡
, 
	mmax
, 
	m£ed
;

80 
≠r_hashfunc_t
 
	mhash_func
;

81 
≠r_hash_íåy_t
 *
	m‰ì
;

84 
	#INITIAL_MAX
 15

	)

91 
≠r_hash_íåy_t
 **
	$Æloc_¨øy
(
≠r_hash_t
 *
ht
, 
max
)

93  
	`≠r_pˇŒoc
(
ht
->
poﬁ
, (*ht->
¨øy
Ë* (
max
 + 1));

94 
	}
}

96 
	$APR_DECLARE
(
≠r_hash_t
 *Ë
	$≠r_hash_make
(
≠r_poﬁ_t
 *
poﬁ
)

98 
≠r_hash_t
 *
ht
;

99 
≠r_time_t
 
now
 = 
	`≠r_time_now
();

101 
ht
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_hash_t
));

102 
ht
->
poﬁ
 =Öool;

103 
ht
->
‰ì
 = 
NULL
;

104 
ht
->
cou¡
 = 0;

105 
ht
->
max
 = 
INITIAL_MAX
;

106 
ht
->
£ed
 = ()((
now
 >> 32Ë^Çow ^ (
≠r_uöçå_t
)
poﬁ
 ^

107 (
≠r_uöçå_t
)
ht
 ^ (≠r_uöçå_t)&
now
) - 1;

108 
ht
->
¨øy
 = 
	`Æloc_¨øy
(ht, ht->
max
);

109 
ht
->
hash_func
 = 
NULL
;

111  
ht
;

112 
	}
}

114 
	$APR_DECLARE
(
≠r_hash_t
 *Ë
	$≠r_hash_make_cu°om
(
≠r_poﬁ_t
 *
poﬁ
,

115 
≠r_hashfunc_t
 
hash_func
)

117 
≠r_hash_t
 *
ht
 = 
	`≠r_hash_make
(
poﬁ
);

118 
ht
->
hash_func
 = hash_func;

119  
ht
;

120 
	}
}

127 
	$APR_DECLARE
(
≠r_hash_ödex_t
 *Ë
	$≠r_hash_√xt
(
≠r_hash_ödex_t
 *
hi
)

129 
hi
->
this
 = hi->
√xt
;

130 !
hi
->
this
) {

131 i‡(
hi
->
ödex
 > hi->
ht
->
max
)

132  
NULL
;

134 
hi
->
this
 = hi->
ht
->
¨øy
[hi->
ödex
++];

136 
hi
->
√xt
 = hi->
this
->next;

137  
hi
;

138 
	}
}

140 
	$APR_DECLARE
(
≠r_hash_ödex_t
 *Ë
	$≠r_hash_fú°
(
≠r_poﬁ_t
 *
p
, 
≠r_hash_t
 *
ht
)

142 
≠r_hash_ödex_t
 *
hi
;

143 i‡(
p
)

144 
hi
 = 
	`≠r_∑Œoc
(
p
, (*hi));

146 
hi
 = &
ht
->
ôî©‹
;

148 
hi
->
ht
 = ht;

149 
hi
->
ödex
 = 0;

150 
hi
->
this
 = 
NULL
;

151 
hi
->
√xt
 = 
NULL
;

152  
	`≠r_hash_√xt
(
hi
);

153 
	}
}

155 
	$APR_DECLARE
(Ë
	$≠r_hash_this
(
≠r_hash_ödex_t
 *
hi
,

156 c⁄° **
key
,

157 
≠r_ssize_t
 *
kÀn
,

158 **
vÆ
)

160 i‡(
key
Ë*key = 
hi
->
this
->key;

161 i‡(
kÀn
Ë*kÀ¿
hi
->
this
->klen;

162 i‡(
vÆ
Ë*vÆ = (*)
hi
->
this
->val;

163 
	}
}

165 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_hash_this_key
(
≠r_hash_ödex_t
 *
hi
)

167 c⁄° *
key
;

169 
	`≠r_hash_this
(
hi
, &
key
, 
NULL
, NULL);

170  
key
;

171 
	}
}

173 
	$APR_DECLARE
(
≠r_ssize_t
Ë
	$≠r_hash_this_key_Àn
(
≠r_hash_ödex_t
 *
hi
)

175 
≠r_ssize_t
 
kÀn
;

177 
	`≠r_hash_this
(
hi
, 
NULL
, &
kÀn
, NULL);

178  
kÀn
;

179 
	}
}

181 
	$APR_DECLARE
(*Ë
	$≠r_hash_this_vÆ
(
≠r_hash_ödex_t
 *
hi
)

183 *
vÆ
;

185 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
vÆ
);

186  
vÆ
;

187 
	}
}

193 
	$ex∑nd_¨øy
(
≠r_hash_t
 *
ht
)

195 
≠r_hash_ödex_t
 *
hi
;

196 
≠r_hash_íåy_t
 **
√w_¨øy
;

197 
√w_max
;

199 
√w_max
 = 
ht
->
max
 * 2 + 1;

200 
√w_¨øy
 = 
	`Æloc_¨øy
(
ht
, 
√w_max
);

201 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
ht
); hi; hò
	`≠r_hash_√xt
(hi)) {

202 
i
 = 
hi
->
this
->
hash
 & 
√w_max
;

203 
hi
->
this
->
√xt
 = 
√w_¨øy
[
i
];

204 
√w_¨øy
[
i
] = 
hi
->
this
;

206 
ht
->
¨øy
 = 
√w_¨øy
;

207 
ht
->
max
 = 
√w_max
;

208 
	}
}

210 
	$hashfunc_deÁu…
(c⁄° *
ch¨_key
, 
≠r_ssize_t
 *
kÀn
,

211 
hash
)

213 c⁄° *
key
 = (c⁄° *)
ch¨_key
;

214 c⁄° *
p
;

215 
≠r_ssize_t
 
i
;

255 i‡(*
kÀn
 =
APR_HASH_KEY_STRING
) {

256 
p
 = 
key
; *p;Ö++) {

257 
hash
 = hash * 33 + *
p
;

259 *
kÀn
 = 
p
 - 
key
;

262 
p
 = 
key
, 
i
 = *
kÀn
; i; i--,Ö++) {

263 
hash
 = hash * 33 + *
p
;

267  
hash
;

268 
	}
}

270 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_hashfunc_deÁu…
(c⁄° *
ch¨_key
,

271 
≠r_ssize_t
 *
kÀn
)

273  
	`hashfunc_deÁu…
(
ch¨_key
, 
kÀn
, 0);

274 
	}
}

285 
≠r_hash_íåy_t
 **
	$föd_íåy
(
≠r_hash_t
 *
ht
,

286 c⁄° *
key
,

287 
≠r_ssize_t
 
kÀn
,

288 c⁄° *
vÆ
)

290 
≠r_hash_íåy_t
 **
hï
, *
he
;

291 
hash
;

293 i‡(
ht
->
hash_func
)

294 
hash
 = 
ht
->
	`hash_func
(
key
, &
kÀn
);

296 
hash
 = 
	`hashfunc_deÁu…
(
key
, &
kÀn
, 
ht
->
£ed
);

299 
hï
 = &
ht
->
¨øy
[
hash
 & ht->
max
], 
he
 = *hep;

300 
he
; 
hï
 = &he->
√xt
, he = *hep) {

301 i‡(
he
->
hash
 == hash

302 && 
he
->
kÀn
 == klen

303 && 
	`memcmp
(
he
->
key
, key, 
kÀn
) == 0)

306 i‡(
he
 || !
vÆ
)

307  
hï
;

310 i‡((
he
 = 
ht
->
‰ì
Ë!
NULL
)

311 
ht
->
‰ì
 = 
he
->
√xt
;

313 
he
 = 
	`≠r_∑Œoc
(
ht
->
poﬁ
, (*he));

314 
he
->
√xt
 = 
NULL
;

315 
he
->
hash
 = hash;

316 
he
->
key
 = key;

317 
he
->
kÀn
 = klen;

318 
he
->
vÆ
 = val;

319 *
hï
 = 
he
;

320 
ht
->
cou¡
++;

321  
hï
;

322 
	}
}

324 
	$APR_DECLARE
(
≠r_hash_t
 *Ë
	$≠r_hash_c›y
(
≠r_poﬁ_t
 *
poﬁ
,

325 c⁄° 
≠r_hash_t
 *
‹ig
)

327 
≠r_hash_t
 *
ht
;

328 
≠r_hash_íåy_t
 *
√w_vÆs
;

329 
i
, 
j
;

331 
ht
 = 
	`≠r_∑Œoc
(
poﬁ
, (
≠r_hash_t
) +

332 (*
ht
->
¨øy
Ë* (
‹ig
->
max
 + 1) +

333 (
≠r_hash_íåy_t
Ë* 
‹ig
->
cou¡
);

334 
ht
->
poﬁ
 =Öool;

335 
ht
->
‰ì
 = 
NULL
;

336 
ht
->
cou¡
 = 
‹ig
->count;

337 
ht
->
max
 = 
‹ig
->max;

338 
ht
->
£ed
 = 
‹ig
->seed;

339 
ht
->
hash_func
 = 
‹ig
->hash_func;

340 
ht
->
¨øy
 = (
≠r_hash_íåy_t
 **)((*)hà+ (
≠r_hash_t
));

342 
√w_vÆs
 = (
≠r_hash_íåy_t
 *)((*)(
ht
Ë+ (
≠r_hash_t
) +

343 (*
ht
->
¨øy
Ë* (
‹ig
->
max
 + 1));

344 
j
 = 0;

345 
i
 = 0; i <
ht
->
max
; i++) {

346 
≠r_hash_íåy_t
 **
√w_íåy
 = &(
ht
->
¨øy
[
i
]);

347 
≠r_hash_íåy_t
 *
‹ig_íåy
 = 
‹ig
->
¨øy
[
i
];

348 
‹ig_íåy
) {

349 *
√w_íåy
 = &
√w_vÆs
[
j
++];

350 (*
√w_íåy
)->
hash
 = 
‹ig_íåy
->hash;

351 (*
√w_íåy
)->
key
 = 
‹ig_íåy
->key;

352 (*
√w_íåy
)->
kÀn
 = 
‹ig_íåy
->klen;

353 (*
√w_íåy
)->
vÆ
 = 
‹ig_íåy
->val;

354 
√w_íåy
 = &((*√w_íåy)->
√xt
);

355 
‹ig_íåy
 = orig_íåy->
√xt
;

357 *
√w_íåy
 = 
NULL
;

359  
ht
;

360 
	}
}

362 
	$APR_DECLARE
(*Ë
	$≠r_hash_gë
(
≠r_hash_t
 *
ht
,

363 c⁄° *
key
,

364 
≠r_ssize_t
 
kÀn
)

366 
≠r_hash_íåy_t
 *
he
;

367 
he
 = *
	`föd_íåy
(
ht
, 
key
, 
kÀn
, 
NULL
);

368 i‡(
he
)

369  (*)
he
->
vÆ
;

371  
NULL
;

372 
	}
}

374 
	$APR_DECLARE
(Ë
	$≠r_hash_£t
(
≠r_hash_t
 *
ht
,

375 c⁄° *
key
,

376 
≠r_ssize_t
 
kÀn
,

377 c⁄° *
vÆ
)

379 
≠r_hash_íåy_t
 **
hï
;

380 
hï
 = 
	`föd_íåy
(
ht
, 
key
, 
kÀn
, 
vÆ
);

381 i‡(*
hï
) {

382 i‡(!
vÆ
) {

384 
≠r_hash_íåy_t
 *
ﬁd
 = *
hï
;

385 *
hï
 = (*hï)->
√xt
;

386 
ﬁd
->
√xt
 = 
ht
->
‰ì
;

387 
ht
->
‰ì
 = 
ﬁd
;

388 --
ht
->
cou¡
;

392 (*
hï
)->
vÆ
 = val;

394 i‡(
ht
->
cou¡
 > ht->
max
) {

395 
	`ex∑nd_¨øy
(
ht
);

400 
	}
}

402 
	$APR_DECLARE
(Ë
	$≠r_hash_cou¡
(
≠r_hash_t
 *
ht
)

404  
ht
->
cou¡
;

405 
	}
}

407 
	$APR_DECLARE
(Ë
	$≠r_hash_˛ór
(
≠r_hash_t
 *
ht
)

409 
≠r_hash_ödex_t
 *
hi
;

410 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
ht
); hi; hò
	`≠r_hash_√xt
(hi))

411 
	`≠r_hash_£t
(
ht
, 
hi
->
this
->
key
, hi->this->
kÀn
, 
NULL
);

412 
	}
}

414 
	$APR_DECLARE
(
≠r_hash_t
*Ë
	$≠r_hash_ovîœy
(
≠r_poﬁ_t
 *
p
,

415 c⁄° 
≠r_hash_t
 *
ovîœy
,

416 c⁄° 
≠r_hash_t
 *
ba£
)

418  
	`≠r_hash_mîge
(
p
, 
ovîœy
, 
ba£
, 
NULL
, NULL);

419 
	}
}

421 
	$APR_DECLARE
(
≠r_hash_t
 *Ë
	`≠r_hash_mîge
(
≠r_poﬁ_t
 *
p
,

422 c⁄° 
≠r_hash_t
 *
ovîœy
,

423 c⁄° 
≠r_hash_t
 *
ba£
,

424 * (*
mîgî
)(
≠r_poﬁ_t
 *
p
,

425 c⁄° *
key
,

426 
≠r_ssize_t
 
kÀn
,

427 c⁄° *
h1_vÆ
,

428 c⁄° *
h2_vÆ
,

429 c⁄° *
d©a
),

430 c⁄° *
d©a
)

432 
≠r_hash_t
 *
ªs
;

433 
≠r_hash_íåy_t
 *
√w_vÆs
 = 
NULL
;

434 
≠r_hash_íåy_t
 *
ôî
;

435 
≠r_hash_íåy_t
 *
ít
;

436 
i
, 
j
, 
k
, 
hash
;

438 #i‡
APR_POOL_DEBUG


443 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
ovîœy
->
poﬁ
, 
p
)) {

444 
	`Ârötf
(
°dîr
,

446 
	`ab‹t
();

448 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
ba£
->
poﬁ
, 
p
)) {

449 
	`Ârötf
(
°dîr
,

451 
	`ab‹t
();

455 
ªs
 = 
	`≠r_∑Œoc
(
p
, (
≠r_hash_t
));

456 
ªs
->
poﬁ
 = 
p
;

457 
ªs
->
‰ì
 = 
NULL
;

458 
ªs
->
hash_func
 = 
ba£
->hash_func;

459 
ªs
->
cou¡
 = 
ba£
->count;

460 
ªs
->
max
 = (
ovîœy
->max > 
ba£
->max) ? overlay->max : base->max;

461 i‡(
ba£
->
cou¡
 + 
ovîœy
->cou¡ > 
ªs
->
max
) {

462 
ªs
->
max
 =Ñes->max * 2 + 1;

464 
ªs
->
£ed
 = 
ba£
->seed;

465 
ªs
->
¨øy
 = 
	`Æloc_¨øy
‘es,Ñes->
max
);

466 i‡(
ba£
->
cou¡
 + 
ovîœy
->count) {

467 
√w_vÆs
 = 
	`≠r_∑Œoc
(
p
, (
≠r_hash_íåy_t
) *

468 (
ba£
->
cou¡
 + 
ovîœy
->count));

470 
j
 = 0;

471 
k
 = 0; k <
ba£
->
max
; k++) {

472 
ôî
 = 
ba£
->
¨øy
[
k
]; iãr; iã∏ôî->
√xt
) {

473 
i
 = 
ôî
->
hash
 & 
ªs
->
max
;

474 
√w_vÆs
[
j
].
kÀn
 = 
ôî
->klen;

475 
√w_vÆs
[
j
].
key
 = 
ôî
->key;

476 
√w_vÆs
[
j
].
vÆ
 = 
ôî
->val;

477 
√w_vÆs
[
j
].
hash
 = 
ôî
->hash;

478 
√w_vÆs
[
j
].
√xt
 = 
ªs
->
¨øy
[
i
];

479 
ªs
->
¨øy
[
i
] = &
√w_vÆs
[
j
];

480 
j
++;

484 
k
 = 0; k <
ovîœy
->
max
; k++) {

485 
ôî
 = 
ovîœy
->
¨øy
[
k
]; iãr; iã∏ôî->
√xt
) {

486 i‡(
ªs
->
hash_func
)

487 
hash
 = 
ªs
->
	`hash_func
(
ôî
->
key
, &ôî->
kÀn
);

489 
hash
 = 
	`hashfunc_deÁu…
(
ôî
->
key
, &ôî->
kÀn
, 
ªs
->
£ed
);

490 
i
 = 
hash
 & 
ªs
->
max
;

491 
ít
 = 
ªs
->
¨øy
[
i
];É¡;É¡ =É¡->
√xt
) {

492 i‡((
ít
->
kÀn
 =
ôî
->klen) &&

493 (
	`memcmp
(
ít
->
key
, 
ôî
->key, iãr->
kÀn
) == 0)) {

494 i‡(
mîgî
) {

495 
ít
->
vÆ
 = (*
mîgî
)(
p
, 
ôî
->
key
, iãr->
kÀn
,

496 
ôî
->
vÆ
, 
ít
->vÆ, 
d©a
);

499 
ít
->
vÆ
 = 
ôî
->val;

504 i‡(!
ít
) {

505 
√w_vÆs
[
j
].
kÀn
 = 
ôî
->klen;

506 
√w_vÆs
[
j
].
key
 = 
ôî
->key;

507 
√w_vÆs
[
j
].
vÆ
 = 
ôî
->val;

508 
√w_vÆs
[
j
].
hash
 = hash;

509 
√w_vÆs
[
j
].
√xt
 = 
ªs
->
¨øy
[
i
];

510 
ªs
->
¨øy
[
i
] = &
√w_vÆs
[
j
];

511 
ªs
->
cou¡
++;

512 
j
++;

516  
ªs
;

517 
	}
}

527 
	$APR_DECLARE
(Ë
	$≠r_hash_do
(
≠r_hash_do_ˇŒback_‚_t
 *
comp
,

528 *
ªc
, c⁄° 
≠r_hash_t
 *
ht
)

530 
≠r_hash_ödex_t
 
hix
;

531 
≠r_hash_ödex_t
 *
hi
;

532 
rv
, 
d‹v
 = 1;

534 
hix
.
ht
 = (
≠r_hash_t
 *)ht;

535 
hix
.
ödex
 = 0;

536 
hix
.
this
 = 
NULL
;

537 
hix
.
√xt
 = 
NULL
;

539 i‡((
hi
 = 
	`≠r_hash_√xt
(&
hix
))) {

542 
rv
 = (*
comp
)(
ªc
, 
hi
->
this
->
key
, hi->this->
kÀn
, hi->this->
vÆ
);

543 } 
rv
 && (
hi
 = 
	`≠r_hash_√xt
(hi)));

545 i‡(
rv
 == 0) {

546 
d‹v
 = 0;

549  
d‹v
;

550 
	}
}

552 
APR_POOL_IMPLEMENT_ACCESSOR
(
hash
)

	@tables/apr_skiplist.c

26 
	~"≠r_skùli°.h
"

28 
	s≠r_skùli°
 {

29 
≠r_skùli°_com∑ª
 
	mcom∑ª
;

30 
≠r_skùli°_com∑ª
 
	mcom∑ªk
;

31 
	mheight
;

32 
	m¥eheight
;

33 
	msize
;

34 
≠r_skùli°node
 *
	mt›
;

35 
≠r_skùli°node
 *
	mbŸtom
;

37 
≠r_skùli°node
 *
	mt›íd
;

38 
≠r_skùli°node
 *
	mbŸtomíd
;

39 
≠r_skùli°
 *
	mödex
;

40 
≠r_¨øy_hódî_t
 *
	mmemli°
;

41 
≠r_poﬁ_t
 *
	mpoﬁ
;

44 
	s≠r_skùli°node
 {

45 *
	md©a
;

46 
≠r_skùli°node
 *
	m√xt
;

47 
≠r_skùli°node
 *
	m¥ev
;

48 
≠r_skùli°node
 *
	mdown
;

49 
≠r_skùli°node
 *
	mup
;

50 
≠r_skùli°node
 *
	m¥evödex
;

51 
≠r_skùli°node
 *
	m√xtödex
;

52 
≠r_skùli°
 *
	m¶
;

55 #i‚de‡
MIN


56 
	#MIN
(
a
,
b
Ë(◊<b)?◊):(b))

	)

59 
	$gë_b_ønd
()

61 
ph
 = 32;

62 
≠r_uöt32_t
 
ønd£q
;

63 i‡(
ph
 > 31) {

64 
ph
 = 0;

65 
ønd£q
 = (
≠r_uöt32_t
Ë
	`ønd
();

67 
ph
++;

68  ((
ønd£q
 & (1 << (
ph
 - 1))) >> (ph - 1));

69 
	}
}

72 
size_t
 
	msize
;

73 
≠r_¨øy_hódî_t
 *
	mli°
;

74 } 
	tmemli°_t
;

77 *
	m±r
;

78 
	möu£
;

79 } 
	tchunk_t
;

81 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_Æloc
(
≠r_skùli°
 *
¶
, 
size_t
 
size
)

83 i‡(
¶
->
poﬁ
) {

84 *
±r
;

85 
found_size
 = 0;

86 
i
;

87 
chunk_t
 *
√wchunk
;

88 
memli°_t
 *
memli°
 = (memli°_à*)
¶
->memli°->
ñts
;

89 
i
 = 0; i < 
¶
->
memli°
->
√…s
; i++) {

90 i‡(
memli°
->
size
 == size) {

91 
j
;

92 
chunk_t
 *
chunk
 = (chunk_à*)
memli°
->
li°
->
ñts
;

93 
found_size
 = 1;

94 
j
 = 0; j < 
memli°
->
li°
->
√…s
; j++) {

95 i‡(!
chunk
->
öu£
) {

96 
chunk
->
öu£
 = 1;

97  
chunk
->
±r
;

99 
chunk
++;

103 
memli°
++;

106 
±r
 = 
	`≠r_pˇŒoc
(
¶
->
poﬁ
, 
size
);

107 i‡(!
±r
) {

108  
±r
;

114 i‡(!
found_size
) {

115 
memli°
 = 
	`≠r_¨øy_push
(
¶
->memlist);

116 
memli°
->
size
 = size;

117 
memli°
->
li°
 = 
	`≠r_¨øy_make
(
¶
->
poﬁ
, 20, (
chunk_t
));

119 
√wchunk
 = 
	`≠r_¨øy_push
(
memli°
->
li°
);

120 
√wchunk
->
±r
 =Ötr;

121 
√wchunk
->
öu£
 = 1;

122  
±r
;

125  
	`ˇŒoc
(1, 
size
);

127 
	}
}

129 
	$APR_DECLARE
(Ë
	$≠r_skùli°_‰ì
(
≠r_skùli°
 *
¶
, *
mem
)

131 i‡(!
¶
->
poﬁ
) {

132 
	`‰ì
(
mem
);

135 
i
;

136 
memli°_t
 *
memli°
 = (memli°_à*)
¶
->memli°->
ñts
;

137 
i
 = 0; i < 
¶
->
memli°
->
√…s
; i++) {

138 
j
;

139 
chunk_t
 *
chunk
 = (chunk_à*)
memli°
->
li°
->
ñts
;

140 
j
 = 0; j < 
memli°
->
li°
->
√…s
; j++) {

141 i‡(
chunk
->
±r
 =
mem
) {

142 
chunk
->
öu£
 = 0;

145 
chunk
++;

147 
memli°
++;

150 
	}
}

152 
≠r_°©us_t
 
	$skùli°i_öô
(
≠r_skùli°
 **
s
, 
≠r_poﬁ_t
 *
p
)

154 
≠r_skùli°
 *
¶
;

155 i‡(
p
) {

156 
¶
 = 
	`≠r_pˇŒoc
(
p
, (
≠r_skùli°
));

157 
¶
->
memli°
 = 
	`≠r_¨øy_make
(
p
, 20, (
memli°_t
));

160 
¶
 = 
	`ˇŒoc
(1, (
≠r_skùli°
));

163 
¶
->
com∑ª
 = (
≠r_skùli°_com∑ª
Ë
NULL
;

164 
¶
->
com∑ªk
 = (
≠r_skùli°_com∑ª
Ë
NULL
;

165 
¶
->
height
 = 0;

166 
¶
->
¥eheight
 = 0;

167 
¶
->
size
 = 0;

168 
¶
->
t›
 = 
NULL
;

169 
¶
->
bŸtom
 = 
NULL
;

170 
¶
->
ödex
 = 
NULL
;

172 
¶
->
poﬁ
 = 
p
;

173 *
s
 = 
¶
;

174  
APR_SUCCESS
;

175 
	}
}

177 
	$ödexög_comp
(*
a
, *
b
)

179 *
ac
 = (*Ë(((
≠r_skùli°
 *Ë
a
)->
com∑ª
);

180 *
bc
 = (*Ë(((
≠r_skùli°
 *Ë
b
)->
com∑ª
);

181  ((
ac
 < 
bc
) ? -1 : ((ac > bc) ? 1 : 0));

182 
	}
}

184 
	$ödexög_compk
(*
ac
, *
b
)

186 *
bc
 = (*Ë(((
≠r_skùli°
 *Ë
b
)->
com∑ª
);

187  ((
ac
 < 
bc
) ? -1 : ((ac > bc) ? 1 : 0));

188 
	}
}

190 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_skùli°_öô
(
≠r_skùli°
 **
s
, 
≠r_poﬁ_t
 *
p
)

192 
≠r_skùli°
 *
¶
;

193 
	`skùli°i_öô
(
s
, 
p
);

194 
¶
 = *
s
;

195 
	`skùli°i_öô
(&(
¶
->
ödex
), 
p
);

196 
	`≠r_skùli°_£t_com∑ª
(
¶
->
ödex
, 
ödexög_comp
, 
ödexög_compk
);

197  
APR_SUCCESS
;

198 
	}
}

200 
	$APR_DECLARE
(Ë
	$≠r_skùli°_£t_com∑ª
(
≠r_skùli°
 *
¶
,

201 
≠r_skùli°_com∑ª
 
comp
,

202 
≠r_skùli°_com∑ª
 
compk
)

204 i‡(
¶
->
com∑ª
 && sl->
com∑ªk
) {

205 
	`≠r_skùli°_add_ödex
(
¶
, 
comp
, 
compk
);

208 
¶
->
com∑ª
 = 
comp
;

209 
¶
->
com∑ªk
 = 
compk
;

211 
	}
}

213 
	$APR_DECLARE
(Ë
	$≠r_skùli°_add_ödex
(
≠r_skùli°
 *
¶
,

214 
≠r_skùli°_com∑ª
 
comp
,

215 
≠r_skùli°_com∑ª
 
compk
)

217 
≠r_skùli°node
 *
m
;

218 
≠r_skùli°
 *
ni
;

219 
icou¡
 = 0;

220 
	`≠r_skùli°_föd
(
¶
->
ödex
, (*)
comp
, &
m
);

221 i‡(
m
) {

224 
	`skùli°i_öô
(&
ni
, 
¶
->
poﬁ
);

225 
	`≠r_skùli°_£t_com∑ª
(
ni
, 
comp
, 
compk
);

227 
m
 = 
	`≠r_skùli°_ö£π
(
¶
->
ödex
, 
ni
);

228 
m
->
¥ev
) {

229 
m
 = m->
¥ev
;

230 
icou¡
++;

232 
m
 = 
	`≠r_skùli°_gëli°
(
¶
); m; 
	`≠r_skùli°_√xt
(sl, &m)) {

233 
j
 = 
icou¡
 - 1;

234 
≠r_skùli°node
 *
n¶n
;

235 
n¶n
 = 
	`≠r_skùli°_ö£π
(
ni
, 
m
->
d©a
);

237 
j
 > 0) {

238 
m
 = m->
√xtödex
;

239 
j
--;

242 
n¶n
->
√xtödex
 = 
m
->nextindex;

243 i‡(
m
->
√xtödex
) {

244 
m
->
√xtödex
->
¥evödex
 = 
n¶n
;

246 
n¶n
->
¥evödex
 = 
m
;

247 
m
->
√xtödex
 = 
n¶n
;

249 
	}
}

251 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	$≠r_skùli°_gëli°
(
≠r_skùli°
 *
¶
)

253 i‡(!
¶
->
bŸtom
) {

254  
NULL
;

256  
¶
->
bŸtom
->
√xt
;

257 
	}
}

259 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_föd
(
≠r_skùli°
 *
¶
, *
d©a
, 
≠r_skùli°node
 **
ôî
)

261 *
ªt
;

262 
≠r_skùli°node
 *
aôî
;

263 i‡(!
¶
->
com∑ª
) {

266 i‡(
ôî
) {

267 
ªt
 = 
	`≠r_skùli°_föd_com∑ª
(
¶
, 
d©a
, 
ôî
, sl->
com∑ª
);

270 
ªt
 = 
	`≠r_skùli°_föd_com∑ª
(
¶
, 
d©a
, &
aôî
, sl->
com∑ª
);

272  
ªt
;

273 
	}
}

275 
	$skùli°i_föd_com∑ª
(
≠r_skùli°
 *
¶
, *
d©a
,

276 
≠r_skùli°node
 **
ªt
,

277 
≠r_skùli°_com∑ª
 
comp
)

279 
≠r_skùli°node
 *
m
 = 
NULL
;

280 
cou¡
 = 0;

281 
m
 = 
¶
->
t›
;

282 
m
) {

283 
com∑ªd
;

284 
com∑ªd
 = (
m
->
√xt
Ë? 
	`comp
(
d©a
, m->next->data) : -1;

285 i‡(
com∑ªd
 == 0) {

286 
m
 = m->
√xt
;

287 
m
->
down
) {

288 
m
 = m->
down
;

290 *
ªt
 = 
m
;

291  
cou¡
;

293 i‡((
m
->
√xt
 =
NULL
Ë|| (
com∑ªd
 < 0)) {

294 
m
 = m->
down
;

295 
cou¡
++;

298 
m
 = m->
√xt
;

299 
cou¡
++;

302 *
ªt
 = 
NULL
;

303  
cou¡
;

304 
	}
}

306 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_föd_com∑ª
(
≠r_skùli°
 *
¶i
, *
d©a
,

307 
≠r_skùli°node
 **
ôî
,

308 
≠r_skùli°_com∑ª
 
comp
)

310 
≠r_skùli°node
 *
m
 = 
NULL
;

311 
≠r_skùli°
 *
¶
;

312 i‡(
comp
 =
¶i
->
com∑ª
 || !¶i->
ödex
) {

313 
¶
 = 
¶i
;

316 
	`≠r_skùli°_föd
(
¶i
->
ödex
, (*)
comp
, &
m
);

317 
¶
 = (
≠r_skùli°
 *Ë
m
->
d©a
;

319 
	`skùli°i_föd_com∑ª
(
¶
, 
d©a
, 
ôî
, sl->
com∑ªk
);

320  (
ôî
 && *ôîË? ((*ôî)->
d©a
Ë: 
NULL
;

321 
	}
}

324 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_√xt
(
≠r_skùli°
 *
¶
, 
≠r_skùli°node
 **
ôî
)

326 i‡(!*
ôî
) {

327  
NULL
;

329 *
ôî
 = (*ôî)->
√xt
;

330  (*
ôî
Ë? ((*ôî)->
d©a
Ë: 
NULL
;

331 
	}
}

333 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_¥evious
(
≠r_skùli°
 *
¶
, 
≠r_skùli°node
 **
ôî
)

335 i‡(!*
ôî
) {

336  
NULL
;

338 *
ôî
 = (*ôî)->
¥ev
;

339  (*
ôî
Ë? ((*ôî)->
d©a
Ë: 
NULL
;

340 
	}
}

342 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	$≠r_skùli°_ö£π
(
≠r_skùli°
 *
¶
, *
d©a
)

344 i‡(!
¶
->
com∑ª
) {

347  
	`≠r_skùli°_ö£π_com∑ª
(
¶
, 
d©a
, sl->
com∑ª
);

348 
	}
}

350 
	$APR_DECLARE
(
≠r_skùli°node
 *Ë
	$≠r_skùli°_ö£π_com∑ª
(
≠r_skùli°
 *
¶
, *
d©a
,

351 
≠r_skùli°_com∑ª
 
comp
)

353 
≠r_skùli°node
 *
m
, *
p
, *
tmp
, *
ªt
 = 
NULL
, **
°ack
;

354 
nh
 = 1, 
ch
, 
°acki
;

355 i‡(!
¶
->
t›
) {

356 
¶
->
height
 = 1;

357 
¶
->
t›íd
 = sl->
bŸtomíd
 = sl->
t›
 = sl->
bŸtom
 =

358 (
≠r_skùli°node
 *)
	`≠r_skùli°_Æloc
(
¶
, (apr_skiplistnode));

360 
¶
->
t›
->
√xt
 = (
≠r_skùli°node
 *)
NULL
;

361 
¶
->
t›
->
d©a
 = (
≠r_skùli°node
 *)
NULL
;

362 
¶
->
t›
->
¥ev
 = (
≠r_skùli°node
 *)
NULL
;

363 
¶
->
t›
->
up
 = (
≠r_skùli°node
 *)
NULL
;

364 
¶
->
t›
->
down
 = (
≠r_skùli°node
 *)
NULL
;

365 
¶
->
t›
->
√xtödex
 = (
≠r_skùli°node
 *)
NULL
;

366 
¶
->
t›
->
¥evödex
 = (
≠r_skùli°node
 *)
NULL
;

368 
¶
->
t›
->sl = sl;

370 i‡(
¶
->
¥eheight
) {

371 
nh
 < 
¶
->
¥eheight
 && 
	`gë_b_ønd
()) {

372 
nh
++;

376 
nh
 <
¶
->
height
 && 
	`gë_b_ønd
()) {

377 
nh
++;

385 ; 
¶
->
height
 < 
nh
; sl->height++) {

386 
¶
->
t›
->
up
 =

387 (
≠r_skùli°node
 *)
	`≠r_skùli°_Æloc
(
¶
, (apr_skiplistnode));

388 
¶
->
t›
->
up
->
down
 = sl->top;

389 
¶
->
t›
 = sl->
t›íd
 = sl->t›->
up
;

391 
¶
->
t›
->
¥ev
 = sl->t›->
√xt
 = sl->t›->
√xtödex
 =

392 
¶
->
t›
->
¥evödex
 = sl->t›->
up
 = 
NULL
;

393 
¶
->
t›
->
d©a
 = 
NULL
;

395 
¶
->
t›
->sl = sl;

397 
ch
 = 
¶
->
height
;

401 
m
 = 
¶
->
t›
;

402 
°ack
 = (
≠r_skùli°node
 **)
	`mÆloc
(◊¥_skùli°nodê*Ë* (
nh
));

403 
°acki
 = 0;

404 
m
) {

405 
com∑ªd
 = -1;

406 i‡(
m
->
√xt
) {

407 
com∑ªd
 = 
	`comp
(
d©a
, 
m
->
√xt
->data);

409 i‡(
com∑ªd
 == 0) {

410 
	`‰ì
(
°ack
);

413 i‡((
m
->
√xt
 =
NULL
Ë|| (
com∑ªd
 < 0)) {

414 i‡(
ch
 <
nh
) {

416 
°ack
[
°acki
++] = 
m
;

418 
m
 = m->
down
;

419 
ch
--;

422 
m
 = m->
√xt
;

426 
p
 = 
NULL
;

427 ; 
°acki
 > 0; stacki--) {

428 
m
 = 
°ack
[
°acki
 - 1];

429 
tmp
 = (
≠r_skùli°node
 *)
	`≠r_skùli°_Æloc
(
¶
, (apr_skiplistnode));

430 
tmp
->
√xt
 = 
m
->next;

431 i‡(
m
->
√xt
) {

432 
m
->
√xt
->
¥ev
 = 
tmp
;

434 
tmp
->
¥ev
 = 
m
;

435 
tmp
->
up
 = 
NULL
;

436 
tmp
->
√xtödex
 =Åmp->
¥evödex
 = 
NULL
;

437 
tmp
->
down
 = 
p
;

438 i‡(
p
) {

439 
p
->
up
 = 
tmp
;

441 
tmp
->
d©a
 = data;

442 
tmp
->
¶
 = sl;

443 
m
->
√xt
 = 
tmp
;

445 i‡(!
p
) {

446 
ªt
 = 
tmp
;

447 
¶
->
size
++;

449 
p
 = 
tmp
;

451 
	`‰ì
(
°ack
);

452 i‡(
¶
->
ödex
 !
NULL
) {

457 
≠r_skùli°node
 *
ni
, *
li
;

458 
li
 = 
ªt
;

459 
p
 = 
	`≠r_skùli°_gëli°
(
¶
->
ödex
);Ö; 
	`≠r_skùli°_√xt
(sl->index, &p)) {

460 
ni
 = 
	`≠r_skùli°_ö£π
((
≠r_skùli°
 *Ë
p
->
d©a
, 
ªt
->data);

461 
li
->
√xtödex
 = 
ni
;

462 
ni
->
¥evödex
 = 
li
;

463 
li
 = 
ni
;

469 
¶
->
size
++;

470  
ªt
;

471 
	}
}

473 
	$APR_DECLARE
(Ë
	$≠r_skùli°_ªmove
(
≠r_skùli°
 *
¶
, *
d©a
, 
≠r_skùli°_‰ìfunc
 
my‰ì
)

475 i‡(!
¶
->
com∑ª
) {

478  
	`≠r_skùli°_ªmove_com∑ª
(
¶
, 
d©a
, 
my‰ì
, sl->
com∑ªk
);

479 
	}
}

482 
	$skùli°_¥öt_°ru˘
(
≠r_skùli°
 * 
¶
, *
¥efix
)

484 
≠r_skùli°node
 *
p
, *
q
;

485 
	`Ârötf
(
°dîr
, "Skùli° Såu˘uª (height: %d)\n", 
¶
->
height
);

486 
p
 = 
¶
->
bŸtom
;

487 
p
) {

488 
q
 = 
p
;

489 
	`Ârötf
(
°dîr
, 
¥efix
);

490 
q
) {

491 
	`Ârötf
(
°dîr
, "%∞", 
q
->
d©a
);

492 
q
 = q->
up
;

494 
	`Ârötf
(
°dîr
, "\n");

495 
p
 =Ö->
√xt
;

497 
	}
}

500 
	$skùli°i_ªmove
(
≠r_skùli°
 *
¶
, 
≠r_skùli°node
 *
m
, 
≠r_skùli°_‰ìfunc
 
my‰ì
)

502 
≠r_skùli°node
 *
p
;

503 i‡(!
m
) {

506 i‡(
m
->
√xtödex
) {

507 
	`skùli°i_ªmove
(
m
->
√xtödex
->
¶
, m->√xtödex, 
NULL
);

509 
m
->
up
) {

510 
m
 = m->
up
;

512 
m
) {

513 
p
 = 
m
;

514 
p
->
¥ev
->
√xt
 =Ö->next;

515 i‡(
p
->
√xt
) {

516 
p
->
√xt
->
¥ev
 =Ö->prev;

518 
m
 = m->
down
;

520 i‡(!
m
 && 
my‰ì
 && 
p
->
d©a
) {

521 
	`my‰ì
(
p
->
d©a
);

523 
	`≠r_skùli°_‰ì
(
¶
, 
p
);

525 
¶
->
size
--;

526 
¶
->
t›
 && sl->t›->
√xt
 =
NULL
) {

528 
p
 = 
¶
->
t›
;

529 
¶
->
t›
 = sl->t›->
down
;

530 i‡(
¶
->
t›
) {

531 
¶
->
t›
->
up
 = 
NULL
;

533 
	`≠r_skùli°_‰ì
(
¶
, 
p
);

534 
¶
->
height
--;

536 i‡(!
¶
->
t›
) {

537 
¶
->
bŸtom
 = 
NULL
;

539  
¶
->
height
;

540 
	}
}

542 
	$APR_DECLARE
(Ë
	$≠r_skùli°_ªmove_com∑ª
(
≠r_skùli°
 *
¶i
,

543 *
d©a
,

544 
≠r_skùli°_‰ìfunc
 
my‰ì
, 
≠r_skùli°_com∑ª
 
comp
)

546 
≠r_skùli°node
 *
m
;

547 
≠r_skùli°
 *
¶
;

548 i‡(
comp
 =
¶i
->
com∑ªk
 || !¶i->
ödex
) {

549 
¶
 = 
¶i
;

552 
	`≠r_skùli°_föd
(
¶i
->
ödex
, (*)
comp
, &
m
);

553 
¶
 = (
≠r_skùli°
 *Ë
m
->
d©a
;

555 
	`skùli°i_föd_com∑ª
(
¶
, 
d©a
, &
m
, 
comp
);

556 i‡(!
m
) {

559 
m
->
¥evödex
) {

560 
m
 = m->
¥evödex
;

562  
	`skùli°i_ªmove
(
¶
, 
m
, 
my‰ì
);

563 
	}
}

565 
	$APR_DECLARE
(Ë
	$≠r_skùli°_ªmove_Æl
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_‰ìfunc
 
my‰ì
)

572 
≠r_skùli°node
 *
m
, *
p
, *
u
;

573 
m
 = 
¶
->
bŸtom
;

574 
m
) {

575 
p
 = 
m
->
√xt
;

576 i‡(
p
 && 
my‰ì
 &&Ö->
d©a
)

577 
	`my‰ì
(
p
->
d©a
);

578 
m
) {

579 
u
 = 
m
->
up
;

580 
	`≠r_skùli°_‰ì
(
¶
, 
p
);

581 
m
 = 
u
;

583 
m
 = 
p
;

585 
¶
->
t›
 = sl->
bŸtom
 = 
NULL
;

586 
¶
->
height
 = 0;

587 
¶
->
size
 = 0;

588 
	}
}

590 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_p›
(
≠r_skùli°
 *
a
, 
≠r_skùli°_‰ìfunc
 
my‰ì
)

592 
≠r_skùli°node
 *
¶n
;

593 *
d©a
 = 
NULL
;

594 
¶n
 = 
	`≠r_skùli°_gëli°
(
a
);

595 i‡(
¶n
) {

596 
d©a
 = 
¶n
->data;

597 
	`skùli°i_ªmove
(
a
, 
¶n
, 
my‰ì
);

599  
d©a
;

600 
	}
}

602 
	$APR_DECLARE
(*Ë
	$≠r_skùli°_≥ek
(
≠r_skùli°
 *
a
)

604 
≠r_skùli°node
 *
¶n
;

605 
¶n
 = 
	`≠r_skùli°_gëli°
(
a
);

606 i‡(
¶n
) {

607  
¶n
->
d©a
;

609  
NULL
;

610 
	}
}

612 
	$skùli°i_de°roy
(*
v¶
)

614 
	`≠r_skùli°_de°roy
((
≠r_skùli°
 *Ë
v¶
, 
NULL
);

615 
	`≠r_skùli°_‰ì
((
≠r_skùli°
 *Ë
v¶
, vsl);

616 
	}
}

618 
	$APR_DECLARE
(Ë
	$≠r_skùli°_de°roy
(
≠r_skùli°
 *
¶
, 
≠r_skùli°_‰ìfunc
 
my‰ì
)

620 
	`≠r_skùli°_p›
(
¶
->
ödex
, 
skùli°i_de°roy
Ë!
NULL
)

622 
	`≠r_skùli°_ªmove_Æl
(
¶
, 
my‰ì
);

623 
	}
}

625 
	$APR_DECLARE
(
≠r_skùli°
 *Ë
	$≠r_skùli°_mîge
(
≠r_skùli°
 *
¶1
,á¥_skùli° *
¶2
)

628 
≠r_skùli°
 
ãmp
;

629 
≠r_skùli°node
 *
b2
;

630 i‡(
¶1
->
bŸtomíd
 =
NULL
 || sl1->bŸtomíd->
¥ev
 == NULL) {

631 
	`≠r_skùli°_ªmove_Æl
(
¶1
, 
NULL
);

632 
ãmp
 = *
¶1
;

633 *
¶1
 = *
¶2
;

634 *
¶2
 = 
ãmp
;

636  
¶1
;

638 if(
¶2
->
bŸtom
 =
NULL
 || sl2->bŸtom->
√xt
 == NULL) {

639 
	`≠r_skùli°_ªmove_Æl
(
¶2
, 
NULL
);

640  
¶1
;

643 
b2
 = 
	`≠r_skùli°_gëli°
(
¶2
);

644 
b2
) {

645 
	`≠r_skùli°_ö£π
(
¶1
, 
b2
->
d©a
);

646 
	`≠r_skùli°_√xt
(
¶2
, &
b2
);

648 
	`≠r_skùli°_ªmove_Æl
(
¶2
, 
NULL
);

649  
¶1
;

650 
	}
}

	@tables/apr_tables.c

24 
	~"≠r_¥iv©e.h
"

26 
	~"≠r_gíîÆ.h
"

27 
	~"≠r_poﬁs.h
"

28 
	~"≠r_èbÀs.h
"

29 
	~"≠r_°rögs.h
"

30 
	~"≠r_lib.h
"

31 #i‡
APR_HAVE_STDLIB_H


32 
	~<°dlib.h
>

34 #i‡
APR_HAVE_STRING_H


35 
	~<°rög.h
>

37 #i‡
APR_HAVE_STRINGS_H


38 
	~<°rögs.h
>

41 #i‡(
APR_POOL_DEBUG
 || 
deföed
(
MAKE_TABLE_PROFILE
)Ë&& 
APR_HAVE_STDIO_H


42 
	~<°dio.h
>

54 
	$make_¨øy_c‹e
(
≠r_¨øy_hódî_t
 *
ªs
, 
≠r_poﬁ_t
 *
p
,

55 
√…s
, 
ñt_size
, 
˛ór
)

61 i‡(
√…s
 < 1) {

62 
√…s
 = 1;

65 i‡(
˛ór
) {

66 
ªs
->
ñts
 = 
	`≠r_pˇŒoc
(
p
, 
√…s
 * 
ñt_size
);

69 
ªs
->
ñts
 = 
	`≠r_∑Œoc
(
p
, 
√…s
 * 
ñt_size
);

72 
ªs
->
poﬁ
 = 
p
;

73 
ªs
->
ñt_size
 =Élt_size;

74 
ªs
->
√…s
 = 0;

75 
ªs
->
«Œoc
 = 
√…s
;

76 
	}
}

78 
	$APR_DECLARE
(Ë
	$≠r_is_em±y_¨øy
(c⁄° 
≠r_¨øy_hódî_t
 *
a
)

80  ((
a
 =
NULL
Ë|| (a->
√…s
 == 0));

81 
	}
}

83 
	$APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
	$≠r_¨øy_make
(
≠r_poﬁ_t
 *
p
,

84 
√…s
, 
ñt_size
)

86 
≠r_¨øy_hódî_t
 *
ªs
;

88 
ªs
 = (
≠r_¨øy_hódî_t
 *Ë
	`≠r_∑Œoc
(
p
, (apr_array_header_t));

89 
	`make_¨øy_c‹e
(
ªs
, 
p
, 
√…s
, 
ñt_size
, 1);

90  
ªs
;

91 
	}
}

93 
	$APR_DECLARE
(Ë
	$≠r_¨øy_˛ór
(
≠r_¨øy_hódî_t
 *
¨r
)

95 
¨r
->
√…s
 = 0;

96 
	}
}

98 
	$APR_DECLARE
(*Ë
	$≠r_¨øy_p›
(
≠r_¨øy_hódî_t
 *
¨r
)

100 i‡(
	`≠r_is_em±y_¨øy
(
¨r
)) {

101  
NULL
;

104  
¨r
->
ñts
 + (¨r->
ñt_size
 * (--¨r->
√…s
));

105 
	}
}

107 
	$APR_DECLARE
(*Ë
	$≠r_¨øy_push
(
≠r_¨øy_hódî_t
 *
¨r
)

109 i‡(
¨r
->
√…s
 =¨r->
«Œoc
) {

110 
√w_size
 = (
¨r
->
«Œoc
 <= 0) ? 1 :árr->nalloc * 2;

111 *
√w_d©a
;

113 
√w_d©a
 = 
	`≠r_∑Œoc
(
¨r
->
poﬁ
,áº->
ñt_size
 * 
√w_size
);

115 
	`mem˝y
(
√w_d©a
, 
¨r
->
ñts
,áº->
«Œoc
 *áº->
ñt_size
);

116 
	`mem£t
(
√w_d©a
 + 
¨r
->
«Œoc
 *áº->
ñt_size
, 0,

117 
¨r
->
ñt_size
 * (
√w_size
 -áº->
«Œoc
));

118 
¨r
->
ñts
 = 
√w_d©a
;

119 
¨r
->
«Œoc
 = 
√w_size
;

122 ++
¨r
->
√…s
;

123  
¨r
->
ñts
 + (¨r->
ñt_size
 * (¨r->
√…s
 - 1));

124 
	}
}

126 *
	$≠r_¨øy_push_no˛ór
(
≠r_¨øy_hódî_t
 *
¨r
)

128 i‡(
¨r
->
√…s
 =¨r->
«Œoc
) {

129 
√w_size
 = (
¨r
->
«Œoc
 <= 0) ? 1 :árr->nalloc * 2;

130 *
√w_d©a
;

132 
√w_d©a
 = 
	`≠r_∑Œoc
(
¨r
->
poﬁ
,áº->
ñt_size
 * 
√w_size
);

134 
	`mem˝y
(
√w_d©a
, 
¨r
->
ñts
,áº->
«Œoc
 *áº->
ñt_size
);

135 
¨r
->
ñts
 = 
√w_d©a
;

136 
¨r
->
«Œoc
 = 
√w_size
;

139 ++
¨r
->
√…s
;

140  
¨r
->
ñts
 + (¨r->
ñt_size
 * (¨r->
√…s
 - 1));

141 
	}
}

143 
	$APR_DECLARE
(Ë
	$≠r_¨øy_ˇt
(
≠r_¨øy_hódî_t
 *
d°
,

144 c⁄° 
≠r_¨øy_hódî_t
 *
§c
)

146 
ñt_size
 = 
d°
->elt_size;

148 i‡(
d°
->
√…s
 + 
§c
->√…†> d°->
«Œoc
) {

149 
√w_size
 = (
d°
->
«Œoc
 <= 0) ? 1 : dst->nalloc * 2;

150 *
√w_d©a
;

152 
d°
->
√…s
 + 
§c
->√…†> 
√w_size
) {

153 
√w_size
 *= 2;

156 
√w_d©a
 = 
	`≠r_pˇŒoc
(
d°
->
poﬁ
, 
ñt_size
 * 
√w_size
);

157 
	`mem˝y
(
√w_d©a
, 
d°
->
ñts
, d°->
«Œoc
 * 
ñt_size
);

159 
d°
->
ñts
 = 
√w_d©a
;

160 
d°
->
«Œoc
 = 
√w_size
;

163 
	`mem˝y
(
d°
->
ñts
 + d°->
√…s
 * 
ñt_size
, 
§c
->elts,

164 
ñt_size
 * 
§c
->
√…s
);

165 
d°
->
√…s
 +
§c
->nelts;

166 
	}
}

168 
	$APR_DECLARE
(
≠r_¨øy_hódî_t
 *Ë
	$≠r_¨øy_c›y
(
≠r_poﬁ_t
 *
p
,

169 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
)

171 
≠r_¨øy_hódî_t
 *
ªs
 =

172 (
≠r_¨øy_hódî_t
 *Ë
	`≠r_∑Œoc
(
p
, (apr_array_header_t));

173 
	`make_¨øy_c‹e
(
ªs
, 
p
, 
¨r
->
«Œoc
,áº->
ñt_size
, 0);

175 
	`mem˝y
(
ªs
->
ñts
, 
¨r
->ñts,áº->
ñt_size
 *áº->
√…s
);

176 
ªs
->
√…s
 = 
¨r
->nelts;

177 
	`mem£t
(
ªs
->
ñts
 +Ñes->
ñt_size
 *Ñes->
√…s
, 0,

178 
ªs
->
ñt_size
 * (ªs->
«Œoc
 -Ñes->
√…s
));

179  
ªs
;

180 
	}
}

189 
APR_INLINE
 
	$c›y_¨øy_hdr_c‹e
(
≠r_¨øy_hódî_t
 *
ªs
,

190 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
)

192 
ªs
->
ñts
 = 
¨r
->elts;

193 
ªs
->
ñt_size
 = 
¨r
->elt_size;

194 
ªs
->
√…s
 = 
¨r
->nelts;

195 
ªs
->
«Œoc
 = 
¨r
->
√…s
;

196 
	}
}

198 
	$APR_DECLARE
(
≠r_¨øy_hódî_t
 *)

199 
	$≠r_¨øy_c›y_hdr
(
≠r_poﬁ_t
 *
p
,

200 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
)

202 
≠r_¨øy_hódî_t
 *
ªs
;

204 
ªs
 = (
≠r_¨øy_hódî_t
 *Ë
	`≠r_∑Œoc
(
p
, (apr_array_header_t));

205 
ªs
->
poﬁ
 = 
p
;

206 
	`c›y_¨øy_hdr_c‹e
(
ªs
, 
¨r
);

207  
ªs
;

208 
	}
}

212 
	$APR_DECLARE
(
≠r_¨øy_hódî_t
 *)

213 
	$≠r_¨øy_≠≥nd
(
≠r_poﬁ_t
 *
p
,

214 c⁄° 
≠r_¨øy_hódî_t
 *
fú°
,

215 c⁄° 
≠r_¨øy_hódî_t
 *
£c⁄d
)

217 
≠r_¨øy_hódî_t
 *
ªs
 = 
	`≠r_¨øy_c›y_hdr
(
p
, 
fú°
);

219 
	`≠r_¨øy_ˇt
(
ªs
, 
£c⁄d
);

220  
ªs
;

221 
	}
}

229 
	$APR_DECLARE
(*Ë
	$≠r_¨øy_p°rˇt
(
≠r_poﬁ_t
 *
p
,

230 c⁄° 
≠r_¨øy_hódî_t
 *
¨r
,

231 c⁄° 
£p
)

233 *
˝
, *
ªs
, **
°Ωp
;

234 
≠r_size_t
 
Àn
;

235 
i
;

237 i‡(
¨r
->
√…s
 <0 ||áº->
ñts
 =
NULL
) {

238  (*Ë
	`≠r_pˇŒoc
(
p
, 1);

243 
Àn
 = 0;

244 
i
 = 0, 
°Ωp
 = (**Ë
¨r
->
ñts
; ; ++strpp) {

245 i‡(
°Ωp
 && *°Ω∞!
NULL
) {

246 
Àn
 +
	`°æí
(*
°Ωp
);

248 i‡(++
i
 >
¨r
->
√…s
) {

251 i‡(
£p
) {

252 ++
Àn
;

258 
ªs
 = (*Ë
	`≠r_∑Œoc
(
p
, 
Àn
 + 1);

259 
˝
 = 
ªs
;

263 
i
 = 0, 
°Ωp
 = (**Ë
¨r
->
ñts
; ; ++strpp) {

264 i‡(
°Ωp
 && *°Ω∞!
NULL
) {

265 
Àn
 = 
	`°æí
(*
°Ωp
);

266 
	`mem˝y
(
˝
, *
°Ωp
, 
Àn
);

267 
˝
 +
Àn
;

269 i‡(++
i
 >
¨r
->
√…s
) {

272 i‡(
£p
) {

273 *
˝
++ = 
£p
;

277 *
˝
 = '\0';

281  
ªs
;

282 
	}
}

290 #i‡
APR_CHARSET_EBCDIC


291 
	#CASE_MASK
 0xbfbfbfbf

	)

293 
	#CASE_MASK
 0xdfdfdfdf

	)

296 
	#TABLE_HASH_SIZE
 32

	)

297 
	#TABLE_INDEX_MASK
 0x1f

	)

298 
	#TABLE_HASH
(
key
Ë(
TABLE_INDEX_MASK
 & *(*)(key))

	)

299 
	#TABLE_INDEX_IS_INITIALIZED
(
t
, 
i
Ë(—)->
ödex_öôülized
 & (1 << (i)))

	)

300 
	#TABLE_SET_INDEX_INITIALIZED
(
t
, 
i
Ë(—)->
ödex_öôülized
 |(1 << (i)))

	)

308 
	#COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
) \

310 c⁄° *
k
 = (
key
); \

311 
≠r_uöt32_t
 
c
 = (≠r_uöt32_t)*
k
; \

312 (
checksum
Ë
c
; \

313 (
checksum
) <<= 8; \

314 i‡(
c
) { \

315 
c
 = (
≠r_uöt32_t
)*++
k
; \

316 
checksum
 |
c
; \

318 (
checksum
) <<= 8; \

319 i‡(
c
) { \

320 
c
 = (
≠r_uöt32_t
)*++
k
; \

321 
checksum
 |
c
; \

323 (
checksum
) <<= 8; \

324 i‡(
c
) { \

325 
c
 = (
≠r_uöt32_t
)*++
k
; \

326 
checksum
 |
c
; \

328 
checksum
 &
CASE_MASK
; \

329 }

	)

332 
	s≠r_èbÀ_t
 {

339 
≠r_¨øy_hódî_t
 
	ma
;

340 #ifde‡
MAKE_TABLE_PROFILE


342 *
	m¸ót‹
;

355 
≠r_uöt32_t
 
	mödex_öôülized
;

356 
	mödex_fú°
[
TABLE_HASH_SIZE
];

357 
	mödex_œ°
[
TABLE_HASH_SIZE
];

363 
≠r_poﬁ_t
 *
	mp
;

364 c⁄° *
	mfú°
;

365 
≠r_¨øy_hódî_t
 *
	mmîged
;

366 } 
	tèbÀ_gëm_t
;

372 #ifde‡
MAKE_TABLE_PROFILE


373 
≠r_èbÀ_íåy_t
 *
	$do_èbÀ_push
(c⁄° *
func
, 
≠r_èbÀ_t
 *
t
)

375 i‡(
t
->
a
.
√…s
 =t->a.
«Œoc
) {

376 
	`Ârötf
(
°dîr
, "%s:Åable created by %p hitÜimit of %u\n",

377 
func
 ? fun¯: "èbÀ_push", 
t
->
¸ót‹
,Å->
a
.
«Œoc
);

379  (
≠r_èbÀ_íåy_t
 *Ë
	`≠r_¨øy_push_no˛ór
(&
t
->
a
);

380 
	}
}

381 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

382 
	#èbÀ_push
(
t
Ë
	`do_èbÀ_push
(
__FUNCTION__
,Å)

	)

384 
	#èbÀ_push
(
t
Ë
	`do_èbÀ_push
(
NULL
,Å)

	)

387 
	#èbÀ_push
(
t
Ë((
≠r_èbÀ_íåy_t
 *Ë
	`≠r_¨øy_push_no˛ór
(&—)->
a
))

	)

390 
	$APR_DECLARE
(c⁄° 
≠r_¨øy_hódî_t
 *Ë
	$≠r_èbÀ_ñts
(c⁄° 
≠r_èbÀ_t
 *
t
)

392  (c⁄° 
≠r_¨øy_hódî_t
 *)
t
;

393 
	}
}

395 
	$APR_DECLARE
(Ë
	$≠r_is_em±y_èbÀ
(c⁄° 
≠r_èbÀ_t
 *
t
)

397  ((
t
 =
NULL
Ë|| (t->
a
.
√…s
 == 0));

398 
	}
}

400 
	$APR_DECLARE
(
≠r_èbÀ_t
 *Ë
	$≠r_èbÀ_make
(
≠r_poﬁ_t
 *
p
, 
√…s
)

402 
≠r_èbÀ_t
 *
t
 = 
	`≠r_∑Œoc
(
p
, (apr_table_t));

404 
	`make_¨øy_c‹e
(&
t
->
a
, 
p
, 
√…s
, (
≠r_èbÀ_íåy_t
), 0);

405 #ifde‡
MAKE_TABLE_PROFILE


406 
t
->
¸ót‹
 = 
	`__buûtö_ªtu∫_addªss
(0);

408 
t
->
ödex_öôülized
 = 0;

409  
t
;

410 
	}
}

412 
	$APR_DECLARE
(
≠r_èbÀ_t
 *Ë
	$≠r_èbÀ_c›y
(
≠r_poﬁ_t
 *
p
, c⁄° 
≠r_èbÀ_t
 *
t
)

414 
≠r_èbÀ_t
 *
√w
 = 
	`≠r_∑Œoc
(
p
, (apr_table_t));

416 #i‡
APR_POOL_DEBUG


420 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
t
->
a
.
poﬁ
, 
p
)) {

421 
	`Ârötf
(
°dîr
, "apr_table_copy:Å'sÖool isÇotánáncestor ofÖ\n");

422 
	`ab‹t
();

425 
	`make_¨øy_c‹e
(&
√w
->
a
, 
p
, 
t
->a.
«Œoc
, (
≠r_èbÀ_íåy_t
), 0);

426 
	`mem˝y
(
√w
->
a
.
ñts
, 
t
->a.ñts,Å->a.
√…s
 * (
≠r_èbÀ_íåy_t
));

427 
√w
->
a
.
√…s
 = 
t
->a.nelts;

428 
	`mem˝y
(
√w
->
ödex_fú°
, 
t
->ödex_fú°, (Ë* 
TABLE_HASH_SIZE
);

429 
	`mem˝y
(
√w
->
ödex_œ°
, 
t
->ödex_œ°, (Ë* 
TABLE_HASH_SIZE
);

430 
√w
->
ödex_öôülized
 = 
t
->index_initialized;

431  
√w
;

432 
	}
}

434 
	$APR_DECLARE
(
≠r_èbÀ_t
 *Ë
	$≠r_èbÀ_˛⁄e
(
≠r_poﬁ_t
 *
p
, c⁄° 
≠r_èbÀ_t
 *
t
)

436 c⁄° 
≠r_¨øy_hódî_t
 *
¨øy
 = 
	`≠r_èbÀ_ñts
(
t
);

437 
≠r_èbÀ_íåy_t
 *
ñts
 = (≠r_èbÀ_íåy_à*Ë
¨øy
->elts;

438 
≠r_èbÀ_t
 *
√w
 = 
	`≠r_èbÀ_make
(
p
, 
¨øy
->
√…s
);

439 
i
;

441 
i
 = 0; i < 
¨øy
->
√…s
; i++) {

442 
	`≠r_èbÀ_add
(
√w
, 
ñts
[
i
].
key
,É…s[i].
vÆ
);

445  
√w
;

446 
	}
}

448 
	$èbÀ_ªödex
(
≠r_èbÀ_t
 *
t
)

450 
i
;

451 
hash
;

452 
≠r_èbÀ_íåy_t
 *
√xt_ñt
 = (≠r_èbÀ_íåy_à*Ë
t
->
a
.
ñts
;

454 
t
->
ödex_öôülized
 = 0;

455 
i
 = 0; i < 
t
->
a
.
√…s
; i++, 
√xt_ñt
++) {

456 
hash
 = 
	`TABLE_HASH
(
√xt_ñt
->
key
);

457 
t
->
ödex_œ°
[
hash
] = 
i
;

458 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

459 
t
->
ödex_fú°
[
hash
] = 
i
;

460 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

463 
	}
}

465 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_˛ór
(
≠r_èbÀ_t
 *
t
)

467 
t
->
a
.
√…s
 = 0;

468 
t
->
ödex_öôülized
 = 0;

469 
	}
}

471 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_èbÀ_gë
(c⁄° 
≠r_èbÀ_t
 *
t
, c⁄° *
key
)

473 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

474 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

475 
≠r_uöt32_t
 
checksum
;

476 
hash
;

478 i‡(
key
 =
NULL
) {

479  
NULL
;

482 
hash
 = 
	`TABLE_HASH
(
key
);

483 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

484  
NULL
;

486 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

487 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];;

488 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

490 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

491 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

492 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

493  
√xt_ñt
->
vÆ
;

497  
NULL
;

498 
	}
}

500 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_£t
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

501 c⁄° *
vÆ
)

503 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

504 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

505 
≠r_èbÀ_íåy_t
 *
èbÀ_íd
;

506 
≠r_uöt32_t
 
checksum
;

507 
hash
;

509 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

510 
hash
 = 
	`TABLE_HASH
(
key
);

511 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

512 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

513 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

514 
add_√w_ñt
;

516 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];;

517 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

518 
èbÀ_íd
 =((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->a.
√…s
;

520 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

521 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

522 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

526 
mu°_ªödex
 = 0;

527 
≠r_èbÀ_íåy_t
 *
d°_ñt
 = 
NULL
;

529 
√xt_ñt
->
vÆ
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, val);

532 
√xt_ñt
++;Çext_ñà<
íd_ñt
;Çext_elt++) {

533 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

534 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

535 
t
->
a
.
√…s
--;

536 i‡(!
d°_ñt
) {

537 
d°_ñt
 = 
√xt_ñt
;

540 i‡(
d°_ñt
) {

541 *
d°_ñt
++ = *
√xt_ñt
;

542 
mu°_ªödex
 = 1;

551 i‡(
d°_ñt
) {

552 ; 
√xt_ñt
 < 
èbÀ_íd
;Çext_elt++) {

553 *
d°_ñt
++ = *
√xt_ñt
;

555 
mu°_ªödex
 = 1;

557 i‡(
mu°_ªödex
) {

558 
	`èbÀ_ªödex
(
t
);

564 
add_√w_ñt
:

565 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

566 
√xt_ñt
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

567 
√xt_ñt
->
key
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, key);

568 
√xt_ñt
->
vÆ
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, val);

569 
√xt_ñt
->
key_checksum
 = 
checksum
;

570 
	}
}

572 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_£ä
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

573 c⁄° *
vÆ
)

575 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

576 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

577 
≠r_èbÀ_íåy_t
 *
èbÀ_íd
;

578 
≠r_uöt32_t
 
checksum
;

579 
hash
;

581 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

582 
hash
 = 
	`TABLE_HASH
(
key
);

583 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

584 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

585 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

586 
add_√w_ñt
;

588 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];;

589 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

590 
èbÀ_íd
 =((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->a.
√…s
;

592 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

593 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

594 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

598 
mu°_ªödex
 = 0;

599 
≠r_èbÀ_íåy_t
 *
d°_ñt
 = 
NULL
;

601 
√xt_ñt
->
vÆ
 = (*)val;

604 
√xt_ñt
++;Çext_ñà<
íd_ñt
;Çext_elt++) {

605 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

606 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

607 
t
->
a
.
√…s
--;

608 i‡(!
d°_ñt
) {

609 
d°_ñt
 = 
√xt_ñt
;

612 i‡(
d°_ñt
) {

613 *
d°_ñt
++ = *
√xt_ñt
;

614 
mu°_ªödex
 = 1;

623 i‡(
d°_ñt
) {

624 ; 
√xt_ñt
 < 
èbÀ_íd
;Çext_elt++) {

625 *
d°_ñt
++ = *
√xt_ñt
;

627 
mu°_ªödex
 = 1;

629 i‡(
mu°_ªödex
) {

630 
	`èbÀ_ªödex
(
t
);

636 
add_√w_ñt
:

637 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

638 
√xt_ñt
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

639 
√xt_ñt
->
key
 = (*)key;

640 
√xt_ñt
->
vÆ
 = (*)val;

641 
√xt_ñt
->
key_checksum
 = 
checksum
;

642 
	}
}

644 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_un£t
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
)

646 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

647 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

648 
≠r_èbÀ_íåy_t
 *
d°_ñt
;

649 
≠r_uöt32_t
 
checksum
;

650 
hash
;

651 
mu°_ªödex
;

653 
hash
 = 
	`TABLE_HASH
(
key
);

654 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

657 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

658 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];

659 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

660 
mu°_ªödex
 = 0;

661 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

662 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

663 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

668 
≠r_èbÀ_íåy_t
 *
èbÀ_íd
 = (◊¥_èbÀ_íåy_à*Ë
t
->
a
.
ñts
) +

669 
t
->
a
.
√…s
;

670 
t
->
a
.
√…s
--;

671 
d°_ñt
 = 
√xt_ñt
;

672 
√xt_ñt
++;Çext_ñà<
íd_ñt
;Çext_elt++) {

673 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

674 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

675 
t
->
a
.
√…s
--;

678 *
d°_ñt
++ = *
√xt_ñt
;

686 ; 
√xt_ñt
 < 
èbÀ_íd
;Çext_elt++) {

687 *
d°_ñt
++ = *
√xt_ñt
;

689 
mu°_ªödex
 = 1;

693 i‡(
mu°_ªödex
) {

694 
	`èbÀ_ªödex
(
t
);

696 
	}
}

698 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_mîge
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

699 c⁄° *
vÆ
)

701 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

702 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

703 
≠r_uöt32_t
 
checksum
;

704 
hash
;

706 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

707 
hash
 = 
	`TABLE_HASH
(
key
);

708 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

709 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

710 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

711 
add_√w_ñt
;

713 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];

714 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

716 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

717 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

718 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

721 
√xt_ñt
->
vÆ
 = 
	`≠r_p°rˇt
(
t
->
a
.
poﬁ
,Çext_elt->val, ", ",

722 
vÆ
, 
NULL
);

727 
add_√w_ñt
:

728 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

729 
√xt_ñt
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

730 
√xt_ñt
->
key
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, key);

731 
√xt_ñt
->
vÆ
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, val);

732 
√xt_ñt
->
key_checksum
 = 
checksum
;

733 
	}
}

735 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_mîgí
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

736 c⁄° *
vÆ
)

738 
≠r_èbÀ_íåy_t
 *
√xt_ñt
;

739 
≠r_èbÀ_íåy_t
 *
íd_ñt
;

740 
≠r_uöt32_t
 
checksum
;

741 
hash
;

743 #i‡
APR_POOL_DEBUG


745 
≠r_poﬁ_t
 *
poﬁ
;

746 
poﬁ
 = 
	`≠r_poﬁ_föd
(
key
);

747 i‡((
poﬁ
 !(
≠r_poﬁ_t
 *)
key
)

748 && (!
	`≠r_poﬁ_is_™˚°‹
(
poﬁ
, 
t
->
a
.pool))) {

749 
	`Ârötf
(
°dîr
, "apr_table_mergen: keyÇot ináncestorÖool ofÅ\n");

750 
	`ab‹t
();

752 
poﬁ
 = 
	`≠r_poﬁ_föd
(
vÆ
);

753 i‡((
poﬁ
 !(
≠r_poﬁ_t
 *)
vÆ
)

754 && (!
	`≠r_poﬁ_is_™˚°‹
(
poﬁ
, 
t
->
a
.pool))) {

755 
	`Ârötf
(
°dîr
, "apr_table_mergen: valÇot ináncestorÖool ofÅ\n");

756 
	`ab‹t
();

761 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

762 
hash
 = 
	`TABLE_HASH
(
key
);

763 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

764 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

765 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

766 
add_√w_ñt
;

768 
√xt_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_fú°
[
hash
];;

769 
íd_ñt
 = ((
≠r_èbÀ_íåy_t
 *Ë
t
->
a
.
ñts
Ë+Å->
ödex_œ°
[
hash
];

771 ; 
√xt_ñt
 <
íd_ñt
;Çext_elt++) {

772 i‡((
checksum
 =
√xt_ñt
->
key_checksum
) &&

773 !
	`°rˇ£cmp
(
√xt_ñt
->
key
, key)) {

776 
√xt_ñt
->
vÆ
 = 
	`≠r_p°rˇt
(
t
->
a
.
poﬁ
,Çext_elt->val, ", ",

777 
vÆ
, 
NULL
);

782 
add_√w_ñt
:

783 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

784 
√xt_ñt
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

785 
√xt_ñt
->
key
 = (*)key;

786 
√xt_ñt
->
vÆ
 = (*)val;

787 
√xt_ñt
->
key_checksum
 = 
checksum
;

788 
	}
}

790 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_add
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

791 c⁄° *
vÆ
)

793 
≠r_èbÀ_íåy_t
 *
ñts
;

794 
≠r_uöt32_t
 
checksum
;

795 
hash
;

797 
hash
 = 
	`TABLE_HASH
(
key
);

798 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

799 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

800 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

801 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

803 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

804 
ñts
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

805 
ñts
->
key
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, key);

806 
ñts
->
vÆ
 = 
	`≠r_p°rdup
(
t
->
a
.
poﬁ
, val);

807 
ñts
->
key_checksum
 = 
checksum
;

808 
	}
}

810 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_addn
(
≠r_èbÀ_t
 *
t
, c⁄° *
key
,

811 c⁄° *
vÆ
)

813 
≠r_èbÀ_íåy_t
 *
ñts
;

814 
≠r_uöt32_t
 
checksum
;

815 
hash
;

817 #i‡
APR_POOL_DEBUG


819 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
	`≠r_poﬁ_föd
(
key
), 
t
->
a
.
poﬁ
)) {

820 
	`Ârötf
(
°dîr
, "apr_table_addn: keyÇot ináncestorÖool ofÅ\n");

821 
	`ab‹t
();

823 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
	`≠r_poﬁ_föd
(
vÆ
), 
t
->
a
.
poﬁ
)) {

824 
	`Ârötf
(
°dîr
, "apr_table_addn: valÇot ináncestorÖool ofÅ\n");

825 
	`ab‹t
();

830 
hash
 = 
	`TABLE_HASH
(
key
);

831 
t
->
ödex_œ°
[
hash
] =Å->
a
.
√…s
;

832 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

833 
t
->
ödex_fú°
[
hash
] =Å->
a
.
√…s
;

834 
	`TABLE_SET_INDEX_INITIALIZED
(
t
, 
hash
);

836 
	`COMPUTE_KEY_CHECKSUM
(
key
, 
checksum
);

837 
ñts
 = (
≠r_èbÀ_íåy_t
 *Ë
	`èbÀ_push
(
t
);

838 
ñts
->
key
 = (*)key;

839 
ñts
->
vÆ
 = (*)val;

840 
ñts
->
key_checksum
 = 
checksum
;

841 
	}
}

843 
	$APR_DECLARE
(
≠r_èbÀ_t
 *Ë
	$≠r_èbÀ_ovîœy
(
≠r_poﬁ_t
 *
p
,

844 c⁄° 
≠r_èbÀ_t
 *
ovîœy
,

845 c⁄° 
≠r_èbÀ_t
 *
ba£
)

847 
≠r_èbÀ_t
 *
ªs
;

849 #i‡
APR_POOL_DEBUG


854 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
ovîœy
->
a
.
poﬁ
, 
p
)) {

855 
	`Ârötf
(
°dîr
,

857 
	`ab‹t
();

859 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
ba£
->
a
.
poﬁ
, 
p
)) {

860 
	`Ârötf
(
°dîr
,

862 
	`ab‹t
();

866 
ªs
 = 
	`≠r_∑Œoc
(
p
, (
≠r_èbÀ_t
));

868 
ªs
->
a
.
poﬁ
 = 
p
;

869 
	`c›y_¨øy_hdr_c‹e
(&
ªs
->
a
, &
ovîœy
->a);

870 
	`≠r_¨øy_ˇt
(&
ªs
->
a
, &
ba£
->a);

871 
	`èbÀ_ªödex
(
ªs
);

872  
ªs
;

873 
	}
}

918 
	$APR_DECLARE_NONSTD
(Ë
	$≠r_èbÀ_do
(
≠r_èbÀ_do_ˇŒback_‚_t
 *
comp
,

919 *
ªc
, c⁄° 
≠r_èbÀ_t
 *
t
, ...)

921 
rv
;

923 
va_li°
 
vp
;

924 
	`va_°¨t
(
vp
, 
t
);

925 
rv
 = 
	`≠r_èbÀ_vdo
(
comp
, 
ªc
, 
t
, 
vp
);

926 
	`va_íd
(
vp
);

928  
rv
;

929 
	}
}

961 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_vdo
(
≠r_èbÀ_do_ˇŒback_‚_t
 *
comp
,

962 *
ªc
, c⁄° 
≠r_èbÀ_t
 *
t
, 
va_li°
 
vp
)

964 *
¨gp
;

965 
≠r_èbÀ_íåy_t
 *
ñts
 = (≠r_èbÀ_íåy_à*Ë
t
->
a
.elts;

966 
vd‹v
 = 1;

968 
¨gp
 = 
	`va_¨g
(
vp
, *);

970 
rv
 = 1, 
i
;

971 i‡(
¨gp
) {

973 
hash
 = 
	`TABLE_HASH
(
¨gp
);

974 i‡(
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
hash
)) {

975 
≠r_uöt32_t
 
checksum
;

976 
	`COMPUTE_KEY_CHECKSUM
(
¨gp
, 
checksum
);

977 
i
 = 
t
->
ödex_fú°
[
hash
];

978 
rv
 && (
i
 <
t
->
ödex_œ°
[
hash
]); ++i) {

979 i‡(
ñts
[
i
].
key
 && (
checksum
 =ñts[i].
key_checksum
) &&

980 !
	`°rˇ£cmp
(
ñts
[
i
].
key
, 
¨gp
)) {

981 
rv
 = (*
comp
Ë(
ªc
, 
ñts
[
i
].
key
,É…s[i].
vÆ
);

988 
i
 = 0; 
rv
 && (ò< 
t
->
a
.
√…s
); ++i) {

989 i‡(
ñts
[
i
].
key
) {

990 
rv
 = (*
comp
Ë(
ªc
, 
ñts
[
i
].
key
,É…s[i].
vÆ
);

994 i‡(
rv
 == 0) {

995 
vd‹v
 = 0;

997 } 
¨gp
 && (◊rg∞
	`va_¨g
(
vp
, *)Ë!
NULL
));

999  
vd‹v
;

1000 
	}
}

1002 
≠r_èbÀ_íåy_t
 **
	$èbÀ_mîges‹t
(
≠r_poﬁ_t
 *
poﬁ
,

1003 
≠r_èbÀ_íåy_t
 **
vÆues
,

1004 
≠r_size_t
 
n
)

1009 
≠r_èbÀ_íåy_t
 **
vÆues_tmp
 =

1010 (
≠r_èbÀ_íåy_t
 **)
	`≠r_∑Œoc
(
poﬁ
, 
n
 * (apr_table_entry_t*));

1011 
≠r_size_t
 
i
;

1012 
≠r_size_t
 
blocksize
;

1015 
i
 = 0; i + 1 < 
n
; i += 2) {

1016 i‡(
	`°rˇ£cmp
(
vÆues
[
i
]->
key
, values[i + 1]->key) > 0) {

1017 
≠r_èbÀ_íåy_t
 *
sw≠
 = 
vÆues
[
i
];

1018 
vÆues
[
i
] = values[i + 1];

1019 
vÆues
[
i
 + 1] = 
sw≠
;

1024 
blocksize
 = 2;

1025 
blocksize
 < 
n
) {

1026 
≠r_èbÀ_íåy_t
 **
d°
 = 
vÆues_tmp
;

1027 
≠r_size_t
 
√xt_°¨t
;

1028 
≠r_èbÀ_íåy_t
 **
sw≠
;

1034 
√xt_°¨t
 = 0;Çext_°¨à+ 
blocksize
 < 
n
;

1035 
√xt_°¨t
 +(
blocksize
 + blocksize)) {

1037 
≠r_size_t
 
block1_°¨t
 = 
√xt_°¨t
;

1038 
≠r_size_t
 
block2_°¨t
 = 
block1_°¨t
 + 
blocksize
;

1039 
≠r_size_t
 
block1_íd
 = 
block2_°¨t
;

1040 
≠r_size_t
 
block2_íd
 = 
block2_°¨t
 + 
blocksize
;

1041 i‡(
block2_íd
 > 
n
) {

1043 
block2_íd
 = 
n
;

1054 i‡(
block1_°¨t
 =
block1_íd
) {

1055 ; 
block2_°¨t
 < 
block2_íd
; block2_start++) {

1056 *
d°
++ = 
vÆues
[
block2_°¨t
];

1060 i‡(
block2_°¨t
 =
block2_íd
) {

1061 ; 
block1_°¨t
 < 
block1_íd
; block1_start++) {

1062 *
d°
++ = 
vÆues
[
block1_°¨t
];

1066 i‡(
	`°rˇ£cmp
(
vÆues
[
block1_°¨t
]->
key
,

1067 
vÆues
[
block2_°¨t
]->
key
) > 0) {

1068 *
d°
++ = 
vÆues
[
block2_°¨t
++];

1071 *
d°
++ = 
vÆues
[
block1_°¨t
++];

1079 
i
 = 
d°
 - 
vÆues_tmp
; i < 
n
; i++) {

1080 
vÆues_tmp
[
i
] = 
vÆues
[i];

1086 
sw≠
 = 
vÆues_tmp
;

1087 
vÆues_tmp
 = 
vÆues
;

1088 
vÆues
 = 
sw≠
;

1090 
blocksize
 += blocksize;

1093  
vÆues
;

1094 
	}
}

1096 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_com¥ess
(
≠r_èbÀ_t
 *
t
, 
Êags
)

1098 
≠r_èbÀ_íåy_t
 **
s‹t_¨øy
;

1099 
≠r_èbÀ_íåy_t
 **
s‹t_√xt
;

1100 
≠r_èbÀ_íåy_t
 **
s‹t_íd
;

1101 
≠r_èbÀ_íåy_t
 *
èbÀ_√xt
;

1102 
≠r_èbÀ_íåy_t
 **
œ°
;

1103 
i
;

1104 
dups_found
;

1106 i‡(
t
->
a
.
√…s
 <= 1) {

1114 
s‹t_¨øy
 = (
≠r_èbÀ_íåy_t
 **)

1115 
	`≠r_∑Œoc
(
t
->
a
.
poﬁ
,Å->a.
√…s
 * (
≠r_èbÀ_íåy_t
*));

1116 
s‹t_√xt
 = 
s‹t_¨øy
;

1117 
èbÀ_√xt
 = (
≠r_èbÀ_íåy_t
 *)
t
->
a
.
ñts
;

1118 
i
 = 
t
->
a
.
√…s
;

1120 *
s‹t_√xt
++ = 
èbÀ_√xt
++;

1121 } --
i
);

1128 
s‹t_¨øy
 = 
	`èbÀ_mîges‹t
(
t
->
a
.
poﬁ
, s‹t_¨øy,Å->a.
√…s
);

1131 
dups_found
 = 0;

1132 
s‹t_√xt
 = 
s‹t_¨øy
;

1133 
s‹t_íd
 = 
s‹t_¨øy
 + 
t
->
a
.
√…s
;

1134 
œ°
 = 
s‹t_√xt
++;

1135 
s‹t_√xt
 < 
s‹t_íd
) {

1136 i‡(((*
s‹t_√xt
)->
key_checksum
 =(*
œ°
)->key_checksum) &&

1137 !
	`°rˇ£cmp
((*
s‹t_√xt
)->
key
, (*
œ°
)->key)) {

1138 
≠r_èbÀ_íåy_t
 **
dup_œ°
 = 
s‹t_√xt
 + 1;

1139 
dups_found
 = 1;

1140 (
dup_œ°
 < 
s‹t_íd
) &&

1141 ((*
dup_œ°
)->
key_checksum
 =(*
œ°
)->key_checksum) &&

1142 !
	`°rˇ£cmp
((*
dup_œ°
)->
key
, (*
œ°
)->key)) {

1143 
dup_œ°
++;

1145 
dup_œ°
--;

1148 i‡(
Êags
 =
APR_OVERLAP_TABLES_MERGE
) {

1149 
≠r_size_t
 
Àn
 = 0;

1150 
≠r_èbÀ_íåy_t
 **
√xt
 = 
œ°
;

1151 *
√w_vÆ
;

1152 *
vÆ_d°
;

1154 
Àn
 +
	`°æí
((*
√xt
)->
vÆ
);

1155 
Àn
 += 2;

1156 } ++
√xt
 <
dup_œ°
);

1157 
√w_vÆ
 = (*)
	`≠r_∑Œoc
(
t
->
a
.
poﬁ
, 
Àn
);

1158 
vÆ_d°
 = 
√w_vÆ
;

1159 
√xt
 = 
œ°
;

1161 
	`°r˝y
(
vÆ_d°
, (*
√xt
)->
vÆ
);

1162 
vÆ_d°
 +
	`°æí
((*
√xt
)->
vÆ
);

1163 
√xt
++;

1164 i‡(
√xt
 > 
dup_œ°
) {

1165 *
vÆ_d°
 = 0;

1169 *
vÆ_d°
++ = ',';

1170 *
vÆ_d°
++ = ' ';

1173 (*
œ°
)->
vÆ
 = 
√w_vÆ
;

1176 (*
œ°
)->
vÆ
 = (*
dup_œ°
)->val;

1179 (*
s‹t_√xt
)->
key
 = 
NULL
;

1180 } ++
s‹t_√xt
 <
dup_œ°
);

1183 
œ°
 = 
s‹t_√xt
++;

1188 i‡(
dups_found
) {

1189 
≠r_èbÀ_íåy_t
 *
§c
 = (≠r_èbÀ_íåy_à*)
t
->
a
.
ñts
;

1190 
≠r_èbÀ_íåy_t
 *
d°
 = (≠r_èbÀ_íåy_à*)
t
->
a
.
ñts
;

1191 
≠r_èbÀ_íåy_t
 *
œ°_ñt
 = 
§c
 + 
t
->
a
.
√…s
;

1193 i‡(
§c
->
key
) {

1194 *
d°
++ = *
§c
;

1196 } ++
§c
 < 
œ°_ñt
);

1197 
t
->
a
.
√…s
 -()(
œ°_ñt
 - 
d°
);

1200 
	`èbÀ_ªödex
(
t
);

1201 
	}
}

1203 
	$≠r_èbÀ_ˇt
(
≠r_èbÀ_t
 *
t
, c⁄°á¥_èbÀ_à*
s
)

1205 c⁄° 
n
 = 
t
->
a
.
√…s
;

1206 
idx
;

1208 
	`≠r_¨øy_ˇt
(&
t
->
a
,&
s
->a);

1210 i‡(
n
 == 0) {

1211 
	`mem˝y
(
t
->
ödex_fú°
,
s
->ödex_fú°,(Ë* 
TABLE_HASH_SIZE
);

1212 
	`mem˝y
(
t
->
ödex_œ°
, 
s
->ödex_œ°, (Ë* 
TABLE_HASH_SIZE
);

1213 
t
->
ödex_öôülized
 = 
s
->index_initialized;

1217 
idx
 = 0; idx < 
TABLE_HASH_SIZE
; ++idx) {

1218 i‡(
	`TABLE_INDEX_IS_INITIALIZED
(
s
, 
idx
)) {

1219 
t
->
ödex_œ°
[
idx
] = 
s
->ödex_œ°[idx] + 
n
;

1220 i‡(!
	`TABLE_INDEX_IS_INITIALIZED
(
t
, 
idx
)) {

1221 
t
->
ödex_fú°
[
idx
] = 
s
->ödex_fú°[idx] + 
n
;

1226 
t
->
ödex_öôülized
 |
s
->index_initialized;

1227 
	}
}

1229 
	$APR_DECLARE
(Ë
	$≠r_èbÀ_ovîœp
(
≠r_èbÀ_t
 *
a
, c⁄°á¥_èbÀ_à*
b
,

1230 
Êags
)

1232 i‡(
a
->a.
√…s
 + 
b
->a.nelts == 0) {

1236 #i‡
APR_POOL_DEBUG


1239 i‡(!
	`≠r_poﬁ_is_™˚°‹
(
b
->
a
.
poﬁ
,á->a.pool)) {

1240 
	`Ârötf
(
°dîr
, "apr_table_overlap: b'sÖool isÇotánáncestor ofá's\n");

1241 
	`ab‹t
();

1245 
	`≠r_èbÀ_ˇt
(
a
, 
b
);

1247 
	`≠r_èbÀ_com¥ess
(
a
, 
Êags
);

1248 
	}
}

1250 
	$èbÀ_gëm_do
(*
v
, c⁄° *
key
, c⁄° *
vÆ
)

1252 
èbÀ_gëm_t
 *
°©e
 = (èbÀ_gëm_à*Ë
v
;

1254 i‡(!
°©e
->
fú°
) {

1261 
°©e
->
fú°
 = 
vÆ
;

1264 c⁄° **
ñt
;

1265 i‡(!
°©e
->
mîged
) {

1266 
°©e
->
mîged
 = 
	`≠r_¨øy_make
(°©e->
p
, 10, (const *));

1267 
ñt
 = 
	`≠r_¨øy_push
(
°©e
->
mîged
);

1268 *
ñt
 = 
°©e
->
fú°
;

1270 
ñt
 = 
	`≠r_¨øy_push
(
°©e
->
mîged
);

1271 *
ñt
 = 
vÆ
;

1274 
	}
}

1276 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_èbÀ_gëm
(
≠r_poﬁ_t
 *
p
, c⁄° 
≠r_èbÀ_t
 *
t
,

1277 c⁄° *
key
)

1279 
èbÀ_gëm_t
 
°©e
;

1281 
°©e
.
p
 =Ö;

1282 
°©e
.
fú°
 = 
NULL
;

1283 
°©e
.
mîged
 = 
NULL
;

1285 
	`≠r_èbÀ_do
(
èbÀ_gëm_do
, &
°©e
, 
t
, 
key
, 
NULL
);

1287 i‡(!
°©e
.
fú°
) {

1288  
NULL
;

1290 i‡(!
°©e
.
mîged
) {

1291  
°©e
.
fú°
;

1294  
	`≠r_¨øy_p°rˇt
(
p
, 
°©e
.
mîged
, ',');

1296 
	}
}

	@test/abts.c

17 
	~"abts.h
"

18 
	~"abts_ã°s.h
"

19 
	~"ã°utû.h
"

21 
	#ABTS_STAT_SIZE
 6

	)

22 
	g°©us
[
ABTS_STAT_SIZE
] = {'|', '/', '-', '|', '\\', '-'};

23 
	gcuº_ch¨
;

24 
	gvîbo£
 = 0;

25 
	gex˛ude
 = 0;

26 
	gquõt
 = 0;

27 
	gli°_ã°s
 = 0;

29 c⁄° **
	gã°li°
 = 
NULL
;

31 
	$föd_ã°_«me
(c⁄° *
ã°«me
) {

32 
i
;

33 
i
 = 0; 
ã°li°
[i] !
NULL
; i++) {

34 i‡(!
	`°rcmp
(
ã°li°
[
i
], 
ã°«me
)) {

39 
	}
}

42 
	$should_ã°_run
(c⁄° *
ã°«me
) {

43 
found
 = 0;

44 i‡(
li°_ã°s
 == 1) {

47 i‡(
ã°li°
 =
NULL
) {

50 
found
 = 
	`föd_ã°_«me
(
ã°«me
);

51 i‡((
found
 && !
ex˛ude
) || (!found &&Éxclude)) {

55 
	}
}

57 
	$ª£t_°©us
()

59 
cuº_ch¨
 = 0;

60 
	}
}

62 
	$upd©e_°©us
()

64 i‡(!
quõt
) {

65 
cuº_ch¨
 = (cuº_ch¨ + 1Ë% 
ABTS_STAT_SIZE
;

66 
	`Ârötf
(
°dout
, "\b%c", 
°©us
[
cuº_ch¨
]);

67 
	`fÊush
(
°dout
);

69 
	}
}

71 
	$íd_suôe
(
abts_suôe
 *
suôe
)

73 i‡(
suôe
 !
NULL
) {

74 
sub_suôe
 *
œ°
 = 
suôe
->
èû
;

75 i‡(!
quõt
) {

76 
	`Ârötf
(
°dout
, "\b");

77 
	`fÊush
(
°dout
);

79 i‡(
œ°
->
Áûed
 == 0) {

80 
	`Ârötf
(
°dout
, "SUCCESS\n");

81 
	`fÊush
(
°dout
);

84 
	`Ârötf
(
°dout
, "FAILED %d o‡%d\n", 
œ°
->
Áûed
,Üa°->
num_ã°
);

85 
	`fÊush
(
°dout
);

88 
	}
}

90 
abts_suôe
 *
	$abts_add_suôe
(
abts_suôe
 *
suôe
, c⁄° *
suôe_«me_fuŒ
)

92 
sub_suôe
 *
subsuôe
;

93 *
p
;

94 c⁄° *
suôe_«me
;

95 
cuº_ch¨
 = 0;

98 i‡(
suôe
 && suôe->
èû
 &&!suôe->èû->
nŸ_run
) {

99 
	`íd_suôe
(
suôe
);

102 
subsuôe
 = 
	`mÆloc
((*subsuite));

103 
subsuôe
->
num_ã°
 = 0;

104 
subsuôe
->
Áûed
 = 0;

105 
subsuôe
->
√xt
 = 
NULL
;

108 
suôe_«me
 = 
	`°ºchr
(
suôe_«me_fuŒ
, '/');

109 i‡(!
suôe_«me
) {

110 
suôe_«me
 = 
	`°ºchr
(
suôe_«me_fuŒ
, '\\');

112 i‡(
suôe_«me
) {

113 
suôe_«me
++;

115 
suôe_«me
 = 
suôe_«me_fuŒ
;

117 
p
 = 
	`°ºchr
(
suôe_«me
, '.');

118 i‡(
p
) {

119 
subsuôe
->
«me
 = 
	`mem˝y
(
	`ˇŒoc
(
p
 - 
suôe_«me
 + 1, 1),

120 
suôe_«me
, 
p
 - suite_name);

123 
subsuôe
->
«me
 = 
suôe_«me
;

126 i‡(
li°_ã°s
) {

127 
	`Ârötf
(
°dout
, "%s\n", 
subsuôe
->
«me
);

130 
subsuôe
->
nŸ_run
 = 0;

132 i‡(
suôe
 =
NULL
) {

133 
suôe
 = 
	`mÆloc
((*suite));

134 
suôe
->
hód
 = 
subsuôe
;

135 
suôe
->
èû
 = 
subsuôe
;

138 
suôe
->
èû
->
√xt
 = 
subsuôe
;

139 
suôe
->
èû
 = 
subsuôe
;

142 i‡(!
	`should_ã°_run
(
subsuôe
->
«me
)) {

143 
subsuôe
->
nŸ_run
 = 1;

144  
suôe
;

147 
	`ª£t_°©us
();

148 
	`Ârötf
(
°dout
, "%-20s: ", 
subsuôe
->
«me
);

149 
	`upd©e_°©us
();

150 
	`fÊush
(
°dout
);

152  
suôe
;

153 
	}
}

155 
	$abts_run_ã°
(
abts_suôe
 *
ts
, 
ã°_func
 
f
, *
vÆue
)

157 
abts_ˇ£
 
tc
;

158 
sub_suôe
 *
ss
;

160 i‡(!
	`should_ã°_run
(
ts
->
èû
->
«me
)) {

163 
ss
 = 
ts
->
èû
;

165 
tc
.
Áûed
 = 0;

166 
tc
.
suôe
 = 
ss
;

168 
ss
->
num_ã°
++;

169 
	`upd©e_°©us
();

171 
	`f
(&
tc
, 
vÆue
);

173 i‡(
tc
.
Áûed
) {

174 
ss
->
Áûed
++;

176 
	}
}

178 
	$ªp‹t
(
abts_suôe
 *
suôe
)

180 
cou¡
 = 0;

181 
sub_suôe
 *
d±r
;

183 i‡(
suôe
 && suôe->
èû
 &&!suôe->èû->
nŸ_run
) {

184 
	`íd_suôe
(
suôe
);

187 
d±r
 = 
suôe
->
hód
; d±r; d±∏d±r->
√xt
) {

188 
cou¡
 +
d±r
->
Áûed
;

191 i‡(
li°_ã°s
) {

195 i‡(
cou¡
 == 0) {

196 
	`¥ötf
("AllÅestsÖassed.\n");

200 
d±r
 = 
suôe
->
hód
;

201 
	`Ârötf
(
°dout
, "%-15s\t\tTotal\tFail\tFailed %%\n", "Failed Tests");

202 
	`Ârötf
(
°dout
, "===================================================\n");

203 
d±r
 !
NULL
) {

204 i‡(
d±r
->
Áûed
 != 0) {

205 
≥r˚¡
 = (()
d±r
->
Áûed
 / ()d±r->
num_ã°
);

206 
	`Ârötf
(
°dout
, "%-15s\t\t%5d\t%4d\t%6.2f%%\n", 
d±r
->
«me
,

207 
d±r
->
num_ã°
, d±r->
Áûed
, 
≥r˚¡
 * 100);

209 
d±r
 = d±r->
√xt
;

212 
	}
}

214 
	$abts_log_mesßge
(c⁄° *
fmt
, ...)

216 
va_li°
 
¨gs
;

217 
	`upd©e_°©us
();

219 i‡(
vîbo£
) {

220 
	`va_°¨t
(
¨gs
, 
fmt
);

221 
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

222 
	`va_íd
(
¨gs
);

223 
	`Ârötf
(
°dîr
, "\n");

224 
	`fÊush
(
°dîr
);

226 
	}
}

228 
	$abts_öt_equÆ
(
abts_ˇ£
 *
tc
, c⁄° 
ex≥˘ed
, c⁄° 
a˘uÆ
, 
löío
)

230 
	`upd©e_°©us
();

231 i‡(
tc
->
Áûed
) ;

233 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

235 
tc
->
Áûed
 = 
TRUE
;

236 i‡(
vîbo£
) {

237 
	`Ârötf
(
°dîr
, "Löê%d:Éx≥˘ed <%d>, buàßw <%d>\n", 
löío
, 
ex≥˘ed
, 
a˘uÆ
);

238 
	`fÊush
(
°dîr
);

240 
	}
}

242 
	$abts_öt_√quÆ
(
abts_ˇ£
 *
tc
, c⁄° 
ex≥˘ed
, c⁄° 
a˘uÆ
, 
löío
)

244 
	`upd©e_°©us
();

245 i‡(
tc
->
Áûed
) ;

247 i‡(
ex≥˘ed
 !
a˘uÆ
) ;

249 
tc
->
Áûed
 = 
TRUE
;

250 i‡(
vîbo£
) {

251 
	`Ârötf
(
°dîr
, "Line %d:Éxpected something otherÅhan <%d>, but saw <%d>\n",

252 
löío
, 
ex≥˘ed
, 
a˘uÆ
);

253 
	`fÊush
(
°dîr
);

255 
	}
}

257 
	$abts_size_equÆ
(
abts_ˇ£
 *
tc
, 
size_t
 
ex≥˘ed
, size_à
a˘uÆ
, 
löío
)

259 
	`upd©e_°©us
();

260 i‡(
tc
->
Áûed
) ;

262 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

264 
tc
->
Áûed
 = 
TRUE
;

265 i‡(
vîbo£
) {

267 
	`Ârötf
(
°dîr
, "Löê%d:Éx≥˘ed %lu, buàßw %lu\n", 
löío
,

268 ()
ex≥˘ed
, ()
a˘uÆ
);

269 
	`fÊush
(
°dîr
);

271 
	}
}

273 
	$abts_°r_equÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, 
löío
)

275 
	`upd©e_°©us
();

276 i‡(
tc
->
Áûed
) ;

278 i‡(!
ex≥˘ed
 && !
a˘uÆ
) ;

279 i‡(
ex≥˘ed
 && 
a˘uÆ
)

280 i‡(!
	`°rcmp
(
ex≥˘ed
, 
a˘uÆ
)) ;

282 
tc
->
Áûed
 = 
TRUE
;

283 i‡(
vîbo£
) {

284 
	`Ârötf
(
°dîr
, "Löê%d:Éx≥˘ed <%s>, buàßw <%s>\n", 
löío
, 
ex≥˘ed
, 
a˘uÆ
);

285 
	`fÊush
(
°dîr
);

287 
	}
}

289 
	$abts_°r_√quÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
,

290 
size_t
 
n
, 
löío
)

292 
	`upd©e_°©us
();

293 i‡(
tc
->
Áûed
) ;

295 i‡(!
	`°∫cmp
(
ex≥˘ed
, 
a˘uÆ
, 
n
)) ;

297 
tc
->
Áûed
 = 
TRUE
;

298 i‡(
vîbo£
) {

299 
	`Ârötf
(
°dîr
, "Line %d:Éxpected something otherÅhan <%s>, but saw <%s>\n",

300 
löío
, 
ex≥˘ed
, 
a˘uÆ
);

301 
	`fÊush
(
°dîr
);

303 
	}
}

305 
	$abts_±r_nŸnuŒ
(
abts_ˇ£
 *
tc
, c⁄° *
±r
, 
löío
)

307 
	`upd©e_°©us
();

308 i‡(
tc
->
Áûed
) ;

310 i‡(
±r
 !
NULL
) ;

312 
tc
->
Áûed
 = 
TRUE
;

313 i‡(
vîbo£
) {

314 
	`Ârötf
(
°dîr
, "Löê%d:Éx≥˘edÇ⁄-NULL, buàßw NULL\n", 
löío
);

315 
	`fÊush
(
°dîr
);

317 
	}
}

319 
	$abts_±r_equÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, 
löío
)

321 
	`upd©e_°©us
();

322 i‡(
tc
->
Áûed
) ;

324 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

326 
tc
->
Áûed
 = 
TRUE
;

327 i‡(
vîbo£
) {

328 
	`Ârötf
(
°dîr
, "Löê%d:Éx≥˘ed <%p>, buàßw <%p>\n", 
löío
, 
ex≥˘ed
, 
a˘uÆ
);

329 
	`fÊush
(
°dîr
);

331 
	}
}

333 
	$abts_Áû
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
löío
)

335 
	`upd©e_°©us
();

336 i‡(
tc
->
Áûed
) ;

338 
tc
->
Áûed
 = 
TRUE
;

339 i‡(
vîbo£
) {

340 
	`Ârötf
(
°dîr
, "Löê%d: %s\n", 
löío
, 
mesßge
);

341 
	`fÊush
(
°dîr
);

343 
	}
}

345 
	$abts_as£π
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
c⁄dôi⁄
, 
löío
)

347 
	`upd©e_°©us
();

348 i‡(
tc
->
Áûed
) ;

350 i‡(
c⁄dôi⁄
) ;

352 
tc
->
Áûed
 = 
TRUE
;

353 i‡(
vîbo£
) {

354 
	`Ârötf
(
°dîr
, "Löê%d: %s\n", 
löío
, 
mesßge
);

355 
	`fÊush
(
°dîr
);

357 
	}
}

359 
	$abts_åue
(
abts_ˇ£
 *
tc
, 
c⁄dôi⁄
, 
löío
)

361 
	`upd©e_°©us
();

362 i‡(
tc
->
Áûed
) ;

364 i‡(
c⁄dôi⁄
) ;

366 
tc
->
Áûed
 = 
TRUE
;

367 i‡(
vîbo£
) {

368 
	`Ârötf
(
°dîr
, "Löê%d: C⁄dôi⁄ i†Ál£, buàex≥˘edÅrue\n", 
löío
);

369 
	`fÊush
(
°dîr
);

371 
	}
}

373 
	$abts_nŸ_im∂
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
löío
)

375 
	`upd©e_°©us
();

377 
tc
->
suôe
->
nŸ_im∂
++;

378 i‡(
vîbo£
) {

379 
	`Ârötf
(
°dîr
, "Löê%d: %s\n", 
löío
, 
mesßge
);

380 
	`fÊush
(
°dîr
);

382 
	}
}

384 
	$maö
(
¨gc
, c⁄° *c⁄° 
¨gv
[]) {

385 
i
;

386 
rv
;

387 
li°_¥ovided
 = 0;

388 
abts_suôe
 *
suôe
 = 
NULL
;

390 
	`öôülize
();

392 
quõt
 = !
	`ißây
(
STDOUT_FILENO
);

394 
i
 = 1; i < 
¨gc
; i++) {

395 i‡(!
	`°rcmp
(
¨gv
[
i
], "-v")) {

396 
vîbo£
 = 1;

399 i‡(!
	`°rcmp
(
¨gv
[
i
], "-x")) {

400 
ex˛ude
 = 1;

403 i‡(!
	`°rcmp
(
¨gv
[
i
], "-l")) {

404 
li°_ã°s
 = 1;

407 i‡(!
	`°rcmp
(
¨gv
[
i
], "-q")) {

408 
quõt
 = 1;

411 i‡(
¨gv
[
i
][0] == '-') {

412 
	`Ârötf
(
°dîr
, "InvÆid o±i⁄: `%s'\n", 
¨gv
[
i
]);

413 
	`exô
(1);

415 
li°_¥ovided
 = 1;

418 i‡(
li°_¥ovided
) {

422 
ã°li°
 = 
	`ˇŒoc
(
¨gc
 + 1, (*));

423 
i
 = 1; i < 
¨gc
; i++) {

424 
ã°li°
[
i
 - 1] = 
¨gv
[i];

428 
i
 = 0; i < ((
Æ…e°s
Ë/ (
ã°li°
 *)); i++) {

429 
suôe
 = 
Æ…e°s
[
i
].
	`func
(suite);

432 
rv
 = 
	`ªp‹t
(
suôe
);

433  
rv
;

434 
	}
}

	@test/abts.h

17 #ifde‡
__˝lu•lus


21 
	~<°d¨g.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 #ifde‡
WIN32


26 
	~<io.h
>

28 
	~<uni°d.h
>

31 #i‚de‡
ABTS_H


32 
	#ABTS_H


	)

34 #i‚de‡
FALSE


35 
	#FALSE
 0

	)

37 #i‚de‡
TRUE


38 
	#TRUE
 1

	)

41 
	ssub_suôe
 {

42 c⁄° *
«me
;

43 
num_ã°
;

44 
Áûed
;

45 
nŸ_run
;

46 
nŸ_im∂
;

47 
sub_suôe
 *
√xt
;

49 
sub_suôe
 
	tsub_suôe
;

51 
	sabts_suôe
 {

52 
sub_suôe
 *
hód
;

53 
sub_suôe
 *
èû
;

55 
abts_suôe
 
	tabts_suôe
;

57 
	sabts_ˇ£
 {

58 
Áûed
;

59 
sub_suôe
 *
suôe
;

61 
abts_ˇ£
 
	tabts_ˇ£
;

63 (*
ã°_func
)(
	tabts_ˇ£
 *
	ttc
, *
	td©a
);

65 
	#ADD_SUITE
(
suôe
Ë
	`abts_add_suôe
(suôe, 
__FILE__
);

	)

67 
abts_suôe
 *
abts_add_suôe
◊bts_suôê*
suôe
, c⁄° *
suôe_«me
);

68 
abts_run_ã°
(
abts_suôe
 *
ts
, 
ã°_func
 
f
, *
vÆue
);

69 
abts_log_mesßge
(c⁄° *
fmt
, ...);

71 
abts_öt_equÆ
(
abts_ˇ£
 *
tc
, c⁄° 
ex≥˘ed
, c⁄° 
a˘uÆ
, 
löío
);

72 
abts_öt_√quÆ
(
abts_ˇ£
 *
tc
, c⁄° 
ex≥˘ed
, c⁄° 
a˘uÆ
, 
löío
);

73 
abts_°r_equÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, 
löío
);

74 
abts_°r_√quÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
,

75 
size_t
 
n
, 
löío
);

76 
abts_±r_nŸnuŒ
(
abts_ˇ£
 *
tc
, c⁄° *
±r
, 
löío
);

77 
abts_±r_equÆ
(
abts_ˇ£
 *
tc
, c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, 
löío
);

78 
abts_åue
(
abts_ˇ£
 *
tc
, 
c⁄dôi⁄
, 
löío
);

79 
abts_Áû
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
löío
);

80 
abts_nŸ_im∂
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
löío
);

81 
abts_as£π
(
abts_ˇ£
 *
tc
, c⁄° *
mesßge
, 
c⁄dôi⁄
, 
löío
);

82 
abts_size_equÆ
(
abts_ˇ£
 *
tc
, 
size_t
 
ex≥˘ed
, size_à
a˘uÆ
, 
löío
);

85 
	#ABTS_INT_EQUAL
(
a
, 
b
, 
c
Ë
	`abts_öt_equÆ
◊, b, c, 
__LINE__
)

	)

86 
	#ABTS_INT_NEQUAL
(
a
, 
b
, 
c
Ë
	`abts_öt_√quÆ
◊, b, c, 
__LINE__
)

	)

87 
	#ABTS_STR_EQUAL
(
a
, 
b
, 
c
Ë
	`abts_°r_equÆ
◊, b, c, 
__LINE__
)

	)

88 
	#ABTS_STR_NEQUAL
(
a
, 
b
, 
c
, 
d
Ë
	`abts_°r_√quÆ
◊, b, c, d, 
__LINE__
)

	)

89 
	#ABTS_PTR_NOTNULL
(
a
, 
b
Ë
	`abts_±r_nŸnuŒ
◊, b, 
__LINE__
)

	)

90 
	#ABTS_PTR_EQUAL
(
a
, 
b
, 
c
Ë
	`abts_±r_equÆ
◊, b, c, 
__LINE__
)

	)

91 
	#ABTS_TRUE
(
a
, 
b
Ë
	`abts_åue
◊, b, 
__LINE__
);

	)

92 
	#ABTS_FAIL
(
a
, 
b
Ë
	`abts_Áû
◊, b, 
__LINE__
);

	)

93 
	#ABTS_NOT_IMPL
(
a
, 
b
Ë
	`abts_nŸ_im∂
◊, b, 
__LINE__
);

	)

94 
	#ABTS_ASSERT
(
a
, 
b
, 
c
Ë
	`abts_as£π
◊, b, c, 
__LINE__
);

	)

96 
	#ABTS_SIZE_EQUAL
(
a
, 
b
, 
c
Ë
	`abts_size_equÆ
◊, b, c, 
__LINE__
)

	)

99 
abts_suôe
 *
run_ã°s
◊bts_suôê*
suôe
);

100 
abts_suôe
 *
run_ã°s1
◊bts_suôê*
suôe
);

105 #ifde‡
__˝lu•lus


	@test/abts_tests.h

17 #i‚de‡
APR_TEST_INCLUDES


18 
	#APR_TEST_INCLUDES


	)

20 
	~"abts.h
"

21 
	~"ã°utû.h
"

23 c⁄° 
	sã°li°
 {

24 
	mabts_suôe
 *(*
	mfunc
)(
abts_suôe
 *
	msuôe
);

25 } 
	gÆ…e°s
[] = {

26 {
ã°©omic
},

27 {
ã°dú
},

28 {
ã°dso
},

29 {
ã°dup
},

30 {
ã°ív
},

31 {
ã°esˇ≥
},

32 {
ã°fûe
},

33 {
ã°fûec›y
},

34 {
ã°fûeöfo
},

35 {
ã°Êock
},

36 {
ã°fmt
},

37 {
ã°‚m©ch
},

38 {
ã°gë›t
},

40 {
ã°globÆmuãx
},

42 {
ã°hash
},

43 {
ã°ùsub
},

44 {
ã°lock
},

45 {
ã°c⁄d
},

46 {
ã°lfs
},

47 {
ã°mm≠
},

48 {
ã°«mes
},

49 {
ã°oc
},

50 {
ã°∑th
},

51 {
ã°pùe
},

52 {
ã°pﬁl
},

53 {
ã°poﬁ
},

54 {
ã°¥oc
},

55 {
ã°¥ocmuãx
},

56 {
ã°ønd
},

57 {
ã°¶ìp
},

58 {
ã°shm
},

59 {
ã°sock
},

60 {
ã°sockës
},

61 {
ã°sock›t
},

62 {
ã°°r
},

63 {
ã°°∫©cmp
},

64 {
ã°èbÀ
},

65 {
ã°ãmp
},

66 {
ã°thªad
},

67 {
ã°time
},

68 {
ã°ud
},

69 {
ã°u£r
},

70 {
ã°v¢
}

	@test/echod.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

25 
	~"≠r.h
"

26 
	~"≠r_√tw‹k_io.h
"

27 
	~"≠r_°rögs.h
"

29 
	#BUF_SIZE
 4096

	)

31 
	$ªp‹tEº‹
(c⁄° *
msg
, 
≠r_°©us_t
 
rv
,

32 
≠r_poﬁ_t
 *
poﬁ
)

34 
	`Ârötf
(
°dîr
, "%s\nEº‹: %d\n'%s'\n", 
msg
, 
rv
,

35 
	`≠r_p•rötf
(
poﬁ
, "%pm", &
rv
));

36 
	}
}

38 
≠r_°©us_t
 
	$èlkTÆk
(
≠r_sockë_t
 *
sockë
, 
≠r_poﬁ_t
 *
∑ª¡
)

40 
≠r_poﬁ_t
 *
poﬁ
;

41 
≠r_size_t
 
Àn
;

42 *
buf
;

43 
≠r_°©us_t
 
rv
;

45 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
∑ª¡
Ë!
APR_SUCCESS
)

46  
APR_ENOPOOL
;

49 
buf
 = 
	`≠r_∑Œoc
(
poﬁ
, 
BUF_SIZE
);

50 i‡(!
buf
)

51  
ENOMEM
;

54 
Àn
 = 
BUF_SIZE
;

55 
rv
 = 
	`≠r_sockë_ªcv
(
sockë
, 
buf
, &
Àn
);

56 i‡(
	`APR_STATUS_IS_EOF
(
rv
Ë|| 
Àn
 =0 ||Ñv !
APR_SUCCESS
)

58 
rv
 = 
	`≠r_sockë_£nd
(
sockë
, 
buf
, &
Àn
);

59 i‡(
Àn
 =0 || 
rv
 !
APR_SUCCESS
)

61 } 
rv
 =
APR_SUCCESS
);

63 
	`≠r_poﬁ_˛ór
(
poﬁ
);

64  
APR_SUCCESS
;

65 
	}
}

67 
≠r_°©us_t
 
	$gœssToWÆl
(
≠r_p‹t_t
 
p‹t
, 
≠r_poﬁ_t
 *
∑ª¡
)

69 
≠r_sockaddr_t
 *
sockAddr
;

70 
≠r_sockë_t
 *
li°íî
, *
ac˚±ed
;

71 
≠r_°©us_t
 
rv
;

73 
rv
 = 
	`≠r_sockë_¸óã
(&
li°íî
, 
APR_INET
, 
SOCK_STREAM
, 
APR_PROTO_TCP
,

74 
∑ª¡
);

75 i‡(
rv
 !
APR_SUCCESS
) {

76 
	`ªp‹tEº‹
("U«bÀÅÿ¸óã sockë", 
rv
, 
∑ª¡
);

77  
rv
;

80 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
sockAddr
, "127.0.0.1", 
APR_UNSPEC
,

81 
p‹t
, 0, 
∑ª¡
);

82 i‡(
rv
 !
APR_SUCCESS
) {

83 
	`ªp‹tEº‹
("U«bÀÅÿgë sockë info", 
rv
, 
∑ª¡
);

84 
	`≠r_sockë_˛o£
(
li°íî
);

85  
rv
;

88 i‡((
rv
 = 
	`≠r_sockë_böd
(
li°íî
, 
sockAddr
)Ë!
APR_SUCCESS
 ||

89 (
rv
 = 
	`≠r_sockë_li°í
(
li°íî
, 5)Ë!
APR_SUCCESS
) {

90 
	`ªp‹tEº‹
("U«bÀÅÿböd o∏li°íÅÿsockë", 
rv
, 
∑ª¡
);

91 
	`≠r_sockë_˛o£
(
li°íî
);

92  
rv
;

96 
rv
 = 
	`≠r_sockë_ac˚±
(&
ac˚±ed
, 
li°íî
, 
∑ª¡
);

97 i‡(
rv
 !
APR_SUCCESS
) {

98 
	`ªp‹tEº‹
("Eº‹ác˚±ög o¿sockë", 
rv
, 
∑ª¡
);

101 
	`¥ötf
("\tAnswering connection\n");

102 
rv
 = 
	`èlkTÆk
(
ac˚±ed
, 
∑ª¡
);

103 
	`≠r_sockë_˛o£
(
ac˚±ed
);

104 
	`¥ötf
("\tConnection closed\n");

105 i‡(
rv
 !
APR_SUCCESS
)

109 
	`≠r_sockë_˛o£
(
li°íî
);

110  
APR_SUCCESS
;

111 
	}
}

113 
	$maö
(
¨gc
, **
¨gv
)

115 
≠r_poﬁ_t
 *
poﬁ
;

116 
≠r_p‹t_t
 
thï‹t
 = 4747;

118 
	`¥ötf
("APR Test Application:Échod\n");

120 
	`≠r_öôülize
();

121 
	`©exô
(
≠r_ãrmö©e
);

123 
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
);

125 i‡(
¨gc
 >= 2) {

126 
	`¥ötf
("¨g¯%d,Ö‹à'%s'\n", 
¨gc
, 
¨gv
[1]);

127 
thï‹t
 = 
	`©oi
(
¨gv
[1]);

130 
	`Ârötf
(
°dout
, "SèπögÅÿli°í o¿p‹à%d\n", 
thï‹t
);

131 
	`gœssToWÆl
(
thï‹t
, 
poﬁ
);

134 
	}
}

	@test/globalmutexchild.c

17 
	~"ã°globÆmuãx.h
"

18 
	~"≠r_poﬁs.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_globÆ_muãx.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r.h
"

25 #i‡
APR_HAVE_STDLIB_H


26 
	~<°dlib.h
>

30 
	$maö
(
¨gc
, c⁄° * c⁄° 
¨gv
[])

32 
≠r_poﬁ_t
 *
p
;

33 
i
 = 0;

34 
≠r_lockmech_e
 
mech
;

35 
≠r_globÆ_muãx_t
 *
globÆ_lock
;

36 
≠r_°©us_t
 
rv
;

38 
	`≠r_öôülize
();

39 
	`©exô
(
≠r_ãrmö©e
);

41 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

42 i‡(
¨gc
 >= 2) {

43 
mech
 = (
≠r_lockmech_e
)
	`≠r_°πoi64
(
¨gv
[1], 
NULL
, 0);

46 
mech
 = 
APR_LOCK_DEFAULT
;

48 
rv
 = 
	`≠r_globÆ_muãx_¸óã
(&
globÆ_lock
, 
LOCKNAME
, 
mech
, 
p
);

49 i‡(
rv
 !
APR_SUCCESS
) {

50 
	`exô
(-
rv
);

52 
	`≠r_globÆ_muãx_chûd_öô
(&
globÆ_lock
, 
LOCKNAME
, 
p
);

55 
	`≠r_globÆ_muãx_lock
(
globÆ_lock
);

56 i‡(
i
 =
MAX_ITER
) {

57 
	`≠r_globÆ_muãx_u∆ock
(
globÆ_lock
);

58 
	`exô
(
i
);

60 
i
++;

61 
	`≠r_globÆ_muãx_u∆ock
(
globÆ_lock
);

63 
	`exô
(0);

64 
	}
}

	@test/internal/testregex.c

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_hash.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_time.h
"

24 
	~<ªgex.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

28 
	$maö
–
¨gc
, ** 
¨gv
) {

29 
≠r_poﬁ_t
 *
c⁄ãxt
;

30 
ªgex_t
 
ªgex
;

31 
rc
;

32 
i
;

33 
ôîs
;

34 
≠r_time_t
 
now
;

35 
≠r_time_t
 
íd
;

36 
≠r_hash_t
 *
h
;

39 i‡(
¨gc
 !=4 ) {

40 
	`Ârötf
(
°dîr
, "Ußgê%†m©ch såög #ôî©i⁄s\n",
¨gv
[0]);

43 
ôîs
 = 
	`©oi
–
¨gv
[3]);

45 
	`≠r_öôülize
() ;

46 
	`©exô
(
≠r_ãrmö©e
);

47 i‡(
	`≠r_poﬁ_¸óã
(&
c⁄ãxt
, 
NULL
Ë!
APR_SUCCESS
) {

48 
	`Ârötf
(
°dîr
, "Something went wrong\n");

49 
	`exô
(-1);

51 
rc
 = 
	`ªgcomp
–&
ªgex
, 
¨gv
[1], 
REG_EXTENDED
|
REG_NOSUB
);

54 i‡(
rc
) {

55 
îrbuf
[2000];

56 
	`ªgîr‹
(
rc
, &
ªgex
,
îrbuf
,2000);

57 
	`Ârötf
(
°dîr
,"Couldn'àcompûêªgex ;(\n%s\¿",
îrbuf
);

60 i‡–
	`ªgexec
–&
ªgex
, 
¨gv
[2], 0, 
NULL
,0) == 0 ) {

61 
	`Ârötf
(
°dîr
,"Match\n");

64 
	`Ârötf
(
°dîr
,"No Match\n");

66 
now
 = 
	`≠r_time_now
();

67 
i
=0;i<
ôîs
;i++) {

68 
	`ªgexec
–&
ªgex
, 
¨gv
[2], 0, 
NULL
,0) ;

70 
íd
=
	`≠r_time_now
();

71 
	`puts
(
	`≠r_p•rötf
–
c⁄ãxt
, "Timêtÿru¿%dÑegex'† %8Œd\n",
ôîs
,
íd
-
now
));

72 
h
 = 
	`≠r_hash_make
–
c⁄ãxt
);

73 
i
=0;i<70;i++) {

74 
	`≠r_hash_£t
(
h
,
	`≠r_p•rötf
(
c⁄ãxt
, "%dkey",
i
),
APR_HASH_KEY_STRING
,"1");

76 
now
 = 
	`≠r_time_now
();

77 
i
=0;i<
ôîs
;i++) {

78 
	`≠r_hash_gë
–
h
, 
¨gv
[2], 
APR_HASH_KEY_STRING
);

80 
íd
=
	`≠r_time_now
();

81 
	`puts
(
	`≠r_p•rötf
–
c⁄ãxt
, "Timêtÿru¿%d hash (nÿföd)'†%8Œd\n",
ôîs
,
íd
-
now
));

82 
	`≠r_hash_£t
(
h
, 
¨gv
[2],
APR_HASH_KEY_STRING
,"1");

83 
now
 = 
	`≠r_time_now
();

84 
i
=0;i<
ôîs
;i++) {

85 
	`≠r_hash_gë
–
h
, 
¨gv
[2], 
APR_HASH_KEY_STRING
);

87 
íd
=
	`≠r_time_now
();

88 
	`puts
(
	`≠r_p•rötf
–
c⁄ãxt
, "Timêtÿru¿%d hash (föd)'† %8Œd\n",
ôîs
,
íd
-
now
));

91 
	}
}

	@test/internal/testucs.c

17 
	~"≠r.h
"

18 
	~"¨ch/wö32/≠r_¨ch_utf8.h
"

19 
	~<wch¨.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<as£π.h
>

25 
	sã°vÆ
 {

26 
	mn
[8];

27 
≠r_size_t
 
	m∆
;

28 
wch¨_t
 
	mw
[4];

29 
≠r_size_t
 
	mwl
;

32 #ifde‡
FOR_REFERENCE


41 
ã°vÆ
 
	gmÆf‹med
[] = [

48 #i‚de‡
NO_UCS2_PAIRS


54 #ifde‡
NO_UCS2_PAIRS


58 #i‚de‡
FULL_UCS4_MAPPER


64 #i‚de‡
FULL_UCS4_MAPPER


70 #i‚de‡
FULL_UCS4_MAPPER


79 
	$di•œynw
(
ã°vÆ
 *
f
, ã°vÆ *
l
)

81 
x
[80], *
t
 = x;

82 
i
;

83 
i
 = 0; i < 
f
->
∆
; ++i)

84 
t
 +
	`•rötf
—, "%02X ", 
f
->
n
[
i
]);

85 *(
t
++) = '-';

86 
i
 = 0; i < 
l
->
∆
; ++i)

87 
t
 +
	`•rötf
—, " %02X", 
l
->
n
[
i
]);

88 *(
t
++) = ' ';

89 *(
t
++) = '=';

90 *(
t
++) = ' ';

91 
i
 = 0; i < 
f
->
wl
; ++i)

92 
t
 +
	`•rötf
—, "%04X ", 
f
->
w
[
i
]);

93 *(
t
++) = '-';

94 
i
 = 0; i < 
l
->
wl
; ++i)

95 
t
 +
	`•rötf
—, " %04X", 
l
->
w
[
i
]);

96 *
t
 = '\0';

97 
	`puts
(
x
);

98 
	}
}

105 
	$ã°_ƒ™ge
(
ã°vÆ
 *
p
)

107 
ã°vÆ
 
f
, 
l
, 
s
;

108 
≠r_°©us_t
 
rc
;

109 
suc˚ss
 = 0;

111 
	`mem˝y
 (&
s
, 
p
, (s));

112 ++
s
.
∆
;

115 
≠r_size_t
 
∆
 = 
s
.∆, 
wl
 = (s.
w
) / 2;

116 
rc
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
s
.
n
, &
∆
, s.
w
, &
wl
);

117 
s
.
wl
 = ((s.
w
) / 2) - wl;

118 i‡(!
∆
 && 
rc
 =
APR_SUCCESS
) {

119 i‡(!
suc˚ss
) {

120 
	`mem˝y
(&
f
, &
s
, (s));

121 
suc˚ss
 = -1;

124 i‡(
s
.
wl
 !
l
.wl

125 || 
	`memcmp
(
s
.
w
, 
l
.w, (s.
wl
 - 1) * 2) != 0

126 || 
s
.
w
[s.
wl
 - 1] !
l
.w[l.wl - 1] + 1) {

127 
	`di•œynw
(&
f
, &
l
);

128 
	`mem˝y
(&
f
, &
s
, (s));

131 
	`mem˝y
(&
l
, &
s
, (s));

134 i‡(
suc˚ss
) {

135 
	`di•œynw
(&
f
, &
l
);

136 
suc˚ss
 = 0;

138 i‡(
rc
 =
APR_INCOMPLETE
) {

139 
	`ã°_ƒ™ge
(&
s
);

142 } ++
s
.
n
[s.
∆
 - 1]);

144 i‡(
suc˚ss
) {

145 
	`di•œynw
(&
f
, &
l
);

146 
suc˚ss
 = 0;

148 
	}
}

157 
	$ã°_wønge
(
ã°vÆ
 *
p
)

159 
ã°vÆ
 
f
, 
l
, 
s
;

160 
≠r_°©us_t
 
rc
;

161 
suc˚ss
 = 0;

163 
	`mem˝y
 (&
s
, 
p
, (s));

164 ++
s
.
wl
;

167 
≠r_size_t
 
∆
 = (
s
.
n
), 
wl
 = s.wl;

168 
rc
 = 
	`≠r_c⁄v_ucs2_to_utf8
(
s
.
w
, &
wl
, s.
n
, &
∆
);

169 
s
.
∆
 = (s.
n
) -Çl;

170 i‡(!
wl
 && 
rc
 =
APR_SUCCESS
) {

171 i‡(!
suc˚ss
) {

172 
	`mem˝y
(&
f
, &
s
, (s));

173 
suc˚ss
 = -1;

176 i‡(
s
.
∆
 !
l
.nl

177 || 
	`memcmp
(
s
.
n
, 
l
.n, s.
∆
 - 1) != 0

178 || 
s
.
n
[s.
∆
 - 1] !
l
.n[l.nl - 1] + 1) {

179 
	`di•œynw
(&
f
, &
l
);

180 
	`mem˝y
(&
f
, &
s
, (s));

183 
	`mem˝y
(&
l
, &
s
, (s));

186 i‡(
suc˚ss
) {

187 
	`di•œynw
(&
f
, &
l
);

188 
suc˚ss
 = 0;

191 } ++
s
.
w
[s.
wl
 - 1]);

193 i‡(
suc˚ss
) {

194 
	`di•œynw
(&
f
, &
l
);

195 
suc˚ss
 = 0;

199 
≠r_size_t
 
wl
 = 
s
.wl, 
∆
 = (s.
n
);

200 
rc
 = 
	`≠r_c⁄v_ucs2_to_utf8
(
s
.
w
, &
wl
, s.
n
, &
∆
);

201 
s
.
∆
 = (s.
n
) - s.nl;

202 i‡(
rc
 =
APR_INCOMPLETE
) {

203 
	`ã°_wønge
(&
s
);

205 } ++
s
.
w
[s.
wl
 - 1]);

206 
	}
}

213 
	$ã°_ønges
()

215 
ã°vÆ
 
¡e°
, 
wã°
;

216 
≠r_°©us_t
 
ƒc
, 
wrc
;

217 
≠r_size_t
 
öÀn
;

218 
m©ches
 = 0;

220 
	`mem£t
(&
¡e°
, 0, (ntest));

221 ++
¡e°
.
∆
;

223 
	`mem£t
(&
wã°
, 0, (wtest));

224 ++
wã°
.
wl
;

228 
öÀn
 = 
¡e°
.
∆
;

229 
¡e°
.
wl
 = “ã°.
w
) / 2;

230 
ƒc
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
¡e°
.
n
, &
öÀn
,Çã°.
w
, &¡e°.
wl
);

231 i‡(
ƒc
 =
APR_SUCCESS
) {

232 
¡e°
.
wl
 = (“ã°.
w
) / 2) -Çtest.wl;

235 i‡(
ƒc
 =
APR_INCOMPLETE
) {

236 ++
¡e°
.
∆
;

237 i‡(
¡e°
.
∆
 > 6) {

238 
	`¥ötf
 ("\n\nUnexpected utf8 sequence of >6 bytes;\n");

239 
	`exô
(255);

244 !(++
¡e°
.
n
[¡e°.
∆
 - 1])) {

245 i‡(!(--
¡e°
.
∆
))

249 } 
¡e°
.
∆
);

252 
öÀn
 = 
wã°
.
wl
;

253 
wã°
.
∆
 = (wã°.
n
);

254 
wrc
 = 
	`≠r_c⁄v_ucs2_to_utf8
(
wã°
.
w
, &
öÀn
, wã°.
n
, &wã°.
∆
);

255 i‡(
wrc
 =
APR_SUCCESS
) {

256 
wã°
.
∆
 = (wã°.
n
) - wtest.nl;

260 i‡(!(++
wã°
.
w
[wã°.
wl
 - 1])) {

261 i‡(
wã°
.
wl
 == 1)

262 ++
wã°
.
wl
;

264 ++
wã°
.
w
[0];

268 
öÀn
 = 1;

269 
wã°
.
∆
 = (wã°.
n
);

270 i‡(
	`≠r_c⁄v_ucs2_to_utf8
(
wã°
.
w
, &
öÀn
, wã°.
n
, &wã°.
∆
)

271 =
APR_INCOMPLETE
)

273 i‡(!(++
wã°
.
w
[0])) {

274 
wã°
.
wl
 = 0;

280 } 
wã°
.
wl
);

282 i‡(!
¡e°
.
∆
 && !
wã°
.
wl
)

286 i‡((
wã°
.
∆
 !
¡e°
.nl)

287 || (
	`memcmp
(
wã°
.
n
, 
¡e°
.n,Çã°.
∆
) != 0)

288 || (
wã°
.
wl
 !
¡e°
.wl)

289 || (
	`memcmp
(
¡e°
.
w
, 
wã°
.w, wã°.
wl
 * 2) != 0)) {

290 
	`¥ötf
 ("\n\nMismatch of w/n conversionát;\n");

291 
	`di•œynw
(&
¡e°
, &
wã°
);

292 
	`exô
(255);

294 ++
m©ches
;

296 !(++
¡e°
.
n
[¡e°.
∆
 - 1])) {

297 i‡(!(--
¡e°
.
∆
))

301 i‡(!(++
wã°
.
w
[wã°.
wl
 - 1])) {

302 i‡(
wã°
.
wl
 == 1)

303 ++
wã°
.
wl
;

305 ++
wã°
.
w
[0];

309 
öÀn
 = 1;

310 
wã°
.
∆
 = (wã°.
n
);

311 i‡(
	`≠r_c⁄v_ucs2_to_utf8
(
wã°
.
w
, &
öÀn
, wã°.
n
, &wã°.
∆
)

312 =
APR_INCOMPLETE
)

314 i‡(!(++
wã°
.
w
[0])) {

315 
wã°
.
wl
 = 0;

320 } 
wã°
.
wl
 || 
¡e°
.
∆
);

322 
	`¥ötf
 ("\n\nutf8ánd ucs2 sequences of %luÅransformations matched OK.\n",

323 
m©ches
);

324 
	}
}

331 
	$maö
(
¨gc
, **
¨gv
)

333 
ã°vÆ
 
s
;

334 
	`mem£t
 (&
s
, 0, (s));

336 i‡(
¨gc
 >2 && 
	`≠r_tﬁowî
(*
¨gv
[1]) != 'w') {

337 
	`¥ötf
 ("\n\nTesting Narrow Char Ranges\n");

338 
	`ã°_ƒ™ge
(&
s
);

340 i‡(
¨gc
 >2 && 
	`≠r_tﬁowî
(*
¨gv
[1]) != 'n') {

341 
	`¥ötf
 ("\n\nTesting Wide Char Ranges\n");

342 
	`ã°_wønge
(&
s
);

345 
	`ã°_ønges
();

348 
	}
}

	@test/mod_test.c

17 
	~"≠r_°rögs.h
"

19 
¥öt_hñlo
(
°r
[256]);

20 
cou¡_ªps
(
ªps
);

22 
	$¥öt_hñlo
(
°r
[256])

24 
	`≠r_˝y°∫
(
°r
, "Hñlÿ- I'má DSO!\n", 
	`°æí
("Hello - I'má DSO!\n") + 1);

25 
	}
}

27 
	$cou¡_ªps
(
ªps
)

29 
i
 = 0;

30 
i
 = 0;ò< 
ªps
; i++);

31  
i
;

32 
	}
}

	@test/nw_misc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<s¸ìn.h
>

9 
	$_N⁄AµSt›
( )

11 i‡(
	`gëív
("_IN_NETWARE_BASH_"Ë=
NULL
) {

12 
	`¥ötf
("\r\n<Pressány keyÅo close screen> ");

13 
	`gëch¨a˘î
();

15 
	}
}

	@test/occhild.c

1 
	~"≠r.h
"

2 
	~"≠r_fûe_io.h
"

3 
	~"≠r.h
"

5 #i‡
APR_HAVE_STDLIB_H


6 
	~<°dlib.h
>

9 
	$maö
()

11 
buf
[256];

12 
≠r_fûe_t
 *
îr
;

13 
≠r_poﬁ_t
 *
p
;

15 
	`≠r_öôülize
();

16 
	`©exô
(
≠r_ãrmö©e
);

18 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

19 
	`≠r_fûe_›í_°dö
(&
îr
, 
p
);

22 
≠r_size_t
 
Àngth
 = 256;

23 
	`≠r_fûe_ªad
(
îr
, 
buf
, &
Àngth
);

25 
	`exô
(0);

26 
	}
}

	@test/proc_child.c

1 
	~"≠r.h
"

2 
	~<°dio.h
>

3 #i‡
APR_HAVE_UNISTD_H


4 
	~<uni°d.h
>

6 #i‡
APR_HAVE_IO_H


7 
	~<io.h
>

9 
	~<°dlib.h
>

11 
	$maö
()

13 
buf
[256];

14 
byãs
;

16 
byãs
 = ()
	`ªad
(
STDIN_FILENO
, 
buf
, 256);

17 i‡(
byãs
 > 0)

18 
	`wrôe
(
STDOUT_FILENO
, 
buf
, ()
byãs
);

21 
	}
}

	@test/readchild.c

17 
	~<°dlib.h
>

19 
	~"≠r_fûe_io.h
"

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
≠r_fûe_t
 *
ö
, *
out
;

24 
≠r_size_t
 
nbyãs
, 
tŸÆ_byãs
;

25 
≠r_poﬁ_t
 *
p
;

26 
buf
[128];

27 
≠r_°©us_t
 
rv
;

29 
	`≠r_öôülize
();

30 
	`©exô
(
≠r_ãrmö©e
);

31 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

33 
	`≠r_fûe_›í_°dö
(&
ö
, 
p
);

34 
	`≠r_fûe_›í_°dout
(&
out
, 
p
);

36 
tŸÆ_byãs
 = 0;

37 
nbyãs
 = (
buf
);

38 (
rv
 = 
	`≠r_fûe_ªad
(
ö
, 
buf
, &
nbyãs
)Ë=
APR_SUCCESS
) {

39 
tŸÆ_byãs
 +
nbyãs
;

40 
nbyãs
 = (
buf
);

43 
	`≠r_fûe_¥ötf
(
out
, "%" 
APR_SIZE_T_FMT
 " bytes wereÑead\n",

44 
tŸÆ_byãs
);

46 
	}
}

	@test/sendfile.c

17 
	~<as£π.h
>

18 
	~<î∫o.h
>

19 
	~<sig«l.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~"≠r_√tw‹k_io.h
"

23 
	~"≠r_î∫o.h
"

24 
	~"≠r_gíîÆ.h
"

25 
	~"≠r_pﬁl.h
"

26 
	~"≠r_thªad_¥oc.h
"

28 
	~"ã°utû.h
"

30 #i‡!
APR_HAS_SENDFILE


31 
	$maö
()

33 
	`Ârötf
(
°dîr
,

37 
	}
}

40 
	#FILE_LENGTH
 200000

	)

42 
	#FILE_DATA_CHAR
 '0'

	)

44 
	#HDR1
 "1234567890ABCD\n"

	)

45 
	#HDR2
 "EFGH\n"

	)

46 
	#HDR3_LEN
 80000

	)

47 
	#HDR3_CHAR
 '^'

	)

48 
	#TRL1
 "IJKLMNOPQRSTUVWXYZ\n"

	)

49 
	#TRL2
 "!@#$%&*()\n"

	)

50 
	#TRL3_LEN
 90000

	)

51 
	#TRL3_CHAR
 '@'

	)

53 
	#TESTSF_PORT
 8021

	)

55 
	#TESTFILE
 "ã°sf.d©"

	)

57 íum {
	mBLK
, 
	mNONBLK
, 
	mTIMEOUT
} 
	t˛õ¡_sockë_mode_t
;

59 
	$≠ªº
(c⁄° *
‚
, 
≠r_°©us_t
 
rv
)

61 
buf
[120];

63 
	`Ârötf
(
°dîr
, "%s->%d/%s\n",

64 
‚
, 
rv
, 
	`≠r_°ªº‹
‘v, 
buf
,  buf));

65 
	`exô
(1);

66 
	}
}

68 
	$≠r_£tup
(
≠r_poﬁ_t
 *
p
, 
≠r_sockë_t
 **
sock
, *
Ámûy
)

70 
≠r_°©us_t
 
rv
;

72 *
sock
 = 
NULL
;

73 
rv
 = 
	`≠r_sockë_¸óã
(
sock
, *
Ámûy
, 
SOCK_STREAM
, 0, 
p
);

74 i‡(
rv
 !
APR_SUCCESS
) {

75 
	`≠ªº
("≠r_sockë_¸óã()", 
rv
);

78 i‡(*
Ámûy
 =
APR_UNSPEC
) {

79 
≠r_sockaddr_t
 *
loˇlß
;

81 
rv
 = 
	`≠r_sockë_addr_gë
(&
loˇlß
, 
APR_LOCAL
, *
sock
);

82 i‡(
rv
 !
APR_SUCCESS
) {

83 
	`≠ªº
("≠r_sockë_addr_gë()", 
rv
);

85 *
Ámûy
 = 
loˇlß
->family;

87 
	}
}

89 
	$¸óã_ã°fûe
(
≠r_poﬁ_t
 *
p
, c⁄° *
‚ame
)

91 
≠r_fûe_t
 *
f
 = 
NULL
;

92 
≠r_°©us_t
 
rv
;

93 
buf
[120];

94 
i
;

95 
≠r_föfo_t
 
föfo
;

97 
	`¥ötf
("CreatingáÅest file...\n");

98 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

99 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_TRUNCATE
 | 
APR_FOPEN_BUFFERED
,

100 
APR_UREAD
 | 
APR_UWRITE
, 
p
);

101 i‡(
rv
) {

102 
	`≠ªº
("≠r_fûe_›í()", 
rv
);

105 
buf
[0] = 
FILE_DATA_CHAR
;

106 
buf
[1] = '\0';

107 
i
 = 0; i < 
FILE_LENGTH
; i++) {

109 i‡((
i
 % 2) == 0) {

110 
rv
 = 
	`≠r_fûe_putc
(
buf
[0], 
f
);

111 i‡(
rv
) {

112 
	`≠ªº
("≠r_fûe_putc()", 
rv
);

116 
rv
 = 
	`≠r_fûe_puts
(
buf
, 
f
);

117 i‡(
rv
) {

118 
	`≠ªº
("≠r_fûe_puts()", 
rv
);

123 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

124 i‡(
rv
) {

125 
	`≠ªº
("≠r_fûe_˛o£()", 
rv
);

128 
rv
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_NORM
, 
p
);

129 i‡(
rv
 !
APR_SUCCESS
 && ! 
	`APR_STATUS_IS_INCOMPLETE
(rv)) {

130 
	`≠ªº
("≠r_°©()", 
rv
);

133 i‡(
föfo
.
size
 !
FILE_LENGTH
) {

134 
	`Ârötf
(
°dîr
,

137 
‚ame
,

138 ()
FILE_LENGTH
,

139 ()
föfo
.
size
);

140 
	`exô
(1);

142 
	}
}

144 
	$•awn_£rvî
(
≠r_poﬁ_t
 *
p
, 
≠r_¥oc_t
 *
out_¥oc
)

146 
≠r_¥oc_t
 
¥oc
 = {0};

147 
≠r_¥oˇâr_t
 *
¥oˇâr
;

148 
≠r_°©us_t
 
rv
;

149 c⁄° *
¨gs
[3];

151 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

152 i‡(
rv
 !
APR_SUCCESS
) {

153 
	`≠ªº
("≠r_¥oˇâr_¸óã()", 
rv
);

156 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_CHILD_BLOCK
, APR_CHILD_BLOCK,

157 
APR_CHILD_BLOCK
);

158 i‡(
rv
 !
APR_SUCCESS
) {

159 
	`≠ªº
("≠r_¥oˇâr_io_£t()", 
rv
);

162 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
¥oˇâr
, 
APR_PROGRAM_ENV
);

163 i‡(
rv
 !
APR_SUCCESS
) {

164 
	`≠ªº
("≠r_¥oˇâr_cmdty≥_£t()", 
rv
);

167 
rv
 = 
	`≠r_¥oˇâr_îr‹_check_£t
(
¥oˇâr
, 1);

168 i‡(
rv
 !
APR_SUCCESS
) {

169 
	`≠ªº
("≠r_¥oˇâr_îr‹_check_£t()", 
rv
);

172 
¨gs
[0] = "£ndfûe" 
EXTENSION
;

173 
¨gs
[1] = "server";

174 
¨gs
[2] = 
NULL
;

175 
rv
 = 
	`≠r_¥oc_¸óã
(&
¥oc
, 
TESTBINPATH
 "£ndfûe" 
EXTENSION
, 
¨gs
, 
NULL
, 
¥oˇâr
, 
p
);

176 i‡(
rv
 !
APR_SUCCESS
) {

177 
	`≠ªº
("≠r_¥oc_¸óã()", 
rv
);

180 *
out_¥oc
 = 
¥oc
;

181 
	}
}

183 
	$˛õ¡
(
≠r_poﬁ_t
 *
p
, 
˛õ¡_sockë_mode_t
 
sockë_mode
,

184 c⁄° *
ho°
, 
°¨t_£rvî
)

186 
≠r_°©us_t
 
rv
, 
tm¥v
;

187 
≠r_sockë_t
 *
sock
;

188 
buf
[120];

189 
≠r_fûe_t
 *
f
 = 
NULL
;

190 
≠r_size_t
 
Àn
;

191 
≠r_size_t
 
ex≥˘ed_Àn
;

192 
≠r_off_t
 
cuºít_fûe_off£t
;

193 
≠r_hdå_t
 
hdå
;

194 
iovec
 
hódîs
[3];

195 
iovec
 
åaûîs
[3];

196 
≠r_size_t
 
byãs_ªad
;

197 
≠r_pﬁl£t_t
 *
p£t
;

198 
≠r_öt32_t
 
nsocks
;

199 
c⁄√˘_åõs
 = 1;

200 
i
;

201 
Ámûy
;

202 
≠r_sockaddr_t
 *
de°ß
;

203 
≠r_¥oc_t
 
£rvî
;

204 
≠r_öãrvÆ_time_t
 
c⁄√˘_ªåy_öãrvÆ
 = 
	`≠r_time_‰om_m£c
(50);

206 i‡(
°¨t_£rvî
) {

207 
	`•awn_£rvî
(
p
, &
£rvî
);

208 
c⁄√˘_åõs
 = 5;

211 
	`¸óã_ã°fûe
(
p
, 
TESTFILE
);

213 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
TESTFILE
, 
APR_FOPEN_READ
, 0, 
p
);

214 i‡(
rv
 !
APR_SUCCESS
) {

215 
	`≠ªº
("≠r_fûe_›í()", 
rv
);

218 i‡(!
ho°
) {

219 
ho°
 = "127.0.0.1";

221 
Ámûy
 = 
APR_INET
;

222 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
de°ß
, 
ho°
, 
Ámûy
, 
TESTSF_PORT
, 0, 
p
);

223 i‡(
rv
 !
APR_SUCCESS
) {

224 
	`≠ªº
("≠r_sockaddr_öfo_gë()", 
rv
);

227 
c⁄√˘_åõs
--) {

228 
	`≠r_£tup
(
p
, &
sock
, &
Ámûy
);

229 
rv
 = 
	`≠r_sockë_c⁄√˘
(
sock
, 
de°ß
);

230 i‡(
c⁄√˘_åõs
 && 
	`APR_STATUS_IS_ECONNREFUSED
(
rv
)) {

231 
≠r_°©us_t
 
tm¥v
 = 
	`≠r_sockë_˛o£
(
sock
);

232 i‡(
tm¥v
 !
APR_SUCCESS
) {

233 
	`≠ªº
("≠r_sockë_˛o£()", 
tm¥v
);

235 
	`≠r_¶ìp
(
c⁄√˘_ªåy_öãrvÆ
);

236 
c⁄√˘_ªåy_öãrvÆ
 *= 2;

242 i‡(
rv
 !
APR_SUCCESS
) {

243 
	`≠ªº
("≠r_sockë_c⁄√˘()", 
rv
);

246 
sockë_mode
) {

247 
BLK
:

250 
NONBLK
:

252 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_NONBLOCK
, 1);

253 i‡(
rv
 !
APR_SUCCESS
) {

254 
	`≠ªº
("≠r_sockë_›t_£t(APR_SO_NONBLOCK)", 
rv
);

257 
TIMEOUT
:

259 
rv
 = 
	`≠r_sockë_timeout_£t
(
sock
, 100 * 
APR_USEC_PER_SEC
);

260 i‡(
rv
 !
APR_SUCCESS
) {

261 
	`≠ªº
("≠r_sockë_›t_£t(APR_SO_NONBLOCK)", 
rv
);

262 
	`exô
(1);

266 
	`as£π
(1 != 1);

269 
	`¥ötf
("SendingÅhe file...\n");

271 
hdå
.
hódîs
 = headers;

272 
hdå
.
numhódîs
 = 3;

273 
hdå
.
hódîs
[0].
iov_ba£
 = 
HDR1
;

274 
hdå
.
hódîs
[0].
iov_Àn
 = 
	`°æí
(hdå.hódîs[0].
iov_ba£
);

275 
hdå
.
hódîs
[1].
iov_ba£
 = 
HDR2
;

276 
hdå
.
hódîs
[1].
iov_Àn
 = 
	`°æí
(hdå.hódîs[1].
iov_ba£
);

277 
hdå
.
hódîs
[2].
iov_ba£
 = 
	`mÆloc
(
HDR3_LEN
);

278 
	`as£π
(
hdå
.
hódîs
[2].
iov_ba£
);

279 
	`mem£t
(
hdå
.
hódîs
[2].
iov_ba£
, 
HDR3_CHAR
, 
HDR3_LEN
);

280 
hdå
.
hódîs
[2].
iov_Àn
 = 
HDR3_LEN
;

282 
hdå
.
åaûîs
 =Årailers;

283 
hdå
.
numåaûîs
 = 3;

284 
hdå
.
åaûîs
[0].
iov_ba£
 = 
TRL1
;

285 
hdå
.
åaûîs
[0].
iov_Àn
 = 
	`°æí
(hdå.åaûîs[0].
iov_ba£
);

286 
hdå
.
åaûîs
[1].
iov_ba£
 = 
TRL2
;

287 
hdå
.
åaûîs
[1].
iov_Àn
 = 
	`°æí
(hdå.åaûîs[1].
iov_ba£
);

288 
hdå
.
åaûîs
[2].
iov_ba£
 = 
	`mÆloc
(
TRL3_LEN
);

289 
	`mem£t
(
hdå
.
åaûîs
[2].
iov_ba£
, 
TRL3_CHAR
, 
TRL3_LEN
);

290 
	`as£π
(
hdå
.
åaûîs
[2].
iov_ba£
);

291 
hdå
.
åaûîs
[2].
iov_Àn
 = 
TRL3_LEN
;

293 
ex≥˘ed_Àn
 =

294 
	`°æí
(
HDR1
Ë+ såÀn(
HDR2
Ë+ 
HDR3_LEN
 +

295 
	`°æí
(
TRL1
Ë+ såÀn(
TRL2
Ë+ 
TRL3_LEN
 +

296 
FILE_LENGTH
;

298 i‡(
sockë_mode
 =
BLK
) {

299 
cuºít_fûe_off£t
 = 0;

300 
Àn
 = 
FILE_LENGTH
;

301 
rv
 = 
	`≠r_sockë_£ndfûe
(
sock
, 
f
, &
hdå
, &
cuºít_fûe_off£t
, &
Àn
, 0);

302 i‡(
rv
 !
APR_SUCCESS
) {

303 
	`≠ªº
("≠r_sockë_£ndfûe()", 
rv
);

306 
	`¥ötf
("apr_socket_sendfile() updated offset with %ld\n",

307 ()
cuºít_fûe_off£t
);

309 
	`¥ötf
("apr_socket_sendfile() updatedÜen with %ld\n",

310 ()
Àn
);

312 
	`¥ötf
("byã†ªÆly sít: %" 
APR_SIZE_T_FMT
 "\n",

313 
ex≥˘ed_Àn
);

315 i‡(
Àn
 !
ex≥˘ed_Àn
) {

316 
	`Ârötf
(
°dîr
, "apr_socket_sendfile() didn'tÑeportÅhe correct "

318 
	`exô
(1);

323 
≠r_size_t
 
tŸÆ_byãs_£¡
;

324 
≠r_pﬁlfd_t
 
pfd
;

326 
p£t
 = 
NULL
;

327 
rv
 = 
	`≠r_pﬁl£t_¸óã
(&
p£t
, 1, 
p
, 0);

328 
	`as£π
(!
rv
);

329 
pfd
.
p
 =Ö;

330 
pfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

331 
pfd
.
ªqevíts
 = 
APR_POLLOUT
;

332 
pfd
.
π√víts
 = 0;

333 
pfd
.
desc
.
s
 = 
sock
;

334 
pfd
.
˛õ¡_d©a
 = 
NULL
;

336 
rv
 = 
	`≠r_pﬁl£t_add
(
p£t
, &
pfd
);

337 
	`as£π
(!
rv
);

339 
tŸÆ_byãs_£¡
 = 0;

340 
cuºít_fûe_off£t
 = 0;

341 
Àn
 = 
FILE_LENGTH
;

343 
≠r_size_t
 
tm∂í
;

345 
tm∂í
 = 
Àn
;

346 
	`¥ötf
("Callingápr_socket_sendfile()...\n");

347 
	`¥ötf
("Hódî†(%d):\n", 
hdå
.
numhódîs
);

348 
i
 = 0; i < 
hdå
.
numhódîs
; i++) {

349 
	`¥ötf
("\t%ld bytes (%c)\n",

350 ()
hdå
.
hódîs
[
i
].
iov_Àn
,

351 *(*)
hdå
.
hódîs
[
i
].
iov_ba£
);

353 
	`¥ötf
("File: %ld bytes from offset %ld\n",

354 ()
tm∂í
, ()
cuºít_fûe_off£t
);

355 
	`¥ötf
("Tøûî†(%d):\n", 
hdå
.
numåaûîs
);

356 
i
 = 0; i < 
hdå
.
numåaûîs
; i++) {

357 
	`¥ötf
("\t%ld bytes\n",

358 ()
hdå
.
åaûîs
[
i
].
iov_Àn
);

361 
rv
 = 
	`≠r_sockë_£ndfûe
(
sock
, 
f
, &
hdå
, &
cuºít_fûe_off£t
, &
tm∂í
, 0);

362 
	`¥ötf
("≠r_sockë_£ndfûe()->%d, síà%ld byãs\n", 
rv
, ()
tm∂í
);

363 i‡(
rv
) {

364 i‡(
	`APR_STATUS_IS_EAGAIN
(
rv
)) {

365 
	`as£π
(
tm∂í
 == 0);

366 
nsocks
 = 1;

367 
tm¥v
 = 
	`≠r_pﬁl£t_pﬁl
(
p£t
, -1, &
nsocks
, 
NULL
);

368 
	`as£π
(!
tm¥v
);

369 
	`as£π
(
nsocks
 == 1);

374 
tŸÆ_byãs_£¡
 +
tm∂í
;

383 
tm∂í
 && 
hdå
.
numhódîs
) {

384 i‡(
tm∂í
 >
hdå
.
hódîs
[0].
iov_Àn
) {

385 
tm∂í
 -
hdå
.
hódîs
[0].
iov_Àn
;

386 --
hdå
.
numhódîs
;

387 ++
hdå
.
hódîs
;

390 
hdå
.
hódîs
[0].
iov_Àn
 -
tm∂í
;

391 
hdå
.
hódîs
[0].
iov_ba£
 =

392 (*Ë
hdå
.
hódîs
[0].
iov_ba£
 + 
tm∂í
;

393 
tm∂í
 = 0;

401 i‡(
tm∂í
 <
Àn
) {

402 
cuºít_fûe_off£t
 +
tm∂í
;

403 
Àn
 -
tm∂í
;

404 
tm∂í
 = 0;

407 
tm∂í
 -
Àn
;

408 
Àn
 = 0;

409 
cuºít_fûe_off£t
 = 0;

416 
tm∂í
 && 
hdå
.
numåaûîs
) {

417 i‡(
tm∂í
 >
hdå
.
åaûîs
[0].
iov_Àn
) {

418 
tm∂í
 -
hdå
.
åaûîs
[0].
iov_Àn
;

419 --
hdå
.
numåaûîs
;

420 ++
hdå
.
åaûîs
;

423 
hdå
.
åaûîs
[0].
iov_Àn
 -
tm∂í
;

424 
hdå
.
åaûîs
[0].
iov_ba£
 =

425 (*)
hdå
.
åaûîs
[0].
iov_ba£
 + 
tm∂í
;

426 
tm∂í
 = 0;

430 } 
tŸÆ_byãs_£¡
 < 
ex≥˘ed_Àn
 &&

431 (
rv
 =
APR_SUCCESS
 ||

432 (
	`APR_STATUS_IS_EAGAIN
(
rv
Ë&& 
sockë_mode
 !
TIMEOUT
)));

433 i‡(
tŸÆ_byãs_£¡
 !
ex≥˘ed_Àn
) {

434 
	`Ârötf
(
°dîr
,

436 ()
tŸÆ_byãs_£¡
, ()
ex≥˘ed_Àn
);

437 
	`exô
(1);

440 i‡(
rv
) {

441 
	`Ârötf
(
°dîr
,

443 
rv
);

444 
	`exô
(1);

448 
cuºít_fûe_off£t
 = 0;

449 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_CUR
, &
cuºít_fûe_off£t
);

450 i‡(
rv
 !
APR_SUCCESS
) {

451 
	`≠ªº
("≠r_fûe_£ek()", 
rv
);

454 
	`¥ötf
("Afterápr_socket_sendfile(),Åhe kernel fileÖointer is "

456 ()
cuºít_fûe_off£t
);

458 
rv
 = 
	`≠r_sockë_shutdown
(
sock
, 
APR_SHUTDOWN_WRITE
);

459 i‡(
rv
 !
APR_SUCCESS
) {

460 
	`≠ªº
("≠r_sockë_shutdown()", 
rv
);

466 
rv
 = 
	`≠r_sockë_timeout_£t
(
sock
, 
	`≠r_time_‰om_£c
(3));

467 i‡(
rv
 !
APR_SUCCESS
) {

468 
	`≠ªº
("≠r_sockë_timeout_£t()", 
rv
);

471 
byãs_ªad
 = 1;

472 
rv
 = 
	`≠r_sockë_ªcv
(
sock
, 
buf
, &
byãs_ªad
);

473 i‡(
rv
 !
APR_EOF
) {

474 
	`≠ªº
("≠r_sockë_ªcv(Ë”x≥˘ed APR_EOF)", 
rv
);

476 i‡(
byãs_ªad
 != 0) {

477 
	`Ârötf
(
°dîr
, "WeÉxpectedÅo get 0 bytesÑead with APR_EOF\n"

479 ()
byãs_ªad
);

480 
	`exô
(1);

483 
	`¥ötf
("client:ápr_socket_sendfile() workedásÉxpected!\n");

485 
rv
 = 
	`≠r_fûe_ªmove
(
TESTFILE
, 
p
);

486 i‡(
rv
 !
APR_SUCCESS
) {

487 
	`≠ªº
("≠r_fûe_ªmove()", 
rv
);

490 i‡(
°¨t_£rvî
) {

491 
≠r_exô_why_e
 
exôwhy
;

492 
≠r_size_t
 
nbyãs
;

493 
ª•⁄£buf
[1024];

494 
exôcode
;

496 
rv
 = 
	`≠r_fûe_pùe_timeout_£t
(
£rvî
.
out
, 
	`≠r_time_‰om_£c
(2));

497 i‡(
rv
 !
APR_SUCCESS
) {

498 
	`≠ªº
("≠r_fûe_pùe_timeout_£t()", 
rv
);

500 
nbyãs
 = (
ª•⁄£buf
);

501 
rv
 = 
	`≠r_fûe_ªad
(
£rvî
.
out
, 
ª•⁄£buf
, &
nbyãs
);

502 i‡(
rv
 !
APR_SUCCESS
) {

503 
	`≠ªº
("≠r_fûe_ªad(Ëmesßge†‰om sîvî", 
rv
);

505 
	`¥ötf
("%.*s", ()
nbyãs
, 
ª•⁄£buf
);

506 
rv
 = 
	`≠r_¥oc_waô
(&
£rvî
, &
exôcode
, &
exôwhy
, 
APR_WAIT
);

507 i‡(
rv
 !
APR_CHILD_DONE
) {

508 
	`≠ªº
("≠r_¥oc_waô(Ë”x≥˘ed APR_CHILD_DONE)", 
rv
);

510 i‡(
exôcode
 != 0) {

511 
	`Ârötf
(
°dîr
, "£ndfûê£rvîÑëu∫ed %d\n", 
exôcode
);

512 
	`exô
(1);

517 
	}
}

519 
	$£rvî
(
≠r_poﬁ_t
 *
p
)

521 
≠r_°©us_t
 
rv
;

522 
≠r_sockë_t
 *
sock
;

523 
buf
[120];

524 
i
;

525 
≠r_sockë_t
 *
√wsock
 = 
NULL
;

526 
≠r_size_t
 
byãs_ªad
;

527 
≠r_sockaddr_t
 *
loˇlß
;

528 
Ámûy
;

530 
Ámûy
 = 
APR_INET
;

531 
	`≠r_£tup
(
p
, &
sock
, &
Ámûy
);

533 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_REUSEADDR
, 1);

534 i‡(
rv
 !
APR_SUCCESS
) {

535 
	`≠ªº
("≠r_sockë_›t_£t()", 
rv
);

538 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
loˇlß
, 
NULL
, 
Ámûy
, 
TESTSF_PORT
, 0, 
p
);

539 i‡(
rv
 !
APR_SUCCESS
) {

540 
	`≠ªº
("≠r_sockaddr_öfo_gë()", 
rv
);

543 
rv
 = 
	`≠r_sockë_böd
(
sock
, 
loˇlß
);

544 i‡(
rv
 !
APR_SUCCESS
) {

545 
	`≠ªº
("≠r_sockë_böd()", 
rv
);

548 
rv
 = 
	`≠r_sockë_li°í
(
sock
, 5);

549 i‡(
rv
 !
APR_SUCCESS
) {

550 
	`≠ªº
("≠r_sockë_li°í()", 
rv
);

553 
	`¥ötf
("Waiting forá clientÅo connect...\n");

555 
rv
 = 
	`≠r_sockë_ac˚±
(&
√wsock
, 
sock
, 
p
);

556 i‡(
rv
 !
APR_SUCCESS
) {

557 
	`≠ªº
("≠r_sockë_ac˚±()", 
rv
);

560 
	`¥ötf
("Processingá client...\n");

562 
	`as£π
( 
buf
 > 
	`°æí
(
HDR1
));

563 
byãs_ªad
 = 
	`°æí
(
HDR1
);

564 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

565 i‡(
rv
 !
APR_SUCCESS
) {

566 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

568 i‡(
byãs_ªad
 !
	`°æí
(
HDR1
)) {

569 
	`Ârötf
(
°dîr
, "wrong dataÑead (1)\n");

570 
	`exô
(1);

572 i‡(
	`memcmp
(
buf
, 
HDR1
, 
	`°æí
(HDR1))) {

573 
	`Ârötf
(
°dîr
, "wrong dataÑead (2)\n");

574 
	`Ârötf
(
°dîr
, "received: `%.*s'\nexpected: `%s'\n",

575 ()
byãs_ªad
, 
buf
, 
HDR1
);

576 
	`exô
(1);

579 
	`as£π
( 
buf
 > 
	`°æí
(
HDR2
));

580 
byãs_ªad
 = 
	`°æí
(
HDR2
);

581 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

582 i‡(
rv
 !
APR_SUCCESS
) {

583 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

585 i‡(
byãs_ªad
 !
	`°æí
(
HDR2
)) {

586 
	`Ârötf
(
°dîr
, "wrong dataÑead (3)\n");

587 
	`exô
(1);

589 i‡(
	`memcmp
(
buf
, 
HDR2
, 
	`°æí
(HDR2))) {

590 
	`Ârötf
(
°dîr
, "wrong dataÑead (4)\n");

591 
	`Ârötf
(
°dîr
, "received: `%.*s'\nexpected: `%s'\n",

592 ()
byãs_ªad
, 
buf
, 
HDR2
);

593 
	`exô
(1);

596 
i
 = 0; i < 
HDR3_LEN
; i++) {

597 
byãs_ªad
 = 1;

598 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

599 i‡(
rv
 !
APR_SUCCESS
) {

600 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

602 i‡(
byãs_ªad
 != 1) {

603 
	`Ârötf
(
°dîr
, "apr_socket_recv()->%ld bytes instead of 1\n",

604 ()
byãs_ªad
);

605 
	`exô
(1);

607 i‡(
buf
[0] !
HDR3_CHAR
) {

608 
	`Ârötf
(
°dîr
,

610 
i
);

611 
	`Ârötf
(
°dîr
, "read `%c' (0x%x) from client;Éxpected "

613 
buf
[0], buf[0], 
HDR3_CHAR
);

614 
	`exô
(1);

618 
i
 = 0; i < 
FILE_LENGTH
; i++) {

619 
byãs_ªad
 = 1;

620 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

621 i‡(
rv
 !
APR_SUCCESS
) {

622 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

624 i‡(
byãs_ªad
 != 1) {

625 
	`Ârötf
(
°dîr
, "apr_socket_recv()->%ld bytes instead of 1\n",

626 ()
byãs_ªad
);

627 
	`exô
(1);

629 i‡(
buf
[0] !
FILE_DATA_CHAR
) {

630 
	`Ârötf
(
°dîr
,

632 
i
);

633 
	`Ârötf
(
°dîr
, "read `%c' (0x%x) from client;Éxpected "

635 
buf
[0], buf[0], 
FILE_DATA_CHAR
);

636 
	`exô
(1);

640 
	`as£π
( 
buf
 > 
	`°æí
(
TRL1
));

641 
byãs_ªad
 = 
	`°æí
(
TRL1
);

642 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

643 i‡(
rv
 !
APR_SUCCESS
) {

644 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

646 i‡(
byãs_ªad
 !
	`°æí
(
TRL1
)) {

647 
	`Ârötf
(
°dîr
, "wrong dataÑead (5)\n");

648 
	`exô
(1);

650 i‡(
	`memcmp
(
buf
, 
TRL1
, 
	`°æí
(TRL1))) {

651 
	`Ârötf
(
°dîr
, "wrong dataÑead (6)\n");

652 
	`Ârötf
(
°dîr
, "received: `%.*s'\nexpected: `%s'\n",

653 ()
byãs_ªad
, 
buf
, 
TRL1
);

654 
	`exô
(1);

657 
	`as£π
( 
buf
 > 
	`°æí
(
TRL2
));

658 
byãs_ªad
 = 
	`°æí
(
TRL2
);

659 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

660 i‡(
rv
 !
APR_SUCCESS
) {

661 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

663 i‡(
byãs_ªad
 !
	`°æí
(
TRL2
)) {

664 
	`Ârötf
(
°dîr
, "wrong dataÑead (7)\n");

665 
	`exô
(1);

667 i‡(
	`memcmp
(
buf
, 
TRL2
, 
	`°æí
(TRL2))) {

668 
	`Ârötf
(
°dîr
, "wrong dataÑead (8)\n");

669 
	`Ârötf
(
°dîr
, "received: `%.*s'\nexpected: `%s'\n",

670 ()
byãs_ªad
, 
buf
, 
TRL2
);

671 
	`exô
(1);

674 
i
 = 0; i < 
TRL3_LEN
; i++) {

675 
byãs_ªad
 = 1;

676 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

677 i‡(
rv
 !
APR_SUCCESS
) {

678 
	`≠ªº
("≠r_sockë_ªcv()", 
rv
);

680 i‡(
byãs_ªad
 != 1) {

681 
	`Ârötf
(
°dîr
, "apr_socket_recv()->%ld bytes instead of 1\n",

682 ()
byãs_ªad
);

683 
	`exô
(1);

685 i‡(
buf
[0] !
TRL3_CHAR
) {

686 
	`Ârötf
(
°dîr
,

688 
i
);

689 
	`Ârötf
(
°dîr
, "read `%c' (0x%x) from client;Éxpected "

691 
buf
[0], buf[0], 
TRL3_CHAR
);

692 
	`exô
(1);

696 
byãs_ªad
 = 1;

697 
rv
 = 
	`≠r_sockë_ªcv
(
√wsock
, 
buf
, &
byãs_ªad
);

698 i‡(
rv
 !
APR_EOF
) {

699 
	`≠ªº
("≠r_sockë_ªcv(Ë”x≥˘ed APR_EOF)", 
rv
);

701 i‡(
byãs_ªad
 != 0) {

702 
	`Ârötf
(
°dîr
, "WeÉxpectedÅo get 0 bytesÑead with APR_EOF\n"

704 ()
byãs_ªad
, 
buf
[0]);

705 
	`exô
(1);

708 
	`¥ötf
("server:ápr_socket_sendfile() workedásÉxpected!\n");

711 
	}
}

713 
	$maö
(
¨gc
, *
¨gv
[])

715 
≠r_poﬁ_t
 *
p
;

716 
≠r_°©us_t
 
rv
;

718 #ifde‡
SIGPIPE


719 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

722 
rv
 = 
	`≠r_öôülize
();

723 i‡(
rv
 !
APR_SUCCESS
) {

724 
	`≠ªº
("≠r_öôülize()", 
rv
);

727 
	`©exô
(
≠r_ãrmö©e
);

729 
rv
 = 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

730 i‡(
rv
 !
APR_SUCCESS
) {

731 
	`≠ªº
("≠r_poﬁ_¸óã()", 
rv
);

734 i‡(
¨gc
 >2 && !
	`°rcmp
(
¨gv
[1], "client")) {

735 c⁄° *
ho°
 = 
NULL
;

736 
mode
 = 
BLK
;

737 
°¨t_£rvî
 = 0;

738 
i
;

740 
i
 = 2; i < 
¨gc
; i++) {

741 i‡(!
	`°rcmp
(
¨gv
[
i
], "blocking")) {

742 
mode
 = 
BLK
;

744 i‡(!
	`°rcmp
(
¨gv
[
i
], "timeout")) {

745 
mode
 = 
TIMEOUT
;

747 i‡(!
	`°rcmp
(
¨gv
[
i
], "nonblocking")) {

748 
mode
 = 
NONBLK
;

750 i‡(!
	`°rcmp
(
¨gv
[
i
], "startserver")) {

751 
°¨t_£rvî
 = 1;

754 
ho°
 = 
¨gv
[
i
];

757  
	`˛õ¡
(
p
, 
mode
, 
ho°
, 
°¨t_£rvî
);

759 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "server")) {

760  
	`£rvî
(
p
);

763 
	`Ârötf
(
°dîr
,

766 
¨gv
[0],árgv[0]);

768 
	}
}

	@test/sockchild.c

17 
	~<°dlib.h
>

18 
	~"ã°sock.h
"

19 
	~"≠r_√tw‹k_io.h
"

20 
	~"≠r_poﬁs.h
"

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
≠r_poﬁ_t
 *
p
;

25 
≠r_sockë_t
 *
sock
;

26 
≠r_°©us_t
 
rv
;

27 
≠r_sockaddr_t
 *
ªmŸe_ß
;

29 
	`≠r_öôülize
();

30 
	`©exô
(
≠r_ãrmö©e
);

31 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

33 i‡(
¨gc
 < 2) {

34 
	`exô
(-1);

37 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ªmŸe_ß
, "127.0.0.1", 
APR_UNSPEC
, 8021, 0, 
p
);

38 i‡(
rv
 !
APR_SUCCESS
) {

39 
	`exô
(-1);

42 i‡(
	`≠r_sockë_¸óã
(&
sock
, 
ªmŸe_ß
->
Ámûy
, 
SOCK_STREAM
, 0,

43 
p
Ë!
APR_SUCCESS
) {

44 
	`exô
(-1);

47 
rv
 = 
	`≠r_sockë_timeout_£t
(
sock
, 
	`≠r_time_‰om_£c
(3));

48 i‡(
rv
) {

49 
	`exô
(-1);

52 
	`≠r_sockë_c⁄√˘
(
sock
, 
ªmŸe_ß
);

54 i‡(!
	`°rcmp
("ªad", 
¨gv
[1])) {

55 
d©¨ecv
[
STRLEN
];

56 
≠r_size_t
 
Àngth
 = 
STRLEN
;

57 
≠r_°©us_t
 
rv
;

59 
	`mem£t
(
d©¨ecv
, 0, 
STRLEN
);

60 
rv
 = 
	`≠r_sockë_ªcv
(
sock
, 
d©¨ecv
, &
Àngth
);

61 
	`≠r_sockë_˛o£
(
sock
);

62 i‡(
	`APR_STATUS_IS_TIMEUP
(
rv
)) {

63 
	`exô
(
SOCKET_TIMEOUT
);

66 i‡(
	`°rcmp
(
d©¨ecv
, 
DATASTR
)) {

67 
	`exô
(-1);

70 
	`exô
(()
Àngth
);

72 i‡(!
	`°rcmp
("wrôe", 
¨gv
[1])) {

73 
≠r_size_t
 
Àngth
 = 
	`°æí
(
DATASTR
);

74 
	`≠r_sockë_£nd
(
sock
, 
DATASTR
, &
Àngth
);

76 
	`≠r_sockë_˛o£
(
sock
);

77 
	`exô
(()
Àngth
);

79 i‡(!
	`°rcmp
("˛o£", 
¨gv
[1])) {

80 
	`≠r_sockë_˛o£
(
sock
);

81 
	`exô
(0);

83 
	`exô
(-1);

84 
	}
}

	@test/sockperf.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

32 
	~"≠r.h
"

33 
	~"≠r_√tw‹k_io.h
"

34 
	~"≠r_°rögs.h
"

36 
	#MAX_ITERS
 10

	)

37 
	#TEST_SIZE
 1024

	)

39 
	sã°Së
 {

40 
	mc
;

41 
≠r_size_t
 
	msize
;

42 
	môîs
;

43 } 
	gã°Runs
[] = {

51 
	sã°Resu…
 {

52 
	msize
;

53 
	môîs
;

54 
≠r_time_t
 
	mm£cs
[
MAX_ITERS
];

55 
≠r_time_t
 
	mavg
;

58 
≠r_öt16_t
 
	gã°P‹t
 = 4747;

59 
≠r_sockaddr_t
 *
	gsockAddr
 = 
NULL
;

61 
	$ªp‹tEº‹
(c⁄° *
msg
, 
≠r_°©us_t
 
rv
,

62 
≠r_poﬁ_t
 *
poﬁ
)

64 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

65 i‡(
rv
 !
APR_SUCCESS
)

66 
	`Ârötf
(
°dîr
, "Eº‹: %d\n'%s'\n", 
rv
,

67 
	`≠r_p•rötf
(
poﬁ
, "%pm", &
rv
));

69 
	}
}

71 
	$˛o£C⁄√˘i⁄
(
≠r_sockë_t
 *
sock
)

73 
≠r_size_t
 
Àn
 = 0;

74 
	`≠r_sockë_£nd
(
sock
, 
NULL
, &
Àn
);

75 
	}
}

77 
≠r_°©us_t
 
	$£ndRecvBuf„r
(
≠r_time_t
 *
t
, c⁄° *
buf
,

78 
≠r_size_t
 
size
, 
≠r_poﬁ_t
 *
poﬁ
)

80 
≠r_sockë_t
 *
sock
;

81 
≠r_°©us_t
 
rv
;

82 
≠r_size_t
 
Àn
 = 
size
, 
thi°ime
 = size;

83 *
ªcvBuf
;

84 
≠r_time_t
 
ã°Sèπ
 = 
	`≠r_time_now
(), 
ã°End
;

85 
i
;

87 i‡(! 
sockAddr
) {

88 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
sockAddr
, "127.0.0.1", 
APR_UNSPEC
,

89 
ã°P‹t
, 0, 
poﬁ
);

90 i‡(
rv
 !
APR_SUCCESS
) {

91 
	`ªp‹tEº‹
("U«bÀÅÿgë sockë info", 
rv
, 
poﬁ
);

92  
rv
;

97 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET
, 
SOCK_STREAM
, 
APR_PROTO_TCP
,

98 
poﬁ
);

99 i‡(
rv
 !
APR_SUCCESS
) {

100 
	`ªp‹tEº‹
("U«bÀÅÿ¸óã IPv4 såóm sockë", 
rv
, 
poﬁ
);

101  
rv
;

104 
rv
 = 
	`≠r_sockë_c⁄√˘
(
sock
, 
sockAddr
);

105 i‡(
rv
 !
APR_SUCCESS
) {

106 
	`ªp‹tEº‹
("U«bÀÅÿc⁄√˘Åÿechod!", 
rv
, 
poﬁ
);

107 
	`≠r_sockë_˛o£
(
sock
);

108  
rv
;

110 
	`≠r_sockë_˛o£
(
sock
);

114 
ªcvBuf
 = 
	`≠r_∑Œoc
(
poﬁ
, 
size
);

115 i‡(! 
ªcvBuf
) {

116 
	`ªp‹tEº‹
("U«bÀÅÿÆloˇã buf„r", 
ENOMEM
, 
poﬁ
);

117  
ENOMEM
;

120 *
t
 = 0;

123 
ã°Sèπ
 = 
	`≠r_time_now
();

124 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET
, 
SOCK_STREAM
, 
APR_PROTO_TCP
,

125 
poﬁ
);

126 i‡(
rv
 !
APR_SUCCESS
) {

127 
	`ªp‹tEº‹
("U«bÀÅÿ¸óã IPv4 såóm sockë", 
rv
, 
poﬁ
);

128  
rv
;

131 
rv
 = 
	`≠r_sockë_c⁄√˘
(
sock
, 
sockAddr
);

132 i‡(
rv
 !
APR_SUCCESS
) {

133 
	`ªp‹tEº‹
("U«bÀÅÿc⁄√˘Åÿechod!", 
rv
, 
poﬁ
);

134 
	`≠r_sockë_˛o£
(
sock
);

135  
rv
;

138 
i
 = 0; i < 3; i++) {

140 
Àn
 = 
size
;

141 
thi°ime
 = 
size
;

143 
rv
 = 
	`≠r_sockë_£nd
(
sock
, 
buf
, &
Àn
);

144 i‡(
rv
 !
APR_SUCCESS
 || 
Àn
 !
size
) {

145 
	`ªp‹tEº‹
(
	`≠r_p•rötf
(
poﬁ
,

147 
i
Ë, 
rv
, 
poﬁ
);

148 
	`˛o£C⁄√˘i⁄
(
sock
);

149 
	`≠r_sockë_˛o£
(
sock
);

150  
rv
;

154 
Àn
 = 
thi°ime
;

155 
rv
 = 
	`≠r_sockë_ªcv
(
sock
, &
ªcvBuf
[
size
 - 
thi°ime
], &
Àn
);

156 i‡(
rv
 !
APR_SUCCESS
) {

157 
	`ªp‹tEº‹
("Eº‹Ñe˚ivög from sockë", 
rv
, 
poﬁ
);

160 
thi°ime
 -
Àn
;

161 } 
thi°ime
);

164 
	`˛o£C⁄√˘i⁄
(
sock
);

165 
	`≠r_sockë_˛o£
(
sock
);

166 
ã°End
 = 
	`≠r_time_now
();

169 i‡(
thi°ime
) {

170 
	`ªp‹tEº‹
("Re˚ivedÜes†th™ wê£¡ :-(", 
rv
, 
poﬁ
);

171  
rv
;

173 i‡(
	`°∫cmp
(
ªcvBuf
, 
buf
, 
size
) != 0) {

174 
	`ªp‹tEº‹
("Re˚ived c‹ru± d©®:-(", 0, 
poﬁ
);

175 
	`¥ötf
("Wê£¡:\n%s\nWêª˚ived:\n%s\n", 
buf
, 
ªcvBuf
);

176  
EINVAL
;

178 *
t
 = 
ã°End
 - 
ã°Sèπ
;

179  
APR_SUCCESS
;

180 
	}
}

182 
≠r_°©us_t
 
	$runTe°
(
ã°Së
 *
ts
, 
ã°Resu…
 *
ªs
,

183 
≠r_poﬁ_t
 *
poﬁ
)

185 *
buf„r
;

186 
≠r_°©us_t
 
rv
;

187 
i
;

188 
≠r_size_t
 
sz
 = 
ts
->
size
 * 
TEST_SIZE
;

190 
buf„r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
sz
);

191 i‡(!
buf„r
) {

192 
	`ªp‹tEº‹
("U«bÀÅÿÆloˇã buf„r", 
ENOMEM
, 
poﬁ
);

193  
ENOMEM
;

195 
	`mem£t
(
buf„r
, 
ts
->
c
, 
sz
);

197 
ªs
->
ôîs
 = 
ts
->ôî†> 
MAX_ITERS
 ? MAX_ITERS :Ås->iters;

199 
i
 = 0; i < 
ªs
->
ôîs
; i++) {

200 
≠r_time_t
 
ôîTime
;

201 
rv
 = 
	`£ndRecvBuf„r
(&
ôîTime
, 
buf„r
, 
sz
, 
poﬁ
);

202 i‡(
rv
 !
APR_SUCCESS
) {

203 
ªs
->
ôîs
 = 
i
;

206 
ªs
->
m£cs
[
i
] = 
ôîTime
;

209  
rv
;

210 
	}
}

212 
	$maö
(
¨gc
, **
¨gv
)

214 
≠r_poﬁ_t
 *
poﬁ
;

215 
≠r_°©us_t
 
rv
;

216 
i
;

217 
nTe°s
 = (
ã°Runs
) / (testRuns[0]);

218 
ã°Resu…
 *
ªsu…s
;

220 
	`¥ötf
("APR Test Application: sockperf\n");

222 
	`≠r_öôülize
();

223 
	`©exô
(
≠r_ãrmö©e
);

225 
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
);

227 
ªsu…s
 = (
ã°Resu…
 *)
	`≠r_pˇŒoc
(
poﬁ
,

228 (*
ªsu…s
Ë* 
nTe°s
);

230 
i
 = 0; i < 
nTe°s
; i++) {

231 
	`¥ötf
("Te° -> %c\n", 
ã°Runs
[
i
].
c
);

232 
ªsu…s
[
i
].
size
 = 
ã°Runs
[i].sizê* (
≠r_size_t
)
TEST_SIZE
;

233 
rv
 = 
	`runTe°
(&
ã°Runs
[
i
], &
ªsu…s
[i], 
poﬁ
);

234 i‡(
rv
 !
APR_SUCCESS
) {

236 
	`exô
(1);

240 
	`¥ötf
("Tests Complete!\n");

241 
i
 = 0; i < 
nTe°s
; i++) {

242 
j
;

243 
≠r_time_t
 
tŸTime
 = 0;

244 
	`¥ötf
("%10d byã block:\n", 
ªsu…s
[
i
].
size
);

245 
	`¥ötf
("\t%2d iãøti⁄†: ", 
ªsu…s
[
i
].
ôîs
);

246 
j
 = 0; j < 
ªsu…s
[
i
].
ôîs
; j++) {

247 
	`¥ötf
("%6" 
APR_TIME_T_FMT
, 
ªsu…s
[
i
].
m£cs
[
j
]);

248 
tŸTime
 +
ªsu…s
[
i
].
m£cs
[
j
];

250 
	`¥ötf
("<\n");

251 
	`¥ötf
("\à Avîage: %6" 
APR_TIME_T_FMT
 "\n",

252 
tŸTime
 / 
ªsu…s
[
i
].
ôîs
);

256 
	}
}

	@test/testapp.c

1 
	~<≠r.h
>

2 
	~<≠r_gíîÆ.h
>

4 
	$maö
(
¨gc
, c⁄° * c⁄° * 
¨gv
, c⁄° * c⁄° *
ív
)

6 
	`≠r_≠p_öôülize
(&
¨gc
, &
¨gv
, &
ív
);

9 
	`≠r_ãrmö©e
();

10 
	}
}

	@test/testargs.c

17 
	~"≠r_î∫o.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_gë›t.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"ã°utû.h
"

23 
	$f‹m©_¨g
(*
°r
, 
›ti⁄
, c⁄° *
¨g
)

25 i‡(
¨g
) {

26 
	`≠r_¢¥ötf
(
°r
, 8196, "%s›ti⁄: %¯wôh %s\n", så, 
›ti⁄
, 
¨g
);

29 
	`≠r_¢¥ötf
(
°r
, 8196, "%s›ti⁄: %c\n", så, 
›ti⁄
);

31 
	}
}

33 
	$unknown_¨g
(*
°r
, c⁄° *
îr
, ...)

35 
va_li°
 
va
;

37 
	`va_°¨t
(
va
, 
îr
);

38 
	`≠r_v¢¥ötf
(
°r
, 8196, 
îr
, 
va
);

39 
	`va_íd
(
va
);

40 
	}
}

42 
	$no_›ti⁄s_found
(
abts_ˇ£
 *
tc
, *
d©a
)

44 
œrgc
 = 5;

45 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a", "-b", "-c", "-d"};

46 
≠r_gë›t_t
 *
›t
;

47 
≠r_°©us_t
 
rv
;

48 
ch
;

49 c⁄° *
›èrg
;

50 
°r
[8196];

52 
°r
[0] = '\0';

53 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

54 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

56 
	`≠r_gë›t
(
›t
, "abcd", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

57 
ch
) {

63 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

66 
	`ABTS_STR_EQUAL
(
tc
, "option:á\n"

69 "›ti⁄: d\n", 
°r
);

70 
	}
}

72 
	$no_›ti⁄s
(
abts_ˇ£
 *
tc
, *
d©a
)

74 
œrgc
 = 5;

75 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a", "-b", "-c", "-d"};

76 
≠r_gë›t_t
 *
›t
;

77 
≠r_°©us_t
 
rv
;

78 
ch
;

79 c⁄° *
›èrg
;

80 
°r
[8196];

82 
°r
[0] = '\0';

83 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

84 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

86 
›t
->
îr‚
 = 
unknown_¨g
;

87 
›t
->
îørg
 = 
°r
;

89 
	`≠r_gë›t
(
›t
, "efgh", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

90 
ch
) {

95 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

101 
	`ABTS_STR_EQUAL
(
tc
, "ã°¥og: iŒegÆ o±i⁄ --á\n", 
°r
);

102 
	}
}

104 
	$ªquúed_›ti⁄
(
abts_ˇ£
 *
tc
, *
d©a
)

106 
œrgc
 = 3;

107 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a", "foo"};

108 
≠r_gë›t_t
 *
›t
;

109 
≠r_°©us_t
 
rv
;

110 
ch
;

111 c⁄° *
›èrg
;

112 
°r
[8196];

114 
°r
[0] = '\0';

115 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

116 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

118 
›t
->
îr‚
 = 
unknown_¨g
;

119 
›t
->
îørg
 = 
°r
;

121 
	`≠r_gë›t
(
›t
, "a:", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

122 
ch
) {

124 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

130 
	`ABTS_STR_EQUAL
(
tc
, "›ti⁄:á wôh foo\n", 
°r
);

131 
	}
}

133 
	$ªquúed_›ti⁄_nŸgiví
(
abts_ˇ£
 *
tc
, *
d©a
)

135 
œrgc
 = 2;

136 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a"};

137 
≠r_gë›t_t
 *
›t
;

138 
≠r_°©us_t
 
rv
;

139 
ch
;

140 c⁄° *
›èrg
;

141 
°r
[8196];

143 
°r
[0] = '\0';

144 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

145 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

147 
›t
->
îr‚
 = 
unknown_¨g
;

148 
›t
->
îørg
 = 
°r
;

150 
	`≠r_gë›t
(
›t
, "a:", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

151 
ch
) {

153 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

159 
	`ABTS_STR_EQUAL
(
tc
, "ã°¥og: o±i⁄Ñequúe†™árgumíà--á\n", 
°r
);

160 
	}
}

162 
	$›ti⁄Æ_›ti⁄
(
abts_ˇ£
 *
tc
, *
d©a
)

164 
œrgc
 = 3;

165 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a", "foo"};

166 
≠r_gë›t_t
 *
›t
;

167 
≠r_°©us_t
 
rv
;

168 
ch
;

169 c⁄° *
›èrg
;

170 
°r
[8196];

172 
°r
[0] = '\0';

173 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

174 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

176 
›t
->
îr‚
 = 
unknown_¨g
;

177 
›t
->
îørg
 = 
°r
;

179 
	`≠r_gë›t
(
›t
, "a::", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

180 
ch
) {

182 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

188 
	`ABTS_STR_EQUAL
(
tc
, "›ti⁄:á wôh foo\n", 
°r
);

189 
	}
}

191 
	$›ti⁄Æ_›ti⁄_nŸgiví
(
abts_ˇ£
 *
tc
, *
d©a
)

193 
œrgc
 = 2;

194 c⁄° * c⁄° 
œrgv
[] = {"testprog", "-a"};

195 
≠r_gë›t_t
 *
›t
;

196 
≠r_°©us_t
 
rv
;

197 
ch
;

198 c⁄° *
›èrg
;

199 
°r
[8196];

201 
°r
[0] = '\0';

202 
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
p
, 
œrgc
, 
œrgv
);

203 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

205 
›t
->
îr‚
 = 
unknown_¨g
;

206 
›t
->
îørg
 = 
°r
;

208 
	`≠r_gë›t
(
›t
, "a::", &
ch
, &
›èrg
Ë=
APR_SUCCESS
) {

209 
ch
) {

211 
	`f‹m©_¨g
(
°r
, 
ch
, 
›èrg
);

219 
	`ABTS_STR_EQUAL
(
tc
, "›ti⁄:á\n", 
°r
);

221 
	`ABTS_STR_EQUAL
(
tc
, "ã°¥og: o±i⁄Ñequúe†™árgumíà--á\n", 
°r
);

222 
	}
}

224 
abts_suôe
 *
	$ã°gë›t
(
abts_suôe
 *
suôe
)

226 
suôe
 = 
	`ADD_SUITE
(suite)

228 
	`abts_run_ã°
(
suôe
, 
no_›ti⁄s
, 
NULL
);

229 
	`abts_run_ã°
(
suôe
, 
no_›ti⁄s_found
, 
NULL
);

230 
	`abts_run_ã°
(
suôe
, 
ªquúed_›ti⁄
, 
NULL
);

231 
	`abts_run_ã°
(
suôe
, 
ªquúed_›ti⁄_nŸgiví
, 
NULL
);

232 
	`abts_run_ã°
(
suôe
, 
›ti⁄Æ_›ti⁄
, 
NULL
);

233 
	`abts_run_ã°
(
suôe
, 
›ti⁄Æ_›ti⁄_nŸgiví
, 
NULL
);

235  
suôe
;

236 
	}
}

	@test/testatomic.c

17 
	~"ã°utû.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_thªad_¥oc.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_©omic.h
"

23 
	~"≠r_time.h
"

27 #i‡
APR_HAS_THREADS
 && \

28 ((
deföed
(
SOLARIS2
Ë&& 
	gSOLARIS2
 > 6Ë|| 
	$deföed
(
_AIX
))

30 
	#HAVE_PTHREAD_SETCONCURRENCY


	)

33 #ifde‡
HAVE_PTHREAD_SETCONCURRENCY


34 
	~<±hªad.h
>

37 
	$ã°_öô
(
abts_ˇ£
 *
tc
, *
d©a
)

39 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ inôlüzê©omics", 
	`≠r_©omic_öô
(
p
));

40 
	}
}

42 
	$ã°_£t32
(
abts_ˇ£
 *
tc
, *
d©a
)

44 
≠r_uöt32_t
 
y32
;

45 
	`≠r_©omic_£t32
(&
y32
, 2);

46 
	`ABTS_INT_EQUAL
(
tc
, 2, 
y32
);

47 
	}
}

49 
	$ã°_ªad32
(
abts_ˇ£
 *
tc
, *
d©a
)

51 
≠r_uöt32_t
 
y32
;

52 
	`≠r_©omic_£t32
(&
y32
, 2);

53 
	`ABTS_INT_EQUAL
(
tc
, 2, 
	`≠r_©omic_ªad32
(&
y32
));

54 
	}
}

56 
	$ã°_dec32
(
abts_ˇ£
 *
tc
, *
d©a
)

58 
≠r_uöt32_t
 
y32
;

59 
rv
;

61 
	`≠r_©omic_£t32
(&
y32
, 2);

63 
rv
 = 
	`≠r_©omic_dec32
(&
y32
);

64 
	`ABTS_INT_EQUAL
(
tc
, 1, 
y32
);

65 
	`ABTS_ASSERT
(
tc
, "©omic_de¯ªtu∫ed zîÿwhí iàshouldn't", 
rv
 != 0);

67 
rv
 = 
	`≠r_©omic_dec32
(&
y32
);

68 
	`ABTS_INT_EQUAL
(
tc
, 0, 
y32
);

69 
	`ABTS_ASSERT
(
tc
, "©omic_de¯didn'àªtu∫ed zîÿwhí iàshould", 
rv
 == 0);

70 
	}
}

72 
	$ã°_xchg32
(
abts_ˇ£
 *
tc
, *
d©a
)

74 
≠r_uöt32_t
 
ﬁdvÆ
;

75 
≠r_uöt32_t
 
y32
;

77 
	`≠r_©omic_£t32
(&
y32
, 100);

78 
ﬁdvÆ
 = 
	`≠r_©omic_xchg32
(&
y32
, 50);

80 
	`ABTS_INT_EQUAL
(
tc
, 100, 
ﬁdvÆ
);

81 
	`ABTS_INT_EQUAL
(
tc
, 50, 
y32
);

82 
	}
}

84 
	$ã°_xchg±r
(
abts_ˇ£
 *
tc
, *
d©a
)

86 
a
;

87 *
ªf
 = "littleÖiggy";

88 vﬁ©ûê*
èrgë_±r
 = 
ªf
;

89 *
ﬁd_±r
;

91 
ﬁd_±r
 = 
	`≠r_©omic_xchg±r
(&
èrgë_±r
, &
a
);

92 
	`ABTS_PTR_EQUAL
(
tc
, 
ªf
, 
ﬁd_±r
);

93 
	`ABTS_PTR_EQUAL
(
tc
, &
a
, (*Ë
èrgë_±r
);

94 
	}
}

96 
	$ã°_ˇs_equÆ
(
abts_ˇ£
 *
tc
, *
d©a
)

98 
≠r_uöt32_t
 
ˇsvÆ
 = 0;

99 
≠r_uöt32_t
 
ﬁdvÆ
;

101 
ﬁdvÆ
 = 
	`≠r_©omic_ˇs32
(&
ˇsvÆ
, 12, 0);

102 
	`ABTS_INT_EQUAL
(
tc
, 0, 
ﬁdvÆ
);

103 
	`ABTS_INT_EQUAL
(
tc
, 12, 
ˇsvÆ
);

104 
	}
}

106 
	$ã°_ˇs_equÆ_n⁄nuŒ
(
abts_ˇ£
 *
tc
, *
d©a
)

108 
≠r_uöt32_t
 
ˇsvÆ
 = 12;

109 
≠r_uöt32_t
 
ﬁdvÆ
;

111 
ﬁdvÆ
 = 
	`≠r_©omic_ˇs32
(&
ˇsvÆ
, 23, 12);

112 
	`ABTS_INT_EQUAL
(
tc
, 12, 
ﬁdvÆ
);

113 
	`ABTS_INT_EQUAL
(
tc
, 23, 
ˇsvÆ
);

114 
	}
}

116 
	$ã°_ˇs_nŸequÆ
(
abts_ˇ£
 *
tc
, *
d©a
)

118 
≠r_uöt32_t
 
ˇsvÆ
 = 12;

119 
≠r_uöt32_t
 
ﬁdvÆ
;

121 
ﬁdvÆ
 = 
	`≠r_©omic_ˇs32
(&
ˇsvÆ
, 23, 2);

122 
	`ABTS_INT_EQUAL
(
tc
, 12, 
ﬁdvÆ
);

123 
	`ABTS_INT_EQUAL
(
tc
, 12, 
ˇsvÆ
);

124 
	}
}

126 
	$ã°_ˇ•å_equÆ
(
abts_ˇ£
 *
tc
, *
d©a
)

128 
a
;

129 vﬁ©ûê*
èrgë_±r
 = 
NULL
;

130 *
ﬁd_±r
;

132 
ﬁd_±r
 = 
	`≠r_©omic_ˇ•å
(&
èrgë_±r
, &
a
, 
NULL
);

133 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
ﬁd_±r
);

134 
	`ABTS_PTR_EQUAL
(
tc
, &
a
, (*Ë
èrgë_±r
);

135 
	}
}

137 
	$ã°_ˇ•å_equÆ_n⁄nuŒ
(
abts_ˇ£
 *
tc
, *
d©a
)

139 
a
, 
b
;

140 vﬁ©ûê*
èrgë_±r
 = &
a
;

141 *
ﬁd_±r
;

143 
ﬁd_±r
 = 
	`≠r_©omic_ˇ•å
(&
èrgë_±r
, &
b
, &
a
);

144 
	`ABTS_PTR_EQUAL
(
tc
, &
a
, 
ﬁd_±r
);

145 
	`ABTS_PTR_EQUAL
(
tc
, &
b
, (*Ë
èrgë_±r
);

146 
	}
}

148 
	$ã°_ˇ•å_nŸequÆ
(
abts_ˇ£
 *
tc
, *
d©a
)

150 
a
, 
b
;

151 vﬁ©ûê*
èrgë_±r
 = &
a
;

152 *
ﬁd_±r
;

154 
ﬁd_±r
 = 
	`≠r_©omic_ˇ•å
(&
èrgë_±r
, &
a
, &
b
);

155 
	`ABTS_PTR_EQUAL
(
tc
, &
a
, 
ﬁd_±r
);

156 
	`ABTS_PTR_EQUAL
(
tc
, &
a
, (*Ë
èrgë_±r
);

157 
	}
}

159 
	$ã°_add32
(
abts_ˇ£
 *
tc
, *
d©a
)

161 
≠r_uöt32_t
 
ﬁdvÆ
;

162 
≠r_uöt32_t
 
y32
;

164 
	`≠r_©omic_£t32
(&
y32
, 23);

165 
ﬁdvÆ
 = 
	`≠r_©omic_add32
(&
y32
, 4);

166 
	`ABTS_INT_EQUAL
(
tc
, 23, 
ﬁdvÆ
);

167 
	`ABTS_INT_EQUAL
(
tc
, 27, 
y32
);

168 
	}
}

170 
	$ã°_öc32
(
abts_ˇ£
 *
tc
, *
d©a
)

172 
≠r_uöt32_t
 
ﬁdvÆ
;

173 
≠r_uöt32_t
 
y32
;

175 
	`≠r_©omic_£t32
(&
y32
, 23);

176 
ﬁdvÆ
 = 
	`≠r_©omic_öc32
(&
y32
);

177 
	`ABTS_INT_EQUAL
(
tc
, 23, 
ﬁdvÆ
);

178 
	`ABTS_INT_EQUAL
(
tc
, 24, 
y32
);

179 
	}
}

181 
	$ã°_£t_add_öc_sub
(
abts_ˇ£
 *
tc
, *
d©a
)

183 
≠r_uöt32_t
 
y32
;

185 
	`≠r_©omic_£t32
(&
y32
, 0);

186 
	`≠r_©omic_add32
(&
y32
, 20);

187 
	`≠r_©omic_öc32
(&
y32
);

188 
	`≠r_©omic_sub32
(&
y32
, 10);

190 
	`ABTS_INT_EQUAL
(
tc
, 11, 
y32
);

191 
	}
}

193 
	$ã°_wøp_zîo
(
abts_ˇ£
 *
tc
, *
d©a
)

195 
≠r_uöt32_t
 
y32
;

196 
≠r_uöt32_t
 
rv
;

197 
≠r_uöt32_t
 
möus1
 = -1;

198 *
°r
;

200 
	`≠r_©omic_£t32
(&
y32
, 0);

201 
rv
 = 
	`≠r_©omic_dec32
(&
y32
);

203 
	`ABTS_ASSERT
(
tc
, "≠r_©omic_dec32 o¿zîÿªtu∫ed zîo.", 
rv
 != 0);

204 
°r
 = 
	`≠r_p•rötf
(
p
, "zîÿwø∞Áûed: 0 - 1 = %d", 
y32
);

205 
	`ABTS_ASSERT
(
tc
, 
°r
, 
y32
 =
möus1
);

206 
	}
}

208 
	$ã°_öc_√g1
(
abts_ˇ£
 *
tc
, *
d©a
)

210 
≠r_uöt32_t
 
y32
 = -1;

211 
≠r_uöt32_t
 
möus1
 = -1;

212 
≠r_uöt32_t
 
rv
;

213 *
°r
;

215 
rv
 = 
	`≠r_©omic_öc32
(&
y32
);

217 
	`ABTS_ASSERT
(
tc
, "≠r_©omic_öc32 didn'àªtu∫Åhêﬁd vÆue.", 
rv
 =
möus1
);

218 
°r
 = 
	`≠r_p•rötf
(
p
, "zîÿwø∞Áûed: -1 + 1 = %d", 
y32
);

219 
	`ABTS_ASSERT
(
tc
, 
°r
, 
y32
 == 0);

220 
	}
}

223 #i‡
APR_HAS_THREADS


225 *
APR_THREAD_FUNC
 
thªad_func_muãx
(
≠r_thªad_t
 *
thd
, *
d©a
);

226 *
APR_THREAD_FUNC
 
thªad_func_©omic
(
≠r_thªad_t
 *
thd
, *
d©a
);

228 
≠r_thªad_muãx_t
 *
	gthªad_lock
;

229 vﬁ©ûê
≠r_uöt32_t
 
	gmuãx_locks
 = 0;

230 vﬁ©ûê
≠r_uöt32_t
 
	g©omic_›s
 = 0;

231 
≠r_°©us_t
 
	gexô_ªt_vÆ
 = 123;

233 
	#NUM_THREADS
 40

	)

234 
	#NUM_ITERATIONS
 20000

	)

236 *
APR_THREAD_FUNC
 
	$thªad_func_muãx
(
≠r_thªad_t
 *
thd
, *
d©a
)

238 
i
;

240 
i
 = 0; i < 
NUM_ITERATIONS
; i++) {

241 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

242 
muãx_locks
++;

243 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

245 
	`≠r_thªad_exô
(
thd
, 
exô_ªt_vÆ
);

246  
NULL
;

247 
	}
}

249 *
APR_THREAD_FUNC
 
	$thªad_func_©omic
(
≠r_thªad_t
 *
thd
, *
d©a
)

251 
i
;

253 
i
 = 0; i < 
NUM_ITERATIONS
 ; i++) {

254 
	`≠r_©omic_öc32
(&
©omic_›s
);

255 
	`≠r_©omic_add32
(&
©omic_›s
, 2);

256 
	`≠r_©omic_dec32
(&
©omic_›s
);

257 
	`≠r_©omic_dec32
(&
©omic_›s
);

259 
	`≠r_thªad_exô
(
thd
, 
exô_ªt_vÆ
);

260  
NULL
;

261 
	}
}

263 
	$ã°_©omics_thªaded
(
abts_ˇ£
 *
tc
, *
d©a
)

265 
≠r_thªad_t
 *
t1
[
NUM_THREADS
];

266 
≠r_thªad_t
 *
t2
[
NUM_THREADS
];

267 
≠r_°©us_t
 
rv
;

268 
i
;

270 #ifde‡
HAVE_PTHREAD_SETCONCURRENCY


271 
	`±hªad_£tc⁄cuºícy
(8);

274 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
thªad_lock
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

275 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ cª©êlock", 
rv
);

277 
i
 = 0; i < 
NUM_THREADS
; i++) {

278 
≠r_°©us_t
 
r1
, 
r2
;

279 
r1
 = 
	`≠r_thªad_¸óã
(&
t1
[
i
], 
NULL
, 
thªad_func_muãx
, NULL, 
p
);

280 
r2
 = 
	`≠r_thªad_¸óã
(&
t2
[
i
], 
NULL
, 
thªad_func_©omic
, NULL, 
p
);

281 
	`ABTS_ASSERT
(
tc
, "Faûed cª©ögÅhªads", !
r1
 && !
r2
);

284 
i
 = 0; i < 
NUM_THREADS
; i++) {

285 
≠r_°©us_t
 
s1
, 
s2
;

286 
	`≠r_thªad_joö
(&
s1
, 
t1
[
i
]);

287 
	`≠r_thªad_joö
(&
s2
, 
t2
[
i
]);

289 
	`ABTS_ASSERT
(
tc
, "InvalidÑeturn value fromÅhread_join",

290 
s1
 =
exô_ªt_vÆ
 && 
s2
 ==Éxit_ret_val);

293 
	`ABTS_INT_EQUAL
(
tc
, 
NUM_THREADS
 * 
NUM_ITERATIONS
, 
muãx_locks
);

294 
	`ABTS_INT_EQUAL
(
tc
, 
NUM_THREADS
 * 
NUM_ITERATIONS
,

295 
	`≠r_©omic_ªad32
(&
©omic_›s
));

297 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
thªad_lock
);

298 
	`ABTS_ASSERT
(
tc
, "Faûed cª©ögÅhªads", 
rv
 =
APR_SUCCESS
);

299 
	}
}

301 #unde‡
NUM_THREADS


302 
	#NUM_THREADS
 7

	)

304 
tbox_t
 
	ttbox_t
;

306 
	stbox_t
 {

307 
abts_ˇ£
 *
	mtc
;

308 
≠r_uöt32_t
 *
	mmem
;

309 
≠r_uöt32_t
 
	m¥evÆ
;

310 
≠r_uöt32_t
 
	mpo°vÆ
;

311 
≠r_uöt32_t
 
	mlo›
;

312 (*
	mfunc
)(
tbox_t
 *
	mbox
);

315 
APR_INLINE
 
	$busylo›_ªad32
(
tbox_t
 *
tbox
)

317 
≠r_uöt32_t
 
vÆ
;

320 
vÆ
 = 
	`≠r_©omic_ªad32
(
tbox
->
mem
);

322 i‡(
vÆ
 !
tbox
->
¥evÆ
)

323 
	`≠r_thªad_yõld
();

327 
	}
}

329 
	$busylo›_£t32
(
tbox_t
 *
tbox
)

332 
	`busylo›_ªad32
(
tbox
);

333 
	`≠r_©omic_£t32
(
tbox
->
mem
,Åbox->
po°vÆ
);

334 } --
tbox
->
lo›
);

335 
	}
}

337 
	$busylo›_add32
(
tbox_t
 *
tbox
)

339 
≠r_uöt32_t
 
vÆ
;

342 
	`busylo›_ªad32
(
tbox
);

343 
vÆ
 = 
	`≠r_©omic_add32
(
tbox
->
mem
,Åbox->
po°vÆ
);

344 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

345 
	`ABTS_INT_EQUAL
(
tbox
->
tc
, 
vÆ
,Åbox->
¥evÆ
);

346 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

347 } --
tbox
->
lo›
);

348 
	}
}

350 
	$busylo›_sub32
(
tbox_t
 *
tbox
)

353 
	`busylo›_ªad32
(
tbox
);

354 
	`≠r_©omic_sub32
(
tbox
->
mem
,Åbox->
po°vÆ
);

355 } --
tbox
->
lo›
);

356 
	}
}

358 
	$busylo›_öc32
(
tbox_t
 *
tbox
)

360 
≠r_uöt32_t
 
vÆ
;

363 
	`busylo›_ªad32
(
tbox
);

364 
vÆ
 = 
	`≠r_©omic_öc32
(
tbox
->
mem
);

365 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

366 
	`ABTS_INT_EQUAL
(
tbox
->
tc
, 
vÆ
,Åbox->
¥evÆ
);

367 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

368 } --
tbox
->
lo›
);

369 
	}
}

371 
	$busylo›_dec32
(
tbox_t
 *
tbox
)

373 
≠r_uöt32_t
 
vÆ
;

376 
	`busylo›_ªad32
(
tbox
);

377 
vÆ
 = 
	`≠r_©omic_dec32
(
tbox
->
mem
);

378 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

379 
	`ABTS_INT_NEQUAL
(
tbox
->
tc
, 0, 
vÆ
);

380 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

381 } --
tbox
->
lo›
);

382 
	}
}

384 
	$busylo›_ˇs32
(
tbox_t
 *
tbox
)

386 
≠r_uöt32_t
 
vÆ
;

390 
vÆ
 = 
	`≠r_©omic_ˇs32
(
tbox
->
mem
,Åbox->
po°vÆ
,Åbox->
¥evÆ
);

392 i‡(
vÆ
 !
tbox
->
¥evÆ
)

393 
	`≠r_thªad_yõld
();

397 } --
tbox
->
lo›
);

398 
	}
}

400 
	$busylo›_xchg32
(
tbox_t
 *
tbox
)

402 
≠r_uöt32_t
 
vÆ
;

405 
	`busylo›_ªad32
(
tbox
);

406 
vÆ
 = 
	`≠r_©omic_xchg32
(
tbox
->
mem
,Åbox->
po°vÆ
);

407 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

408 
	`ABTS_INT_EQUAL
(
tbox
->
tc
, 
vÆ
,Åbox->
¥evÆ
);

409 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

410 } --
tbox
->
lo›
);

411 
	}
}

413 *
APR_THREAD_FUNC
 
	$thªad_func_busylo›
(
≠r_thªad_t
 *
thd
, *
d©a
)

415 
tbox_t
 *
tbox
 = 
d©a
;

417 
tbox
->
	`func
(tbox);

419 
	`≠r_thªad_exô
(
thd
, 0);

421  
NULL
;

422 
	}
}

424 
	$ã°_©omics_busylo›_thªaded
(
abts_ˇ£
 *
tc
, *
d©a
)

426 
i
;

427 
≠r_°©us_t
 
rv
;

428 
≠r_uöt32_t
 
cou¡
 = 0;

429 
tbox_t
 
tbox
[
NUM_THREADS
];

430 
≠r_thªad_t
 *
thªad
[
NUM_THREADS
];

432 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
thªad_lock
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

433 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ cª©êlock", 
rv
);

436 
i
 = 0; i < 
NUM_THREADS
; i++) {

437 
tbox
[
i
].
tc
 =Åc;

438 
tbox
[
i
].
mem
 = &
cou¡
;

439 
tbox
[
i
].
lo›
 = 50;

442 
tbox
[0].
¥evÆ
 = 98;

443 
tbox
[0].
po°vÆ
 = 3891;

444 
tbox
[0].
func
 = 
busylo›_add32
;

446 
tbox
[1].
¥evÆ
 = 3989;

447 
tbox
[1].
po°vÆ
 = 1010;

448 
tbox
[1].
func
 = 
busylo›_sub32
;

450 
tbox
[2].
¥evÆ
 = 2979;

451 
tbox
[2].
po°vÆ
 = 0;

452 
tbox
[2].
func
 = 
busylo›_öc32
;

454 
tbox
[3].
¥evÆ
 = 2980;

455 
tbox
[3].
po°vÆ
 = 16384;

456 
tbox
[3].
func
 = 
busylo›_£t32
;

458 
tbox
[4].
¥evÆ
 = 16384;

459 
tbox
[4].
po°vÆ
 = 0;

460 
tbox
[4].
func
 = 
busylo›_dec32
;

462 
tbox
[5].
¥evÆ
 = 16383;

463 
tbox
[5].
po°vÆ
 = 1048576;

464 
tbox
[5].
func
 = 
busylo›_ˇs32
;

466 
tbox
[6].
¥evÆ
 = 1048576;

467 
tbox
[6].
po°vÆ
 = 98;

468 
tbox
[6].
func
 = 
busylo›_xchg32
;

471 
i
 = 0; i < 
NUM_THREADS
; i++) {

472 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_func_busylo›
,

473 &
tbox
[
i
], 
p
);

474 
	`ABTS_ASSERT
(
tc
, "Faûed cª©ögÅhªad", 
rv
 =
APR_SUCCESS
);

478 
	`≠r_©omic_£t32
(
tbox
->
mem
, 98);

480 
i
 = 0; i < 
NUM_THREADS
; i++) {

481 
≠r_°©us_t
 
ªtvÆ
;

482 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
[
i
]);

483 
	`ABTS_ASSERT
(
tc
, "Thªad joö faûed", 
rv
 =
APR_SUCCESS
);

484 
	`ABTS_ASSERT
(
tc
, "InvÆidÑëu∫ vÆuê‰omÅhªad_joö", 
ªtvÆ
 == 0);

487 
	`ABTS_INT_EQUAL
(
tbox
->
tc
, 98, 
cou¡
);

489 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
thªad_lock
);

490 
	`ABTS_ASSERT
(
tc
, "Faûed cª©ögÅhªads", 
rv
 =
APR_SUCCESS
);

491 
	}
}

495 
abts_suôe
 *
	$ã°©omic
(
abts_suôe
 *
suôe
)

497 
suôe
 = 
	`ADD_SUITE
(suite)

499 
	`abts_run_ã°
(
suôe
, 
ã°_öô
, 
NULL
);

500 
	`abts_run_ã°
(
suôe
, 
ã°_£t32
, 
NULL
);

501 
	`abts_run_ã°
(
suôe
, 
ã°_ªad32
, 
NULL
);

502 
	`abts_run_ã°
(
suôe
, 
ã°_dec32
, 
NULL
);

503 
	`abts_run_ã°
(
suôe
, 
ã°_xchg32
, 
NULL
);

504 
	`abts_run_ã°
(
suôe
, 
ã°_xchg±r
, 
NULL
);

505 
	`abts_run_ã°
(
suôe
, 
ã°_ˇs_equÆ
, 
NULL
);

506 
	`abts_run_ã°
(
suôe
, 
ã°_ˇs_equÆ_n⁄nuŒ
, 
NULL
);

507 
	`abts_run_ã°
(
suôe
, 
ã°_ˇs_nŸequÆ
, 
NULL
);

508 
	`abts_run_ã°
(
suôe
, 
ã°_ˇ•å_equÆ
, 
NULL
);

509 
	`abts_run_ã°
(
suôe
, 
ã°_ˇ•å_equÆ_n⁄nuŒ
, 
NULL
);

510 
	`abts_run_ã°
(
suôe
, 
ã°_ˇ•å_nŸequÆ
, 
NULL
);

511 
	`abts_run_ã°
(
suôe
, 
ã°_add32
, 
NULL
);

512 
	`abts_run_ã°
(
suôe
, 
ã°_öc32
, 
NULL
);

513 
	`abts_run_ã°
(
suôe
, 
ã°_£t_add_öc_sub
, 
NULL
);

514 
	`abts_run_ã°
(
suôe
, 
ã°_wøp_zîo
, 
NULL
);

515 
	`abts_run_ã°
(
suôe
, 
ã°_öc_√g1
, 
NULL
);

517 #i‡
APR_HAS_THREADS


518 
	`abts_run_ã°
(
suôe
, 
ã°_©omics_thªaded
, 
NULL
);

519 
	`abts_run_ã°
(
suôe
, 
ã°_©omics_busylo›_thªaded
, 
NULL
);

522  
suôe
;

523 
	}
}

	@test/testcond.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_thªad_muãx.h
"

20 
	~"≠r_thªad_c⁄d.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_©omic.h
"

24 
	~"ã°utû.h
"

26 
	#NTHREADS
 10

	)

28 
	#ABTS_SUCCESS
(
rv
Ë
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
,Ñv)

	)

30 #i‡
APR_HAS_THREADS


32 
toﬁbox_t
 
	ttoﬁbox_t
;

34 
	stoﬁbox_t
 {

35 *
	md©a
;

36 
abts_ˇ£
 *
	mtc
;

37 
≠r_thªad_muãx_t
 *
	mmuãx
;

38 
≠r_thªad_c⁄d_t
 *
	mc⁄d
;

39 (*
	mfunc
)(
toﬁbox_t
 *
	mbox
);

42 
toﬁbox_‚±r_t
 
	ttoﬁbox_‚±r_t
;

44 
	stoﬁbox_‚±r_t
 {

45 (*
	mfunc
)(
toﬁbox_t
 *
	mbox
);

48 
	$lo°_sig«l
(
abts_ˇ£
 *
tc
, *
d©a
)

50 
≠r_°©us_t
 
rv
;

51 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

52 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

54 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

55 
	`ABTS_SUCCESS
(
rv
);

56 
	`ABTS_PTR_NOTNULL
(
tc
, 
muãx
);

58 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

59 
	`ABTS_SUCCESS
(
rv
);

60 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

62 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
c⁄d
);

63 
	`ABTS_SUCCESS
(
rv
);

65 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

66 
	`ABTS_SUCCESS
(
rv
);

68 
rv
 = 
	`≠r_thªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 10000);

69 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

71 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

72 
	`ABTS_SUCCESS
(
rv
);

74 
rv
 = 
	`≠r_thªad_c⁄d_brﬂdˇ°
(
c⁄d
);

75 
	`ABTS_SUCCESS
(
rv
);

77 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

78 
	`ABTS_SUCCESS
(
rv
);

80 
rv
 = 
	`≠r_thªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 10000);

81 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

83 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

84 
	`ABTS_SUCCESS
(
rv
);

86 
rv
 = 
	`≠r_thªad_c⁄d_de°roy
(
c⁄d
);

87 
	`ABTS_SUCCESS
(
rv
);

89 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
muãx
);

90 
	`ABTS_SUCCESS
(
rv
);

91 
	}
}

93 *
APR_THREAD_FUNC
 
	$thªad_routöe
(
≠r_thªad_t
 *
thd
, *
d©a
)

95 
toﬁbox_t
 *
box
 = 
d©a
;

97 
box
->
	`func
(box);

99 
	`≠r_thªad_exô
(
thd
, 0);

101  
NULL
;

102 
	}
}

104 
	$lock_™d_sig«l
(
toﬁbox_t
 *
box
)

106 
≠r_°©us_t
 
rv
;

107 
abts_ˇ£
 *
tc
 = 
box
->tc;

109 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

110 
	`ABTS_SUCCESS
(
rv
);

112 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
box
->
c⁄d
);

113 
	`ABTS_SUCCESS
(
rv
);

115 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

116 
	`ABTS_SUCCESS
(
rv
);

117 
	}
}

119 
	$dy«mic_bödög
(
abts_ˇ£
 *
tc
, *
d©a
)

121 
i
;

122 
≠r_°©us_t
 
rv
;

123 
toﬁbox_t
 
box
[
NTHREADS
];

124 
≠r_thªad_t
 *
thªad
[
NTHREADS
];

125 
≠r_thªad_muãx_t
 *
muãx
[
NTHREADS
];

126 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

128 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

129 
	`ABTS_SUCCESS
(
rv
);

130 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

132 
i
 = 0; i < 
NTHREADS
; i++) {

133 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
[
i
], 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

134 
	`ABTS_SUCCESS
(
rv
);

136 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
[
i
]);

137 
	`ABTS_SUCCESS
(
rv
);

139 
box
[
i
].
tc
 =Åc;

140 
box
[
i
].
c⁄d
 = cond;

141 
box
[
i
].
muãx
 = mutex[i];

142 
box
[
i
].
func
 = 
lock_™d_sig«l
;

144 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_routöe
, &
box
[i], 
p
);

145 
	`ABTS_SUCCESS
(
rv
);

152 
i
 = 0; i < 
NTHREADS
; i++) {

153 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
c⁄d
, 
muãx
[
i
]);

154 
	`ABTS_SUCCESS
(
rv
);

157 
i
 = 0; i < 
NTHREADS
; i++) {

158 
rv
 = 
	`≠r_thªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
[
i
], 10000);

159 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

161 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
[
i
]);

162 
	`ABTS_SUCCESS
(
rv
);

165 
i
 = 0; i < 
NTHREADS
; i++) {

166 
≠r_°©us_t
 
ªtvÆ
;

167 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
[
i
]);

168 
	`ABTS_SUCCESS
(
rv
);

171 
rv
 = 
	`≠r_thªad_c⁄d_de°roy
(
c⁄d
);

172 
	`ABTS_SUCCESS
(
rv
);

174 
i
 = 0; i < 
NTHREADS
; i++) {

175 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
muãx
[
i
]);

176 
	`ABTS_SUCCESS
(
rv
);

178 
	}
}

180 
	$lock_™d_waô
(
toﬁbox_t
 *
box
)

182 
≠r_°©us_t
 
rv
;

183 
abts_ˇ£
 *
tc
 = 
box
->tc;

184 
≠r_uöt32_t
 *
cou¡
 = 
box
->
d©a
;

186 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

187 
	`ABTS_SUCCESS
(
rv
);

189 
	`≠r_©omic_öc32
(
cou¡
);

191 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
box
->
c⁄d
, box->
muãx
);

192 
	`ABTS_SUCCESS
(
rv
);

194 
	`≠r_©omic_dec32
(
cou¡
);

196 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

197 
	`ABTS_SUCCESS
(
rv
);

198 
	}
}

200 
	$brﬂdˇ°_thªads
(
abts_ˇ£
 *
tc
, *
d©a
)

202 
toﬁbox_t
 
box
;

203 
i
;

204 
≠r_°©us_t
 
rv
;

205 
≠r_uöt32_t
 
cou¡
 = 0;

206 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

207 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

208 
≠r_thªad_t
 *
thªad
[
NTHREADS
];

210 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

211 
	`ABTS_SUCCESS
(
rv
);

212 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

214 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

215 
	`ABTS_SUCCESS
(
rv
);

216 
	`ABTS_PTR_NOTNULL
(
tc
, 
muãx
);

218 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

219 
	`ABTS_SUCCESS
(
rv
);

221 
box
.
tc
 =Åc;

222 
box
.
d©a
 = &
cou¡
;

223 
box
.
muãx
 = mutex;

224 
box
.
c⁄d
 = cond;

225 
box
.
func
 = 
lock_™d_waô
;

227 
i
 = 0; i < 
NTHREADS
; i++) {

228 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_routöe
, &
box
, 
p
);

229 
	`ABTS_SUCCESS
(
rv
);

233 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

234 
	`ABTS_SUCCESS
(
rv
);

235 
	`≠r_¶ìp
(100000);

236 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

237 
	`ABTS_SUCCESS
(
rv
);

238 } 
	`≠r_©omic_ªad32
(&
cou¡
Ë!
NTHREADS
);

240 
rv
 = 
	`≠r_thªad_c⁄d_brﬂdˇ°
(
c⁄d
);

241 
	`ABTS_SUCCESS
(
rv
);

243 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

244 
	`ABTS_SUCCESS
(
rv
);

246 
i
 = 0; i < 
NTHREADS
; i++) {

247 
≠r_°©us_t
 
ªtvÆ
;

248 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
[
i
]);

249 
	`ABTS_SUCCESS
(
rv
);

252 
	`ABTS_INT_EQUAL
(
tc
, 0, 
cou¡
);

254 
rv
 = 
	`≠r_thªad_c⁄d_de°roy
(
c⁄d
);

255 
	`ABTS_SUCCESS
(
rv
);

257 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
muãx
);

258 
	`ABTS_SUCCESS
(
rv
);

259 
	}
}

261 
	$√°ed_lock_™d_waô
(
toﬁbox_t
 *
box
)

263 
≠r_°©us_t
 
rv
;

264 
abts_ˇ£
 *
tc
 = 
box
->tc;

266 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

267 
	`ABTS_SUCCESS
(
rv
);

269 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

270 
	`ABTS_SUCCESS
(
rv
);

272 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

273 
	`ABTS_SUCCESS
(
rv
);

275 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
box
->
c⁄d
, box->
muãx
);

276 
	`ABTS_SUCCESS
(
rv
);

277 
	}
}

279 
	$√°ed_lock_™d_u∆ock
(
toﬁbox_t
 *
box
)

281 
≠r_°©us_t
 
rv
;

282 
abts_ˇ£
 *
tc
 = 
box
->tc;

284 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

285 
	`ABTS_SUCCESS
(
rv
);

287 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

288 
	`ABTS_SUCCESS
(
rv
);

290 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

291 
	`ABTS_SUCCESS
(
rv
);

293 
rv
 = 
	`≠r_thªad_c⁄d_timedwaô
(
box
->
c⁄d
, box->
muãx
, 2000000);

294 
	`ABTS_SUCCESS
(
rv
);

296 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

297 
	`ABTS_SUCCESS
(
rv
);

299 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

300 
	`ABTS_SUCCESS
(
rv
);

301 
	}
}

303 
	$√°ed_waô
(
abts_ˇ£
 *
tc
, *
d©a
)

305 
toﬁbox_‚±r_t
 *
‚±r
 = 
d©a
;

306 
toﬁbox_t
 
box
;

307 
≠r_°©us_t
 
rv
, 
ªtvÆ
;

308 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

309 
≠r_thªad_t
 *
thªad
 = 
NULL
;

310 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

312 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
, 
APR_THREAD_MUTEX_NESTED
, 
p
);

313 
	`ABTS_SUCCESS
(
rv
);

314 
	`ABTS_PTR_NOTNULL
(
tc
, 
muãx
);

316 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

317 
	`ABTS_SUCCESS
(
rv
);

318 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

320 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

321 
	`ABTS_SUCCESS
(
rv
);

323 
box
.
tc
 =Åc;

324 
box
.
c⁄d
 = cond;

325 
box
.
muãx
 = mutex;

326 
box
.
func
 = 
‚±r
->func;

328 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
, 
NULL
, 
thªad_routöe
, &
box
, 
p
);

329 
	`ABTS_SUCCESS
(
rv
);

331 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

332 
	`ABTS_SUCCESS
(
rv
);

335 
	`≠r_¶ìp
(500000);

337 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
c⁄d
);

338 
	`ABTS_SUCCESS
(
rv
);

340 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
);

341 
	`ABTS_SUCCESS
(
rv
);

343 
rv
 = 
	`≠r_thªad_muãx_åylock
(
muãx
);

344 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EBUSY
(
rv
));

346 
rv
 = 
	`≠r_thªad_muãx_åylock
(
muãx
);

347 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EBUSY
(
rv
));

348 
	}
}

350 vﬁ©ûê
≠r_uöt64_t
 
	gpùe_cou¡
;

351 vﬁ©ûê
≠r_uöt32_t
 
	gexôög
;

353 
	$pùe_c⁄sumî
(
toﬁbox_t
 *
box
)

355 
ch
;

356 
≠r_°©us_t
 
rv
;

357 
≠r_size_t
 
nbyãs
;

358 
abts_ˇ£
 *
tc
 = 
box
->tc;

359 
≠r_fûe_t
 *
out
 = 
box
->
d©a
;

360 
≠r_uöt32_t
 
c⁄sumed
 = 0;

363 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

364 
	`ABTS_SUCCESS
(
rv
);

366 !
pùe_cou¡
 && !
exôög
) {

367 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
box
->
c⁄d
, box->
muãx
);

368 
	`ABTS_SUCCESS
(
rv
);

371 i‡(!
pùe_cou¡
 && 
exôög
) {

372 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

373 
	`ABTS_SUCCESS
(
rv
);

377 
pùe_cou¡
--;

378 
c⁄sumed
++;

380 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

381 
	`ABTS_SUCCESS
(
rv
);

383 
rv
 = 
	`≠r_fûe_ªad_fuŒ
(
out
, &
ch
, 1, &
nbyãs
);

384 
	`ABTS_SUCCESS
(
rv
);

385 
	`ABTS_SIZE_EQUAL
(
tc
, 1, 
nbyãs
);

386 
	`ABTS_TRUE
(
tc
, 
ch
 == '.');

393 
	}
}

395 
	$pùe_wrôe
(
toﬁbox_t
 *
box
, 
ch
)

397 
≠r_°©us_t
 
rv
;

398 
≠r_size_t
 
nbyãs
;

399 
abts_ˇ£
 *
tc
 = 
box
->tc;

400 
≠r_fûe_t
 *
ö
 = 
box
->
d©a
;

402 
rv
 = 
	`≠r_fûe_wrôe_fuŒ
(
ö
, &
ch
, 1, &
nbyãs
);

403 
	`ABTS_SUCCESS
(
rv
);

404 
	`ABTS_SIZE_EQUAL
(
tc
, 1, 
nbyãs
);

406 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

407 
	`ABTS_SUCCESS
(
rv
);

409 i‡(!
pùe_cou¡
) {

410 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
box
->
c⁄d
);

411 
	`ABTS_SUCCESS
(
rv
);

414 
pùe_cou¡
++;

416 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

417 
	`ABTS_SUCCESS
(
rv
);

418 
	}
}

420 
	$pùe_¥odu˚r
(
toﬁbox_t
 *
box
)

422 
≠r_uöt32_t
 
lo›
 = 500;

425 
	`pùe_wrôe
(
box
, '.');

426 } 
lo›
--);

427 
	}
}

429 
	$pùe_¥odu˚r_c⁄sumî
(
abts_ˇ£
 *
tc
, *
d©a
)

431 
≠r_°©us_t
 
rv
;

432 
toﬁbox_t
 
boxc⁄s
, 
box¥od
;

433 
≠r_thªad_t
 *
thªad
[
NTHREADS
];

434 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

435 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

436 
≠r_fûe_t
 *
ö
 = 
NULL
, *
out
 = NULL;

437 
≠r_uöt32_t
 
i
, 
nc⁄s
 = (≠r_uöt32_t)(
NTHREADS
 * 0.70);

439 
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
ö
, &
out
, 
p
);

440 
	`ABTS_SUCCESS
(
rv
);

442 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

443 
	`ABTS_SUCCESS
(
rv
);

444 
	`ABTS_PTR_NOTNULL
(
tc
, 
muãx
);

446 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

447 
	`ABTS_SUCCESS
(
rv
);

448 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

450 
boxc⁄s
.
tc
 =Åc;

451 
boxc⁄s
.
d©a
 = 
ö
;

452 
boxc⁄s
.
muãx
 = mutex;

453 
boxc⁄s
.
c⁄d
 = cond;

454 
boxc⁄s
.
func
 = 
pùe_c⁄sumî
;

456 
i
 = 0; i < 
nc⁄s
; i++) {

457 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_routöe
, &
boxc⁄s
, 
p
);

458 
	`ABTS_SUCCESS
(
rv
);

461 
box¥od
.
tc
 =Åc;

462 
box¥od
.
d©a
 = 
out
;

463 
box¥od
.
muãx
 = mutex;

464 
box¥od
.
c⁄d
 = cond;

465 
box¥od
.
func
 = 
pùe_¥odu˚r
;

467 ; 
i
 < 
NTHREADS
; i++) {

468 
rv
 = 
	`≠r_thªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_routöe
, &
box¥od
, 
p
);

469 
	`ABTS_SUCCESS
(
rv
);

472 
i
 = 
nc⁄s
; i < 
NTHREADS
; i++) {

473 
≠r_°©us_t
 
ªtvÆ
;

474 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
[
i
]);

475 
	`ABTS_SUCCESS
(
rv
);

478 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

479 
	`ABTS_SUCCESS
(
rv
);

481 
exôög
 = 1;

483 
rv
 = 
	`≠r_thªad_c⁄d_brﬂdˇ°
(
c⁄d
);

484 
	`ABTS_SUCCESS
(
rv
);

486 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

487 
	`ABTS_SUCCESS
(
rv
);

489 
i
 = 0; i < 
nc⁄s
; i++) {

490 
≠r_°©us_t
 
ªtvÆ
;

491 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thªad
[
i
]);

492 
	`ABTS_SUCCESS
(
rv
);

495 
rv
 = 
	`≠r_thªad_c⁄d_de°roy
(
c⁄d
);

496 
	`ABTS_SUCCESS
(
rv
);

498 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
muãx
);

499 
	`ABTS_SUCCESS
(
rv
);

501 
rv
 = 
	`≠r_fûe_˛o£
(
ö
);

502 
	`ABTS_SUCCESS
(
rv
);

504 
rv
 = 
	`≠r_fûe_˛o£
(
out
);

505 
	`ABTS_SUCCESS
(
rv
);

506 
	}
}

509 
	mTOSS
,

510 
	mPING
,

511 
	mPONG
,

512 
	mOVER


513 } 
	g°©e
;

515 
	$pög
(
toﬁbox_t
 *
box
)

517 
≠r_°©us_t
 
rv
;

518 
abts_ˇ£
 *
tc
 = 
box
->tc;

520 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

521 
	`ABTS_SUCCESS
(
rv
);

523 i‡(
°©e
 =
TOSS
)

524 
°©e
 = 
PING
;

527 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
box
->
c⁄d
);

528 
	`ABTS_SUCCESS
(
rv
);

530 
°©e
 = 
PONG
;

532 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
box
->
c⁄d
, box->
muãx
);

533 
	`ABTS_SUCCESS
(
rv
);

535 
	`ABTS_TRUE
(
tc
, 
°©e
 =
PING
 || sèã =
OVER
);

536 } 
°©e
 !
OVER
);

538 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

539 
	`ABTS_SUCCESS
(
rv
);

541 
rv
 = 
	`≠r_thªad_c⁄d_brﬂdˇ°
(
box
->
c⁄d
);

542 
	`ABTS_SUCCESS
(
rv
);

543 
	}
}

545 
	$p⁄g
(
toﬁbox_t
 *
box
)

547 
≠r_°©us_t
 
rv
;

548 
abts_ˇ£
 *
tc
 = 
box
->tc;

550 
rv
 = 
	`≠r_thªad_muãx_lock
(
box
->
muãx
);

551 
	`ABTS_SUCCESS
(
rv
);

553 i‡(
°©e
 =
TOSS
)

554 
°©e
 = 
PONG
;

557 
rv
 = 
	`≠r_thªad_c⁄d_sig«l
(
box
->
c⁄d
);

558 
	`ABTS_SUCCESS
(
rv
);

560 
°©e
 = 
PING
;

562 
rv
 = 
	`≠r_thªad_c⁄d_waô
(
box
->
c⁄d
, box->
muãx
);

563 
	`ABTS_SUCCESS
(
rv
);

565 
	`ABTS_TRUE
(
tc
, 
°©e
 =
PONG
 || sèã =
OVER
);

566 } 
°©e
 !
OVER
);

568 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
box
->
muãx
);

569 
	`ABTS_SUCCESS
(
rv
);

571 
rv
 = 
	`≠r_thªad_c⁄d_brﬂdˇ°
(
box
->
c⁄d
);

572 
	`ABTS_SUCCESS
(
rv
);

573 
	}
}

575 
	$pög_p⁄g
(
abts_ˇ£
 *
tc
, *
d©a
)

577 
≠r_°©us_t
 
rv
, 
ªtvÆ
;

578 
toﬁbox_t
 
box_pög
, 
box_p⁄g
;

579 
≠r_thªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

580 
≠r_thªad_muãx_t
 *
muãx
 = 
NULL
;

581 
≠r_thªad_t
 *
thr_pög
 = 
NULL
, *
thr_p⁄g
 = NULL;

583 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

584 
	`ABTS_SUCCESS
(
rv
);

585 
	`ABTS_PTR_NOTNULL
(
tc
, 
muãx
);

587 
rv
 = 
	`≠r_thªad_c⁄d_¸óã
(&
c⁄d
, 
p
);

588 
	`ABTS_SUCCESS
(
rv
);

589 
	`ABTS_PTR_NOTNULL
(
tc
, 
c⁄d
);

591 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

592 
	`ABTS_SUCCESS
(
rv
);

594 
box_pög
.
tc
 =Åc;

595 
box_pög
.
d©a
 = 
NULL
;

596 
box_pög
.
muãx
 = mutex;

597 
box_pög
.
c⁄d
 = cond;

598 
box_pög
.
func
 = 
pög
;

600 
rv
 = 
	`≠r_thªad_¸óã
(&
thr_pög
, 
NULL
, 
thªad_routöe
, &
box_pög
, 
p
);

601 
	`ABTS_SUCCESS
(
rv
);

603 
box_p⁄g
.
tc
 =Åc;

604 
box_p⁄g
.
d©a
 = 
NULL
;

605 
box_p⁄g
.
muãx
 = mutex;

606 
box_p⁄g
.
c⁄d
 = cond;

607 
box_p⁄g
.
func
 = 
p⁄g
;

609 
rv
 = 
	`≠r_thªad_¸óã
(&
thr_p⁄g
, 
NULL
, 
thªad_routöe
, &
box_p⁄g
, 
p
);

610 
	`ABTS_SUCCESS
(
rv
);

612 
°©e
 = 
TOSS
;

614 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

615 
	`ABTS_SUCCESS
(
rv
);

617 
	`≠r_¶ìp
(3000000);

619 
rv
 = 
	`≠r_thªad_muãx_lock
(
muãx
);

620 
	`ABTS_SUCCESS
(
rv
);

622 
°©e
 = 
OVER
;

624 
rv
 = 
	`≠r_thªad_muãx_u∆ock
(
muãx
);

625 
	`ABTS_SUCCESS
(
rv
);

627 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thr_pög
);

628 
	`ABTS_SUCCESS
(
rv
);

630 
rv
 = 
	`≠r_thªad_joö
(&
ªtvÆ
, 
thr_p⁄g
);

631 
	`ABTS_SUCCESS
(
rv
);

633 
rv
 = 
	`≠r_thªad_c⁄d_de°roy
(
c⁄d
);

634 
	`ABTS_SUCCESS
(
rv
);

636 
rv
 = 
	`≠r_thªad_muãx_de°roy
(
muãx
);

637 
	`ABTS_SUCCESS
(
rv
);

638 
	}
}

641 #i‡!
APR_HAS_THREADS


642 
	$thªads_nŸ_im∂
(
abts_ˇ£
 *
tc
, *
d©a
)

644 
	`ABTS_NOT_IMPL
(
tc
, "ThreadsÇot implemented onÅhisÖlatform");

645 
	}
}

648 
abts_suôe
 *
	$ã°c⁄d
(
abts_suôe
 *
suôe
)

650 #i‡
APR_HAS_THREADS


651 
toﬁbox_‚±r_t
 
‚±r
;

653 
suôe
 = 
	`ADD_SUITE
(suite)

655 #i‡!
APR_HAS_THREADS


656 
	`abts_run_ã°
(
suôe
, 
thªads_nŸ_im∂
, 
NULL
);

658 
	`abts_run_ã°
(
suôe
, 
lo°_sig«l
, 
NULL
);

659 
	`abts_run_ã°
(
suôe
, 
dy«mic_bödög
, 
NULL
);

660 
	`abts_run_ã°
(
suôe
, 
brﬂdˇ°_thªads
, 
NULL
);

661 
‚±r
.
func
 = 
√°ed_lock_™d_waô
;

662 
	`abts_run_ã°
(
suôe
, 
√°ed_waô
, &
‚±r
);

663 
‚±r
.
func
 = 
√°ed_lock_™d_u∆ock
;

664 
	`abts_run_ã°
(
suôe
, 
√°ed_waô
, &
‚±r
);

665 
	`abts_run_ã°
(
suôe
, 
pùe_¥odu˚r_c⁄sumî
, 
NULL
);

666 
	`abts_run_ã°
(
suôe
, 
pög_p⁄g
, 
NULL
);

669  
suôe
;

670 
	}
}

	@test/testdir.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_fûe_öfo.h
"

22 
	~"≠r_î∫o.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_lib.h
"

25 
	~"ã°utû.h
"

27 
	$ã°_mkdú
(
abts_ˇ£
 *
tc
, *
d©a
)

29 
≠r_°©us_t
 
rv
;

30 
≠r_föfo_t
 
föfo
;

32 
rv
 = 
	`≠r_dú_make
("d©a/ã°dú", 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_UEXECUTE
, 
p
);

33 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

35 
rv
 = 
	`≠r_°©
(&
föfo
, "d©a/ã°dú", 
APR_FINFO_TYPE
, 
p
);

36 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

37 
	`ABTS_INT_EQUAL
(
tc
, 
APR_DIR
, 
föfo
.
fûëy≥
);

38 
	}
}

40 
	$ã°_mkdú_ªcurs
(
abts_ˇ£
 *
tc
, *
d©a
)

42 
≠r_°©us_t
 
rv
;

43 
≠r_föfo_t
 
föfo
;

45 
rv
 = 
	`≠r_dú_make_ªcursive
("data/one/two/three",

46 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_UEXECUTE
, 
p
);

47 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

49 
rv
 = 
	`≠r_°©
(&
föfo
, "d©a/⁄e", 
APR_FINFO_TYPE
, 
p
);

50 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

51 
	`ABTS_INT_EQUAL
(
tc
, 
APR_DIR
, 
föfo
.
fûëy≥
);

53 
rv
 = 
	`≠r_°©
(&
föfo
, "d©a/⁄e/two", 
APR_FINFO_TYPE
, 
p
);

54 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

55 
	`ABTS_INT_EQUAL
(
tc
, 
APR_DIR
, 
föfo
.
fûëy≥
);

57 
rv
 = 
	`≠r_°©
(&
föfo
, "d©a/⁄e/two/thªe", 
APR_FINFO_TYPE
, 
p
);

58 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

59 
	`ABTS_INT_EQUAL
(
tc
, 
APR_DIR
, 
föfo
.
fûëy≥
);

60 
	}
}

62 
	$ã°_ªmove
(
abts_ˇ£
 *
tc
, *
d©a
)

64 
≠r_°©us_t
 
rv
;

65 
≠r_föfo_t
 
föfo
;

67 
rv
 = 
	`≠r_dú_ªmove
("d©a/ã°dú", 
p
);

68 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

70 
rv
 = 
	`≠r_°©
(&
föfo
, "d©a/ã°dú", 
APR_FINFO_TYPE
, 
p
);

71 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

72 
	}
}

74 
	$ã°_ªmovóŒ_Áû
(
abts_ˇ£
 *
tc
, *
d©a
)

76 
≠r_°©us_t
 
rv
;

78 
rv
 = 
	`≠r_dú_ªmove
("d©a/⁄e", 
p
);

79 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOTEMPTY
(
rv
));

80 
	}
}

82 
	$ã°_ªmovóŒ
(
abts_ˇ£
 *
tc
, *
d©a
)

84 
≠r_°©us_t
 
rv
;

86 
rv
 = 
	`≠r_dú_ªmove
("d©a/⁄e/two/thªe", 
p
);

87 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

89 
rv
 = 
	`≠r_dú_ªmove
("d©a/⁄e/two", 
p
);

90 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

92 
rv
 = 
	`≠r_dú_ªmove
("d©a/⁄e", 
p
);

93 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

94 
	}
}

96 
	$ã°_ªmove_nŸthîe
(
abts_ˇ£
 *
tc
, *
d©a
)

98 
≠r_°©us_t
 
rv
;

100 
rv
 = 
	`≠r_dú_ªmove
("d©a/nŸthîe", 
p
);

101 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

102 
	}
}

104 
	$ã°_mkdú_twi˚
(
abts_ˇ£
 *
tc
, *
d©a
)

106 
≠r_°©us_t
 
rv
;

108 
rv
 = 
	`≠r_dú_make
("d©a/ã°dú", 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_UEXECUTE
, 
p
);

109 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

111 
rv
 = 
	`≠r_dú_make
("d©a/ã°dú", 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_UEXECUTE
, 
p
);

112 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EEXIST
(
rv
));

114 
rv
 = 
	`≠r_dú_ªmove
("d©a/ã°dú", 
p
);

115 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

116 
	}
}

118 
	$ã°_›ídú
(
abts_ˇ£
 *
tc
, *
d©a
)

120 
≠r_°©us_t
 
rv
;

121 
≠r_dú_t
 *
dú
;

123 
rv
 = 
	`≠r_dú_›í
(&
dú
, "d©a", 
p
);

124 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

125 
	`≠r_dú_˛o£
(
dú
);

126 
	}
}

128 
	$ã°_›ídú_nŸthîe
(
abts_ˇ£
 *
tc
, *
d©a
)

130 
≠r_°©us_t
 
rv
;

131 
≠r_dú_t
 *
dú
;

133 
rv
 = 
	`≠r_dú_›í
(&
dú
, "nŸthîe", 
p
);

134 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

135 
	}
}

137 
	$ã°_˛o£dú
(
abts_ˇ£
 *
tc
, *
d©a
)

139 
≠r_°©us_t
 
rv
;

140 
≠r_dú_t
 *
dú
;

142 
rv
 = 
	`≠r_dú_›í
(&
dú
, "d©a", 
p
);

143 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

144 
rv
 = 
	`≠r_dú_˛o£
(
dú
);

145 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

146 
	}
}

148 
	$ã°_ªwöd
(
abts_ˇ£
 *
tc
, *
d©a
)

150 
≠r_dú_t
 *
dú
;

151 
≠r_föfo_t
 
fú°
, 
£c⁄d
;

153 
	`APR_ASSERT_SUCCESS
(
tc
, "≠r_dú_›í faûed", 
	`≠r_dú_›í
(&
dú
, "d©a", 
p
));

155 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_dir_read failed",

156 
	`≠r_dú_ªad
(&
fú°
, 
APR_FINFO_DIRENT
, 
dú
));

158 
	`APR_ASSERT_SUCCESS
(
tc
, "≠r_dú_ªwöd faûed", 
	`≠r_dú_ªwöd
(
dú
));

160 
	`APR_ASSERT_SUCCESS
(
tc
, "secondápr_dir_read failed",

161 
	`≠r_dú_ªad
(&
£c⁄d
, 
APR_FINFO_DIRENT
, 
dú
));

163 
	`APR_ASSERT_SUCCESS
(
tc
, "≠r_dú_˛o£ faûed", 
	`≠r_dú_˛o£
(
dú
));

165 
	`ABTS_STR_EQUAL
(
tc
, 
fú°
.
«me
, 
£c⁄d
.name);

166 
	}
}

170 
	$ã°_un˛óªd_î∫o
(
abts_ˇ£
 *
tc
, *
d©a
)

172 
≠r_fûe_t
 *
thefûe
 = 
NULL
;

173 
≠r_föfo_t
 
föfo
;

174 
≠r_öt32_t
 
föfo_Êags
 = 
APR_FINFO_TYPE
 | 
APR_FINFO_NAME
;

175 
≠r_dú_t
 *
this_dú
;

176 
≠r_°©us_t
 
rv
;

178 
rv
 = 
	`≠r_dú_make
("dú1", 
APR_OS_DEFAULT
, 
p
);

179 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

180 
rv
 = 
	`≠r_dú_make
("dú2", 
APR_OS_DEFAULT
, 
p
);

181 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

182 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, "dir1/file1",

183 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
, 
APR_OS_DEFAULT
, 
p
);

184 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

185 
rv
 = 
	`≠r_fûe_˛o£
(
thefûe
);

186 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

191 
rv
 = 
	`≠r_dú_ªmove
("dú1", 
p
);

192 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOTEMPTY
(
rv
));

195 
rv
 = 
	`≠r_dú_›í
(&
this_dú
, "dú2", 
p
);

196 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

197 
rv
 = 
	`≠r_dú_ªad
(&
föfo
, 
föfo_Êags
, 
this_dú
);

198 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

199 
rv
 = 
	`≠r_dú_ªad
(&
föfo
, 
föfo_Êags
, 
this_dú
);

200 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

206 
rv
 = 
	`≠r_dú_ªad
(&
föfo
, 
föfo_Êags
, 
this_dú
);

207 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

209 
rv
 = 
	`≠r_dú_˛o£
(
this_dú
);

210 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

213 
rv
 = 
	`≠r_fûe_ªmove
("dú1/fûe1", 
p
);

214 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

215 
rv
 = 
	`≠r_dú_ªmove
("dú1", 
p
);

216 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

217 
rv
 = 
	`≠r_dú_ªmove
("dú2", 
p
);

218 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

220 
	}
}

222 
	$ã°_rmkdú_nocwd
(
abts_ˇ£
 *
tc
, *
d©a
)

224 *
cwd
, *
∑th
;

226 
	`APR_ASSERT_SUCCESS
(
tc
, "makeÅemp dir",

227 
	`≠r_dú_make
("dú3", 
APR_OS_DEFAULT
, 
p
));

229 
	`APR_ASSERT_SUCCESS
(
tc
, "obèö cwd", 
	`≠r_fûï©h_gë
(&
cwd
, 0, 
p
));

231 
	`APR_ASSERT_SUCCESS
(
tc
, "determineÖathÅoÅemp dir",

232 
	`≠r_fûï©h_mîge
(&
∑th
, 
cwd
, "dú3", 0, 
p
));

234 
	`APR_ASSERT_SUCCESS
(
tc
, "ch™gêtÿãm∞dú", 
	`≠r_fûï©h_£t
(
∑th
, 
p
));

236 
	`APR_ASSERT_SUCCESS
(
tc
, "ª°‹êcwd", 
	`≠r_fûï©h_£t
(
cwd
, 
p
));

238 
	`APR_ASSERT_SUCCESS
(
tc
, "ªmovêcwd", 
	`≠r_dú_ªmove
(
∑th
, 
p
));

239 
	}
}

242 
abts_suôe
 *
	$ã°dú
(
abts_suôe
 *
suôe
)

244 
suôe
 = 
	`ADD_SUITE
(suite)

246 
	`abts_run_ã°
(
suôe
, 
ã°_mkdú
, 
NULL
);

247 
	`abts_run_ã°
(
suôe
, 
ã°_mkdú_ªcurs
, 
NULL
);

248 
	`abts_run_ã°
(
suôe
, 
ã°_ªmove
, 
NULL
);

249 
	`abts_run_ã°
(
suôe
, 
ã°_ªmovóŒ_Áû
, 
NULL
);

250 
	`abts_run_ã°
(
suôe
, 
ã°_ªmovóŒ
, 
NULL
);

251 
	`abts_run_ã°
(
suôe
, 
ã°_ªmove_nŸthîe
, 
NULL
);

252 
	`abts_run_ã°
(
suôe
, 
ã°_mkdú_twi˚
, 
NULL
);

253 
	`abts_run_ã°
(
suôe
, 
ã°_rmkdú_nocwd
, 
NULL
);

255 
	`abts_run_ã°
(
suôe
, 
ã°_ªwöd
, 
NULL
);

257 
	`abts_run_ã°
(
suôe
, 
ã°_›ídú
, 
NULL
);

258 
	`abts_run_ã°
(
suôe
, 
ã°_›ídú_nŸthîe
, 
NULL
);

259 
	`abts_run_ã°
(
suôe
, 
ã°_˛o£dú
, 
NULL
);

260 
	`abts_run_ã°
(
suôe
, 
ã°_un˛óªd_î∫o
, 
NULL
);

262  
suôe
;

263 
	}
}

	@test/testdso.c

18 
	~"≠r.h
"

19 
	~"ã°utû.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_î∫o.h
"

23 
	~"≠r_dso.h
"

24 
	~"≠r_°rögs.h
"

25 
	~"≠r_fûe_öfo.h
"

26 #i‡
APR_HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 #i‡
APR_HAS_DSO


32 #ifde‡
NETWARE


33 
	#MOD_NAME
 "mod_ã°.∆m"

	)

34 #ñi‡
deföed
(
BEOS
Ë|| deföed(
__MVS__
)

35 
	#MOD_NAME
 "mod_ã°.so"

	)

36 #ñi‡
deföed
(
WIN32
)

37 
	#MOD_NAME
 
TESTBINPATH
 "mod_ã°.dŒ"

	)

38 #ñi‡
deföed
(
DARWIN
)

39 
	#MOD_NAME
 ".libs/mod_ã°.so"

	)

40 
	#LIB_NAME
 ".libs/libmod_ã°.dylib"

	)

41 #ñi‡(
deföed
(
__hpux__
Ë|| deföed(
__hpux
)Ë&& !deföed(
__ü64
)

42 
	#MOD_NAME
 ".libs/mod_ã°.¶"

	)

43 
	#LIB_NAME
 ".libs/libmod_ã°.¶"

	)

44 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__bsdi__
)

45 
	#MOD_NAME
 ".libs/libmod_ã°.so"

	)

46 
	#LIB_NAME
 ".libs/libmod_ã°.so"

	)

48 
	#MOD_NAME
 ".libs/mod_ã°.so"

	)

49 
	#LIB_NAME
 ".libs/libmod_ã°.so"

	)

52 *
	gmod«me
;

54 
	$ã°_lﬂd_moduÀ
(
abts_ˇ£
 *
tc
, *
d©a
)

56 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

57 
≠r_°©us_t
 
°©us
;

58 
îr°r
[256];

60 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
mod«me
, 
p
);

61 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

62 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

64 
	`≠r_dso_u∆ﬂd
(
h
);

65 
	}
}

67 
	$ã°_dso_sym
(
abts_ˇ£
 *
tc
, *
d©a
)

69 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

70 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

71 
≠r_°©us_t
 
°©us
;

72 (*
fun˘i⁄
)(
°r
[256]);

73 
ã°°r
[256];

74 
îr°r
[256];

76 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
mod«me
, 
p
);

77 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

78 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

80 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "print_hello");

81 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

82 
	`ABTS_PTR_NOTNULL
(
tc
, 
func1
);

84 i‡(!
tc
->
Áûed
) {

85 
fun˘i⁄
 = ((*)(*))
func1
;

86 (*
fun˘i⁄
)(
ã°°r
);

87 
	`ABTS_STR_EQUAL
(
tc
, "Hñlÿ- I'má DSO!\n", 
ã°°r
);

90 
	`≠r_dso_u∆ﬂd
(
h
);

91 
	}
}

93 
	$ã°_dso_sym_ªtu∫_vÆue
(
abts_ˇ£
 *
tc
, *
d©a
)

95 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

96 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

97 
≠r_°©us_t
 
°©us
;

98 (*
fun˘i⁄
)();

99 
îr°r
[256];

101 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
mod«me
, 
p
);

102 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

103 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

105 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "count_reps");

106 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

107 
	`ABTS_PTR_NOTNULL
(
tc
, 
func1
);

109 i‡(!
tc
->
Áûed
) {

110 
fun˘i⁄
 = ((*)())
func1
;

111 
°©us
 = (*
fun˘i⁄
)(5);

112 
	`ABTS_INT_EQUAL
(
tc
, 5, 
°©us
);

115 
	`≠r_dso_u∆ﬂd
(
h
);

116 
	}
}

118 
	$ã°_u∆ﬂd_moduÀ
(
abts_ˇ£
 *
tc
, *
d©a
)

120 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

121 
≠r_°©us_t
 
°©us
;

122 
îr°r
[256];

123 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

125 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
mod«me
, 
p
);

126 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

127 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

129 
°©us
 = 
	`≠r_dso_u∆ﬂd
(
h
);

130 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

132 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "print_hello");

133 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ESYMNOTFOUND
(
°©us
));

134 
	}
}

137 #ifde‡
LIB_NAME


138 *
	glib«me
;

140 
	$ã°_lﬂd_libøry
(
abts_ˇ£
 *
tc
, *
d©a
)

142 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

143 
≠r_°©us_t
 
°©us
;

144 
îr°r
[256];

146 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
lib«me
, 
p
);

147 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

148 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

150 
	`≠r_dso_u∆ﬂd
(
h
);

151 
	}
}

153 
	$ã°_dso_sym_libøry
(
abts_ˇ£
 *
tc
, *
d©a
)

155 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

156 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

157 
≠r_°©us_t
 
°©us
;

158 (*
fun˘i⁄
)(
°r
[256]);

159 
ã°°r
[256];

160 
îr°r
[256];

162 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
lib«me
, 
p
);

163 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

164 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

166 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "print_hello");

167 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

168 
	`ABTS_PTR_NOTNULL
(
tc
, 
func1
);

170 i‡(!
tc
->
Áûed
) {

171 
fun˘i⁄
 = ((*)(*))
func1
;

172 (*
fun˘i⁄
)(
ã°°r
);

173 
	`ABTS_STR_EQUAL
(
tc
, "Hñlÿ- I'má DSO!\n", 
ã°°r
);

176 
	`≠r_dso_u∆ﬂd
(
h
);

177 
	}
}

179 
	$ã°_dso_sym_ªtu∫_vÆue_libøry
(
abts_ˇ£
 *
tc
, *
d©a
)

181 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

182 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

183 
≠r_°©us_t
 
°©us
;

184 (*
fun˘i⁄
)();

185 
îr°r
[256];

187 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
lib«me
, 
p
);

188 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

189 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

191 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "count_reps");

192 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

193 
	`ABTS_PTR_NOTNULL
(
tc
, 
func1
);

195 i‡(!
tc
->
Áûed
) {

196 
fun˘i⁄
 = ((*)())
func1
;

197 
°©us
 = (*
fun˘i⁄
)(5);

198 
	`ABTS_INT_EQUAL
(
tc
, 5, 
°©us
);

201 
	`≠r_dso_u∆ﬂd
(
h
);

202 
	}
}

204 
	$ã°_u∆ﬂd_libøry
(
abts_ˇ£
 *
tc
, *
d©a
)

206 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

207 
≠r_°©us_t
 
°©us
;

208 
îr°r
[256];

209 
≠r_dso_h™dÀ_sym_t
 
func1
 = 
NULL
;

211 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, 
lib«me
, 
p
);

212 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

213 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

215 
°©us
 = 
	`≠r_dso_u∆ﬂd
(
h
);

216 
	`ABTS_ASSERT
(
tc
, 
	`≠r_dso_îr‹
(
h
, 
îr°r
, 256), 
APR_SUCCESS
 =
°©us
);

218 
°©us
 = 
	`≠r_dso_sym
(&
func1
, 
h
, "print_hello");

219 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ESYMNOTFOUND
(
°©us
));

220 
	}
}

224 
	$ã°_lﬂd_nŸthîe
(
abts_ˇ£
 *
tc
, *
d©a
)

226 
≠r_dso_h™dÀ_t
 *
h
 = 
NULL
;

227 
≠r_°©us_t
 
°©us
;

229 
°©us
 = 
	`≠r_dso_lﬂd
(&
h
, "No_Fûe.so", 
p
);

231 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EDSOOPEN
(
°©us
));

232 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

233 
	}
}

237 
abts_suôe
 *
	$ã°dso
(
abts_suôe
 *
suôe
)

239 
suôe
 = 
	`ADD_SUITE
(suite)

241 #i‡
APR_HAS_DSO


242 
	`≠r_fûï©h_mîge
(&
mod«me
, 
NULL
, 
MOD_NAME
, 0, 
p
);

244 
	`abts_run_ã°
(
suôe
, 
ã°_lﬂd_moduÀ
, 
NULL
);

245 
	`abts_run_ã°
(
suôe
, 
ã°_dso_sym
, 
NULL
);

246 
	`abts_run_ã°
(
suôe
, 
ã°_dso_sym_ªtu∫_vÆue
, 
NULL
);

247 
	`abts_run_ã°
(
suôe
, 
ã°_u∆ﬂd_moduÀ
, 
NULL
);

249 #ifde‡
LIB_NAME


250 
	`≠r_fûï©h_mîge
(&
lib«me
, 
NULL
, 
LIB_NAME
, 0, 
p
);

252 
	`abts_run_ã°
(
suôe
, 
ã°_lﬂd_libøry
, 
NULL
);

253 
	`abts_run_ã°
(
suôe
, 
ã°_dso_sym_libøry
, 
NULL
);

254 
	`abts_run_ã°
(
suôe
, 
ã°_dso_sym_ªtu∫_vÆue_libøry
, 
NULL
);

255 
	`abts_run_ã°
(
suôe
, 
ã°_u∆ﬂd_libøry
, 
NULL
);

258 
	`abts_run_ã°
(
suôe
, 
ã°_lﬂd_nŸthîe
, 
NULL
);

261  
suôe
;

262 
	}
}

	@test/testdup.c

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"ã°utû.h
"

24 
	#TEST
 "Te°ög\n"

	)

25 
	#TEST2
 "Te°ögágaö\n"

	)

26 
	#FILEPATH
 "d©a/"

	)

28 
	$ã°_fûe_dup
(
abts_ˇ£
 *
tc
, *
d©a
)

30 
≠r_fûe_t
 *
fûe1
 = 
NULL
;

31 
≠r_fûe_t
 *
fûe3
 = 
NULL
;

32 
≠r_°©us_t
 
rv
;

33 
≠r_föfo_t
 
föfo
;

36 
rv
 = 
	`≠r_fûe_›í
(&
fûe1
, 
FILEPATH
 "testdup.file",

37 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 |

38 
APR_FOPEN_DELONCLOSE
, 
APR_OS_DEFAULT
, 
p
);

39 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

40 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe1
);

42 
rv
 = 
	`≠r_fûe_dup
(&
fûe3
, 
fûe1
, 
p
);

43 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

44 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe3
);

46 
rv
 = 
	`≠r_fûe_˛o£
(
fûe1
);

47 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

50 
rv
 = 
	`≠r_fûe_˛o£
(
fûe3
);

51 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

52 
rv
 = 
	`≠r_°©
(&
föfo
, 
FILEPATH
 "ã°dup.fûe", 
APR_FINFO_NORM
, 
p
);

53 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

54 
	}
}

56 
	$ã°_fûe_ªadwrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

58 
≠r_fûe_t
 *
fûe1
 = 
NULL
;

59 
≠r_fûe_t
 *
fûe3
 = 
NULL
;

60 
≠r_°©us_t
 
rv
;

61 
≠r_föfo_t
 
föfo
;

62 
≠r_size_t
 
txéí
 = (
TEST
);

63 
buff
[50];

64 
≠r_off_t
 
Âos
;

67 
rv
 = 
	`≠r_fûe_›í
(&
fûe1
, 
FILEPATH
 "testdup.readwrite.file",

68 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 |

69 
APR_FOPEN_DELONCLOSE
, 
APR_OS_DEFAULT
, 
p
);

70 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

71 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe1
);

73 
rv
 = 
	`≠r_fûe_dup
(&
fûe3
, 
fûe1
, 
p
);

74 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

75 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe3
);

77 
rv
 = 
	`≠r_fûe_wrôe
(
fûe3
, 
TEST
, &
txéí
);

78 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

79 
	`ABTS_SIZE_EQUAL
(
tc
, (
TEST
), 
txéí
);

81 
Âos
 = 0;

82 
rv
 = 
	`≠r_fûe_£ek
(
fûe1
, 
APR_SET
, &
Âos
);

83 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

84 
	`ABTS_ASSERT
(
tc
, "Fûêposôi⁄ mism©ch,Éx≥˘ed 0", 
Âos
 == 0);

86 
txéí
 = 50;

87 
rv
 = 
	`≠r_fûe_ªad
(
fûe1
, 
buff
, &
txéí
);

88 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

89 
	`ABTS_STR_EQUAL
(
tc
, 
TEST
, 
buff
);

92 
rv
 = 
	`≠r_fûe_˛o£
(
fûe1
);

93 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

95 
rv
 = 
	`≠r_fûe_˛o£
(
fûe3
);

96 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

97 
rv
 = 
	`≠r_°©
(&
föfo
, 
FILEPATH
 "ã°dup.ªadwrôe.fûe", 
APR_FINFO_NORM
, 
p
);

98 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

99 
	}
}

101 
	$ã°_dup2
(
abts_ˇ£
 *
tc
, *
d©a
)

103 
≠r_fûe_t
 *
ã°fûe
 = 
NULL
;

104 
≠r_fûe_t
 *
îrfûe
 = 
NULL
;

105 
≠r_fûe_t
 *
ßvìº
 = 
NULL
;

106 
≠r_°©us_t
 
rv
;

108 
rv
 = 
	`≠r_fûe_›í
(&
ã°fûe
, 
FILEPATH
 "testdup2.file",

109 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 |

110 
APR_FOPEN_DELONCLOSE
, 
APR_OS_DEFAULT
, 
p
);

111 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

112 
	`ABTS_PTR_NOTNULL
(
tc
, 
ã°fûe
);

114 
rv
 = 
	`≠r_fûe_›í_°dîr
(&
îrfûe
, 
p
);

115 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

118 
rv
 = 
	`≠r_fûe_dup
(&
ßvìº
, 
îrfûe
, 
p
);

119 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

120 
	`ABTS_PTR_NOTNULL
(
tc
, 
ßvìº
);

122 
rv
 = 
	`≠r_fûe_dup2
(
îrfûe
, 
ã°fûe
, 
p
);

123 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

124 
	`ABTS_PTR_NOTNULL
(
tc
, 
îrfûe
);

126 
	`≠r_fûe_˛o£
(
ã°fûe
);

128 
rv
 = 
	`≠r_fûe_dup2
(
îrfûe
, 
ßvìº
, 
p
);

129 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

130 
	`ABTS_PTR_NOTNULL
(
tc
, 
îrfûe
);

132 
	`≠r_fûe_˛o£
(
ßvìº
);

133 
	}
}

135 
	$ã°_dup2_ªadwrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

137 
≠r_fûe_t
 *
îrfûe
 = 
NULL
;

138 
≠r_fûe_t
 *
ã°fûe
 = 
NULL
;

139 
≠r_fûe_t
 *
ßvìº
 = 
NULL
;

140 
≠r_°©us_t
 
rv
;

141 
≠r_size_t
 
txéí
 = (
TEST
);

142 
buff
[50];

143 
≠r_off_t
 
Âos
;

145 
rv
 = 
	`≠r_fûe_›í
(&
ã°fûe
, 
FILEPATH
 "testdup2.readwrite.file",

146 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 |

147 
APR_FOPEN_DELONCLOSE
, 
APR_OS_DEFAULT
, 
p
);

148 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

149 
	`ABTS_PTR_NOTNULL
(
tc
, 
ã°fûe
);

151 
rv
 = 
	`≠r_fûe_›í_°dîr
(&
îrfûe
, 
p
);

152 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

155 
rv
 = 
	`≠r_fûe_dup
(&
ßvìº
, 
îrfûe
, 
p
);

156 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

157 
	`ABTS_PTR_NOTNULL
(
tc
, 
ßvìº
);

159 
rv
 = 
	`≠r_fûe_dup2
(
îrfûe
, 
ã°fûe
, 
p
);

160 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

161 
	`ABTS_PTR_NOTNULL
(
tc
, 
îrfûe
);

163 
txéí
 = (
TEST2
);

164 
rv
 = 
	`≠r_fûe_wrôe
(
îrfûe
, 
TEST2
, &
txéí
);

165 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

166 
	`ABTS_SIZE_EQUAL
(
tc
, (
TEST2
), 
txéí
);

168 
Âos
 = 0;

169 
rv
 = 
	`≠r_fûe_£ek
(
ã°fûe
, 
APR_SET
, &
Âos
);

170 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

171 
	`ABTS_ASSERT
(
tc
, "Fûêposôi⁄ mism©ch,Éx≥˘ed 0", 
Âos
 == 0);

173 
txéí
 = 50;

174 
rv
 = 
	`≠r_fûe_ªad
(
ã°fûe
, 
buff
, &
txéí
);

175 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

176 
	`ABTS_STR_EQUAL
(
tc
, 
TEST2
, 
buff
);

178 
	`≠r_fûe_˛o£
(
ã°fûe
);

180 
rv
 = 
	`≠r_fûe_dup2
(
îrfûe
, 
ßvìº
, 
p
);

181 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

182 
	`ABTS_PTR_NOTNULL
(
tc
, 
îrfûe
);

184 
	`≠r_fûe_˛o£
(
ßvìº
);

185 
	}
}

187 
abts_suôe
 *
	$ã°dup
(
abts_suôe
 *
suôe
)

189 
suôe
 = 
	`ADD_SUITE
(suite)

191 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_dup
, 
NULL
);

192 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_ªadwrôe
, 
NULL
);

193 
	`abts_run_ã°
(
suôe
, 
ã°_dup2
, 
NULL
);

194 
	`abts_run_ã°
(
suôe
, 
ã°_dup2_ªadwrôe
, 
NULL
);

196  
suôe
;

197 
	}
}

	@test/testenv.c

17 
	~"≠r_ív.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"ã°utû.h
"

21 
	#TEST_ENVVAR_NAME
 "≠r_ã°_ívv¨"

	)

22 
	#TEST_ENVVAR2_NAME
 "≠r_ã°_ívv¨2"

	)

23 
	#TEST_ENVVAR_VALUE
 "Ju°á vÆuêth© we'Œ check"

	)

25 
	ghave_ív_£t
;

26 
	ghave_ív_gë
;

27 
	ghave_ív_dñ
;

29 
	$ã°_£ãnv
(
abts_ˇ£
 *
tc
, *
d©a
)

31 
≠r_°©us_t
 
rv
;

33 
rv
 = 
	`≠r_ív_£t
(
TEST_ENVVAR_NAME
, 
TEST_ENVVAR_VALUE
, 
p
);

34 
have_ív_£t
 = (
rv
 !
APR_ENOTIMPL
);

35 i‡(!
have_ív_£t
) {

36 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_set");

38 
	`APR_ASSERT_SUCCESS
(
tc
, "£àívú⁄míàv¨übÀ", 
rv
);

40 
	}
}

42 
	$ã°_gëív
(
abts_ˇ£
 *
tc
, *
d©a
)

44 *
vÆue
;

45 
≠r_°©us_t
 
rv
;

47 i‡(!
have_ív_£t
) {

48 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_set (skipÅest forápr_env_get)");

52 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR_NAME
, 
p
);

53 
have_ív_gë
 = (
rv
 !
APR_ENOTIMPL
);

54 i‡(!
have_ív_gë
) {

55 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_get");

58 
	`APR_ASSERT_SUCCESS
(
tc
, "gëÉnvú⁄míàv¨übÀ", 
rv
);

59 
	`ABTS_STR_EQUAL
(
tc
, 
TEST_ENVVAR_VALUE
, 
vÆue
);

60 
	}
}

62 
	$ã°_dñív
(
abts_ˇ£
 *
tc
, *
d©a
)

64 *
vÆue
;

65 
≠r_°©us_t
 
rv
;

67 i‡(!
have_ív_£t
) {

68 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_set (skipÅest forápr_env_delete)");

72 
rv
 = 
	`≠r_ív_dñëe
(
TEST_ENVVAR_NAME
, 
p
);

73 
have_ív_dñ
 = (
rv
 !
APR_ENOTIMPL
);

74 i‡(!
have_ív_dñ
) {

75 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_delete");

78 
	`APR_ASSERT_SUCCESS
(
tc
, "dñëêívú⁄míàv¨übÀ", 
rv
);

80 i‡(!
have_ív_gë
) {

81 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_get (skip sanity check forápr_env_delete)");

84 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR_NAME
, 
p
);

85 
	`ABTS_INT_EQUAL
(
tc
, 
APR_ENOENT
, 
rv
);

86 
	}
}

89 
	$ã°_em±yív
(
abts_ˇ£
 *
tc
, *
d©a
)

91 *
vÆue
;

92 
≠r_°©us_t
 
rv
;

94 i‡(!(
have_ív_£t
 && 
have_ív_gë
)) {

95 
	`ABTS_NOT_IMPL
(
tc
, "apr_env_set (skipÅest_emptyenv)");

99 
rv
 = 
	`≠r_ív_£t
(
TEST_ENVVAR_NAME
, "", 
p
);

100 
	`APR_ASSERT_SUCCESS
(
tc
, "£àívú⁄míàv¨übÀ", 
rv
);

101 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR_NAME
, 
p
);

102 
	`APR_ASSERT_SUCCESS
(
tc
, "gëÉnvú⁄míàv¨übÀ", 
rv
);

103 
	`ABTS_STR_EQUAL
(
tc
, "", 
vÆue
);

105 i‡(!
have_ív_dñ
) {

106 
	`ABTS_NOT_IMPL
(
tc
, "apr_env (skipÑecycleÅest_emptyenv)");

110 
rv
 = 
	`≠r_ív_dñëe
(
TEST_ENVVAR_NAME
, 
p
);

111 
	`APR_ASSERT_SUCCESS
(
tc
, "dñëêívú⁄míàv¨übÀ", 
rv
);

112 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR_NAME
, 
p
);

113 
	`ABTS_INT_EQUAL
(
tc
, 
APR_ENOENT
, 
rv
);

116 
rv
 = 
	`≠r_ív_£t
(
TEST_ENVVAR2_NAME
, 
TEST_ENVVAR_VALUE
, 
p
);

117 
	`APR_ASSERT_SUCCESS
(
tc
, "£à£c⁄dÉnvú⁄míàv¨übÀ", 
rv
);

118 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR2_NAME
, 
p
);

119 
	`APR_ASSERT_SUCCESS
(
tc
, "gë sec⁄dÉnvú⁄míàv¨übÀ", 
rv
);

120 
	`ABTS_STR_EQUAL
(
tc
, 
TEST_ENVVAR_VALUE
, 
vÆue
);

123 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR_NAME
, 
p
);

124 
	`ABTS_INT_EQUAL
(
tc
, 
APR_ENOENT
, 
rv
);

125 
rv
 = 
	`≠r_ív_gë
(&
vÆue
, 
TEST_ENVVAR2_NAME
, 
p
);

126 
	`APR_ASSERT_SUCCESS
(
tc
, "vîify sec⁄dÉnvú⁄míàv¨übÀ", 
rv
);

127 
	`ABTS_STR_EQUAL
(
tc
, 
TEST_ENVVAR_VALUE
, 
vÆue
);

130 
	`≠r_ív_dñëe
(
TEST_ENVVAR2_NAME
, 
p
);

131 
	}
}

133 
abts_suôe
 *
	$ã°ív
(
abts_suôe
 *
suôe
)

135 
suôe
 = 
	`ADD_SUITE
(suite)

137 
	`abts_run_ã°
(
suôe
, 
ã°_£ãnv
, 
NULL
);

138 
	`abts_run_ã°
(
suôe
, 
ã°_gëív
, 
NULL
);

139 
	`abts_run_ã°
(
suôe
, 
ã°_dñív
, 
NULL
);

140 
	`abts_run_ã°
(
suôe
, 
ã°_em±yív
, 
NULL
);

142  
suôe
;

143 
	}
}

	@test/testescape.c

17 
	~<as£π.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~"≠r_esˇ≥.h
"

22 
	~"≠r_°rögs.h
"

24 
	~"abts.h
"

25 
	~"ã°utû.h
"

27 
	$ã°_esˇ≥
(
abts_ˇ£
 *
tc
, *
d©a
)

29 
≠r_poﬁ_t
 *
poﬁ
;

30 c⁄° *
§c
, *
èrgë
;

31 c⁄° *
de°
;

32 c⁄° *
vde°
;

33 
≠r_size_t
 
Àn
, 
vÀn
;

35 
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
);

37 
§c
 = "Hello World &;`'\"|*?~<>^()[]{}$\\";

38 
èrgë
 = "Hello World \\&\\;\\`\\'\\\"\\|\\*\\?\\~\\<\\>\\^\\(\\)\\[\\]\\{\\}\\$\\\\";

39 
de°
 = 
	`≠r_≥sˇ≥_shñl
(
poﬁ
, 
§c
);

40 
	`ABTS_ASSERT
(
tc
,

41 
	`≠r_p•rötf
(
poﬁ
, "shellÉscaped (%s) doesÇot matchÉxpected output (%s)",

42 
de°
, 
èrgë
),

43 (
	`°rcmp
(
de°
, 
èrgë
) == 0));

44 
	`≠r_esˇ≥_shñl
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

45 
	`ABTS_ASSERT
(
tc
,

46 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

47 (
Àn
 =
	`°æí
(
de°
) + 1));

49 #i‡!(
	`deföed
(
OS2
Ë|| deföed(
WIN32
))

52 
§c
 = "Hello World &;`'\"|*?~<>^()[]{}$\\\n";

53 
èrgë
 = "Hello World \\&\\;\\`\\'\\\"\\|\\*\\?\\~\\<\\>\\^\\(\\)\\[\\]\\{\\}\\$\\\\\\\n";

54 
de°
 = 
	`≠r_≥sˇ≥_shñl
(
poﬁ
, 
§c
);

55 
	`ABTS_ASSERT
(
tc
,

56 
	`≠r_p•rötf
(
poﬁ
, "shellÉscaped (%s) doesÇot matchÉxpected output (%s)",

57 
de°
, 
èrgë
),

58 (
	`°rcmp
(
de°
, 
èrgë
) == 0));

59 
	`≠r_esˇ≥_shñl
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

60 
	`ABTS_ASSERT
(
tc
,

61 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

62 (
Àn
 =
	`°æí
(
de°
) + 1));

65 
§c
 = "Hello";

66 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, 
NULL
, NULL, 0);

67 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

69 
§c
 = "Hello";

70 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, 
NULL
, NULL, 1);

71 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

73 
§c
 = "Hello%20";

74 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, " ", 
NULL
, 0);

75 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
de°
);

77 
§c
 = "Hello%20World";

78 
èrgë
 = "Hello World";

79 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, 
NULL
, NULL, 0);

80 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

81 
	`≠r_u√sˇ≥_uæ
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, NULL, NULL, 0, &
Àn
);

82 
	`ABTS_ASSERT
(
tc
,

83 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

84 (
Àn
 =
	`°æí
(
de°
) + 1));

86 
§c
 = "Hello+World";

87 
èrgë
 = "Hello World";

88 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, 
NULL
, NULL, 1);

89 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

90 
	`≠r_u√sˇ≥_uæ
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, NULL, NULL, 1, &
Àn
);

91 
	`ABTS_ASSERT
(
tc
,

92 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

93 (
Àn
 =
	`°æí
(
de°
) + 1));

95 
§c
 = "Hello%20World";

96 
èrgë
 = "Hello%20World";

97 
de°
 = 
	`≠r_pu√sˇ≥_uæ
(
poﬁ
, 
§c
, 
NULL
, " ", 0);

98 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

99 
	`≠r_u√sˇ≥_uæ
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, NULL, " ", 0, &
Àn
);

100 
	`ABTS_ASSERT
(
tc
,

101 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

102 (
Àn
 =
	`°æí
(
de°
) + 1));

104 
§c
 = "Hello";

105 
de°
 = 
	`≠r_≥sˇ≥_∑th_£gmít
(
poﬁ
, 
§c
);

106 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

108 
§c
 = "$-_.+!*'(),:@&=/~Hello World";

109 
èrgë
 = "$-_.+!*'(),:@&=%2f~Hello%20World";

110 
de°
 = 
	`≠r_≥sˇ≥_∑th_£gmít
(
poﬁ
, 
§c
);

111 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

112 
	`≠r_esˇ≥_∑th_£gmít
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

113 
	`ABTS_ASSERT
(
tc
,

114 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

115 (
Àn
 =
	`°æí
(
de°
) + 1));

117 
§c
 = "Hello";

118 
de°
 = 
	`≠r_≥sˇ≥_∑th
(
poﬁ
, 
§c
, 0);

119 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

121 
§c
 = "$-_.+!*'(),:@&=/~Hello World";

122 
èrgë
 = "./$-_.+!*'(),:@&=/~Hello%20World";

123 
de°
 = 
	`≠r_≥sˇ≥_∑th
(
poﬁ
, 
§c
, 0);

124 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

125 
	`≠r_esˇ≥_∑th
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 0, &
Àn
);

126 
	`ABTS_ASSERT
(
tc
,

127 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

128 (
Àn
 =
	`°æí
(
de°
) + 1));

130 
§c
 = "Hello";

131 
de°
 = 
	`≠r_≥sˇ≥_∑th
(
poﬁ
, 
§c
, 1);

132 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

134 
§c
 = "$-_.+!*'(),:@&=/~Hello World";

135 
èrgë
 = "$-_.+!*'(),:@&=/~Hello%20World";

136 
de°
 = 
	`≠r_≥sˇ≥_∑th
(
poﬁ
, 
§c
, 1);

137 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

138 
	`≠r_esˇ≥_∑th
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 1, &
Àn
);

139 
	`ABTS_ASSERT
(
tc
,

140 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

141 (
Àn
 =
	`°æí
(
de°
) + 1));

143 
§c
 = "Hello";

144 
de°
 = 
	`≠r_≥sˇ≥_uæícoded
(
poﬁ
, 
§c
);

145 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

147 
§c
 = "$-_.+!*'(),:@&=/~Hello World";

148 
èrgë
 = "%24-_.%2b%21*%27%28%29%2c%3a%40%26%3d%2f%7eHello+World";

149 
de°
 = 
	`≠r_≥sˇ≥_uæícoded
(
poﬁ
, 
§c
);

150 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

151 
	`≠r_esˇ≥_uæícoded
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

152 
	`ABTS_ASSERT
(
tc
,

153 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

154 (
Àn
 =
	`°æí
(
de°
) + 1));

156 
§c
 = "Hello";

157 
de°
 = 
	`≠r_≥sˇ≥_ítôy
(
poﬁ
, 
§c
, 0);

158 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

160 
§c
 = "\xFF<>&\'\"Hello World";

161 
èrgë
 = "\xFF&lt;&gt;&amp;'&quot;Hello World";

162 
de°
 = 
	`≠r_≥sˇ≥_ítôy
(
poﬁ
, 
§c
, 0);

163 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

164 
	`≠r_esˇ≥_ítôy
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 0, &
Àn
);

165 
	`ABTS_ASSERT
(
tc
,

166 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

167 (
Àn
 =
	`°æí
(
de°
) + 1));

169 
§c
 = "Hello";

170 
de°
 = 
	`≠r_≥sˇ≥_ítôy
(
poﬁ
, 
§c
, 1);

171 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

173 
§c
 = "\xFF<>&\'\"Hello World";

174 
èrgë
 = "&#255&lt;&gt;&amp;'&quot;Hello World";

175 
de°
 = 
	`≠r_≥sˇ≥_ítôy
(
poﬁ
, 
§c
, 1);

176 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

177 
	`≠r_esˇ≥_ítôy
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 1, &
Àn
);

178 
	`ABTS_ASSERT
(
tc
,

179 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

180 (
Àn
 =
	`°æí
(
de°
) + 1));

182 
§c
 = "Hello";

183 
de°
 = 
	`≠r_pu√sˇ≥_ítôy
(
poﬁ
, 
§c
);

184 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

186 
§c
 = "\xFF&lt;&gt;&amp;'&quot;Hello World";

187 
èrgë
 = "\xFF<>&\'\"Hello World";

188 
de°
 = 
	`≠r_pu√sˇ≥_ítôy
(
poﬁ
, 
§c
);

189 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

190 
	`≠r_u√sˇ≥_ítôy
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

191 
	`ABTS_ASSERT
(
tc
,

192 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

193 (
Àn
 =
	`°æí
(
de°
) + 1));

195 
§c
 = "&#255;&lt;&gt;&amp;'&quot;Hello World";

196 
èrgë
 = "\xFF<>&\'\"Hello World";

197 
de°
 = 
	`≠r_pu√sˇ≥_ítôy
(
poﬁ
, 
§c
);

198 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

199 
	`≠r_u√sˇ≥_ítôy
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

200 
	`ABTS_ASSERT
(
tc
,

201 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

202 (
Àn
 =
	`°æí
(
de°
) + 1));

204 
§c
 = "&#32;&lt;&gt;&amp;'&quot;Hello World";

205 
èrgë
 = " <>&\'\"Hello World";

206 
de°
 = 
	`≠r_pu√sˇ≥_ítôy
(
poﬁ
, 
§c
);

207 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

208 
	`≠r_u√sˇ≥_ítôy
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, &
Àn
);

209 
	`ABTS_ASSERT
(
tc
,

210 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

211 (
Àn
 =
	`°æí
(
de°
) + 1));

213 
§c
 = "Hello";

214 
de°
 = 
	`≠r_≥sˇ≥_echo
(
poﬁ
, 
§c
, 0);

215 
	`ABTS_PTR_EQUAL
(
tc
, 
§c
, 
de°
);

217 
§c
 = "\a\b\f\\n\r\t\v\"Hello World\"";

218 
èrgë
 = "\\a\\b\\f\\\\n\\r\\t\\v\"Hello World\"";

219 
de°
 = 
	`≠r_≥sˇ≥_echo
(
poﬁ
, 
§c
, 0);

220 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

221 
	`≠r_esˇ≥_echo
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 0, &
Àn
);

222 
	`ABTS_ASSERT
(
tc
,

223 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

224 (
Àn
 =
	`°æí
(
de°
) + 1));

226 
§c
 = "\a\b\f\\n\r\t\v\"Hello World\"";

227 
èrgë
 = "\\a\\b\\f\\\\n\\r\\t\\v\\\"Hello World\\\"";

228 
de°
 = 
	`≠r_≥sˇ≥_echo
(
poﬁ
, 
§c
, 1);

229 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

230 
	`≠r_esˇ≥_echo
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 1, &
Àn
);

231 
	`ABTS_ASSERT
(
tc
,

232 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

233 (
Àn
 =
	`°æí
(
de°
) + 1));

235 
§c
 = "\xFF\x00\xFF\x00";

236 
èrgë
 = "ff00ff00";

237 
de°
 = 
	`≠r_≥sˇ≥_hex
(
poﬁ
, 
§c
, 4, 0);

238 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

239 
	`≠r_esˇ≥_hex
(
NULL
, 
§c
, 4, 0, &
Àn
);

240 
	`ABTS_ASSERT
(
tc
,

241 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

242 (
Àn
 =
	`°æí
(
de°
) + 1));

244 
§c
 = "\xFF\x00\xFF\x00";

245 
èrgë
 = "ff:00:ff:00";

246 
de°
 = 
	`≠r_≥sˇ≥_hex
(
poﬁ
, 
§c
, 4, 1);

247 
	`ABTS_STR_EQUAL
(
tc
, 
èrgë
, 
de°
);

248 
	`≠r_esˇ≥_hex
(
NULL
, 
§c
, 4, 1, &
Àn
);

249 
	`ABTS_ASSERT
(
tc
,

250 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, 
	`°æí
(
de°
) + 1),

251 (
Àn
 =
	`°æí
(
de°
) + 1));

253 
§c
 = "ff:00:ff:00";

254 
èrgë
 = "\xFF\x00\xFF\x00";

255 
vde°
 = 
	`≠r_pu√sˇ≥_hex
(
poﬁ
, 
§c
, 1, &
vÀn
);

256 
	`ABTS_ASSERT
(
tc
, "≠r_pu√sˇ≥_hexÅ¨gë!=de°", 
	`memcmp
(
èrgë
, 
vde°
, 4) == 0);

257 
	`ABTS_INT_EQUAL
(
tc
, ()
vÀn
, 4);

258 
	`≠r_u√sˇ≥_hex
(
NULL
, 
§c
, 
APR_ESCAPE_STRING
, 1, &
Àn
);

259 
	`ABTS_ASSERT
(
tc
,

260 
	`≠r_p•rötf
(
poﬁ
, "sizêmism©ch (%" 
APR_SIZE_T_FMT
 "!=%" APR_SIZE_T_FMT ")", 
Àn
, (
≠r_size_t
)4),

261 (
Àn
 == 4));

263 
	`≠r_poﬁ_de°roy
(
poﬁ
);

264 
	}
}

266 
abts_suôe
 *
	$ã°esˇ≥
(
abts_suôe
 *
suôe
)

268 
suôe
 = 
	`ADD_SUITE
(suite);

270 
	`abts_run_ã°
(
suôe
, 
ã°_esˇ≥
, 
NULL
);

272  
suôe
;

273 
	}
}

	@test/testfile.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_fûe_öfo.h
"

19 
	~"≠r_√tw‹k_io.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_pﬁl.h
"

23 
	~"≠r_lib.h
"

24 
	~"ã°utû.h
"

26 
	#DIRNAME
 "d©a"

	)

27 
	#FILENAME
 
DIRNAME
 "/fûe_d©afûe.txt"

	)

28 
	#TESTSTR
 "Thi†i†thêfûêd©®fûe."

	)

30 
	#TESTREAD_BLKSIZE
 1024

	)

31 
	#APR_BUFFERSIZE
 4096

	)

35 
	$ã°_›í_n‹ódwrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

37 
≠r_°©us_t
 
rv
;

38 
≠r_fûe_t
 *
thefûe
 = 
NULL
;

40 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
FILENAME
,

41 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
,

42 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

43 
	`ABTS_TRUE
(
tc
, 
rv
 !
APR_SUCCESS
);

44 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EACCES
(
rv
));

45 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
thefûe
);

46 
	}
}

48 
	$ã°_›í_ex˛
(
abts_ˇ£
 *
tc
, *
d©a
)

50 
≠r_°©us_t
 
rv
;

51 
≠r_fûe_t
 *
thefûe
 = 
NULL
;

53 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
FILENAME
,

54 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
 | 
APR_FOPEN_WRITE
,

55 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

56 
	`ABTS_TRUE
(
tc
, 
rv
 !
APR_SUCCESS
);

57 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EEXIST
(
rv
));

58 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
thefûe
);

59 
	}
}

61 
	$ã°_›í_ªad
(
abts_ˇ£
 *
tc
, *
d©a
)

63 
≠r_°©us_t
 
rv
;

64 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

66 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

67 
APR_FOPEN_READ
,

68 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

69 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

70 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûëe°
);

71 
	`≠r_fûe_˛o£
(
fûëe°
);

72 
	}
}

74 
	$lök_exi°ög
(
abts_ˇ£
 *
tc
, *
d©a
)

76 
≠r_°©us_t
 
rv
;

78 
rv
 = 
	`≠r_fûe_lök
("data/file_datafile.txt", "data/file_datafile2.txt");

79 
	`≠r_fûe_ªmove
("d©a/fûe_d©afûe2.txt", 
p
);

80 
	`ABTS_ASSERT
(
tc
, "Couldn'à¸óã h¨dlökÅÿfûe", 
rv
 =
APR_SUCCESS
);

81 
	}
}

83 
	$lök_n⁄exi°ög
(
abts_ˇ£
 *
tc
, *
d©a
)

85 
≠r_°©us_t
 
rv
;

87 
rv
 = 
	`≠r_fûe_lök
("data/does_not_exist.txt", "data/fake.txt");

88 
	`ABTS_ASSERT
(
tc
, "", 
rv
 !
APR_SUCCESS
);

89 
	}
}

91 
	$ã°_ªad
(
abts_ˇ£
 *
tc
, *
d©a
)

93 
≠r_°©us_t
 
rv
;

94 
≠r_size_t
 
nbyãs
 = 256;

95 *
°r
 = 
	`≠r_pˇŒoc
(
p
, 
nbyãs
 + 1);

96 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

98 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

99 
APR_FOPEN_READ
,

100 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

102 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥nögÅe° fûê" 
FILENAME
, 
rv
);

103 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, 
°r
, &
nbyãs
);

104 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

105 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
TESTSTR
), 
nbyãs
);

106 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
°r
);

108 
	`≠r_fûe_˛o£
(
fûëe°
);

109 
	}
}

111 
	$ã°_ªadzîo
(
abts_ˇ£
 *
tc
, *
d©a
)

113 
≠r_°©us_t
 
rv
;

114 
≠r_size_t
 
nbyãs
 = 0;

115 *
°r
 = 
NULL
;

116 
≠r_fûe_t
 *
fûëe°
;

118 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
, 
APR_FOPEN_READ
, 
APR_OS_DEFAULT
, 
p
);

119 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥nögÅe° fûê" 
FILENAME
, 
rv
);

121 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, 
°r
, &
nbyãs
);

122 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

123 
	`ABTS_SIZE_EQUAL
(
tc
, 0, 
nbyãs
);

125 
	`≠r_fûe_˛o£
(
fûëe°
);

126 
	}
}

128 
	$ã°_fûíame
(
abts_ˇ£
 *
tc
, *
d©a
)

130 c⁄° *
°r
;

131 
≠r_°©us_t
 
rv
;

132 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

134 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

135 
APR_FOPEN_READ
,

136 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

137 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥nögÅe° fûê" 
FILENAME
, 
rv
);

139 
rv
 = 
	`≠r_fûe_«me_gë
(&
°r
, 
fûëe°
);

140 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

141 
	`ABTS_STR_EQUAL
(
tc
, 
FILENAME
, 
°r
);

143 
	`≠r_fûe_˛o£
(
fûëe°
);

144 
	}
}

146 
	$ã°_fûe˛o£
(
abts_ˇ£
 *
tc
, *
d©a
)

148 
°r
;

149 
≠r_°©us_t
 
rv
;

150 
≠r_size_t
 
⁄e
 = 1;

151 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

153 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

154 
APR_FOPEN_READ
,

155 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

156 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥nögÅe° fûê" 
FILENAME
, 
rv
);

158 
rv
 = 
	`≠r_fûe_˛o£
(
fûëe°
);

159 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

161 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, &
°r
, &
⁄e
);

162 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EBADF
(
rv
));

163 
	}
}

165 
	$ã°_fûe_ªmove
(
abts_ˇ£
 *
tc
, *
d©a
)

167 
≠r_°©us_t
 
rv
;

168 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

170 
rv
 = 
	`≠r_fûe_ªmove
(
FILENAME
, 
p
);

171 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

173 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
, 
APR_FOPEN_READ
,

174 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

175 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

176 
	}
}

178 
	$ã°_›í_wrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

180 
≠r_°©us_t
 
rv
;

181 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

183 
fûëe°
 = 
NULL
;

184 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

185 
APR_FOPEN_WRITE
,

186 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

187 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOENT
(
rv
));

188 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
fûëe°
);

189 
	}
}

191 
	$ã°_›í_wrôe¸óã
(
abts_ˇ£
 *
tc
, *
d©a
)

193 
≠r_°©us_t
 
rv
;

194 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

196 
fûëe°
 = 
NULL
;

197 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

198 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
,

199 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

200 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

202 
	`≠r_fûe_˛o£
(
fûëe°
);

203 
	}
}

205 
	$ã°_wrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

207 
≠r_°©us_t
 
rv
;

208 
≠r_size_t
 
byãs
 = 
	`°æí
(
TESTSTR
);

209 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

211 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

212 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
,

213 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

214 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

216 
rv
 = 
	`≠r_fûe_wrôe
(
fûëe°
, 
TESTSTR
, &
byãs
);

217 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

219 
	`≠r_fûe_˛o£
(
fûëe°
);

220 
	}
}

222 
	$ã°_›í_ªadwrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

224 
≠r_°©us_t
 
rv
;

225 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

227 
fûëe°
 = 
NULL
;

228 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

229 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
,

230 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

231 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

232 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûëe°
);

234 
	`≠r_fûe_˛o£
(
fûëe°
);

235 
	}
}

237 
	$ã°_£ek
(
abts_ˇ£
 *
tc
, *
d©a
)

239 
≠r_°©us_t
 
rv
;

240 
≠r_off_t
 
off£t
 = 5;

241 
≠r_size_t
 
nbyãs
 = 256;

242 *
°r
 = 
	`≠r_pˇŒoc
(
p
, 
nbyãs
 + 1);

243 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

245 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

246 
APR_FOPEN_READ
,

247 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

248 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥¿ã° fûê" 
FILENAME
, 
rv
);

250 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, 
°r
, &
nbyãs
);

251 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

252 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
TESTSTR
), 
nbyãs
);

253 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
°r
);

255 
	`mem£t
(
°r
, 0, 
nbyãs
 + 1);

257 
rv
 = 
	`≠r_fûe_£ek
(
fûëe°
, 
SEEK_SET
, &
off£t
);

258 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

260 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, 
°r
, &
nbyãs
);

261 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

262 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
TESTSTR
Ë- 5, 
nbyãs
);

263 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
 + 5, 
°r
);

265 
	`≠r_fûe_˛o£
(
fûëe°
);

269 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

270 
APR_FOPEN_READ
 | 
APR_FOPEN_BUFFERED
,

271 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

272 
	`APR_ASSERT_SUCCESS
(
tc
, "O≥¿ã° fûê" 
FILENAME
, 
rv
);

274 
off£t
 = -5;

275 
rv
 = 
	`≠r_fûe_£ek
(
fûëe°
, 
SEEK_END
, &
off£t
);

276 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

277 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
TESTSTR
Ë- 5, 
nbyãs
);

279 
	`mem£t
(
°r
, 0, 
nbyãs
 + 1);

280 
nbyãs
 = 256;

281 
rv
 = 
	`≠r_fûe_ªad
(
fûëe°
, 
°r
, &
nbyãs
);

282 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

283 
	`ABTS_SIZE_EQUAL
(
tc
, 5, 
nbyãs
);

284 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
 + 
	`°æí
(TESTSTRË- 5, 
°r
);

286 
	`≠r_fûe_˛o£
(
fûëe°
);

287 
	}
}

289 
	$ã°_u£rd©a_£t
(
abts_ˇ£
 *
tc
, *
d©a
)

291 
≠r_°©us_t
 
rv
;

292 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

294 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

295 
APR_FOPEN_WRITE
,

296 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

297 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

299 
rv
 = 
	`≠r_fûe_d©a_£t
(
fûëe°
, "This isáÅest",

300 "ã°", 
≠r_poﬁ_˛ónup_nuŒ
);

301 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

302 
	`≠r_fûe_˛o£
(
fûëe°
);

303 
	}
}

305 
	$ã°_u£rd©a_gë
(
abts_ˇ£
 *
tc
, *
d©a
)

307 
≠r_°©us_t
 
rv
;

308 *
ud©a
;

309 *
ã°°r
;

310 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

312 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

313 
APR_FOPEN_WRITE
,

314 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

315 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

317 
rv
 = 
	`≠r_fûe_d©a_£t
(
fûëe°
, "This isáÅest",

318 "ã°", 
≠r_poﬁ_˛ónup_nuŒ
);

319 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

321 
rv
 = 
	`≠r_fûe_d©a_gë
(&
ud©a
, "ã°", 
fûëe°
);

322 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

323 
ã°°r
 = 
ud©a
;

324 
	`ABTS_STR_EQUAL
(
tc
, "Thi†i†®ã°", 
ã°°r
);

326 
	`≠r_fûe_˛o£
(
fûëe°
);

327 
	}
}

329 
	$ã°_u£rd©a_gënokey
(
abts_ˇ£
 *
tc
, *
d©a
)

331 
≠r_°©us_t
 
rv
;

332 *
ã°°r
;

333 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

335 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

336 
APR_FOPEN_WRITE
,

337 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

338 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

340 
rv
 = 
	`≠r_fûe_d©a_gë
(&
ã°°r
, "nokey", 
fûëe°
);

341 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

342 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
ã°°r
);

343 
	`≠r_fûe_˛o£
(
fûëe°
);

344 
	}
}

346 
	$ã°_buf„r_£t_gë
(
abts_ˇ£
 *
tc
, *
d©a
)

348 
≠r_°©us_t
 
rv
;

349 
≠r_size_t
 
bufsize
;

350 
≠r_fûe_t
 *
fûëe°
 = 
NULL
;

351 * 
buf„r
;

353 
rv
 = 
	`≠r_fûe_›í
(&
fûëe°
, 
FILENAME
,

354 
APR_FOPEN_WRITE
 | 
APR_FOPEN_BUFFERED
,

355 
APR_UREAD
 | 
APR_UWRITE
 | 
APR_GREAD
, 
p
);

356 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

358 
bufsize
 = 
	`≠r_fûe_buf„r_size_gë
(
fûëe°
);

359 
	`ABTS_SIZE_EQUAL
(
tc
, 
APR_BUFFERSIZE
, 
bufsize
);

361 
buf„r
 = 
	`≠r_pˇŒoc
(
p
, 10240);

362 
rv
 = 
	`≠r_fûe_buf„r_£t
(
fûëe°
, 
buf„r
, 10240);

363 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

365 
bufsize
 = 
	`≠r_fûe_buf„r_size_gë
(
fûëe°
);

366 
	`ABTS_SIZE_EQUAL
(
tc
, 10240, 
bufsize
);

368 
rv
 = 
	`≠r_fûe_buf„r_£t
(
fûëe°
, 
buf„r
, 12);

369 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

371 
bufsize
 = 
	`≠r_fûe_buf„r_size_gë
(
fûëe°
);

372 
	`ABTS_SIZE_EQUAL
(
tc
, 12, 
bufsize
);

374 
	`≠r_fûe_˛o£
(
fûëe°
);

375 
	}
}

376 
	$ã°_gëc
(
abts_ˇ£
 *
tc
, *
d©a
)

378 
≠r_fûe_t
 *
f
 = 
NULL
;

379 
≠r_°©us_t
 
rv
;

380 
ch
;

382 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
FILENAME
, 
APR_FOPEN_READ
, 0, 
p
);

383 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

385 
	`≠r_fûe_gëc
(&
ch
, 
f
);

386 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

387 
	`ABTS_INT_EQUAL
(
tc
, ()
TESTSTR
[0], ()
ch
);

388 
	`≠r_fûe_˛o£
(
f
);

389 
	}
}

391 
	$ã°_ungëc
(
abts_ˇ£
 *
tc
, *
d©a
)

393 
≠r_fûe_t
 *
f
 = 
NULL
;

394 
≠r_°©us_t
 
rv
;

395 
ch
;

397 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
FILENAME
, 
APR_FOPEN_READ
, 0, 
p
);

398 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

400 
	`≠r_fûe_gëc
(&
ch
, 
f
);

401 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

402 
	`ABTS_INT_EQUAL
(
tc
, ()
TESTSTR
[0], ()
ch
);

404 
	`≠r_fûe_ungëc
('X', 
f
);

405 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

407 
	`≠r_fûe_gëc
(&
ch
, 
f
);

408 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

409 
	`ABTS_INT_EQUAL
(
tc
, 'X', ()
ch
);

411 
	`≠r_fûe_˛o£
(
f
);

412 
	}
}

414 
	$ã°_gës
(
abts_ˇ£
 *
tc
, *
d©a
)

416 
≠r_fûe_t
 *
f
 = 
NULL
;

417 
≠r_°©us_t
 
rv
;

418 *
°r
 = 
	`≠r_∑Œoc
(
p
, 256);

420 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
FILENAME
, 
APR_FOPEN_READ
, 0, 
p
);

421 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

423 
rv
 = 
	`≠r_fûe_gës
(
°r
, 256, 
f
);

428 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

429 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
°r
);

430 
rv
 = 
	`≠r_fûe_gës
(
°r
, 256, 
f
);

431 
	`ABTS_INT_EQUAL
(
tc
, 
APR_EOF
, 
rv
);

432 
	`ABTS_STR_EQUAL
(
tc
, "", 
°r
);

433 
	`≠r_fûe_˛o£
(
f
);

434 
	}
}

436 
	$ã°_gës_buf„ªd
(
abts_ˇ£
 *
tc
, *
d©a
)

438 
≠r_fûe_t
 *
f
 = 
NULL
;

439 
≠r_°©us_t
 
rv
;

440 *
°r
 = 
	`≠r_∑Œoc
(
p
, 256);

443 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
FILENAME
, 
APR_FOPEN_READ
|
APR_FOPEN_BUFFERED
|
APR_FOPEN_XTHREAD
, 0, 
p
);

444 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

446 
rv
 = 
	`≠r_fûe_gës
(
°r
, 256, 
f
);

451 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

452 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
°r
);

453 
rv
 = 
	`≠r_fûe_gës
(
°r
, 256, 
f
);

454 
	`ABTS_INT_EQUAL
(
tc
, 
APR_EOF
, 
rv
);

455 
	`ABTS_STR_EQUAL
(
tc
, "", 
°r
);

456 
	`≠r_fûe_˛o£
(
f
);

457 
	}
}

459 
	$ã°_bigªad
(
abts_ˇ£
 *
tc
, *
d©a
)

461 
≠r_fûe_t
 *
f
 = 
NULL
;

462 
≠r_°©us_t
 
rv
;

463 
buf
[
APR_BUFFERSIZE
 * 2];

464 
≠r_size_t
 
nbyãs
;

468 
rv
 = 
	`≠r_fûe_›í
(&
f
, "data/created_file",

469 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_TRUNCATE
,

470 
APR_UREAD
 | 
APR_UWRITE
, 
p
);

471 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

473 
nbyãs
 = 
APR_BUFFERSIZE
;

474 
	`mem£t
(
buf
, 0xFE, 
nbyãs
);

476 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
buf
, &
nbyãs
);

477 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

478 
	`ABTS_SIZE_EQUAL
(
tc
, 
APR_BUFFERSIZE
, 
nbyãs
);

480 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

481 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

483 
f
 = 
NULL
;

484 
rv
 = 
	`≠r_fûe_›í
(&
f
, "d©a/¸óãd_fûe", 
APR_FOPEN_READ
, 0, 
p
);

485 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

487 
nbyãs
 =  
buf
;

488 
rv
 = 
	`≠r_fûe_ªad
(
f
, 
buf
, &
nbyãs
);

489 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

490 
	`ABTS_SIZE_EQUAL
(
tc
, 
APR_BUFFERSIZE
, 
nbyãs
);

492 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

493 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

495 
rv
 = 
	`≠r_fûe_ªmove
("d©a/¸óãd_fûe", 
p
);

496 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

497 
	}
}

502 
	$ã°_mod_√g
(
abts_ˇ£
 *
tc
, *
d©a
)

504 
≠r_°©us_t
 
rv
;

505 
≠r_fûe_t
 *
f
;

506 c⁄° *
s
;

507 
i
;

508 
≠r_size_t
 
nbyãs
;

509 
buf
[8192];

510 
≠r_off_t
 
cur
;

511 c⁄° *
‚ame
 = "data/modneg.dat";

513 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

514 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
, 
APR_UREAD
 | 
APR_UWRITE
, 
p
);

515 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

517 
s
 = "body56789\n";

518 
nbyãs
 = 
	`°æí
(
s
);

519 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
s
, &
nbyãs
);

520 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

521 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
s
), 
nbyãs
);

523 
i
 = 0; i < 7980; i++) {

524 
s
 = "0";

525 
nbyãs
 = 
	`°æí
(
s
);

526 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
s
, &
nbyãs
);

527 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

528 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
s
), 
nbyãs
);

531 
s
 = "end456789\n";

532 
nbyãs
 = 
	`°æí
(
s
);

533 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
s
, &
nbyãs
);

534 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

535 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
s
), 
nbyãs
);

537 
i
 = 0; i < 10000; i++) {

538 
s
 = "1";

539 
nbyãs
 = 
	`°æí
(
s
);

540 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
s
, &
nbyãs
);

541 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

542 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
s
), 
nbyãs
);

545 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

546 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

548 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
‚ame
, 
APR_FOPEN_READ
, 0, 
p
);

549 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

551 
rv
 = 
	`≠r_fûe_gës
(
buf
, 11, 
f
);

552 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

553 
	`ABTS_STR_EQUAL
(
tc
, "body56789\n", 
buf
);

555 
cur
 = 0;

556 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_CUR
, &
cur
);

557 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

558 
	`ABTS_ASSERT
(
tc
, "FûêPoöã∏Mism©ch,Éx≥˘ed 10", 
cur
 == 10);

560 
nbyãs
 = (
buf
);

561 
rv
 = 
	`≠r_fûe_ªad
(
f
, 
buf
, &
nbyãs
);

562 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

563 
	`ABTS_SIZE_EQUAL
(
tc
, 
nbyãs
, (
buf
));

565 
cur
 = -((
≠r_off_t
)
nbyãs
 - 7980);

566 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_CUR
, &
cur
);

567 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

568 
	`ABTS_ASSERT
(
tc
, "FûêPoöã∏Mism©ch,Éx≥˘ed 7990", 
cur
 == 7990);

570 
rv
 = 
	`≠r_fûe_gës
(
buf
, 11, 
f
);

571 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

572 
	`ABTS_STR_EQUAL
(
tc
, "íd456789\n", 
buf
);

574 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

575 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

577 
rv
 = 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

578 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

579 
	}
}

583 
	$fûe_c⁄ã¡s_equÆ
(
abts_ˇ£
 *
tc
,

584 c⁄° *
‚ame
,

585 c⁄° *
ex≥˘
,

586 
≠r_size_t
 
ex≥˘Àn
)

588 *
a˘uÆ
 = 
	`≠r_∑Œoc
(
p
, 
ex≥˘Àn
);

589 
≠r_fûe_t
 *
f
;

591 
	`APR_ASSERT_SUCCESS
(
tc
, "open file",

592 
	`≠r_fûe_›í
(&
f
, 
‚ame
, 
APR_FOPEN_READ
|
APR_FOPEN_BUFFERED
,

593 0, 
p
));

594 
	`APR_ASSERT_SUCCESS
(
tc
, "read from file",

595 
	`≠r_fûe_ªad_fuŒ
(
f
, 
a˘uÆ
, 
ex≥˘Àn
, 
NULL
));

597 
	`ABTS_ASSERT
(
tc
, "matchedÉxpected file contents",

598 
	`memcmp
(
ex≥˘
, 
a˘uÆ
, 
ex≥˘Àn
) == 0);

600 
	`APR_ASSERT_SUCCESS
(
tc
, "˛o£ fûe", 
	`≠r_fûe_˛o£
(
f
));

601 
	}
}

603 
	#LINE1
 "thi†i†®löêo‡ãxt\n"

	)

604 
	#LINE2
 "thi†i†®£c⁄dÜöêo‡ãxt\n"

	)

606 
	$ã°_puts
(
abts_ˇ£
 *
tc
, *
d©a
)

608 
≠r_fûe_t
 *
f
;

609 c⁄° *
‚ame
 = "data/testputs.txt";

611 
	`APR_ASSERT_SUCCESS
(
tc
, "open file for writing",

612 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

613 
APR_FOPEN_WRITE
|
APR_FOPEN_CREATE
|
APR_FOPEN_TRUNCATE
,

614 
APR_OS_DEFAULT
, 
p
));

616 
	`APR_ASSERT_SUCCESS
(
tc
, "writeÜineÅo file",

617 
	`≠r_fûe_puts
(
LINE1
, 
f
));

618 
	`APR_ASSERT_SUCCESS
(
tc
, "write secondÜineÅo file",

619 
	`≠r_fûe_puts
(
LINE2
, 
f
));

621 
	`APR_ASSERT_SUCCESS
(
tc
, "close for writing",

622 
	`≠r_fûe_˛o£
(
f
));

624 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
LINE1
 
LINE2
, 
	`°æí
(LINE1 LINE2));

625 
	}
}

627 
	$ã°_wrôev
(
abts_ˇ£
 *
tc
, *
d©a
)

629 
≠r_fûe_t
 *
f
;

630 
≠r_size_t
 
nbyãs
;

631 
iovec
 
vec
[5];

632 c⁄° *
‚ame
 = "data/testwritev.txt";

634 
	`APR_ASSERT_SUCCESS
(
tc
, "open file for writing",

635 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

636 
APR_FOPEN_WRITE
|
APR_FOPEN_CREATE
|
APR_FOPEN_TRUNCATE
,

637 
APR_OS_DEFAULT
, 
p
));

639 
vec
[0].
iov_ba£
 = 
LINE1
;

640 
vec
[0].
iov_Àn
 = 
	`°æí
(
LINE1
);

642 
	`APR_ASSERT_SUCCESS
(
tc
, "writev of size 1Åo file",

643 
	`≠r_fûe_wrôev
(
f
, 
vec
, 1, &
nbyãs
));

645 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
LINE1
, 
	`°æí
(LINE1));

647 
vec
[0].
iov_ba£
 = 
LINE1
;

648 
vec
[0].
iov_Àn
 = 
	`°æí
(
LINE1
);

649 
vec
[1].
iov_ba£
 = 
LINE2
;

650 
vec
[1].
iov_Àn
 = 
	`°æí
(
LINE2
);

651 
vec
[2].
iov_ba£
 = 
LINE1
;

652 
vec
[2].
iov_Àn
 = 
	`°æí
(
LINE1
);

653 
vec
[3].
iov_ba£
 = 
LINE1
;

654 
vec
[3].
iov_Àn
 = 
	`°æí
(
LINE1
);

655 
vec
[4].
iov_ba£
 = 
LINE2
;

656 
vec
[4].
iov_Àn
 = 
	`°æí
(
LINE2
);

658 
	`APR_ASSERT_SUCCESS
(
tc
, "writev of size 5Åo file",

659 
	`≠r_fûe_wrôev
(
f
, 
vec
, 5, &
nbyãs
));

661 
	`APR_ASSERT_SUCCESS
(
tc
, "close for writing",

662 
	`≠r_fûe_˛o£
(
f
));

664 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
LINE1
 LINE1 
LINE2
 LINE1 LINE1 LINE2,

665 
	`°æí
(
LINE1
)*4 + såÀn(
LINE2
)*2);

667 
	}
}

669 
	$ã°_wrôev_fuŒ
(
abts_ˇ£
 *
tc
, *
d©a
)

671 
≠r_fûe_t
 *
f
;

672 
≠r_size_t
 
nbyãs
;

673 
iovec
 
vec
[5];

674 c⁄° *
‚ame
 = "data/testwritev_full.txt";

676 
	`APR_ASSERT_SUCCESS
(
tc
, "open file for writing",

677 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

678 
APR_FOPEN_WRITE
|
APR_FOPEN_CREATE
|
APR_FOPEN_TRUNCATE
,

679 
APR_OS_DEFAULT
, 
p
));

681 
vec
[0].
iov_ba£
 = 
LINE1
;

682 
vec
[0].
iov_Àn
 = 
	`°æí
(
LINE1
);

683 
vec
[1].
iov_ba£
 = 
LINE2
;

684 
vec
[1].
iov_Àn
 = 
	`°æí
(
LINE2
);

685 
vec
[2].
iov_ba£
 = 
LINE1
;

686 
vec
[2].
iov_Àn
 = 
	`°æí
(
LINE1
);

687 
vec
[3].
iov_ba£
 = 
LINE1
;

688 
vec
[3].
iov_Àn
 = 
	`°æí
(
LINE1
);

689 
vec
[4].
iov_ba£
 = 
LINE2
;

690 
vec
[4].
iov_Àn
 = 
	`°æí
(
LINE2
);

692 
	`APR_ASSERT_SUCCESS
(
tc
, "writev_full of size 5Åo file",

693 
	`≠r_fûe_wrôev_fuŒ
(
f
, 
vec
, 5, &
nbyãs
));

695 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
LINE1
)*3 + såÀn(
LINE2
)*2, 
nbyãs
);

697 
	`APR_ASSERT_SUCCESS
(
tc
, "close for writing",

698 
	`≠r_fûe_˛o£
(
f
));

700 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
LINE1
 
LINE2
 LINE1 LINE1 LINE2,

701 
	`°æí
(
LINE1
)*3 + såÀn(
LINE2
)*2);

703 
	}
}

705 
	$ã°_wrôev_buf„ªd
(
abts_ˇ£
 *
tc
, *
d©a
)

707 
≠r_fûe_t
 *
f
;

708 
≠r_size_t
 
nbyãs
;

709 
iovec
 
vec
[2];

710 c⁄° *
‚ame
 = "data/testwritev_buffered.dat";

712 
	`APR_ASSERT_SUCCESS
(
tc
, "open file for writing",

713 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

714 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_TRUNCATE
 |

715 
APR_FOPEN_BUFFERED
, 
APR_OS_DEFAULT
, 
p
));

717 
nbyãs
 = 
	`°æí
(
TESTSTR
);

718 
	`APR_ASSERT_SUCCESS
(
tc
, "buffered write",

719 
	`≠r_fûe_wrôe
(
f
, 
TESTSTR
, &
nbyãs
));

721 
vec
[0].
iov_ba£
 = 
LINE1
;

722 
vec
[0].
iov_Àn
 = 
	`°æí
(
LINE1
);

723 
vec
[1].
iov_ba£
 = 
LINE2
;

724 
vec
[1].
iov_Àn
 = 
	`°æí
(
LINE2
);

726 
	`APR_ASSERT_SUCCESS
(
tc
, "writev of size 2Åo file",

727 
	`≠r_fûe_wrôev
(
f
, 
vec
, 2, &
nbyãs
));

729 
	`APR_ASSERT_SUCCESS
(
tc
, "close for writing",

730 
	`≠r_fûe_˛o£
(
f
));

732 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
TESTSTR
 
LINE1
 
LINE2
,

733 
	`°æí
(
TESTSTR
Ë+ såÀn(
LINE1
Ë+ såÀn(
LINE2
));

734 
	}
}

736 
	$ã°_wrôev_buf„ªd_£ek
(
abts_ˇ£
 *
tc
, *
d©a
)

738 
≠r_fûe_t
 *
f
;

739 
≠r_°©us_t
 
rv
;

740 
≠r_off_t
 
off
 = 0;

741 
iovec
 
vec
[3];

742 
≠r_size_t
 
nbyãs
 = 
	`°æí
(
TESTSTR
);

743 *
°r
 = 
	`≠r_pˇŒoc
(
p
, 
nbyãs
+1);

744 c⁄° *
‚ame
 = "data/testwritev_buffered.dat";

746 
	`APR_ASSERT_SUCCESS
(
tc
, "open file for writing",

747 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

748 
APR_FOPEN_WRITE
 | 
APR_FOPEN_READ
 | 
APR_FOPEN_BUFFERED
,

749 
APR_OS_DEFAULT
, 
p
));

751 
rv
 = 
	`≠r_fûe_ªad
(
f
, 
°r
, &
nbyãs
);

752 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

753 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
°r
);

754 
	`APR_ASSERT_SUCCESS
(
tc
, "buf„ªd sìk", 
	`≠r_fûe_£ek
(
f
, 
APR_SET
, &
off
));

756 
vec
[0].
iov_ba£
 = 
LINE1
;

757 
vec
[0].
iov_Àn
 = 
	`°æí
(
LINE1
);

758 
vec
[1].
iov_ba£
 = 
LINE2
;

759 
vec
[1].
iov_Àn
 = 
	`°æí
(
LINE2
);

760 
vec
[2].
iov_ba£
 = 
TESTSTR
;

761 
vec
[2].
iov_Àn
 = 
	`°æí
(
TESTSTR
);

763 
	`APR_ASSERT_SUCCESS
(
tc
, "writev of size 2Åo file",

764 
	`≠r_fûe_wrôev
(
f
, 
vec
, 3, &
nbyãs
));

766 
	`APR_ASSERT_SUCCESS
(
tc
, "close for writing",

767 
	`≠r_fûe_˛o£
(
f
));

769 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
LINE1
 
LINE2
 
TESTSTR
,

770 
	`°æí
(
LINE1
Ë+ såÀn(
LINE2
Ë+ såÀn(
TESTSTR
));

772 
	`APR_ASSERT_SUCCESS
(
tc
, "ªmovêfûe", 
	`≠r_fûe_ªmove
(
‚ame
, 
p
));

773 
	}
}

775 
	$ã°_åunˇã
(
abts_ˇ£
 *
tc
, *
d©a
)

777 
≠r_°©us_t
 
rv
;

778 
≠r_fûe_t
 *
f
;

779 c⁄° *
‚ame
 = "data/testtruncate.dat";

780 c⁄° *
s
;

781 
≠r_size_t
 
nbyãs
;

782 
≠r_föfo_t
 
föfo
;

784 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

786 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

787 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE
, 
APR_UREAD
 | 
APR_UWRITE
, 
p
);

788 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

790 
s
 = "some data";

791 
nbyãs
 = 
	`°æí
(
s
);

792 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
s
, &
nbyãs
);

793 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

794 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
s
), 
nbyãs
);

796 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

797 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

799 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

800 
APR_FOPEN_TRUNCATE
 | 
APR_FOPEN_WRITE
, 
APR_UREAD
 | 
APR_UWRITE
, 
p
);

801 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

803 
rv
 = 
	`≠r_fûe_˛o£
(
f
);

804 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

806 
rv
 = 
	`≠r_°©
(&
föfo
, 
‚ame
, 
APR_FINFO_SIZE
, 
p
);

807 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

808 
	`ABTS_ASSERT
(
tc
, "Fûêsizêmism©ch,Éx≥˘ed 0 (em±y)", 
föfo
.
size
 == 0);

810 
rv
 = 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

811 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

812 
	}
}

814 
	$ã°_bigÂrötf
(
abts_ˇ£
 *
tc
, *
d©a
)

816 
≠r_fûe_t
 *
f
;

817 c⁄° *
‚ame
 = "data/testbigfprintf.dat";

818 *
to_wrôe
;

819 
i
;

821 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

823 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest file",

824 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

825 
APR_FOPEN_CREATE
|
APR_FOPEN_WRITE
,

826 
APR_UREAD
|
APR_UWRITE
, 
p
));

829 
to_wrôe
 = 
	`mÆloc
(
HUGE_STRING_LEN
 + 3);

831 
i
 = 0; i < 
HUGE_STRING_LEN
 + 1; ++i)

832 
to_wrôe
[
i
] = 'A' + i%26;

834 
	`°r˝y
(
to_wrôe
 + 
HUGE_STRING_LEN
, "42");

836 
i
 = 
	`≠r_fûe_¥ötf
(
f
, "%s", 
to_wrôe
);

837 
	`ABTS_INT_EQUAL
(
tc
, 
HUGE_STRING_LEN
 + 2, 
i
);

839 
	`≠r_fûe_˛o£
(
f
);

841 
	`fûe_c⁄ã¡s_equÆ
(
tc
, 
‚ame
, 
to_wrôe
, 
HUGE_STRING_LEN
 + 2);

843 
	`‰ì
(
to_wrôe
);

844 
	}
}

846 
	$ã°_Áû_wrôe_Êush
(
abts_ˇ£
 *
tc
, *
d©a
)

848 
≠r_fûe_t
 *
f
;

849 c⁄° *
‚ame
 = "data/testflush.dat";

850 
≠r_°©us_t
 
rv
;

851 
buf
[
APR_BUFFERSIZE
];

852 
n
;

854 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

856 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest file",

857 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

858 
APR_FOPEN_CREATE
|
APR_FOPEN_READ
|
APR_FOPEN_BUFFERED
,

859 
APR_UREAD
|
APR_UWRITE
, 
p
));

861 
	`mem£t
(
buf
, 'A',  buf);

866 
n
 = 0, 
rv
 = 
APR_SUCCESS
;Ç < 4 &&Ñv == APR_SUCCESS;Ç++) {

867 
≠r_size_t
 
byãs
 =  
buf
;

868 
rv
 = 
	`≠r_fûe_wrôe
(
f
, 
buf
, &
byãs
);

871 
	`ABTS_ASSERT
(
tc
, "failedÅo writeÅoÑead-only buffered fd",

872 
rv
 !
APR_SUCCESS
);

874 
	`≠r_fûe_˛o£
(
f
);

875 
	}
}

877 
	$ã°_Áû_ªad_Êush
(
abts_ˇ£
 *
tc
, *
d©a
)

879 
≠r_fûe_t
 *
f
;

880 c⁄° *
‚ame
 = "data/testflush.dat";

881 
≠r_°©us_t
 
rv
;

882 
buf
[2];

884 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

886 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest file",

887 
	`≠r_fûe_›í
(&
f
, 
‚ame
,

888 
APR_FOPEN_CREATE
|
APR_FOPEN_READ
|
APR_FOPEN_BUFFERED
,

889 
APR_UREAD
|
APR_UWRITE
, 
p
));

892 
	`APR_ASSERT_SUCCESS
(
tc
, "buffered write should succeed",

893 
	`≠r_fûe_puts
("hñlo", 
f
));

898 
rv
 = 
	`≠r_fûe_ªad_fuŒ
(
f
, 
buf
, 2, 
NULL
);

900 
	`ABTS_ASSERT
(
tc
, "read should flush buffered writeánd fail",

901 
rv
 !
APR_SUCCESS
 &&Ñv !
APR_EOF
);

904 
rv
 = 
	`≠r_fûe_gës
(
buf
, 2, 
f
);

906 
	`ABTS_ASSERT
(
tc
, "gets should flush buffered writeánd fail",

907 
rv
 !
APR_SUCCESS
 &&Ñv !
APR_EOF
);

911 
≠r_off_t
 
off£t
 = 0;

913 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_SET
, &
off£t
);

916 
	`ABTS_ASSERT
(
tc
, "seek should flush buffered writeánd fail",

917 
rv
 !
APR_SUCCESS
 &&Ñv !
APR_EOF
);

919 
	`≠r_fûe_˛o£
(
f
);

920 
	}
}

922 
	$ã°_xthªad
(
abts_ˇ£
 *
tc
, *
d©a
)

924 
≠r_fûe_t
 *
f
;

925 c⁄° *
‚ame
 = "data/testxthread.dat";

926 
≠r_°©us_t
 
rv
;

927 
≠r_öt32_t
 
Êags
 = 
APR_FOPEN_CREATE
|
APR_FOPEN_READ
|
APR_FOPEN_WRITE
|
APR_FOPEN_APPEND
|
APR_FOPEN_XTHREAD
;

928 
buf
[128] = { 0 };

934 
	`≠r_fûe_ªmove
(
‚ame
, 
p
);

936 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest file",

937 
	`≠r_fûe_›í
(&
f
, 
‚ame
, 
Êags
,

938 
APR_UREAD
|
APR_UWRITE
, 
p
));

940 
	`APR_ASSERT_SUCCESS
(
tc
, "write should succeed",

941 
	`≠r_fûe_puts
("hñlo", 
f
));

943 
	`≠r_fûe_˛o£
(
f
);

945 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest file",

946 
	`≠r_fûe_›í
(&
f
, 
‚ame
, 
Êags
,

947 
APR_UREAD
|
APR_UWRITE
, 
p
));

951 
≠r_off_t
 
off£t
 = 0;

953 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_END
, &
off£t
);

954 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

957 
	`APR_ASSERT_SUCCESS
(
tc
, "more writes should succeed",

958 
	`≠r_fûe_puts
("w‹ld", 
f
));

962 
≠r_off_t
 
off£t
 = 0;

964 
rv
 = 
	`≠r_fûe_£ek
(
f
, 
APR_SET
, &
off£t
);

965 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

968 
	`≠r_fûe_ªad_fuŒ
(
f
, 
buf
, (buf), 
NULL
);

970 
	`ABTS_STR_EQUAL
(
tc
, "hñlow‹ld", 
buf
);

972 
	`≠r_fûe_˛o£
(
f
);

973 
	}
}

975 
abts_suôe
 *
	$ã°fûe
(
abts_suôe
 *
suôe
)

977 
suôe
 = 
	`ADD_SUITE
(suite)

979 
	`abts_run_ã°
(
suôe
, 
ã°_›í_n‹ódwrôe
, 
NULL
);

980 
	`abts_run_ã°
(
suôe
, 
ã°_›í_ex˛
, 
NULL
);

981 
	`abts_run_ã°
(
suôe
, 
ã°_›í_ªad
, 
NULL
);

982 
	`abts_run_ã°
(
suôe
, 
ã°_›í_ªadwrôe
, 
NULL
);

983 
	`abts_run_ã°
(
suôe
, 
lök_exi°ög
, 
NULL
);

984 
	`abts_run_ã°
(
suôe
, 
lök_n⁄exi°ög
, 
NULL
);

985 
	`abts_run_ã°
(
suôe
, 
ã°_ªad
, 
NULL
);

986 
	`abts_run_ã°
(
suôe
, 
ã°_ªadzîo
, 
NULL
);

987 
	`abts_run_ã°
(
suôe
, 
ã°_£ek
, 
NULL
);

988 
	`abts_run_ã°
(
suôe
, 
ã°_fûíame
, 
NULL
);

989 
	`abts_run_ã°
(
suôe
, 
ã°_fûe˛o£
, 
NULL
);

990 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_ªmove
, 
NULL
);

991 
	`abts_run_ã°
(
suôe
, 
ã°_›í_wrôe
, 
NULL
);

992 
	`abts_run_ã°
(
suôe
, 
ã°_›í_wrôe¸óã
, 
NULL
);

993 
	`abts_run_ã°
(
suôe
, 
ã°_wrôe
, 
NULL
);

994 
	`abts_run_ã°
(
suôe
, 
ã°_u£rd©a_£t
, 
NULL
);

995 
	`abts_run_ã°
(
suôe
, 
ã°_u£rd©a_gë
, 
NULL
);

996 
	`abts_run_ã°
(
suôe
, 
ã°_u£rd©a_gënokey
, 
NULL
);

997 
	`abts_run_ã°
(
suôe
, 
ã°_gëc
, 
NULL
);

998 
	`abts_run_ã°
(
suôe
, 
ã°_ungëc
, 
NULL
);

999 
	`abts_run_ã°
(
suôe
, 
ã°_gës
, 
NULL
);

1000 
	`abts_run_ã°
(
suôe
, 
ã°_gës_buf„ªd
, 
NULL
);

1001 
	`abts_run_ã°
(
suôe
, 
ã°_puts
, 
NULL
);

1002 
	`abts_run_ã°
(
suôe
, 
ã°_wrôev
, 
NULL
);

1003 
	`abts_run_ã°
(
suôe
, 
ã°_wrôev_fuŒ
, 
NULL
);

1004 
	`abts_run_ã°
(
suôe
, 
ã°_wrôev_buf„ªd
, 
NULL
);

1005 
	`abts_run_ã°
(
suôe
, 
ã°_wrôev_buf„ªd_£ek
, 
NULL
);

1006 
	`abts_run_ã°
(
suôe
, 
ã°_bigªad
, 
NULL
);

1007 
	`abts_run_ã°
(
suôe
, 
ã°_mod_√g
, 
NULL
);

1008 
	`abts_run_ã°
(
suôe
, 
ã°_åunˇã
, 
NULL
);

1009 
	`abts_run_ã°
(
suôe
, 
ã°_bigÂrötf
, 
NULL
);

1010 
	`abts_run_ã°
(
suôe
, 
ã°_Áû_wrôe_Êush
, 
NULL
);

1011 
	`abts_run_ã°
(
suôe
, 
ã°_Áû_ªad_Êush
, 
NULL
);

1012 
	`abts_run_ã°
(
suôe
, 
ã°_buf„r_£t_gë
, 
NULL
);

1013 
	`abts_run_ã°
(
suôe
, 
ã°_xthªad
, 
NULL
);

1015  
suôe
;

1016 
	}
}

	@test/testfilecopy.c

17 
	~"ã°utû.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_fûe_öfo.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_poﬁs.h
"

23 
	$c›y_hñ≥r
(
abts_ˇ£
 *
tc
, c⁄° *
‰om
, c⁄° * 
to
,

24 
≠r_fûïîms_t
 
≥rms
, 
≠≥nd
, 
≠r_poﬁ_t
 *
p
)

26 
≠r_°©us_t
 
rv
;

27 
≠r_°©us_t
 
de°_rv
;

28 
≠r_föfo_t
 
c›y
;

29 
≠r_föfo_t
 
‹ig
;

30 
≠r_föfo_t
 
de°
;

32 
de°_rv
 = 
	`≠r_°©
(&
de°
, 
to
, 
APR_FINFO_SIZE
, 
p
);

34 i‡(!
≠≥nd
) {

35 
rv
 = 
	`≠r_fûe_c›y
(
‰om
, 
to
, 
≥rms
, 
p
);

38 
rv
 = 
	`≠r_fûe_≠≥nd
(
‰om
, 
to
, 
≥rms
, 
p
);

40 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ c›yög fûe", 
rv
);

42 
rv
 = 
	`≠r_°©
(&
‹ig
, 
‰om
, 
APR_FINFO_SIZE
, 
p
);

43 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à°© origöÆ fûe", 
rv
);

45 
rv
 = 
	`≠r_°©
(&
c›y
, 
to
, 
APR_FINFO_SIZE
, 
p
);

46 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à°© c›y fûe", 
rv
);

48 i‡(!
≠≥nd
) {

49 
	`ABTS_ASSERT
(
tc
, "Fûêsizêdif„rs", 
‹ig
.
size
 =
c›y
.size);

52 
	`ABTS_ASSERT
(
tc
, "File size differs",

53 ((
de°_rv
 =
APR_SUCCESS
)

54 ? 
de°
.
size
 : 0Ë+ 
‹ig
.sizê=
c›y
.size);

56 
	}
}

58 
	$c›y_sh‹t_fûe
(
abts_ˇ£
 *
tc
, *
d©a
)

60 
≠r_°©us_t
 
rv
;

63 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

65 
	`c›y_hñ≥r
(
tc
, "data/file_datafile.txt", "data/file_copy.txt",

66 
APR_FILE_SOURCE_PERMS
, 0, 
p
);

67 
rv
 = 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

68 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àªmovêc›y fûe", 
rv
);

69 
	}
}

71 
	$c›y_ovî_exi°ög
(
abts_ˇ£
 *
tc
, *
d©a
)

73 
≠r_°©us_t
 
rv
;

76 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

82 
	`c›y_hñ≥r
(
tc
, "data/file_datafile.txt", "data/file_copy.txt",

83 
APR_FILE_SOURCE_PERMS
, 0, 
p
);

85 
	`c›y_hñ≥r
(
tc
, "data/mmap_datafile.txt", "data/file_copy.txt",

86 
APR_FILE_SOURCE_PERMS
, 0, 
p
);

88 
rv
 = 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

89 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àªmovêc›y fûe", 
rv
);

90 
	}
}

92 
	$≠≥nd_n⁄exi°
(
abts_ˇ£
 *
tc
, *
d©a
)

94 
≠r_°©us_t
 
rv
;

97 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

99 
	`c›y_hñ≥r
(
tc
, "data/file_datafile.txt", "data/file_copy.txt",

100 
APR_FILE_SOURCE_PERMS
, 0, 
p
);

101 
rv
 = 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

102 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àªmovêc›y fûe", 
rv
);

103 
	}
}

105 
	$≠≥nd_exi°
(
abts_ˇ£
 *
tc
, *
d©a
)

107 
≠r_°©us_t
 
rv
;

110 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

116 
	`c›y_hñ≥r
(
tc
, "data/file_datafile.txt", "data/file_copy.txt",

117 
APR_FILE_SOURCE_PERMS
, 0, 
p
);

119 
	`c›y_hñ≥r
(
tc
, "data/mmap_datafile.txt", "data/file_copy.txt",

120 
APR_FILE_SOURCE_PERMS
, 1, 
p
);

122 
rv
 = 
	`≠r_fûe_ªmove
("d©a/fûe_c›y.txt", 
p
);

123 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àªmovêc›y fûe", 
rv
);

124 
	}
}

126 
abts_suôe
 *
	$ã°fûec›y
(
abts_suôe
 *
suôe
)

128 
suôe
 = 
	`ADD_SUITE
(suite)

130 
	`abts_run_ã°
(
suôe
, 
c›y_sh‹t_fûe
, 
NULL
);

131 
	`abts_run_ã°
(
suôe
, 
c›y_ovî_exi°ög
, 
NULL
);

133 
	`abts_run_ã°
(
suôe
, 
≠≥nd_n⁄exi°
, 
NULL
);

134 
	`abts_run_ã°
(
suôe
, 
≠≥nd_exi°
, 
NULL
);

136  
suôe
;

137 
	}
}

	@test/testfileinfo.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_fûe_öfo.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_pﬁl.h
"

23 
	~"≠r_lib.h
"

24 
	~"ã°utû.h
"

26 
	#FILENAME
 "d©a/fûe_d©afûe.txt"

	)

27 
	#NEWFILENAME
 "d©a/√w_d©afûe.txt"

	)

28 
	#NEWFILEDATA
 "Thi†i†√wÅexàöáÇew fûe."

	)

30 c⁄° 
	svõw_fûeöfo


32 
≠r_öt32_t
 
	mbôs
;

33 *
	mdes¸ùti⁄
;

34 } 
	gvfi
[] = {

35 {
APR_FINFO_MTIME
, "MTIME"},

36 {
APR_FINFO_CTIME
, "CTIME"},

37 {
APR_FINFO_ATIME
, "ATIME"},

38 {
APR_FINFO_SIZE
, "SIZE"},

39 {
APR_FINFO_DEV
, "DEV"},

40 {
APR_FINFO_INODE
, "INODE"},

41 {
APR_FINFO_NLINK
, "NLINK"},

42 {
APR_FINFO_TYPE
, "TYPE"},

43 {
APR_FINFO_USER
, "USER"},

44 {
APR_FINFO_GROUP
, "GROUP"},

45 {
APR_FINFO_UPROT
, "UPROT"},

46 {
APR_FINFO_GPROT
, "GPROT"},

47 {
APR_FINFO_WPROT
, "WPROT"},

48 {0, 
NULL
}

51 
	$föfo_equÆ
(
abts_ˇ£
 *
tc
, 
≠r_föfo_t
 *
f1
,á¥_föfo_à*
f2
)

54 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo mustÑeturn APR_FINFO_TYPE",

55 (
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_TYPE
));

56 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in filetype",

57 
f1
->
fûëy≥
 =
f2
->filetype);

58 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo mustÑeturn APR_FINFO_SIZE",

59 (
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_SIZE
));

60 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in size",

61 
f1
->
size
 =
f2
->size);

62 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo mustÑeturn APR_FINFO_ATIME",

63 (
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_ATIME
));

64 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ inátime",

65 
f1
->
©ime
 =
f2
->atime);

66 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo mustÑeturn APR_FINFO_MTIME",

67 (
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_MTIME
));

68 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in mtime",

69 
f1
->
mtime
 =
f2
->mtime);

70 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo mustÑeturn APR_FINFO_CTIME",

71 (
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_CTIME
));

72 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in ctime",

73 
f1
->
˘ime
 =
f2
->ctime);

75 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_NAME
)

76 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ inÇame",

77 !
	`°rcmp
(
f1
->
«me
, 
f2
->name));

78 i‡(
f1
->
‚ame
 && 
f2
->fname)

79 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in fname",

80 !
	`°rcmp
(
f1
->
‚ame
, 
f2
->fname));

83 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_USER
)

84 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in user",

85 !
	`≠r_uid_com∑ª
(
f1
->
u£r
, 
f2
->user));

86 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_GROUP
)

87 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in group",

88 !
	`≠r_gid_com∑ª
(
f1
->
group
, 
f2
->group));

89 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_INODE
)

90 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in inode",

91 
f1
->
öode
 =
f2
->inode);

92 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_DEV
)

93 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in device",

94 
f1
->
devi˚
 =
f2
->device);

95 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_NLINK
)

96 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ inÇlink",

97 
f1
->
∆ök
 =
f2
->nlink);

98 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_CSIZE
)

99 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ in csize",

100 
f1
->
csize
 =
f2
->csize);

101 i‡(
f1
->
vÆid
 & 
f2
->vÆid & 
APR_FINFO_PROT
)

102 
	`ABTS_ASSERT
(
tc
, "apr_statándápr_getfileinfo differ inÖrotection",

103 
f1
->
¥Ÿe˘i⁄
 =
f2
->protection);

104 
	}
}

106 
	$ã°_öfo_gë
(
abts_ˇ£
 *
tc
, *
d©a
)

108 
≠r_fûe_t
 *
thefûe
;

109 
≠r_föfo_t
 
föfo
;

110 
≠r_°©us_t
 
rv
;

112 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
FILENAME
, 
APR_FOPEN_READ
, 
APR_OS_DEFAULT
, 
p
);

113 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

115 
rv
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_NORM
, 
thefûe
);

116 i‡(
	`APR_STATUS_IS_INCOMPLETE
(
rv
)) {

117 *
°r
;

118 
i
;

119 
°r
 = 
	`≠r_p°rdup
(
p
, "APR_INCOMPLETE: Missing ");

120 
i
 = 0; 
vfi
[i].
bôs
; ++i) {

121 i‡(
vfi
[
i
].
bôs
 & ~
föfo
.
vÆid
) {

122 
°r
 = 
	`≠r_p°rˇt
(
p
, så, 
vfi
[
i
].
des¸ùti⁄
, " ", 
NULL
);

125 
	`ABTS_FAIL
(
tc
, 
°r
);

127 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

128 
	`≠r_fûe_˛o£
(
thefûe
);

129 
	}
}

131 
	$ã°_°©
(
abts_ˇ£
 *
tc
, *
d©a
)

133 
≠r_föfo_t
 
föfo
;

134 
≠r_°©us_t
 
rv
;

136 
rv
 = 
	`≠r_°©
(&
föfo
, 
FILENAME
, 
APR_FINFO_NORM
, 
p
);

137 i‡(
	`APR_STATUS_IS_INCOMPLETE
(
rv
)) {

138 *
°r
;

139 
i
;

140 
°r
 = 
	`≠r_p°rdup
(
p
, "APR_INCOMPLETE: Missing ");

141 
i
 = 0; 
vfi
[i].
bôs
; ++i) {

142 i‡(
vfi
[
i
].
bôs
 & ~
föfo
.
vÆid
) {

143 
°r
 = 
	`≠r_p°rˇt
(
p
, så, 
vfi
[
i
].
des¸ùti⁄
, " ", 
NULL
);

146 
	`ABTS_FAIL
(
tc
, 
°r
);

148 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

149 
	}
}

151 
	$ã°_°©_eq_föfo
(
abts_ˇ£
 *
tc
, *
d©a
)

153 
≠r_fûe_t
 *
thefûe
;

154 
≠r_föfo_t
 
föfo
;

155 
≠r_föfo_t
 
°©_föfo
;

156 
≠r_°©us_t
 
rv
;

158 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
FILENAME
, 
APR_FOPEN_READ
, 
APR_OS_DEFAULT
, 
p
);

159 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

160 
rv
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_NORM
, 
thefûe
);

166 
rv
 = 
	`≠r_°©
(&
°©_föfo
, 
FILENAME
, 
APR_FINFO_NORM
, 
p
);

167 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

169 
	`≠r_fûe_˛o£
(
thefûe
);

171 
	`föfo_equÆ
(
tc
, &
°©_föfo
, &
föfo
);

172 
	}
}

174 
	$ã°_buf„ªd_wrôe_size
(
abts_ˇ£
 *
tc
, *
d©a
)

176 c⁄° 
≠r_size_t
 
d©a_Àn
 = 
	`°æí
(
NEWFILEDATA
);

177 
≠r_fûe_t
 *
thefûe
;

178 
≠r_föfo_t
 
föfo
;

179 
≠r_°©us_t
 
rv
;

180 
≠r_size_t
 
byãs
;

182 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
NEWFILENAME
,

183 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_TRUNCATE


184 | 
APR_FOPEN_BUFFERED
 | 
APR_FOPEN_DELONCLOSE
,

185 
APR_OS_DEFAULT
, 
p
);

186 
	`APR_ASSERT_SUCCESS
(
tc
, "›í fûe", 
rv
);

193 
byãs
 = 
d©a_Àn
;

194 
rv
 = 
	`≠r_fûe_wrôe
(
thefûe
, 
NEWFILEDATA
, &
byãs
);

195 
	`APR_ASSERT_SUCCESS
(
tc
, "wrôêfûêc⁄ã¡s", 
rv
);

196 
	`ABTS_TRUE
(
tc
, 
d©a_Àn
 =
byãs
);

198 
rv
 = 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_SIZE
, 
thefûe
);

199 
	`APR_ASSERT_SUCCESS
(
tc
, "gë fûêsize", 
rv
);

200 
	`ABTS_TRUE
(
tc
, 
byãs
 =(
≠r_size_t
Ë
föfo
.
size
);

201 
	`≠r_fûe_˛o£
(
thefûe
);

202 
	}
}

204 
	$ã°_mtime_£t
(
abts_ˇ£
 *
tc
, *
d©a
)

206 
≠r_fûe_t
 *
thefûe
;

207 
≠r_föfo_t
 
föfo
;

208 
≠r_time_t
 
ïoch
 = 0;

209 
≠r_°©us_t
 
rv
;

215 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
NEWFILENAME
,

216 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_TRUNCATE


217 | 
APR_FOPEN_BUFFERED
 | 
APR_FOPEN_DELONCLOSE
,

218 
APR_OS_DEFAULT
, 
p
);

219 
	`APR_ASSERT_SUCCESS
(
tc
, "›í fûe", 
rv
);

222 
rv
 = 
	`≠r_°©
(&
föfo
, 
NEWFILENAME
, 
APR_FINFO_MTIME
, 
p
);

223 i‡(
	`APR_STATUS_IS_INCOMPLETE
(
rv
)) {

224 *
°r
;

225 
i
;

226 
°r
 = 
	`≠r_p°rdup
(
p
, "APR_INCOMPLETE: Missing ");

227 
i
 = 0; 
vfi
[i].
bôs
; ++i) {

228 i‡(
vfi
[
i
].
bôs
 & ~
föfo
.
vÆid
) {

229 
°r
 = 
	`≠r_p°rˇt
(
p
, så, 
vfi
[
i
].
des¸ùti⁄
, " ", 
NULL
);

232 
	`ABTS_FAIL
(
tc
, 
°r
);

234 
	`APR_ASSERT_SUCCESS
(
tc
, "gë inôü»mtime", 
rv
);

235 
	`ABTS_TRUE
(
tc
, 
föfo
.
mtime
 !
ïoch
);

241 
rv
 = 
	`≠r_fûe_mtime_£t
(
NEWFILENAME
, 
ïoch
, 
p
);

242 
	`APR_ASSERT_SUCCESS
(
tc
, "£àmtime", 
rv
);

244 
rv
 = 
	`≠r_°©
(&
föfo
, 
NEWFILENAME
, 
APR_FINFO_MTIME
, 
p
);

245 
	`APR_ASSERT_SUCCESS
(
tc
, "gë modifõd mtime", 
rv
);

246 
	`ABTS_TRUE
(
tc
, 
föfo
.
mtime
 =
ïoch
);

248 
	`≠r_fûe_˛o£
(
thefûe
);

249 
	}
}

251 
abts_suôe
 *
	$ã°fûeöfo
(
abts_suôe
 *
suôe
)

253 
suôe
 = 
	`ADD_SUITE
(suite)

255 
	`abts_run_ã°
(
suôe
, 
ã°_öfo_gë
, 
NULL
);

256 
	`abts_run_ã°
(
suôe
, 
ã°_°©
, 
NULL
);

257 
	`abts_run_ã°
(
suôe
, 
ã°_°©_eq_föfo
, 
NULL
);

258 
	`abts_run_ã°
(
suôe
, 
ã°_buf„ªd_wrôe_size
, 
NULL
);

259 
	`abts_run_ã°
(
suôe
, 
ã°_mtime_£t
, 
NULL
);

261  
suôe
;

262 
	}
}

	@test/testflock.c

17 
	~"ã°Êock.h
"

18 
	~"ã°utû.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_thªad_¥oc.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"≠r_fûe_öfo.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_°rögs.h
"

26 
	$œunch_ªadî
(
abts_ˇ£
 *
tc
)

28 
≠r_¥oc_t
 
¥oc
 = {0};

29 
≠r_¥oˇâr_t
 *
¥oˇâr
;

30 c⁄° *
¨gs
[2];

31 
≠r_°©us_t
 
rv
;

32 
≠r_exô_why_e
 
why
;

33 
exôcode
;

35 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

36 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à¸óãÖroˇâr", 
rv
);

38 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_NO_PIPE
, APR_NO_PIPE,

39 
APR_NO_PIPE
);

40 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àiÿöÖroˇâr", 
rv
);

42 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
¥oˇâr
, 
APR_PROGRAM_ENV
);

43 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

45 
rv
 = 
	`≠r_¥oˇâr_îr‹_check_£t
(
¥oˇâr
, 1);

46 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àîr‹ check i¿¥oˇâr", 
rv
);

48 
¨gs
[0] = "åyªad" 
EXTENSION
;

49 
¨gs
[1] = 
NULL
;

50 
rv
 = 
	`≠r_¥oc_¸óã
(&
¥oc
, 
TESTBINPATH
 "åyªad" 
EXTENSION
, 
¨gs
, 
NULL
, 
¥oˇâr
, 
p
);

51 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àœunchÖrogøm", 
rv
);

53 
	`ABTS_ASSERT
(
tc
, "wait for childÖrocess",

54 
	`≠r_¥oc_waô
(&
¥oc
, &
exôcode
, &
why
, 
APR_WAIT
Ë=
APR_CHILD_DONE
);

56 
	`ABTS_ASSERT
(
tc
, "chûdÅîmö©edÇ‹mÆly", 
why
 =
APR_PROC_EXIT
);

57  
exôcode
;

58 
	}
}

60 
	$ã°_wôhlock
(
abts_ˇ£
 *
tc
, *
d©a
)

62 
≠r_fûe_t
 *
fûe
;

63 
≠r_°©us_t
 
rv
;

64 
code
;

66 
rv
 = 
	`≠r_fûe_›í
(&
fûe
, 
TESTFILE
, 
APR_FOPEN_WRITE
|
APR_FOPEN_CREATE
,

67 
APR_OS_DEFAULT
, 
p
);

68 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ cª©êfûe.", 
rv
);

69 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe
);

71 
rv
 = 
	`≠r_fûe_lock
(
fûe
, 
APR_FLOCK_EXCLUSIVE
);

72 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸÜockÅhêfûe.", 
rv
);

73 
	`ABTS_PTR_NOTNULL
(
tc
, 
fûe
);

75 
code
 = 
	`œunch_ªadî
(
tc
);

76 
	`ABTS_INT_EQUAL
(
tc
, 
FAILED_READ
, 
code
);

78 (Ë
	`≠r_fûe_˛o£
(
fûe
);

79 
	}
}

81 
	$ã°_wôhouéock
(
abts_ˇ£
 *
tc
, *
d©a
)

83 
code
;

85 
code
 = 
	`œunch_ªadî
(
tc
);

86 
	`ABTS_INT_EQUAL
(
tc
, 
SUCCESSFUL_READ
, 
code
);

87 
	}
}

89 
	$ªmove_lockfûe
(
abts_ˇ£
 *
tc
, *
d©a
)

91 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'tÑemoveÜock file.",

92 
	`≠r_fûe_ªmove
(
TESTFILE
, 
p
));

93 
	}
}

95 
abts_suôe
 *
	$ã°Êock
(
abts_suôe
 *
suôe
)

97 
suôe
 = 
	`ADD_SUITE
(suite)

99 
	`abts_run_ã°
(
suôe
, 
ã°_wôhlock
, 
NULL
);

100 
	`abts_run_ã°
(
suôe
, 
ã°_wôhouéock
, 
NULL
);

101 
	`abts_run_ã°
(
suôe
, 
ªmove_lockfûe
, 
NULL
);

103  
suôe
;

104 
	}
}

	@test/testflock.h

17 #i‚de‡
TESTFLOCK


18 
	#TESTFLOCK


	)

20 
	#TESTFILE
 "d©a/ã°fûe.lock"

	)

22 
	#FAILED_READ
 0

	)

23 
	#SUCCESSFUL_READ
 1

	)

24 
	#UNEXPECTED_ERROR
 2

	)

	@test/testfmt.c

17 
	~"ã°utû.h
"

18 
	~"≠r.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_°rögs.h
"

22 
	$ssize_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

24 
buf
[100];

25 
≠r_ssize_t
 
v¨
 = 0;

27 
	`•rötf
(
buf
, "%" 
APR_SSIZE_T_FMT
, 
v¨
);

28 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

29 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_SSIZE_T_FMT
, 
v¨
);

30 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

31 
	}
}

33 
	$size_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

35 
buf
[100];

36 
≠r_size_t
 
v¨
 = 0;

38 
	`•rötf
(
buf
, "%" 
APR_SIZE_T_FMT
, 
v¨
);

39 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

40 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_SIZE_T_FMT
, 
v¨
);

41 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

42 
	}
}

44 
	$time_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

46 
buf
[100];

47 
≠r_time_t
 
v¨
 = 1;

49 
	`•rötf
(
buf
, "%" 
APR_TIME_T_FMT
, 
v¨
);

50 
	`ABTS_STR_EQUAL
(
tc
, "1", 
buf
);

51 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_TIME_T_FMT
, 
v¨
);

52 
	`ABTS_STR_EQUAL
(
tc
, "1", 
buf
);

53 
	}
}

55 
	$off_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

57 
buf
[100];

58 
≠r_off_t
 
v¨
 = 0;

60 
	`•rötf
(
buf
, "%" 
APR_OFF_T_FMT
, 
v¨
);

61 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

62 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_OFF_T_FMT
, 
v¨
);

63 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

64 
	}
}

66 
	$pid_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

68 
buf
[100];

69 
pid_t
 
v¨
 = 0;

71 
	`•rötf
(
buf
, "%" 
APR_PID_T_FMT
, 
v¨
);

72 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

73 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_PID_T_FMT
, 
v¨
);

74 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

75 
	}
}

77 
	$öt64_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

79 
buf
[100];

80 
≠r_öt64_t
 
v¨
 = 0;

82 
	`•rötf
(
buf
, "%" 
APR_INT64_T_FMT
, 
v¨
);

83 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

84 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_INT64_T_FMT
, 
v¨
);

85 
	`ABTS_STR_EQUAL
(
tc
, "0", 
buf
);

86 
	}
}

88 
	$uöt64_t_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

90 
buf
[100];

91 
≠r_uöt64_t
 
v¨
 = 
	`APR_UINT64_C
(14000000);

93 
	`•rötf
(
buf
, "%" 
APR_UINT64_T_FMT
, 
v¨
);

94 
	`ABTS_STR_EQUAL
(
tc
, "14000000", 
buf
);

95 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_UINT64_T_FMT
, 
v¨
);

96 
	`ABTS_STR_EQUAL
(
tc
, "14000000", 
buf
);

97 
	}
}

99 
	$uöt64_t_hex_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

101 
buf
[100];

102 
≠r_uöt64_t
 
v¨
 = 
	`APR_UINT64_C
(14000000);

104 
	`•rötf
(
buf
, "%" 
APR_UINT64_T_HEX_FMT
, 
v¨
);

105 
	`ABTS_STR_EQUAL
(
tc
, "d59f80", 
buf
);

106 
	`≠r_¢¥ötf
(
buf
, (buf), "%" 
APR_UINT64_T_HEX_FMT
, 
v¨
);

107 
	`ABTS_STR_EQUAL
(
tc
, "d59f80", 
buf
);

108 
	}
}

110 
	$m‹e_öt64_fmts
(
abts_ˇ£
 *
tc
, *
d©a
)

112 
buf
[100];

113 
≠r_öt64_t
 
i
 = 
	`APR_INT64_C
(-42);

114 
≠r_öt64_t
 
ibig
 = 
	`APR_INT64_C
(-314159265358979323);

115 
≠r_uöt64_t
 
ui
 = 
	`APR_UINT64_C
(42);

116 
≠r_uöt64_t
 
big
 = 
	`APR_UINT64_C
(10267677267010969076);

118 
	`≠r_¢¥ötf
(
buf
,  buf, "%" 
APR_INT64_T_FMT
, 
i
);

119 
	`ABTS_STR_EQUAL
(
tc
, "-42", 
buf
);

121 
	`≠r_¢¥ötf
(
buf
,  buf, "%" 
APR_UINT64_T_FMT
, 
ui
);

122 
	`ABTS_STR_EQUAL
(
tc
, "42", 
buf
);

124 
	`≠r_¢¥ötf
(
buf
,  buf, "%" 
APR_UINT64_T_FMT
, 
big
);

125 
	`ABTS_STR_EQUAL
(
tc
, "10267677267010969076", 
buf
);

127 
	`≠r_¢¥ötf
(
buf
,  buf, "%" 
APR_INT64_T_FMT
, 
ibig
);

128 
	`ABTS_STR_EQUAL
(
tc
, "-314159265358979323", 
buf
);

129 
	}
}

131 
	$îr‹_fmt
(
abts_ˇ£
 *
tc
, *
d©a
)

133 
ebuf
[150], 
sbuf
[150], *
s
;

134 
≠r_°©us_t
 
rv
;

136 
rv
 = 
APR_SUCCESS
;

137 
	`≠r_°ªº‹
(
rv
, 
ebuf
, Ébuf);

138 
	`≠r_¢¥ötf
(
sbuf
,  sbuf, "%pm", &
rv
);

139 
	`ABTS_STR_EQUAL
(
tc
, 
sbuf
, 
ebuf
);

141 
rv
 = 
APR_ENOTIMPL
;

142 
s
 = 
	`≠r_p°rˇt
(
p
, "foo-",

143 
	`≠r_°ªº‹
(
rv
, 
ebuf
, Ébuf),

144 "-b¨", 
NULL
);

145 
	`≠r_¢¥ötf
(
sbuf
,  sbuf, "foo-%pm-b¨", &
rv
);

146 
	`ABTS_STR_EQUAL
(
tc
, 
sbuf
, 
s
);

147 
	}
}

149 
abts_suôe
 *
	$ã°fmt
(
abts_suôe
 *
suôe
)

151 
suôe
 = 
	`ADD_SUITE
(suite)

153 
	`abts_run_ã°
(
suôe
, 
ssize_t_fmt
, 
NULL
);

154 
	`abts_run_ã°
(
suôe
, 
size_t_fmt
, 
NULL
);

155 
	`abts_run_ã°
(
suôe
, 
time_t_fmt
, 
NULL
);

156 
	`abts_run_ã°
(
suôe
, 
off_t_fmt
, 
NULL
);

157 
	`abts_run_ã°
(
suôe
, 
pid_t_fmt
, 
NULL
);

158 
	`abts_run_ã°
(
suôe
, 
öt64_t_fmt
, 
NULL
);

159 
	`abts_run_ã°
(
suôe
, 
uöt64_t_fmt
, 
NULL
);

160 
	`abts_run_ã°
(
suôe
, 
uöt64_t_hex_fmt
, 
NULL
);

161 
	`abts_run_ã°
(
suôe
, 
m‹e_öt64_fmts
, 
NULL
);

162 
	`abts_run_ã°
(
suôe
, 
îr‹_fmt
, 
NULL
);

164  
suôe
;

165 
	}
}

	@test/testfnmatch.c

17 
	~"ã°utû.h
"

18 
	~"≠r_fûe_öfo.h
"

19 
	~"≠r_‚m©ch.h
"

20 
	~"≠r_èbÀs.h
"

26 
	#NUM_FILES
 (5)

	)

28 
	#APR_FNM_BITS
 15

	)

29 
	#APR_FNM_FAILBIT
 256

	)

31 
	#FAILS_IF
(
X
Ë0, 
	)
X

32 
	#SUCCEEDS_IF
(
X
ËX, 256

	)

33 
	#SUCCEEDS
 0, 256

	)

34 
	#FAILS
 256, 0

	)

36 
	s∑âîn_s
 {

37 c⁄° *
	m∑âîn
;

38 c⁄° *
	m°rög
;

39 
	mªquúe_Êags
;

40 
	mÁû_Êags
;

41 } 
	g∑âîns
[] = {

44 {"", "ã°", 
FAILS
},

45 {"", "*", 
FAILS
},

46 {"ã°", "*", 
FAILS
},

47 {"ã°", "ã°", 
SUCCEEDS
},

50 {"ã\\°", "ã°", 
FAILS_IF
(
APR_FNM_NOESCAPE
)},

51 {"ã\\\\°", "ã\\°", 
FAILS_IF
(
APR_FNM_NOESCAPE
)},

52 {"ã\\*t", "ã*t", 
FAILS_IF
(
APR_FNM_NOESCAPE
)},

53 {"ã\\*t", "ã°", 
FAILS
},

54 {"ã\\?t", "ã?t", 
FAILS_IF
(
APR_FNM_NOESCAPE
)},

55 {"ã\\?t", "ã°", 
FAILS
},

57 {"ãsT", "ã°", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

58 {"ã°", "Te°", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

59 {"tE°", "ãSt", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

61 {"?e°", "ã°", 
SUCCEEDS
},

62 {"ã?t", "ã°", 
SUCCEEDS
},

63 {"ãs?", "ã°", 
SUCCEEDS
},

64 {"ã°?", "ã°", 
FAILS
},

66 {"*", "", 
SUCCEEDS
},

67 {"*", "ã°", 
SUCCEEDS
},

68 {"*ã°", "ã°", 
SUCCEEDS
},

69 {"*e°", "ã°", 
SUCCEEDS
},

70 {"*°", "ã°", 
SUCCEEDS
},

71 {"t*t", "ã°", 
SUCCEEDS
},

72 {"ã*t", "ã°", 
SUCCEEDS
},

73 {"ã*°", "ã°", 
SUCCEEDS
},

74 {"ã*", "ã°", 
SUCCEEDS
},

75 {"ãs*", "ã°", 
SUCCEEDS
},

76 {"ã°*", "ã°", 
SUCCEEDS
},

78 {".[\\-\\t]", ".t", 
SUCCEEDS
},

79 {"ã°*?*[a-z]*", "ã°go›", 
SUCCEEDS
},

80 {"ã[^x]t", "ã°", 
SUCCEEDS
},

81 {"ã[^abc]t", "ã°", 
SUCCEEDS
},

82 {"ã[^x]t", "ã°", 
SUCCEEDS
},

83 {"ã[!x]t", "ã°", 
SUCCEEDS
},

84 {"ã[^x]t", "ãxt", 
FAILS
},

85 {"ã[^\\x]t", "ãxt", 
FAILS
},

86 {"ã[^x\\", "ãxt", 
FAILS
},

87 {"ã[/]t", "ãxt", 
FAILS
},

88 {"ã[S]t", "ã°", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

89 {"ã[r-t]t", "ã°", 
SUCCEEDS
},

90 {"ã[r-t]t", "ãSt", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

91 {"ã[r-T]t", "ã°", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

92 {"ã[R-T]t", "ã°", 
SUCCEEDS_IF
(
APR_FNM_CASE_BLIND
)},

93 {"ã[r-Tz]t", "ãzt", 
SUCCEEDS
},

94 {"ã[R-T]t", "ã¡", 
FAILS
},

95 {"ãs[]t]", "ã°", 
SUCCEEDS
},

96 {"ãs[t-]", "ã°", 
SUCCEEDS
},

97 {"ãs[t-]]", "ã°]", 
SUCCEEDS
},

98 {"ãs[t-]]", "ã°", 
FAILS
},

99 {"ãs[u-]", "ã°", 
FAILS
},

100 {"ãs[t-]", "ãs[t-]", 
FAILS
},

101 {"ã°[/-/]", "ã°[/-/]", 
SUCCEEDS_IF
(
APR_FNM_PATHNAME
)},

102 {"ã°[\\/-/]", "ã°[/-/]", 
APR_FNM_PATHNAME
, 
APR_FNM_NOESCAPE
},

103 {"ã°[/-\\/]", "ã°[/-/]", 
APR_FNM_PATHNAME
, 
APR_FNM_NOESCAPE
},

104 {"ã°[/-/]", "ã°/", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

105 {"ã°[\\/-/]", "ã°/", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

106 {"ã°[/-\\/]", "ã°/", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

108 {"/", "", 
FAILS
},

109 {"", "/", 
FAILS
},

110 {"/ã°", "ã°", 
FAILS
},

111 {"ã°", "/ã°", 
FAILS
},

112 {"ã°/", "ã°", 
FAILS
},

113 {"ã°", "ã°/", 
FAILS
},

114 {"\\/ã°", "/ã°", 
FAILS_IF
(
APR_FNM_NOESCAPE
)},

115 {"*ã°", "/ã°", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

116 {"/*/ã°/", "/ã°", 
FAILS
},

117 {"/*/ã°/", "/ã°/ã°/", 
SUCCEEDS
},

118 {"ã°/this", "ã°/", 
FAILS
},

119 {"ã°/", "ã°/this", 
FAILS
},

120 {"ã°*/this", "ã°/this", 
SUCCEEDS
},

121 {"ã°*/this", "ã°/th©", 
FAILS
},

122 {"ã°/*this", "ã°/this", 
SUCCEEDS
},

124 {".*", ".this", 
SUCCEEDS
},

125 {"*", ".this", 
FAILS_IF
(
APR_FNM_PERIOD
)},

126 {"?this", ".this", 
FAILS_IF
(
APR_FNM_PERIOD
)},

127 {"[.]this", ".this", 
FAILS_IF
(
APR_FNM_PERIOD
)},

129 {"ã°/this", "ã°/this", 
SUCCEEDS
},

130 {"ã°?this", "ã°/this", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

131 {"ã°*this", "ã°/this", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

132 {"ã°[/]this", "ã°/this", 
FAILS_IF
(
APR_FNM_PATHNAME
)},

134 {"ã°/.*", "ã°/.this", 
SUCCEEDS
},

135 {"ã°/*", "ã°/.this", 
FAILS_IF
(
APR_FNM_PERIOD
 | 
APR_FNM_PATHNAME
)},

136 {"ã°/?this", "ã°/.this", 
FAILS_IF
(
APR_FNM_PERIOD
 | 
APR_FNM_PATHNAME
)},

137 {"ã°/[.]this", "ã°/.this", 
FAILS_IF
(
APR_FNM_PERIOD
 | 
APR_FNM_PATHNAME
)},

139 {
NULL
, NULL, 0}

144 
	$ã°_‚m©ch
(
abts_ˇ£
 *
tc
, *
d©a
)

146 
∑âîn_s
 *
ã°
 = 
∑âîns
;

147 
buf
[80];

148 
i
 = 
APR_FNM_BITS
 + 1;

149 
ªs
;

151 
ã°
 = 
∑âîns
;Åe°->
∑âîn
; ++test)

153 
i
 = 0; i <
APR_FNM_BITS
; ++i)

155 
ªs
 = 
	`≠r_‚m©ch
(
ã°
->
∑âîn
,Åe°->
°rög
, 
i
);

156 i‡(((
i
 & 
ã°
->
ªquúe_Êags
) !=Åest->require_flags)

157 || ((
i
 & 
ã°
->
Áû_Êags
) ==Åest->fail_flags)) {

158 i‡(
ªs
 !
APR_FNM_NOMATCH
)

162 i‡(
ªs
 != 0)

166 i‡(
i
 <
APR_FNM_BITS
)

170 i‡(
i
 <
APR_FNM_BITS
) {

171 
	`•rötf
(
buf
, "apr_fnmatch(\"%s\", \"%s\", %d)Ñeturns %d\n",

172 
ã°
->
∑âîn
,Åe°->
°rög
, 
i
, 
ªs
);

173 
	`abts_Áû
(
tc
, 
buf
, 
__LINE__
);

175 
	}
}

177 
	$ã°_‚m©ch_ã°
(
abts_ˇ£
 *
tc
, *
d©a
)

179 c⁄° 
	sã°
 {

180 c⁄° *
∑âîn
;

181 
ªsu…
;

182 } 
·_ã°s
[] = {

189 { 
NULL
, 0 }

191 c⁄° 
ã°
 *
t
;

193 
t
 = 
·_ã°s
;Å->
∑âîn
 !
NULL
;Å++) {

194 
ªs
 = 
	`≠r_‚m©ch_ã°
(
t
->
∑âîn
);

196 i‡(
ªs
 !
t
->
ªsu…
) {

197 
buf
[128];

199 
	`•rötf
(
buf
, "apr_fnmatch_test(\"%s\") = %d,Éxpected %d\n",

200 
t
->
∑âîn
, 
ªs
,Å->
ªsu…
);

201 
	`abts_Áû
(
tc
, 
buf
, 
__LINE__
);

204 
	}
}

206 
	$ã°_glob
(
abts_ˇ£
 *
tc
, *
d©a
)

208 
i
;

209 **
li°
;

210 
≠r_¨øy_hódî_t
 *
ªsu…
;

212 
	`APR_ASSERT_SUCCESS
(
tc
, "glob matchágainst data/*.txt",

213 
	`≠r_m©ch_glob
("d©a\\*.txt", &
ªsu…
, 
p
));

215 
	`ABTS_INT_EQUAL
(
tc
, 
NUM_FILES
, 
ªsu…
->
√…s
);

217 
li°
 = (**)
ªsu…
->
ñts
;

218 
i
 = 0; i < 
ªsu…
->
√…s
; i++) {

219 *
dŸ
 = 
	`°ºchr
(
li°
[
i
], '.');

220 
	`ABTS_STR_EQUAL
(
tc
, ".txt", 
dŸ
);

222 
	}
}

224 
	$ã°_glob_cuºdú
(
abts_ˇ£
 *
tc
, *
d©a
)

226 
i
;

227 **
li°
;

228 
≠r_¨øy_hódî_t
 *
ªsu…
;

229 
	`≠r_fûï©h_£t
("d©a", 
p
);

231 
	`APR_ASSERT_SUCCESS
(
tc
, "glob matchágainst *.txt with dataás current",

232 
	`≠r_m©ch_glob
("*.txt", &
ªsu…
, 
p
));

235 
	`ABTS_INT_EQUAL
(
tc
, 
NUM_FILES
, 
ªsu…
->
√…s
);

237 
li°
 = (**)
ªsu…
->
ñts
;

238 
i
 = 0; i < 
ªsu…
->
√…s
; i++) {

239 *
dŸ
 = 
	`°ºchr
(
li°
[
i
], '.');

240 
	`ABTS_STR_EQUAL
(
tc
, ".txt", 
dŸ
);

242 
	`≠r_fûï©h_£t
("..", 
p
);

243 
	}
}

245 
abts_suôe
 *
	$ã°‚m©ch
(
abts_suôe
 *
suôe
)

247 
suôe
 = 
	`ADD_SUITE
(suite)

249 
	`abts_run_ã°
(
suôe
, 
ã°_‚m©ch
, 
NULL
);

250 
	`abts_run_ã°
(
suôe
, 
ã°_‚m©ch_ã°
, 
NULL
);

251 
	`abts_run_ã°
(
suôe
, 
ã°_glob
, 
NULL
);

252 
	`abts_run_ã°
(
suôe
, 
ã°_glob_cuºdú
, 
NULL
);

254  
suôe
;

255 
	}
}

	@test/testglobalmutex.c

17 
	~"ã°globÆmuãx.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_globÆ_muãx.h
"

20 
	~"≠r_°rögs.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"ã°utû.h
"

24 
	$œunch_chûd
(
abts_ˇ£
 *
tc
, 
≠r_lockmech_e
 
mech
,

25 
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
p
)

27 
≠r_¥oˇâr_t
 *
¥oˇâr
;

28 c⁄° *
¨gs
[3];

29 
≠r_°©us_t
 
rv
;

31 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

32 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à¸óãÖroˇâr", 
rv
);

34 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_NO_PIPE
, APR_NO_PIPE,

35 
APR_NO_PIPE
);

36 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àiÿöÖroˇâr", 
rv
);

38 
rv
 = 
	`≠r_¥oˇâr_îr‹_check_£t
(
¥oˇâr
, 1);

39 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àîr‹ check i¿¥oˇâr", 
rv
);

41 
¨gs
[0] = "globÆmuãxchûd" 
EXTENSION
;

42 
¨gs
[1] = (c⁄° *)
	`≠r_ôﬂ
(
p
, ()
mech
);

43 
¨gs
[2] = 
NULL
;

44 
rv
 = 
	`≠r_¥oc_¸óã
(
¥oc
, 
TESTBINPATH
 "globÆmuãxchûd" 
EXTENSION
, 
¨gs
, 
NULL
,

45 
¥oˇâr
, 
p
);

46 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àœunchÖrogøm", 
rv
);

47 
	}
}

49 
	$waô_chûd
(
abts_ˇ£
 *
tc
, 
≠r_¥oc_t
 *
¥oc
)

51 
exôcode
;

52 
≠r_exô_why_e
 
why
;

54 
	`ABTS_ASSERT
(
tc
, "Error waiting for childÖrocess",

55 
	`≠r_¥oc_waô
(
¥oc
, &
exôcode
, &
why
, 
APR_WAIT
Ë=
APR_CHILD_DONE
);

57 
	`ABTS_ASSERT
(
tc
, "chûd didn'àãrmö©ên‹mÆly", 
why
 =
APR_PROC_EXIT
);

58  
exôcode
;

59 
	}
}

62 c⁄° *
	$muãx«me
(
≠r_lockmech_e
 
mech
)

64 
mech
) {

65 
APR_LOCK_FCNTL
:  "fcntl";

66 
APR_LOCK_FLOCK
:  "flock";

67 
APR_LOCK_SYSVSEM
:  "sysvsem";

68 
APR_LOCK_PROC_PTHREAD
:  "proc_pthread";

69 
APR_LOCK_POSIXSEM
:  "posixsem";

70 
APR_LOCK_DEFAULT
:  "default";

73 
	}
}

75 
	$ã°_ex˛usive
(
abts_ˇ£
 *
tc
, *
d©a
)

77 
≠r_lockmech_e
 
mech
 = *◊¥_lockmech_ê*)
d©a
;

78 
≠r_¥oc_t
 
p1
, 
p2
, 
p3
, 
p4
;

79 
≠r_°©us_t
 
rv
;

80 
≠r_globÆ_muãx_t
 *
globÆ_lock
;

81 
x
 = 0;

82 
	`abts_log_mesßge
("lock mechanism is: ");

83 
	`abts_log_mesßge
(
	`muãx«me
(
mech
));

85 
rv
 = 
	`≠r_globÆ_muãx_¸óã
(&
globÆ_lock
, 
LOCKNAME
, 
mech
, 
p
);

86 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ cª©ög muãx", 
rv
);

88 
	`œunch_chûd
(
tc
, 
mech
, &
p1
, 
p
);

89 
	`œunch_chûd
(
tc
, 
mech
, &
p2
, 
p
);

90 
	`œunch_chûd
(
tc
, 
mech
, &
p3
, 
p
);

91 
	`œunch_chûd
(
tc
, 
mech
, &
p4
, 
p
);

93 
x
 +
	`waô_chûd
(
tc
, &
p1
);

94 
x
 +
	`waô_chûd
(
tc
, &
p2
);

95 
x
 +
	`waô_chûd
(
tc
, &
p3
);

96 
x
 +
	`waô_chûd
(
tc
, &
p4
);

98 i‡(
x
 !
MAX_COUNTER
) {

99 
buf
[200];

100 
	`•rötf
(
buf
, "global mutex '%s' failed: %dÇot %d",

101 
	`muãx«me
(
mech
), 
x
, 
MAX_COUNTER
);

102 
	`abts_Áû
(
tc
, 
buf
, 
__LINE__
);

104 
	}
}

106 
abts_suôe
 *
	$ã°globÆmuãx
(
abts_suôe
 *
suôe
)

108 
≠r_lockmech_e
 
mech
 = 
APR_LOCK_DEFAULT
;

110 
suôe
 = 
	`ADD_SUITE
(suite)

111 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

112 #i‡
APR_HAS_POSIXSEM_SERIALIZE


113 
mech
 = 
APR_LOCK_POSIXSEM
;

114 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

116 #i‡
APR_HAS_SYSVSEM_SERIALIZE


117 
mech
 = 
APR_LOCK_SYSVSEM
;

118 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

120 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


121 
mech
 = 
APR_LOCK_PROC_PTHREAD
;

122 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

124 #i‡
APR_HAS_FCNTL_SERIALIZE


125 
mech
 = 
APR_LOCK_FCNTL
;

126 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

128 #i‡
APR_HAS_FLOCK_SERIALIZE


129 
mech
 = 
APR_LOCK_FLOCK
;

130 
	`abts_run_ã°
(
suôe
, 
ã°_ex˛usive
, &
mech
);

133  
suôe
;

134 
	}
}

	@test/testglobalmutex.h

17 #i‚de‡
TESTGLOBALMUTEX_H


18 
	#TESTGLOBALMUTEX_H


	)

21 
	#MAX_ITER
 255

	)

22 
	#MAX_COUNTER
 (
MAX_ITER
 * 4)

	)

24 
	#LOCKNAME
 "d©a/≠r_globÆmuãx.lock"

	)

	@test/testhash.c

17 
	~"ã°utû.h
"

18 
	~"≠r.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_hash.h
"

24 
	#MAX_LTH
 256

	)

25 
	#MAX_DEPTH
 11

	)

27 
	$comp_°rög
(c⁄° *
°r1
, c⁄° *
°r2
)

29  
	`°rcmp
(
°r1
,
°r2
);

30 
	}
}

32 
	$dump_hash
(
≠r_poﬁ_t
 *
p
, 
≠r_hash_t
 *
h
, 
°r
[][
MAX_LTH
])

34 
≠r_hash_ödex_t
 *
hi
;

35 
i
 = 0;

37 
hi
 = 
	`≠r_hash_fú°
(
p
, 
h
); hi; hò
	`≠r_hash_√xt
(hi)) {

38 c⁄° *
key
 = 
	`≠r_hash_this_key
(
hi
);

39 
≠r_ssize_t
 
Àn
 = 
	`≠r_hash_this_key_Àn
(
hi
);

40 *
vÆ
 = 
	`≠r_hash_this_vÆ
(
hi
);

42 
°r
[
i
][0]='\0';

43 
	`≠r_¢¥ötf
(
°r
[
i
], 
MAX_LTH
, "%sKey %†(%" 
APR_SSIZE_T_FMT
 ") Value %s\n",

44 
°r
[
i
], 
key
, 
Àn
, 
vÆ
);

45 
i
++;

47 
°r
[
i
][0]='\0';

48 
	`≠r_¢¥ötf
(
°r
[
i
], 
MAX_LTH
, "%s#entries %d\n", str[i], i);

53 
	`qs‹t
(

54 
°r
,

55 
i
,

56 
MAX_LTH
,

57 
comp_°rög


59 
	}
}

61 
	$sum_hash
(
≠r_poﬁ_t
 *
p
, 
≠r_hash_t
 *
h
, *
pcou¡
, *
keySum
, *
vÆSum
)

63 
≠r_hash_ödex_t
 *
hi
;

64 *
vÆ
, *
key
;

65 
cou¡
 = 0;

67 *
keySum
 = 0;

68 *
vÆSum
 = 0;

69 *
pcou¡
 = 0;

70 
hi
 = 
	`≠r_hash_fú°
(
p
, 
h
); hi; hò
	`≠r_hash_√xt
(hi)) {

71 
	`≠r_hash_this
(
hi
, (*)&
key
, 
NULL
, &
vÆ
);

72 *
vÆSum
 +*(*)
vÆ
;

73 *
keySum
 +*(*)
key
;

74 
cou¡
++;

76 *
pcou¡
=
cou¡
;

77 
	}
}

79 
	$hash_make
(
abts_ˇ£
 *
tc
, *
d©a
)

81 
≠r_hash_t
 *
h
 = 
NULL
;

83 
h
 = 
	`≠r_hash_make
(
p
);

84 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

85 
	}
}

87 
	$hash_£t
(
abts_ˇ£
 *
tc
, *
d©a
)

89 
≠r_hash_t
 *
h
 = 
NULL
;

90 *
ªsu…
 = 
NULL
;

92 
h
 = 
	`≠r_hash_make
(
p
);

93 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

95 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, "value");

96 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key", 
APR_HASH_KEY_STRING
);

97 
	`ABTS_STR_EQUAL
(
tc
, "vÆue", 
ªsu…
);

98 
	}
}

100 
	$hash_ª£t
(
abts_ˇ£
 *
tc
, *
d©a
)

102 
≠r_hash_t
 *
h
 = 
NULL
;

103 *
ªsu…
 = 
NULL
;

105 
h
 = 
	`≠r_hash_make
(
p
);

106 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

108 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, "value");

109 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key", 
APR_HASH_KEY_STRING
);

110 
	`ABTS_STR_EQUAL
(
tc
, "vÆue", 
ªsu…
);

112 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, "new");

113 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key", 
APR_HASH_KEY_STRING
);

114 
	`ABTS_STR_EQUAL
(
tc
, "√w", 
ªsu…
);

115 
	}
}

117 
	$ßme_vÆue
(
abts_ˇ£
 *
tc
, *
d©a
)

119 
≠r_hash_t
 *
h
 = 
NULL
;

120 *
ªsu…
 = 
NULL
;

122 
h
 = 
	`≠r_hash_make
(
p
);

123 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

125 
	`≠r_hash_£t
(
h
, "ßme1", 
APR_HASH_KEY_STRING
, "same");

126 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "ßme1", 
APR_HASH_KEY_STRING
);

127 
	`ABTS_STR_EQUAL
(
tc
, "ßme", 
ªsu…
);

129 
	`≠r_hash_£t
(
h
, "ßme2", 
APR_HASH_KEY_STRING
, "same");

130 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "ßme2", 
APR_HASH_KEY_STRING
);

131 
	`ABTS_STR_EQUAL
(
tc
, "ßme", 
ªsu…
);

132 
	}
}

134 
	$hash_cu°om
–c⁄° *
key
, 
≠r_ssize_t
 *
kÀn
)

136 
hash
 = 0;

137  *
kÀn
 ) {

138 (*
kÀn
) --;

139 
hash
 = hash * 33 + 
key
[ *
kÀn
 ];

141  
hash
;

142 
	}
}

144 
	$ßme_vÆue_cu°om
(
abts_ˇ£
 *
tc
, *
d©a
)

146 
≠r_hash_t
 *
h
 = 
NULL
;

147 *
ªsu…
 = 
NULL
;

149 
h
 = 
	`≠r_hash_make_cu°om
(
p
, 
hash_cu°om
);

150 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

152 
	`≠r_hash_£t
(
h
, "same1", 5, "same");

153 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "same1", 5);

154 
	`ABTS_STR_EQUAL
(
tc
, "ßme", 
ªsu…
);

156 
	`≠r_hash_£t
(
h
, "same2", 5, "same");

157 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "same2", 5);

158 
	`ABTS_STR_EQUAL
(
tc
, "ßme", 
ªsu…
);

159 
	}
}

161 
	$key_•a˚
(
abts_ˇ£
 *
tc
, *
d©a
)

163 
≠r_hash_t
 *
h
 = 
NULL
;

164 *
ªsu…
 = 
NULL
;

166 
h
 = 
	`≠r_hash_make
(
p
);

167 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

169 
	`≠r_hash_£t
(
h
, "key wôh s∑˚", 
APR_HASH_KEY_STRING
, "value");

170 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key wôh s∑˚", 
APR_HASH_KEY_STRING
);

171 
	`ABTS_STR_EQUAL
(
tc
, "vÆue", 
ªsu…
);

172 
	}
}

174 
	$hash_˛ór
(
abts_ˇ£
 *
tc
, *
d©a
)

176 
≠r_hash_t
 *
h
;

177 
i
, *
e
;

179 
h
 = 
	`≠r_hash_make
(
p
);

180 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

182 
i
 = 1; i <= 10; i++) {

183 
e
 = 
	`≠r_∑Œoc
(
p
, ());

184 *
e
 = 
i
;

185 
	`≠r_hash_£t
(
h
, 
e
, (*e),É);

187 
	`≠r_hash_˛ór
(
h
);

188 
i
 = 
	`≠r_hash_cou¡
(
h
);

189 
	`ABTS_INT_EQUAL
(
tc
, 0, 
i
);

190 
	}
}

196 
	$hash_åavî£
(
abts_ˇ£
 *
tc
, *
d©a
)

198 
≠r_hash_t
 *
h
;

199 
SåAºay
[
MAX_DEPTH
][
MAX_LTH
];

201 
h
 = 
	`≠r_hash_make
(
p
);

202 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

204 
	`≠r_hash_£t
(
h
, "OVERWRITE", 
APR_HASH_KEY_STRING
, "shouldÇot seeÅhis");

205 
	`≠r_hash_£t
(
h
, "FOO3", 
APR_HASH_KEY_STRING
, "bar3");

206 
	`≠r_hash_£t
(
h
, "FOO3", 
APR_HASH_KEY_STRING
, "bar3");

207 
	`≠r_hash_£t
(
h
, "FOO1", 
APR_HASH_KEY_STRING
, "bar1");

208 
	`≠r_hash_£t
(
h
, "FOO2", 
APR_HASH_KEY_STRING
, "bar2");

209 
	`≠r_hash_£t
(
h
, "FOO4", 
APR_HASH_KEY_STRING
, "bar4");

210 
	`≠r_hash_£t
(
h
, "SAME1", 
APR_HASH_KEY_STRING
, "same");

211 
	`≠r_hash_£t
(
h
, "SAME2", 
APR_HASH_KEY_STRING
, "same");

212 
	`≠r_hash_£t
(
h
, "OVERWRITE", 
APR_HASH_KEY_STRING
, "Overwrite key");

214 
	`dump_hash
(
p
, 
h
, 
SåAºay
);

216 
	`ABTS_STR_EQUAL
(
tc
, "Key FOO1 (4ËVÆuêb¨1\n", 
SåAºay
[0]);

217 
	`ABTS_STR_EQUAL
(
tc
, "Key FOO2 (4ËVÆuêb¨2\n", 
SåAºay
[1]);

218 
	`ABTS_STR_EQUAL
(
tc
, "Key FOO3 (4ËVÆuêb¨3\n", 
SåAºay
[2]);

219 
	`ABTS_STR_EQUAL
(
tc
, "Key FOO4 (4ËVÆuêb¨4\n", 
SåAºay
[3]);

220 
	`ABTS_STR_EQUAL
(
tc
, "Key OVERWRITE (9ËVÆuêOvîwrôêkey\n", 
SåAºay
[4]);

221 
	`ABTS_STR_EQUAL
(
tc
, "Key SAME1 (5ËVÆuêßme\n", 
SåAºay
[5]);

222 
	`ABTS_STR_EQUAL
(
tc
, "Key SAME2 (5ËVÆuêßme\n", 
SåAºay
[6]);

223 
	`ABTS_STR_EQUAL
(
tc
, "#íåõ†7\n", 
SåAºay
[7]);

224 
	}
}

230 
	$summ©i⁄_ã°
(
abts_ˇ£
 *
tc
, *
d©a
)

232 
≠r_hash_t
 *
h
;

233 
sumKeys
, 
sumVÆ
, 
åySumKey
, 
åySumVÆ
;

234 
i
, 
j
, *
vÆ
, *
key
;

236 
h
 =
	`≠r_hash_make
(
p
);

237 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

239 
sumKeys
 = 0;

240 
sumVÆ
 = 0;

241 
åySumKey
 = 0;

242 
åySumVÆ
 = 0;

244 
i
 = 0; i < 100; i++) {

245 
j
 = 
i
 * 10 + 1;

246 
sumKeys
 +
j
;

247 
sumVÆ
 +
i
;

248 
key
 = 
	`≠r_∑Œoc
(
p
, ());

249 *
key
 = 
j
;

250 
vÆ
 = 
	`≠r_∑Œoc
(
p
, ());

251 *
vÆ
 = 
i
;

252 
	`≠r_hash_£t
(
h
, 
key
, (), 
vÆ
);

255 
	`sum_hash
(
p
, 
h
, &
i
, &
åySumKey
, &
åySumVÆ
);

256 
	`ABTS_INT_EQUAL
(
tc
, 100, 
i
);

257 
	`ABTS_INT_EQUAL
(
tc
, 
sumVÆ
, 
åySumVÆ
);

258 
	`ABTS_INT_EQUAL
(
tc
, 
sumKeys
, 
åySumKey
);

259 
	}
}

261 
	$dñëe_key
(
abts_ˇ£
 *
tc
, *
d©a
)

263 
≠r_hash_t
 *
h
 = 
NULL
;

264 *
ªsu…
 = 
NULL
;

266 
h
 = 
	`≠r_hash_make
(
p
);

267 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

269 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, "value");

270 
	`≠r_hash_£t
(
h
, "key2", 
APR_HASH_KEY_STRING
, "value2");

272 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key", 
APR_HASH_KEY_STRING
);

273 
	`ABTS_STR_EQUAL
(
tc
, "vÆue", 
ªsu…
);

275 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key2", 
APR_HASH_KEY_STRING
);

276 
	`ABTS_STR_EQUAL
(
tc
, "vÆue2", 
ªsu…
);

278 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, 
NULL
);

280 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key", 
APR_HASH_KEY_STRING
);

281 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
ªsu…
);

283 
ªsu…
 = 
	`≠r_hash_gë
(
h
, "key2", 
APR_HASH_KEY_STRING
);

284 
	`ABTS_STR_EQUAL
(
tc
, "vÆue2", 
ªsu…
);

285 
	}
}

287 
	$hash_cou¡_0
(
abts_ˇ£
 *
tc
, *
d©a
)

289 
≠r_hash_t
 *
h
 = 
NULL
;

290 
cou¡
;

292 
h
 = 
	`≠r_hash_make
(
p
);

293 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

295 
cou¡
 = 
	`≠r_hash_cou¡
(
h
);

296 
	`ABTS_INT_EQUAL
(
tc
, 0, 
cou¡
);

297 
	}
}

299 
	$hash_cou¡_1
(
abts_ˇ£
 *
tc
, *
d©a
)

301 
≠r_hash_t
 *
h
 = 
NULL
;

302 
cou¡
;

304 
h
 = 
	`≠r_hash_make
(
p
);

305 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

307 
	`≠r_hash_£t
(
h
, "key", 
APR_HASH_KEY_STRING
, "value");

309 
cou¡
 = 
	`≠r_hash_cou¡
(
h
);

310 
	`ABTS_INT_EQUAL
(
tc
, 1, 
cou¡
);

311 
	}
}

313 
	$hash_cou¡_5
(
abts_ˇ£
 *
tc
, *
d©a
)

315 
≠r_hash_t
 *
h
 = 
NULL
;

316 
cou¡
;

318 
h
 = 
	`≠r_hash_make
(
p
);

319 
	`ABTS_PTR_NOTNULL
(
tc
, 
h
);

321 
	`≠r_hash_£t
(
h
, "key1", 
APR_HASH_KEY_STRING
, "value1");

322 
	`≠r_hash_£t
(
h
, "key2", 
APR_HASH_KEY_STRING
, "value2");

323 
	`≠r_hash_£t
(
h
, "key3", 
APR_HASH_KEY_STRING
, "value3");

324 
	`≠r_hash_£t
(
h
, "key4", 
APR_HASH_KEY_STRING
, "value4");

325 
	`≠r_hash_£t
(
h
, "key5", 
APR_HASH_KEY_STRING
, "value5");

327 
cou¡
 = 
	`≠r_hash_cou¡
(
h
);

328 
	`ABTS_INT_EQUAL
(
tc
, 5, 
cou¡
);

329 
	}
}

331 
	$ovîœy_em±y
(
abts_ˇ£
 *
tc
, *
d©a
)

333 
≠r_hash_t
 *
ba£
 = 
NULL
;

334 
≠r_hash_t
 *
ovîœy
 = 
NULL
;

335 
≠r_hash_t
 *
ªsu…
 = 
NULL
;

336 
cou¡
;

337 
SåAºay
[
MAX_DEPTH
][
MAX_LTH
];

339 
ba£
 = 
	`≠r_hash_make
(
p
);

340 
ovîœy
 = 
	`≠r_hash_make
(
p
);

341 
	`ABTS_PTR_NOTNULL
(
tc
, 
ba£
);

342 
	`ABTS_PTR_NOTNULL
(
tc
, 
ovîœy
);

344 
	`≠r_hash_£t
(
ba£
, "key1", 
APR_HASH_KEY_STRING
, "value1");

345 
	`≠r_hash_£t
(
ba£
, "key2", 
APR_HASH_KEY_STRING
, "value2");

346 
	`≠r_hash_£t
(
ba£
, "key3", 
APR_HASH_KEY_STRING
, "value3");

347 
	`≠r_hash_£t
(
ba£
, "key4", 
APR_HASH_KEY_STRING
, "value4");

348 
	`≠r_hash_£t
(
ba£
, "key5", 
APR_HASH_KEY_STRING
, "value5");

350 
ªsu…
 = 
	`≠r_hash_ovîœy
(
p
, 
ovîœy
, 
ba£
);

352 
cou¡
 = 
	`≠r_hash_cou¡
(
ªsu…
);

353 
	`ABTS_INT_EQUAL
(
tc
, 5, 
cou¡
);

355 
	`dump_hash
(
p
, 
ªsu…
, 
SåAºay
);

357 
	`ABTS_STR_EQUAL
(
tc
, "Key key1 (4ËVÆuêvÆue1\n", 
SåAºay
[0]);

358 
	`ABTS_STR_EQUAL
(
tc
, "Key key2 (4ËVÆuêvÆue2\n", 
SåAºay
[1]);

359 
	`ABTS_STR_EQUAL
(
tc
, "Key key3 (4ËVÆuêvÆue3\n", 
SåAºay
[2]);

360 
	`ABTS_STR_EQUAL
(
tc
, "Key key4 (4ËVÆuêvÆue4\n", 
SåAºay
[3]);

361 
	`ABTS_STR_EQUAL
(
tc
, "Key key5 (4ËVÆuêvÆue5\n", 
SåAºay
[4]);

362 
	`ABTS_STR_EQUAL
(
tc
, "#íåõ†5\n", 
SåAºay
[5]);

363 
	}
}

365 
	$ovîœy_2unique
(
abts_ˇ£
 *
tc
, *
d©a
)

367 
≠r_hash_t
 *
ba£
 = 
NULL
;

368 
≠r_hash_t
 *
ovîœy
 = 
NULL
;

369 
≠r_hash_t
 *
ªsu…
 = 
NULL
;

370 
cou¡
;

371 
SåAºay
[
MAX_DEPTH
][
MAX_LTH
];

373 
ba£
 = 
	`≠r_hash_make
(
p
);

374 
ovîœy
 = 
	`≠r_hash_make
(
p
);

375 
	`ABTS_PTR_NOTNULL
(
tc
, 
ba£
);

376 
	`ABTS_PTR_NOTNULL
(
tc
, 
ovîœy
);

378 
	`≠r_hash_£t
(
ba£
, "ba£1", 
APR_HASH_KEY_STRING
, "value1");

379 
	`≠r_hash_£t
(
ba£
, "ba£2", 
APR_HASH_KEY_STRING
, "value2");

380 
	`≠r_hash_£t
(
ba£
, "ba£3", 
APR_HASH_KEY_STRING
, "value3");

381 
	`≠r_hash_£t
(
ba£
, "ba£4", 
APR_HASH_KEY_STRING
, "value4");

382 
	`≠r_hash_£t
(
ba£
, "ba£5", 
APR_HASH_KEY_STRING
, "value5");

384 
	`≠r_hash_£t
(
ovîœy
, "ovîœy1", 
APR_HASH_KEY_STRING
, "value1");

385 
	`≠r_hash_£t
(
ovîœy
, "ovîœy2", 
APR_HASH_KEY_STRING
, "value2");

386 
	`≠r_hash_£t
(
ovîœy
, "ovîœy3", 
APR_HASH_KEY_STRING
, "value3");

387 
	`≠r_hash_£t
(
ovîœy
, "ovîœy4", 
APR_HASH_KEY_STRING
, "value4");

388 
	`≠r_hash_£t
(
ovîœy
, "ovîœy5", 
APR_HASH_KEY_STRING
, "value5");

390 
ªsu…
 = 
	`≠r_hash_ovîœy
(
p
, 
ovîœy
, 
ba£
);

392 
cou¡
 = 
	`≠r_hash_cou¡
(
ªsu…
);

393 
	`ABTS_INT_EQUAL
(
tc
, 10, 
cou¡
);

395 
	`dump_hash
(
p
, 
ªsu…
, 
SåAºay
);

397 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£1 (5ËVÆuêvÆue1\n", 
SåAºay
[0]);

398 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£2 (5ËVÆuêvÆue2\n", 
SåAºay
[1]);

399 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£3 (5ËVÆuêvÆue3\n", 
SåAºay
[2]);

400 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£4 (5ËVÆuêvÆue4\n", 
SåAºay
[3]);

401 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£5 (5ËVÆuêvÆue5\n", 
SåAºay
[4]);

402 
	`ABTS_STR_EQUAL
(
tc
, "Key ovîœy1 (8ËVÆuêvÆue1\n", 
SåAºay
[5]);

403 
	`ABTS_STR_EQUAL
(
tc
, "Key ovîœy2 (8ËVÆuêvÆue2\n", 
SåAºay
[6]);

404 
	`ABTS_STR_EQUAL
(
tc
, "Key ovîœy3 (8ËVÆuêvÆue3\n", 
SåAºay
[7]);

405 
	`ABTS_STR_EQUAL
(
tc
, "Key ovîœy4 (8ËVÆuêvÆue4\n", 
SåAºay
[8]);

406 
	`ABTS_STR_EQUAL
(
tc
, "Key ovîœy5 (8ËVÆuêvÆue5\n", 
SåAºay
[9]);

407 
	`ABTS_STR_EQUAL
(
tc
, "#íåõ†10\n", 
SåAºay
[10]);

408 
	}
}

410 
	$ovîœy_ßme
(
abts_ˇ£
 *
tc
, *
d©a
)

412 
≠r_hash_t
 *
ba£
 = 
NULL
;

413 
≠r_hash_t
 *
ªsu…
 = 
NULL
;

414 
cou¡
;

415 
SåAºay
[
MAX_DEPTH
][
MAX_LTH
];

417 
ba£
 = 
	`≠r_hash_make
(
p
);

418 
	`ABTS_PTR_NOTNULL
(
tc
, 
ba£
);

420 
	`≠r_hash_£t
(
ba£
, "ba£1", 
APR_HASH_KEY_STRING
, "value1");

421 
	`≠r_hash_£t
(
ba£
, "ba£2", 
APR_HASH_KEY_STRING
, "value2");

422 
	`≠r_hash_£t
(
ba£
, "ba£3", 
APR_HASH_KEY_STRING
, "value3");

423 
	`≠r_hash_£t
(
ba£
, "ba£4", 
APR_HASH_KEY_STRING
, "value4");

424 
	`≠r_hash_£t
(
ba£
, "ba£5", 
APR_HASH_KEY_STRING
, "value5");

426 
ªsu…
 = 
	`≠r_hash_ovîœy
(
p
, 
ba£
, base);

428 
cou¡
 = 
	`≠r_hash_cou¡
(
ªsu…
);

429 
	`ABTS_INT_EQUAL
(
tc
, 5, 
cou¡
);

431 
	`dump_hash
(
p
, 
ªsu…
, 
SåAºay
);

433 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£1 (5ËVÆuêvÆue1\n", 
SåAºay
[0]);

434 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£2 (5ËVÆuêvÆue2\n", 
SåAºay
[1]);

435 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£3 (5ËVÆuêvÆue3\n", 
SåAºay
[2]);

436 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£4 (5ËVÆuêvÆue4\n", 
SåAºay
[3]);

437 
	`ABTS_STR_EQUAL
(
tc
, "Key ba£5 (5ËVÆuêvÆue5\n", 
SåAºay
[4]);

438 
	`ABTS_STR_EQUAL
(
tc
, "#íåõ†5\n", 
SåAºay
[5]);

439 
	}
}

441 
	$ovîœy_„tch
(
abts_ˇ£
 *
tc
, *
d©a
)

443 
≠r_hash_t
 *
ba£
 = 
NULL
;

444 
≠r_hash_t
 *
ovîœy
 = 
NULL
;

445 
≠r_hash_t
 *
ªsu…
 = 
NULL
;

446 
cou¡
;

448 
ba£
 = 
	`≠r_hash_make
(
p
);

449 
ovîœy
 = 
	`≠r_hash_make
(
p
);

450 
	`ABTS_PTR_NOTNULL
(
tc
, 
ba£
);

451 
	`ABTS_PTR_NOTNULL
(
tc
, 
ovîœy
);

453 
	`≠r_hash_£t
(
ba£
, "ba£1", 
APR_HASH_KEY_STRING
, "value1");

454 
	`≠r_hash_£t
(
ba£
, "ba£2", 
APR_HASH_KEY_STRING
, "value2");

455 
	`≠r_hash_£t
(
ba£
, "ba£3", 
APR_HASH_KEY_STRING
, "value3");

456 
	`≠r_hash_£t
(
ba£
, "ba£4", 
APR_HASH_KEY_STRING
, "value4");

457 
	`≠r_hash_£t
(
ba£
, "ba£5", 
APR_HASH_KEY_STRING
, "value5");

459 
	`≠r_hash_£t
(
ovîœy
, "ovîœy1", 
APR_HASH_KEY_STRING
, "value1");

460 
	`≠r_hash_£t
(
ovîœy
, "ovîœy2", 
APR_HASH_KEY_STRING
, "value2");

461 
	`≠r_hash_£t
(
ovîœy
, "ovîœy3", 
APR_HASH_KEY_STRING
, "value3");

462 
	`≠r_hash_£t
(
ovîœy
, "ovîœy4", 
APR_HASH_KEY_STRING
, "value4");

463 
	`≠r_hash_£t
(
ovîœy
, "ovîœy5", 
APR_HASH_KEY_STRING
, "value5");

465 
ªsu…
 = 
	`≠r_hash_ovîœy
(
p
, 
ovîœy
, 
ba£
);

467 
cou¡
 = 
	`≠r_hash_cou¡
(
ªsu…
);

468 
	`ABTS_INT_EQUAL
(
tc
, 10, 
cou¡
);

470 
	`ABTS_STR_EQUAL
(
tc
, "value1",

471 
	`≠r_hash_gë
(
ªsu…
, "ba£1", 
APR_HASH_KEY_STRING
));

472 
	`ABTS_STR_EQUAL
(
tc
, "value2",

473 
	`≠r_hash_gë
(
ªsu…
, "ba£2", 
APR_HASH_KEY_STRING
));

474 
	`ABTS_STR_EQUAL
(
tc
, "value3",

475 
	`≠r_hash_gë
(
ªsu…
, "ba£3", 
APR_HASH_KEY_STRING
));

476 
	`ABTS_STR_EQUAL
(
tc
, "value4",

477 
	`≠r_hash_gë
(
ªsu…
, "ba£4", 
APR_HASH_KEY_STRING
));

478 
	`ABTS_STR_EQUAL
(
tc
, "value5",

479 
	`≠r_hash_gë
(
ªsu…
, "ba£5", 
APR_HASH_KEY_STRING
));

480 
	`ABTS_STR_EQUAL
(
tc
, "value1",

481 
	`≠r_hash_gë
(
ªsu…
, "ovîœy1", 
APR_HASH_KEY_STRING
));

482 
	`ABTS_STR_EQUAL
(
tc
, "value2",

483 
	`≠r_hash_gë
(
ªsu…
, "ovîœy2", 
APR_HASH_KEY_STRING
));

484 
	`ABTS_STR_EQUAL
(
tc
, "value3",

485 
	`≠r_hash_gë
(
ªsu…
, "ovîœy3", 
APR_HASH_KEY_STRING
));

486 
	`ABTS_STR_EQUAL
(
tc
, "value4",

487 
	`≠r_hash_gë
(
ªsu…
, "ovîœy4", 
APR_HASH_KEY_STRING
));

488 
	`ABTS_STR_EQUAL
(
tc
, "value5",

489 
	`≠r_hash_gë
(
ªsu…
, "ovîœy5", 
APR_HASH_KEY_STRING
));

491 
	`ABTS_STR_EQUAL
(
tc
, "value1",

492 
	`≠r_hash_gë
(
ba£
, "ba£1", 
APR_HASH_KEY_STRING
));

493 
	`ABTS_STR_EQUAL
(
tc
, "value2",

494 
	`≠r_hash_gë
(
ba£
, "ba£2", 
APR_HASH_KEY_STRING
));

495 
	`ABTS_STR_EQUAL
(
tc
, "value3",

496 
	`≠r_hash_gë
(
ba£
, "ba£3", 
APR_HASH_KEY_STRING
));

497 
	`ABTS_STR_EQUAL
(
tc
, "value4",

498 
	`≠r_hash_gë
(
ba£
, "ba£4", 
APR_HASH_KEY_STRING
));

499 
	`ABTS_STR_EQUAL
(
tc
, "value5",

500 
	`≠r_hash_gë
(
ba£
, "ba£5", 
APR_HASH_KEY_STRING
));

502 
	`ABTS_STR_EQUAL
(
tc
, "value1",

503 
	`≠r_hash_gë
(
ovîœy
, "ovîœy1", 
APR_HASH_KEY_STRING
));

504 
	`ABTS_STR_EQUAL
(
tc
, "value2",

505 
	`≠r_hash_gë
(
ovîœy
, "ovîœy2", 
APR_HASH_KEY_STRING
));

506 
	`ABTS_STR_EQUAL
(
tc
, "value3",

507 
	`≠r_hash_gë
(
ovîœy
, "ovîœy3", 
APR_HASH_KEY_STRING
));

508 
	`ABTS_STR_EQUAL
(
tc
, "value4",

509 
	`≠r_hash_gë
(
ovîœy
, "ovîœy4", 
APR_HASH_KEY_STRING
));

510 
	`ABTS_STR_EQUAL
(
tc
, "value5",

511 
	`≠r_hash_gë
(
ovîœy
, "ovîœy5", 
APR_HASH_KEY_STRING
));

512 
	}
}

514 
abts_suôe
 *
	$ã°hash
(
abts_suôe
 *
suôe
)

516 
suôe
 = 
	`ADD_SUITE
(suite)

518 
	`abts_run_ã°
(
suôe
, 
hash_make
, 
NULL
);

519 
	`abts_run_ã°
(
suôe
, 
hash_£t
, 
NULL
);

520 
	`abts_run_ã°
(
suôe
, 
hash_ª£t
, 
NULL
);

521 
	`abts_run_ã°
(
suôe
, 
ßme_vÆue
, 
NULL
);

522 
	`abts_run_ã°
(
suôe
, 
ßme_vÆue_cu°om
, 
NULL
);

523 
	`abts_run_ã°
(
suôe
, 
key_•a˚
, 
NULL
);

524 
	`abts_run_ã°
(
suôe
, 
dñëe_key
, 
NULL
);

526 
	`abts_run_ã°
(
suôe
, 
hash_cou¡_0
, 
NULL
);

527 
	`abts_run_ã°
(
suôe
, 
hash_cou¡_1
, 
NULL
);

528 
	`abts_run_ã°
(
suôe
, 
hash_cou¡_5
, 
NULL
);

530 
	`abts_run_ã°
(
suôe
, 
hash_˛ór
, 
NULL
);

531 
	`abts_run_ã°
(
suôe
, 
hash_åavî£
, 
NULL
);

532 
	`abts_run_ã°
(
suôe
, 
summ©i⁄_ã°
, 
NULL
);

534 
	`abts_run_ã°
(
suôe
, 
ovîœy_em±y
, 
NULL
);

535 
	`abts_run_ã°
(
suôe
, 
ovîœy_2unique
, 
NULL
);

536 
	`abts_run_ã°
(
suôe
, 
ovîœy_ßme
, 
NULL
);

537 
	`abts_run_ã°
(
suôe
, 
ovîœy_„tch
, 
NULL
);

539  
suôe
;

540 
	}
}

	@test/testipsub.c

17 
	~"ã°utû.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_√tw‹k_io.h
"

20 
	~"≠r_î∫o.h
"

22 
	$ã°_bad_öput
(
abts_ˇ£
 *
tc
, *
d©a
)

25 c⁄° *
ù°r
;

26 c⁄° *
mask
;

27 
≠r_°©us_t
 
ex≥˘ed_rv
;

28 } 
ã°ˇ£s
[] =

31 {"my.ho°.«me", 
NULL
, 
APR_EINVAL
}

32 ,{"127.0.0.256", 
NULL
, 
APR_EBADIP
}

33 ,{"127.0.0.1", 
NULL
, 
APR_SUCCESS
}

34 ,{"127.0.0.1", "32", 
APR_SUCCESS
}

35 ,{"127.0.0.1", "1", 
APR_SUCCESS
}

36 ,{"127.0.0.1", "15", 
APR_SUCCESS
}

37 ,{"127.0.0.1", "-1", 
APR_EBADMASK
}

38 ,{"127.0.0.1", "0", 
APR_EBADMASK
}

39 ,{"127.0.0.1", "33", 
APR_EBADMASK
}

40 ,{"127.0.0.1", "255.0.0.0", 
APR_SUCCESS
}

41 ,{"127.0.0.1", "255.0", 
APR_EBADMASK
}

42 ,{"127.0.0.1", "255.255.256.0", 
APR_EBADMASK
}

43 ,{"127.0.0.1", "abc", 
APR_EBADMASK
}

44 ,{"127", 
NULL
, 
APR_SUCCESS
}

45 ,{"127.0.0.1.2", 
NULL
, 
APR_EBADIP
}

46 ,{"127.0.0.1.2", "8", 
APR_EBADIP
}

47 ,{"127", "255.0.0.0", 
APR_EBADIP
}

48 #i‡
APR_HAVE_IPV6


49 ,{"::1", 
NULL
, 
APR_SUCCESS
}

50 ,{"::1", "20", 
APR_SUCCESS
}

51 ,{"::ffff:9.67.113.15", 
NULL
, 
APR_EBADIP
}

52 ,{"„80::", "16", 
APR_SUCCESS
}

53 ,{"„80::", "255.0.0.0", 
APR_EBADMASK
}

54 ,{"„80::1", "0", 
APR_EBADMASK
}

55 ,{"„80::1", "-1", 
APR_EBADMASK
}

56 ,{"„80::1", "1", 
APR_SUCCESS
}

57 ,{"„80::1", "33", 
APR_SUCCESS
}

58 ,{"„80::1", "128", 
APR_SUCCESS
}

59 ,{"„80::1", "129", 
APR_EBADMASK
}

62 ,{"::ffff:9.67.113.15", 
NULL
, 
APR_EBADIP
}

65 
i
;

66 
≠r_ùsub√t_t
 *
ùsub
;

67 
≠r_°©us_t
 
rv
;

69 
i
 = 0; i < ( 
ã°ˇ£s
 / Åestcases[0]); i++) {

70 
rv
 = 
	`≠r_ùsub√t_¸óã
(&
ùsub
, 
ã°ˇ£s
[
i
].
ù°r
,Åe°ˇ£s[i].
mask
, 
p
);

71 
	`ABTS_INT_EQUAL
(
tc
, 
ã°ˇ£s
[
i
].
ex≥˘ed_rv
, 
rv
);

73 
	}
}

75 
	$ã°_sögÀt⁄_sub√ts
(
abts_ˇ£
 *
tc
, *
d©a
)

77 c⁄° *
v4addrs
[] = {

82 
≠r_ùsub√t_t
 *
ùsub
;

83 
≠r_sockaddr_t
 *
ß
;

84 
≠r_°©us_t
 
rv
;

85 
i
, 
j
, 
rc
;

87 
i
 = 0; i <  
v4addrs
 /  v4addrs[0]; i++) {

88 
rv
 = 
	`≠r_ùsub√t_¸óã
(&
ùsub
, 
v4addrs
[
i
], 
NULL
, 
p
);

89 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

90 
j
 = 0; j <  
v4addrs
 /  v4addrs[0]; j++) {

91 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, 
v4addrs
[
j
], 
APR_INET
, 0, 0, 
p
);

92 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

93 
rc
 = 
	`≠r_ùsub√t_ã°
(
ùsub
, 
ß
);

94 i‡(!
	`°rcmp
(
v4addrs
[
i
], v4addrs[
j
])) {

95 
	`ABTS_TRUE
(
tc
, 
rc
 != 0);

98 
	`ABTS_TRUE
(
tc
, 
rc
 == 0);

104 
	}
}

106 
	$ã°_öãª°ög_sub√ts
(
abts_ˇ£
 *
tc
, *
d©a
)

109 c⁄° *
ù°r
, *
mask
;

110 
Ámûy
;

111 *
ö_sub√t
, *
nŸ_ö_sub√t
;

112 } 
ã°ˇ£s
[] =

114 {"9.67", 
NULL
, 
APR_INET
, "9.67.113.15", "10.1.2.3"}

115 ,{"9.67.0.0", "16", 
APR_INET
, "9.67.113.15", "10.1.2.3"}

116 ,{"9.67.0.0", "255.255.0.0", 
APR_INET
, "9.67.113.15", "10.1.2.3"}

117 ,{"9.67.113.99", "16", 
APR_INET
, "9.67.113.15", "10.1.2.3"}

118 ,{"9.67.113.99", "255.255.255.0", 
APR_INET
, "9.67.113.15", "10.1.2.3"}

119 ,{"127", 
NULL
, 
APR_INET
, "127.0.0.1", "10.1.2.3"}

120 ,{"127.0.0.1", "8", 
APR_INET
, "127.0.0.1", "10.1.2.3"}

121 #i‡
APR_HAVE_IPV6


122 ,{"38.0.0.0", "8", 
APR_INET6
, "::ffff:38.1.1.1", "2600::1"}

123 ,{"„80::", "8", 
APR_INET6
, "fe80::1", "ff01::1"}

124 ,{"ff01::", "8", 
APR_INET6
, "ff01::1", "fe80::1"}

125 ,{"3FFE:8160::", "28", 
APR_INET6
, "3ffE:816e:abcd:1234::1", "3ffe:8170::1"}

126 ,{"127.0.0.1", 
NULL
, 
APR_INET6
, "::ffff:127.0.0.1", "fe80::1"}

127 ,{"127.0.0.1", "8", 
APR_INET6
, "::ffff:127.0.0.1", "fe80::1"}

130 
≠r_ùsub√t_t
 *
ùsub
;

131 
≠r_sockaddr_t
 *
ß
;

132 
≠r_°©us_t
 
rv
;

133 
i
, 
rc
;

135 
i
 = 0; i <  
ã°ˇ£s
 / Åestcases[0]; i++) {

136 
rv
 = 
	`≠r_ùsub√t_¸óã
(&
ùsub
, 
ã°ˇ£s
[
i
].
ù°r
,Åe°ˇ£s[i].
mask
, 
p
);

137 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

138 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, 
ã°ˇ£s
[
i
].
ö_sub√t
,Åe°ˇ£s[i].
Ámûy
, 0, 0, 
p
);

139 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

140 
	`ABTS_TRUE
(
tc
, 
ß
 !
NULL
);

141 i‡(!
ß
) ;

142 
rc
 = 
	`≠r_ùsub√t_ã°
(
ùsub
, 
ß
);

143 
	`ABTS_TRUE
(
tc
, 
rc
 != 0);

144 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, 
ã°ˇ£s
[
i
].
nŸ_ö_sub√t
,Åe°ˇ£s[i].
Ámûy
, 0, 0, 
p
);

145 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

146 
rc
 = 
	`≠r_ùsub√t_ã°
(
ùsub
, 
ß
);

147 
	`ABTS_TRUE
(
tc
, 
rc
 == 0);

149 
	}
}

151 
	$ã°_badmask_°r
(
abts_ˇ£
 *
tc
, *
d©a
)

153 
buf
[128];

155 
	`ABTS_STR_EQUAL
(
tc
, 
	`≠r_°ªº‹
(
APR_EBADMASK
, 
buf
,  buf),

157 
	}
}

159 
	$ã°_badù_°r
(
abts_ˇ£
 *
tc
, *
d©a
)

161 
buf
[128];

163 
	`ABTS_STR_EQUAL
(
tc
, 
	`≠r_°ªº‹
(
APR_EBADIP
, 
buf
,  buf),

165 
	}
}

167 
abts_suôe
 *
	$ã°ùsub
(
abts_suôe
 *
suôe
)

169 
suôe
 = 
	`ADD_SUITE
(suite)

171 
	`abts_run_ã°
(
suôe
, 
ã°_bad_öput
, 
NULL
);

172 
	`abts_run_ã°
(
suôe
, 
ã°_sögÀt⁄_sub√ts
, 
NULL
);

173 
	`abts_run_ã°
(
suôe
, 
ã°_öãª°ög_sub√ts
, 
NULL
);

174 
	`abts_run_ã°
(
suôe
, 
ã°_badmask_°r
, 
NULL
);

175 
	`abts_run_ã°
(
suôe
, 
ã°_badù_°r
, 
NULL
);

176  
suôe
;

177 
	}
}

	@test/testlfs.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_fûe_öfo.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_pﬁl.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_mm≠.h
"

25 
	~"ã°utû.h
"

31 #i‡
APR_HAS_LARGE_FILES


36 
≠r_off_t
 
	g⁄eMB
 = 
APR_INT64_C
(2) << 19;

37 
≠r_off_t
 
	geightGB
 = 
APR_INT64_C
(2) << 32;

39 
	gmadefûe
 = 0;

41 
	#PRECOND
 i‡(!
madefûe
Ë{ 
	`ABTS_NOT_IMPL
(
tc
, "L¨gêfûêã°†nŸÉ«bÀd"); ; }

	)

43 
	#TESTDIR
 "lf°e°s"

	)

44 
	#TESTFILE
 "œrge.bö"

	)

45 
	#TESTFN
 "lf°e°s/œrge.bö"

	)

47 
	$ã°_›í
(
abts_ˇ£
 *
tc
, *
d©a
)

49 
≠r_fûe_t
 *
f
;

50 
≠r_föfo_t
 
ã°size
;

51 
≠r_°©us_t
 
rv
;

53 
rv
 = 
	`≠r_dú_make
(
TESTDIR
, 
APR_OS_DEFAULT
, 
p
);

54 i‡(
rv
 && !
	`APR_STATUS_IS_EEXIST
(rv)) {

55 
	`APR_ASSERT_SUCCESS
(
tc
, "makêã° dúe˘‹y", 
rv
);

59 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
TESTFN
, 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE


60 | 
APR_FOPEN_TRUNCATE
 | 
APR_FOPEN_SPARSE
,

61 
APR_OS_DEFAULT
, 
p
);

63 
	`APR_ASSERT_SUCCESS
(
tc
, "›í fûe", 
rv
);

65 
	`APR_ASSERT_SUCCESS
(
tc
, "TrunˇãÅÿ1MB", 
rv
 = 
	`≠r_fûe_åunc
(
f
, 
⁄eMB
+1));

67 i‡(
rv
 =
APR_SUCCESS
) {

68 
rv
 = 
	`≠r_fûe_öfo_gë
(&
ã°size
, 
APR_FINFO_CSIZE
, 
f
);

76 i‡(
rv
 !
APR_SUCCESS
 || (
ã°size
.
csize
 > 
⁄eMB


77 && 
ã°size
.
csize
 < 
⁄eMB
 * 2)) {

78 
	`ABTS_NOT_IMPL
(
tc
, "Creation ofÜarge file (apparentlyÇot sparse)");

80 
madefûe
 = 0;

84 
rv
 = 
	`≠r_fûe_åunc
(
f
, 
eightGB
);

88 i‡(
	`APR_STATUS_IS_EINVAL
(
rv
)

89 #ifde‡
EFBIG


90 || 
rv
 =
EFBIG


93 
	`ABTS_NOT_IMPL
(
tc
, "Creation ofÜarge file (rlimit, quota or fs)");

96 
	`APR_ASSERT_SUCCESS
(
tc
, "åunˇã fûêtÿ8gb", 
rv
);

98 
madefûe
 = 
rv
 =
APR_SUCCESS
;

101 
	`APR_ASSERT_SUCCESS
(
tc
, "˛o£Ü¨gêfûe", 
	`≠r_fûe_˛o£
(
f
));

103 i‡(!
madefûe
) {

104 
	`APR_ASSERT_SUCCESS
(
tc
, "ªmovêœrgêfûe", 
	`≠r_fûe_ªmove
(
TESTFN
, 
p
));

106 
	}
}

108 
	$ã°_ª›í
(
abts_ˇ£
 *
tc
, *
d©a
)

110 
≠r_fûe_t
 *
fh
;

111 
≠r_föfo_t
 
föfo
;

112 
≠r_°©us_t
 
rv
;

114 
PRECOND
;

116 
rv
 = 
	`≠r_fûe_›í
(&
fh
, 
TESTFN
, 
APR_FOPEN_SPARSE
 | 
APR_FOPEN_READ
,

117 
APR_OS_DEFAULT
, 
p
);

118 
	`APR_ASSERT_SUCCESS
(
tc
, "ª-›í 8GB fûe", 
rv
);

120 
	`APR_ASSERT_SUCCESS
(
tc
, "file_info_get failed",

121 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_NORM
, 
fh
));

123 
	`ABTS_ASSERT
(
tc
, "file_info_get gave incorrect size",

124 
föfo
.
size
 =
eightGB
);

126 
	`APR_ASSERT_SUCCESS
(
tc
, "ª-˛o£Ü¨gêfûe", 
	`≠r_fûe_˛o£
(
fh
));

127 
	}
}

129 
	$ã°_°©
(
abts_ˇ£
 *
tc
, *
d©a
)

131 
≠r_föfo_t
 
föfo
;

133 
PRECOND
;

135 
	`APR_ASSERT_SUCCESS
(
tc
, "statÜarge file",

136 
	`≠r_°©
(&
föfo
, 
TESTFN
, 
APR_FINFO_NORM
, 
p
));

138 
	`ABTS_ASSERT
(
tc
, "°© gavêöc‹ª˘ size", 
föfo
.
size
 =
eightGB
);

139 
	}
}

141 
	$ã°_ªaddú
(
abts_ˇ£
 *
tc
, *
d©a
)

143 
≠r_dú_t
 *
dh
;

144 
≠r_°©us_t
 
rv
;

146 
PRECOND
;

148 
	`APR_ASSERT_SUCCESS
(
tc
, "openÅest directory",

149 
	`≠r_dú_›í
(&
dh
, 
TESTDIR
, 
p
));

152 
≠r_föfo_t
 
föfo
;

154 
rv
 = 
	`≠r_dú_ªad
(&
föfo
, 
APR_FINFO_MIN
, 
dh
);

156 i‡(
rv
 =
APR_SUCCESS
 && 
	`°rcmp
(
föfo
.
«me
, 
TESTFILE
) == 0) {

157 
	`ABTS_ASSERT
(
tc
, "apr_dir_read gave incorrect size forÜarge file",

158 
föfo
.
size
 =
eightGB
);

161 } 
rv
 =
APR_SUCCESS
);

163 i‡(!
	`APR_STATUS_IS_ENOENT
(
rv
)) {

164 
	`APR_ASSERT_SUCCESS
(
tc
, "≠r_dú_ªad faûed", 
rv
);

167 
	`APR_ASSERT_SUCCESS
(
tc
, "closeÅest directory",

168 
	`≠r_dú_˛o£
(
dh
));

169 
	}
}

171 
	#TESTSTR
 "Hñlo, w‹ld."

	)

173 
	$ã°_≠≥nd
(
abts_ˇ£
 *
tc
, *
d©a
)

175 
≠r_fûe_t
 *
fh
;

176 
≠r_föfo_t
 
föfo
;

177 
≠r_°©us_t
 
rv
;

179 
PRECOND
;

181 
rv
 = 
	`≠r_fûe_›í
(&
fh
, 
TESTFN
, 
APR_FOPEN_SPARSE
 | 
APR_FOPEN_WRITE


182 | 
APR_FOPEN_APPEND
,

183 
APR_OS_DEFAULT
, 
p
);

184 
	`APR_ASSERT_SUCCESS
(
tc
, "›í 8GB fûêf‹áµíd", 
rv
);

186 
	`APR_ASSERT_SUCCESS
(
tc
, "appendÅo 8GB file",

187 
	`≠r_fûe_wrôe_fuŒ
(
fh
, 
TESTSTR
, 
	`°æí
(TESTSTR), 
NULL
));

189 
	`APR_ASSERT_SUCCESS
(
tc
, "file_info_get failed",

190 
	`≠r_fûe_öfo_gë
(&
föfo
, 
APR_FINFO_NORM
, 
fh
));

192 
	`ABTS_ASSERT
(
tc
, "file_info_get gave incorrect size",

193 
föfo
.
size
 =
eightGB
 + 
	`°æí
(
TESTSTR
));

195 
	`APR_ASSERT_SUCCESS
(
tc
, "˛o£ 8GB fûe", 
	`≠r_fûe_˛o£
(
fh
));

196 
	}
}

198 
	$ã°_£ek
(
abts_ˇ£
 *
tc
, *
d©a
)

200 
≠r_fûe_t
 *
fh
;

201 
≠r_off_t
 
pos
;

202 
≠r_°©us_t
 
rv
;

204 
PRECOND
;

206 
rv
 = 
	`≠r_fûe_›í
(&
fh
, 
TESTFN
, 
APR_FOPEN_SPARSE
 | 
APR_FOPEN_WRITE
,

207 
APR_OS_DEFAULT
, 
p
);

208 
	`APR_ASSERT_SUCCESS
(
tc
, "›í 8GB fûêf‹ wrôög", 
rv
);

210 
pos
 = 0;

211 
	`APR_ASSERT_SUCCESS
(
tc
, "relative seekÅoÉnd",

212 
	`≠r_fûe_£ek
(
fh
, 
APR_END
, &
pos
));

213 
	`ABTS_ASSERT
(
tc
, "£ekÅÿEND gavê8GB", 
pos
 =
eightGB
);

215 
pos
 = 
eightGB
;

216 
	`APR_ASSERT_SUCCESS
(
tc
, "£ekÅÿ8GB", 
	`≠r_fûe_£ek
(
fh
, 
APR_SET
, &
pos
));

217 
	`ABTS_ASSERT
(
tc
, "£ek gavê8GB off£t", 
pos
 =
eightGB
);

219 
pos
 = 0;

220 
	`APR_ASSERT_SUCCESS
(
tc
, "ªœtivê£ekÅÿ0", 
	`≠r_fûe_£ek
(
fh
, 
APR_CUR
, &
pos
));

221 
	`ABTS_ASSERT
(
tc
, "ªœtivê£ek gavê8GB off£t", 
pos
 =
eightGB
);

223 
	`≠r_fûe_˛o£
(
fh
);

224 
	}
}

226 
	$ã°_wrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

228 
≠r_fûe_t
 *
fh
;

229 
≠r_off_t
 
pos
 = 
eightGB
 - 4;

230 
≠r_°©us_t
 
rv
;

232 
PRECOND
;

234 
rv
 = 
	`≠r_fûe_›í
(&
fh
, 
TESTFN
, 
APR_FOPEN_SPARSE
 | 
APR_FOPEN_WRITE
,

235 
APR_OS_DEFAULT
, 
p
);

236 
	`APR_ASSERT_SUCCESS
(
tc
, "ª-›í 8GB fûe", 
rv
);

238 
	`APR_ASSERT_SUCCESS
(
tc
, "seekÅo 8GB - 4",

239 
	`≠r_fûe_£ek
(
fh
, 
APR_SET
, &
pos
));

240 
	`ABTS_ASSERT
(
tc
, "£ek gavê8GB-4 off£t", 
pos
 =
eightGB
 - 4);

242 
	`APR_ASSERT_SUCCESS
(
tc
, "write magic stringÅo 8GB-4",

243 
	`≠r_fûe_wrôe_fuŒ
(
fh
, "FISH", 4, 
NULL
));

245 
	`APR_ASSERT_SUCCESS
(
tc
, "˛o£ 8GB fûe", 
	`≠r_fûe_˛o£
(
fh
));

246 
	}
}

249 #i‡
APR_HAS_MMAP


250 
	$ã°_mm≠
(
abts_ˇ£
 *
tc
, *
d©a
)

252 
≠r_mm≠_t
 *
m≠
;

253 
≠r_fûe_t
 *
fh
;

254 
≠r_size_t
 
Àn
 = 65536;

255 
≠r_off_t
 
off
 = 
eightGB
 - 
Àn
;

256 
≠r_°©us_t
 
rv
;

257 *
±r
;

259 
PRECOND
;

261 
rv
 = 
	`≠r_fûe_›í
(&
fh
, 
TESTFN
, 
APR_FOPEN_SPARSE
 | 
APR_FOPEN_READ
,

262 
APR_OS_DEFAULT
, 
p
);

263 
	`APR_ASSERT_SUCCESS
(
tc
, "›í 8gb fûêf‹ mm≠", 
rv
);

265 
	`APR_ASSERT_SUCCESS
(
tc
, "mmap 8GB file",

266 
	`≠r_mm≠_¸óã
(&
m≠
, 
fh
, 
off
, 
Àn
, 
APR_MMAP_READ
, 
p
));

268 
	`APR_ASSERT_SUCCESS
(
tc
, "˛o£ fûe", 
	`≠r_fûe_˛o£
(
fh
));

270 
	`ABTS_ASSERT
(
tc
, "m≠≥dá 64K block", 
m≠
->
size
 =
Àn
);

272 
	`APR_ASSERT_SUCCESS
(
tc
, "getÖointer into mmapedÑegion",

273 
	`≠r_mm≠_off£t
(&
±r
, 
m≠
, 
Àn
 - 4));

274 
	`ABTS_ASSERT
(
tc
, "poöã∏wa†nŸ NULL", 
±r
 !
NULL
);

276 
	`ABTS_ASSERT
(
tc
, "foundÅhêmagi¯°rög", 
	`memcmp
(
±r
, "FISH", 4) == 0);

278 
	`APR_ASSERT_SUCCESS
(
tc
, "dñëêmm≠ h™dÀ", 
	`≠r_mm≠_dñëe
(
m≠
));

279 
	}
}

282 
	$ã°_f‹m©
(
abts_ˇ£
 *
tc
, *
d©a
)

284 
≠r_off_t
 
off
;

286 
PRECOND
;

288 
off
 = 
	`≠r_©oi64
(
	`≠r_off_t_tﬂ
(
p
, 
eightGB
));

290 
	`ABTS_ASSERT
(
tc
, "apr_atoi64Öarsedápr_off_t_toaÑesult incorrectly",

291 
off
 =
eightGB
);

292 
	}
}

294 
	#TESTBUFFN
 
TESTDIR
 "/buf„r.bö"

	)

296 
	$ã°_buf„ªd
(
abts_ˇ£
 *
tc
, *
d©a
)

298 
≠r_off_t
 
off
;

299 
≠r_fûe_t
 *
f
;

300 
≠r_°©us_t
 
rv
;

302 
PRECOND
;

304 
rv
 = 
	`≠r_fûe_›í
(&
f
, 
TESTBUFFN
, 
APR_FOPEN_CREATE
 | 
APR_FOPEN_WRITE


305 | 
APR_FOPEN_TRUNCATE
 | 
APR_FOPEN_BUFFERED


306 | 
APR_FOPEN_SPARSE
,

307 
APR_OS_DEFAULT
, 
p
);

308 
	`APR_ASSERT_SUCCESS
(
tc
, "›í buf„ªd fûe", 
rv
);

310 
	`APR_ASSERT_SUCCESS
(
tc
, "truncateÅo 8GB",

311 
	`≠r_fûe_åunc
(
f
, 
eightGB
));

313 
off
 = 
eightGB
;

314 
	`APR_ASSERT_SUCCESS
(
tc
, "seekÅo 8GB",

315 
	`≠r_fûe_£ek
(
f
, 
APR_SET
, &
off
));

316 
	`ABTS_ASSERT
(
tc
, "returned seekÖosition still 8GB",

317 
off
 =
eightGB
);

319 
off
 = 0;

320 
	`APR_ASSERT_SUCCESS
(
tc
, "relative seek",

321 
	`≠r_fûe_£ek
(
f
, 
APR_CUR
, &
off
));

322 
	`ABTS_ASSERT
(
tc
, "relative seek stillát 8GB",

323 
off
 =
eightGB
);

325 
off
 = 0;

326 
	`APR_ASSERT_SUCCESS
(
tc
, "end-relative seek",

327 
	`≠r_fûe_£ek
(
f
, 
APR_END
, &
off
));

328 
	`ABTS_ASSERT
(
tc
, "end-relative seek stillát 8GB",

329 
off
 =
eightGB
);

331 
off
 = -
eightGB
;

332 
	`APR_ASSERT_SUCCESS
(
tc
, "relative seekÅo beginning",

333 
	`≠r_fûe_£ek
(
f
, 
APR_CUR
, &
off
));

334 
	`ABTS_ASSERT
(
tc
, "seekÅo beginning got zero",

335 
off
 == 0);

337 
	`APR_ASSERT_SUCCESS
(
tc
, "close buffered file",

338 
	`≠r_fûe_˛o£
(
f
));

339 
	}
}

343 
	$ã°_nﬁfs
(
abts_ˇ£
 *
tc
, *
d©a
)

345 
	`ABTS_NOT_IMPL
(
tc
, "Large FilesÇot supported");

346 
	}
}

350 
abts_suôe
 *
	$ã°lfs
(
abts_suôe
 *
suôe
)

352 
suôe
 = 
	`ADD_SUITE
(suite)

354 #i‡
APR_HAS_LARGE_FILES


355 
	`abts_run_ã°
(
suôe
, 
ã°_›í
, 
NULL
);

356 
	`abts_run_ã°
(
suôe
, 
ã°_ª›í
, 
NULL
);

357 
	`abts_run_ã°
(
suôe
, 
ã°_°©
, 
NULL
);

358 
	`abts_run_ã°
(
suôe
, 
ã°_ªaddú
, 
NULL
);

359 
	`abts_run_ã°
(
suôe
, 
ã°_£ek
, 
NULL
);

360 
	`abts_run_ã°
(
suôe
, 
ã°_≠≥nd
, 
NULL
);

361 
	`abts_run_ã°
(
suôe
, 
ã°_wrôe
, 
NULL
);

362 #i‡
APR_HAS_MMAP


363 
	`abts_run_ã°
(
suôe
, 
ã°_mm≠
, 
NULL
);

365 
	`abts_run_ã°
(
suôe
, 
ã°_f‹m©
, 
NULL
);

366 
	`abts_run_ã°
(
suôe
, 
ã°_buf„ªd
, 
NULL
);

368 
	`abts_run_ã°
(
suôe
, 
ã°_nﬁfs
, 
NULL
);

371  
suôe
;

372 
	}
}

	@test/testlock.c

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_thªad_muãx.h
"

20 
	~"≠r_thªad_rwlock.h
"

21 
	~"≠r_thªad_c⁄d.h
"

22 
	~"≠r_î∫o.h
"

23 
	~"≠r_gíîÆ.h
"

24 
	~"≠r_gë›t.h
"

25 
	~"ã°utû.h
"

27 #i‡
APR_HAS_THREADS


29 
	#MAX_ITER
 40000

	)

30 
	#MAX_COUNTER
 100000

	)

31 
	#MAX_RETRY
 5

	)

33 *
APR_THREAD_FUNC
 
thªad_rwlock_func
(
≠r_thªad_t
 *
thd
, *
d©a
);

34 *
APR_THREAD_FUNC
 
thªad_muãx_fun˘i⁄
(
≠r_thªad_t
 *
thd
, *
d©a
);

35 *
APR_THREAD_FUNC
 
thªad_c⁄d_¥odu˚r
(
≠r_thªad_t
 *
thd
, *
d©a
);

36 *
APR_THREAD_FUNC
 
thªad_c⁄d_c⁄sumî
(
≠r_thªad_t
 *
thd
, *
d©a
);

38 
≠r_thªad_muãx_t
 *
	gthªad_muãx
;

39 
≠r_thªad_rwlock_t
 *
	grwlock
;

40 
	gi
 = 0, 
	gx
 = 0;

42 
	gbuff
[
MAX_COUNTER
];

45 
≠r_thªad_muãx_t
 *
	mmuãx
;

46 
	m≈ut
;

47 
	mnvÆ
;

48 } 
	gput
;

51 
≠r_thªad_muãx_t
 *
	mmuãx
;

52 
≠r_thªad_c⁄d_t
 *
	mc⁄d
;

53 
	mƒódy
;

54 } 
	gƒódy
;

56 
≠r_thªad_muãx_t
 *
	gtimeout_muãx
;

57 
≠r_thªad_c⁄d_t
 *
	gtimeout_c⁄d
;

59 *
APR_THREAD_FUNC
 
	$thªad_rwlock_func
(
≠r_thªad_t
 *
thd
, *
d©a
)

61 
exôLo›
 = 1;

65 
	`≠r_thªad_rwlock_rdlock
(
rwlock
);

66 i‡(
i
 =
MAX_ITER
)

67 
exôLo›
 = 0;

68 
	`≠r_thªad_rwlock_u∆ock
(
rwlock
);

70 i‡(!
exôLo›
)

73 
	`≠r_thªad_rwlock_wæock
(
rwlock
);

74 i‡(
i
 !
MAX_ITER
)

76 
i
++;

77 
x
++;

79 
	`≠r_thªad_rwlock_u∆ock
(
rwlock
);

81  
NULL
;

82 
	}
}

84 *
APR_THREAD_FUNC
 
	$thªad_muãx_fun˘i⁄
(
≠r_thªad_t
 *
thd
, *
d©a
)

86 
exôLo›
 = 1;

89 
	`≠r_¶ìp
 (1);

93 
	`≠r_thªad_muãx_lock
(
thªad_muãx
);

94 i‡(
i
 =
MAX_ITER
)

95 
exôLo›
 = 0;

98 
i
++;

99 
x
++;

101 
	`≠r_thªad_muãx_u∆ock
(
thªad_muãx
);

103 i‡(!
exôLo›
)

106  
NULL
;

107 
	}
}

109 *
APR_THREAD_FUNC
 
	$thªad_c⁄d_¥odu˚r
(
≠r_thªad_t
 *
thd
, *
d©a
)

112 
	`≠r_thªad_muãx_lock
(
put
.
muãx
);

113 i‡(
put
.
≈ut
 >
MAX_COUNTER
) {

114 
	`≠r_thªad_muãx_u∆ock
(
put
.
muãx
);

115  
NULL
;

117 
buff
[
put
.
≈ut
] =Öut.
nvÆ
;

118 
put
.
≈ut
++;

119 
put
.
nvÆ
++;

120 
	`≠r_thªad_muãx_u∆ock
(
put
.
muãx
);

122 
	`≠r_thªad_muãx_lock
(
ƒódy
.
muãx
);

123 i‡(
ƒódy
.nready == 0)

124 
	`≠r_thªad_c⁄d_sig«l
(
ƒódy
.
c⁄d
);

125 
ƒódy
.nready++;

126 
	`≠r_thªad_muãx_u∆ock
(
ƒódy
.
muãx
);

128 *((*Ë
d©a
) += 1;

131  
NULL
;

132 
	}
}

134 *
APR_THREAD_FUNC
 
	$thªad_c⁄d_c⁄sumî
(
≠r_thªad_t
 *
thd
, *
d©a
)

136 
i
;

138 
i
 = 0; i < 
MAX_COUNTER
; i++) {

139 
	`≠r_thªad_muãx_lock
(
ƒódy
.
muãx
);

140 
ƒódy
.nready == 0)

141 
	`≠r_thªad_c⁄d_waô
(
ƒódy
.
c⁄d
,Çªady.
muãx
);

142 
ƒódy
.nready--;

143 
	`≠r_thªad_muãx_u∆ock
(
ƒódy
.
muãx
);

145 i‡(
buff
[
i
] != i)

146 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
buff
[i]);

149  
NULL
;

150 
	}
}

152 
	$ã°_thªad_muãx
(
abts_ˇ£
 *
tc
, *
d©a
)

154 
≠r_thªad_t
 *
t1
, *
t2
, *
t3
, *
t4
;

155 
≠r_°©us_t
 
s1
, 
s2
, 
s3
, 
s4
;

157 
s1
 = 
	`≠r_thªad_muãx_¸óã
(&
thªad_muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

158 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s1
);

159 
	`ABTS_PTR_NOTNULL
(
tc
, 
thªad_muãx
);

161 
i
 = 0;

162 
x
 = 0;

164 
s1
 = 
	`≠r_thªad_¸óã
(&
t1
, 
NULL
, 
thªad_muãx_fun˘i⁄
, NULL, 
p
);

165 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s1
);

166 
s2
 = 
	`≠r_thªad_¸óã
(&
t2
, 
NULL
, 
thªad_muãx_fun˘i⁄
, NULL, 
p
);

167 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s2
);

168 
s3
 = 
	`≠r_thªad_¸óã
(&
t3
, 
NULL
, 
thªad_muãx_fun˘i⁄
, NULL, 
p
);

169 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s3
);

170 
s4
 = 
	`≠r_thªad_¸óã
(&
t4
, 
NULL
, 
thªad_muãx_fun˘i⁄
, NULL, 
p
);

171 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s4
);

173 
	`≠r_thªad_joö
(&
s1
, 
t1
);

174 
	`≠r_thªad_joö
(&
s2
, 
t2
);

175 
	`≠r_thªad_joö
(&
s3
, 
t3
);

176 
	`≠r_thªad_joö
(&
s4
, 
t4
);

178 
	`ABTS_INT_EQUAL
(
tc
, 
MAX_ITER
, 
x
);

179 
	}
}

181 
	$ã°_thªad_rwlock
(
abts_ˇ£
 *
tc
, *
d©a
)

183 
≠r_thªad_t
 *
t1
, *
t2
, *
t3
, *
t4
;

184 
≠r_°©us_t
 
s1
, 
s2
, 
s3
, 
s4
;

186 
s1
 = 
	`≠r_thªad_rwlock_¸óã
(&
rwlock
, 
p
);

187 i‡(
s1
 =
APR_ENOTIMPL
) {

188 
	`ABTS_NOT_IMPL
(
tc
, "rwlocksÇot implemented");

191 
	`APR_ASSERT_SUCCESS
(
tc
, "rwlock_¸óã", 
s1
);

192 
	`ABTS_PTR_NOTNULL
(
tc
, 
rwlock
);

194 
i
 = 0;

195 
x
 = 0;

197 
s1
 = 
	`≠r_thªad_¸óã
(&
t1
, 
NULL
, 
thªad_rwlock_func
, NULL, 
p
);

198 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óãÅhªad 1", 
s1
);

199 
s2
 = 
	`≠r_thªad_¸óã
(&
t2
, 
NULL
, 
thªad_rwlock_func
, NULL, 
p
);

200 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óãÅhªad 2", 
s2
);

201 
s3
 = 
	`≠r_thªad_¸óã
(&
t3
, 
NULL
, 
thªad_rwlock_func
, NULL, 
p
);

202 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óãÅhªad 3", 
s3
);

203 
s4
 = 
	`≠r_thªad_¸óã
(&
t4
, 
NULL
, 
thªad_rwlock_func
, NULL, 
p
);

204 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óãÅhªad 4", 
s4
);

206 
	`≠r_thªad_joö
(&
s1
, 
t1
);

207 
	`≠r_thªad_joö
(&
s2
, 
t2
);

208 
	`≠r_thªad_joö
(&
s3
, 
t3
);

209 
	`≠r_thªad_joö
(&
s4
, 
t4
);

211 
	`ABTS_INT_EQUAL
(
tc
, 
MAX_ITER
, 
x
);

213 
	`≠r_thªad_rwlock_de°roy
(
rwlock
);

214 
	}
}

216 
	$ã°_c⁄d
(
abts_ˇ£
 *
tc
, *
d©a
)

218 
≠r_thªad_t
 *
p1
, *
p2
, *
p3
, *
p4
, *
c1
;

219 
≠r_°©us_t
 
s0
, 
s1
, 
s2
, 
s3
, 
s4
;

220 
cou¡1
, 
cou¡2
, 
cou¡3
, 
cou¡4
;

221 
sum
;

223 
	`APR_ASSERT_SUCCESS
(
tc
, "createÖut mutex",

224 
	`≠r_thªad_muãx_¸óã
(&
put
.
muãx
,

225 
APR_THREAD_MUTEX_DEFAULT
, 
p
));

226 
	`ABTS_PTR_NOTNULL
(
tc
, 
put
.
muãx
);

228 
	`APR_ASSERT_SUCCESS
(
tc
, "createÇready mutex",

229 
	`≠r_thªad_muãx_¸óã
(&
ƒódy
.
muãx
,

230 
APR_THREAD_MUTEX_DEFAULT
, 
p
));

231 
	`ABTS_PTR_NOTNULL
(
tc
, 
ƒódy
.
muãx
);

233 
	`APR_ASSERT_SUCCESS
(
tc
, "create condvar",

234 
	`≠r_thªad_c⁄d_¸óã
(&
ƒódy
.
c⁄d
, 
p
));

235 
	`ABTS_PTR_NOTNULL
(
tc
, 
ƒódy
.
c⁄d
);

237 
cou¡1
 = 
cou¡2
 = 
cou¡3
 = 
cou¡4
 = 0;

238 
put
.
≈ut
 =Öut.
nvÆ
 = 0;

239 
ƒódy
.nready = 0;

240 
i
 = 0;

241 
x
 = 0;

243 
s0
 = 
	`≠r_thªad_¸óã
(&
p1
, 
NULL
, 
thªad_c⁄d_¥odu˚r
, &
cou¡1
, 
p
);

244 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s0
);

245 
s1
 = 
	`≠r_thªad_¸óã
(&
p2
, 
NULL
, 
thªad_c⁄d_¥odu˚r
, &
cou¡2
, 
p
);

246 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s1
);

247 
s2
 = 
	`≠r_thªad_¸óã
(&
p3
, 
NULL
, 
thªad_c⁄d_¥odu˚r
, &
cou¡3
, 
p
);

248 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s2
);

249 
s3
 = 
	`≠r_thªad_¸óã
(&
p4
, 
NULL
, 
thªad_c⁄d_¥odu˚r
, &
cou¡4
, 
p
);

250 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s3
);

251 
s4
 = 
	`≠r_thªad_¸óã
(&
c1
, 
NULL
, 
thªad_c⁄d_c⁄sumî
, NULL, 
p
);

252 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s4
);

254 
	`≠r_thªad_joö
(&
s0
, 
p1
);

255 
	`≠r_thªad_joö
(&
s1
, 
p2
);

256 
	`≠r_thªad_joö
(&
s2
, 
p3
);

257 
	`≠r_thªad_joö
(&
s3
, 
p4
);

258 
	`≠r_thªad_joö
(&
s4
, 
c1
);

260 
	`APR_ASSERT_SUCCESS
(
tc
, "destroy condvar",

261 
	`≠r_thªad_c⁄d_de°roy
(
ƒódy
.
c⁄d
));

263 
sum
 = 
cou¡1
 + 
cou¡2
 + 
cou¡3
 + 
cou¡4
;

268 
	`ABTS_INT_EQUAL
(
tc
, 
MAX_COUNTER
, 
sum
);

269 
	}
}

271 
	$ã°_timeoutc⁄d
(
abts_ˇ£
 *
tc
, *
d©a
)

273 
≠r_°©us_t
 
s
;

274 
≠r_öãrvÆ_time_t
 
timeout
;

275 
≠r_time_t
 
begö
, 
íd
;

276 
i
;

278 
s
 = 
	`≠r_thªad_muãx_¸óã
(&
timeout_muãx
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

279 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s
);

280 
	`ABTS_PTR_NOTNULL
(
tc
, 
timeout_muãx
);

282 
s
 = 
	`≠r_thªad_c⁄d_¸óã
(&
timeout_c⁄d
, 
p
);

283 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
s
);

284 
	`ABTS_PTR_NOTNULL
(
tc
, 
timeout_c⁄d
);

286 
timeout
 = 
	`≠r_time_‰om_£c
(5);

288 
i
 = 0; i < 
MAX_RETRY
; i++) {

289 
	`≠r_thªad_muãx_lock
(
timeout_muãx
);

291 
begö
 = 
	`≠r_time_now
();

292 
s
 = 
	`≠r_thªad_c⁄d_timedwaô
(
timeout_c⁄d
, 
timeout_muãx
, 
timeout
);

293 
íd
 = 
	`≠r_time_now
();

294 
	`≠r_thªad_muãx_u∆ock
(
timeout_muãx
);

296 i‡(
s
 !
APR_SUCCESS
 && !
	`APR_STATUS_IS_TIMEUP
(s)) {

299 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
s
));

300 
	`ABTS_ASSERT
(
tc
, "TimîÑëu∫edÅoÿœã", 
íd
 - 
begö
 - 
timeout
 < 100000);

303 
	`ABTS_ASSERT
(
tc
, "Toÿm™yÑërõs", 
i
 < 
MAX_RETRY
);

304 
	`APR_ASSERT_SUCCESS
(
tc
, "UnableÅo destroyÅhe conditional",

305 
	`≠r_thªad_c⁄d_de°roy
(
timeout_c⁄d
));

306 
	}
}

310 #i‡!
APR_HAS_THREADS


311 
	$thªads_nŸ_im∂
(
abts_ˇ£
 *
tc
, *
d©a
)

313 
	`ABTS_NOT_IMPL
(
tc
, "ThreadsÇot implemented onÅhisÖlatform");

314 
	}
}

318 
abts_suôe
 *
	$ã°lock
(
abts_suôe
 *
suôe
)

320 
suôe
 = 
	`ADD_SUITE
(suite)

322 #i‡!
APR_HAS_THREADS


323 
	`abts_run_ã°
(
suôe
, 
thªads_nŸ_im∂
, 
NULL
);

325 
	`abts_run_ã°
(
suôe
, 
ã°_thªad_muãx
, 
NULL
);

326 
	`abts_run_ã°
(
suôe
, 
ã°_thªad_rwlock
, 
NULL
);

327 
	`abts_run_ã°
(
suôe
, 
ã°_c⁄d
, 
NULL
);

328 
	`abts_run_ã°
(
suôe
, 
ã°_timeoutc⁄d
, 
NULL
);

331  
suôe
;

332 
	}
}

	@test/testlockperf.c

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_thªad_muãx.h
"

19 
	~"≠r_thªad_rwlock.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_gë›t.h
"

24 
	~"î∫o.h
"

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~"ã°utû.h
"

29 #i‡!
APR_HAS_THREADS


30 
	$maö
()

32 
	`¥ötf
("ThisÖrogram won't work onÅhisÖlatform becauseÅhere isÇo "

35 
	}
}

38 
	#DEFAULT_MAX_COUNTER
 1000000

	)

39 
	#MAX_THREADS
 6

	)

41 
	gvîbo£
 = 0;

42 
	gmuãx_cou¡î
;

43 
	gmax_cou¡î
 = 
DEFAULT_MAX_COUNTER
;

45 
≠r_thªad_muãx_t
 *
	gthªad_lock
;

46 * 
APR_THREAD_FUNC
 
thªad_muãx_func
(
≠r_thªad_t
 *
thd
, *
d©a
);

47 
≠r_°©us_t
 
ã°_thªad_muãx
(
num_thªads
);

49 
≠r_thªad_rwlock_t
 *
	gthªad_rwlock
;

50 * 
APR_THREAD_FUNC
 
thªad_rwlock_func
(
≠r_thªad_t
 *
thd
, *
d©a
);

51 
≠r_°©us_t
 
ã°_thªad_rwlock
(
num_thªads
);

53 
ã°_thªad_muãx_√°ed
(
num_thªads
);

55 
≠r_poﬁ_t
 *
	gpoﬁ
;

56 
	gi
 = 0, 
	gx
 = 0;

58 * 
APR_THREAD_FUNC
 
	$thªad_muãx_func
(
≠r_thªad_t
 *
thd
, *
d©a
)

60 
i
;

62 
i
 = 0; i < 
max_cou¡î
; i++) {

63 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

64 
muãx_cou¡î
++;

65 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

67  
NULL
;

68 
	}
}

70 * 
APR_THREAD_FUNC
 
	$thªad_rwlock_func
(
≠r_thªad_t
 *
thd
, *
d©a
)

72 
i
;

74 
i
 = 0; i < 
max_cou¡î
; i++) {

75 
	`≠r_thªad_rwlock_wæock
(
thªad_rwlock
);

76 
muãx_cou¡î
++;

77 
	`≠r_thªad_rwlock_u∆ock
(
thªad_rwlock
);

79  
NULL
;

80 
	}
}

82 
	$ã°_thªad_muãx
(
num_thªads
)

84 
≠r_thªad_t
 *
t
[
MAX_THREADS
];

85 
≠r_°©us_t
 
s
[
MAX_THREADS
];

86 
≠r_time_t
 
time_°¨t
, 
time_°›
;

87 
i
;

89 
muãx_cou¡î
 = 0;

91 
	`¥ötf
("apr_thread_mutex_t Tests\n");

92 
	`¥ötf
("%-60s", " InitializingÅheápr_thread_mutex_t (UNNESTED)");

93 
s
[0] = 
	`≠r_thªad_muãx_¸óã
(&
thªad_lock
, 
APR_THREAD_MUTEX_UNNESTED
, 
poﬁ
);

94 i‡(
s
[0] !
APR_SUCCESS
) {

95 
	`¥ötf
("Failed!\n");

96  
s
[0];

98 
	`¥ötf
("OK\n");

100 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

102 
	`¥ötf
(" Sèπög %dÅhªad† ", 
num_thªads
);

103 
i
 = 0; i < 
num_thªads
; ++i) {

104 
s
[
i
] = 
	`≠r_thªad_¸óã
(&
t
[i], 
NULL
, 
thªad_muãx_func
, NULL, 
poﬁ
);

105 i‡(
s
[
i
] !
APR_SUCCESS
) {

106 
	`¥ötf
("Failed!\n");

107  
s
[
i
];

110 
	`¥ötf
("OK\n");

112 
time_°¨t
 = 
	`≠r_time_now
();

113 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

116 
i
 = 0; i < 
num_thªads
; ++i) {

117 
	`≠r_thªad_joö
(&
s
[
i
], 
t
[i]);

121 
time_°›
 = 
	`≠r_time_now
();

122 
	`¥ötf
("mi¸o£c⁄ds: %" 
APR_INT64_T_FMT
 " usec\n",

123 (
time_°›
 - 
time_°¨t
));

124 i‡(
muãx_cou¡î
 !
max_cou¡î
 * 
num_thªads
)

125 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
muãx_cou¡î
);

127  
APR_SUCCESS
;

128 
	}
}

130 
	$ã°_thªad_muãx_√°ed
(
num_thªads
)

132 
≠r_thªad_t
 *
t
[
MAX_THREADS
];

133 
≠r_°©us_t
 
s
[
MAX_THREADS
];

134 
≠r_time_t
 
time_°¨t
, 
time_°›
;

135 
i
;

137 
muãx_cou¡î
 = 0;

139 
	`¥ötf
("apr_thread_mutex_t Tests\n");

140 
	`¥ötf
("%-60s", " InitializingÅheápr_thread_mutex_t (NESTED)");

141 
s
[0] = 
	`≠r_thªad_muãx_¸óã
(&
thªad_lock
, 
APR_THREAD_MUTEX_NESTED
, 
poﬁ
);

142 i‡(
s
[0] !
APR_SUCCESS
) {

143 
	`¥ötf
("Failed!\n");

144  
s
[0];

146 
	`¥ötf
("OK\n");

148 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

150 
	`¥ötf
(" Sèπög %dÅhªad† ", 
num_thªads
);

151 
i
 = 0; i < 
num_thªads
; ++i) {

152 
s
[
i
] = 
	`≠r_thªad_¸óã
(&
t
[i], 
NULL
, 
thªad_muãx_func
, NULL, 
poﬁ
);

153 i‡(
s
[
i
] !
APR_SUCCESS
) {

154 
	`¥ötf
("Failed!\n");

155  
s
[
i
];

158 
	`¥ötf
("OK\n");

160 
time_°¨t
 = 
	`≠r_time_now
();

161 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

164 
i
 = 0; i < 
num_thªads
; ++i) {

165 
	`≠r_thªad_joö
(&
s
[
i
], 
t
[i]);

169 
time_°›
 = 
	`≠r_time_now
();

170 
	`¥ötf
("mi¸o£c⁄ds: %" 
APR_INT64_T_FMT
 " usec\n",

171 (
time_°›
 - 
time_°¨t
));

172 i‡(
muãx_cou¡î
 !
max_cou¡î
 * 
num_thªads
)

173 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
muãx_cou¡î
);

175  
APR_SUCCESS
;

176 
	}
}

178 
	$ã°_thªad_rwlock
(
num_thªads
)

180 
≠r_thªad_t
 *
t
[
MAX_THREADS
];

181 
≠r_°©us_t
 
s
[
MAX_THREADS
];

182 
≠r_time_t
 
time_°¨t
, 
time_°›
;

183 
i
;

185 
muãx_cou¡î
 = 0;

187 
	`¥ötf
("apr_thread_rwlock_t Tests\n");

188 
	`¥ötf
("%-60s", " InitializingÅheápr_thread_rwlock_t");

189 
s
[0] = 
	`≠r_thªad_rwlock_¸óã
(&
thªad_rwlock
, 
poﬁ
);

190 i‡(
s
[0] !
APR_SUCCESS
) {

191 
	`¥ötf
("Failed!\n");

192  
s
[0];

194 
	`¥ötf
("OK\n");

196 
	`≠r_thªad_rwlock_wæock
(
thªad_rwlock
);

198 
	`¥ötf
(" Sèπög %dÅhªad† ", 
num_thªads
);

199 
i
 = 0; i < 
num_thªads
; ++i) {

200 
s
[
i
] = 
	`≠r_thªad_¸óã
(&
t
[i], 
NULL
, 
thªad_rwlock_func
, NULL, 
poﬁ
);

201 i‡(
s
[
i
] !
APR_SUCCESS
) {

202 
	`¥ötf
("Failed!\n");

203  
s
[
i
];

206 
	`¥ötf
("OK\n");

208 
time_°¨t
 = 
	`≠r_time_now
();

209 
	`≠r_thªad_rwlock_u∆ock
(
thªad_rwlock
);

212 
i
 = 0; i < 
num_thªads
; ++i) {

213 
	`≠r_thªad_joö
(&
s
[
i
], 
t
[i]);

217 
time_°›
 = 
	`≠r_time_now
();

218 
	`¥ötf
("mi¸o£c⁄ds: %" 
APR_INT64_T_FMT
 " usec\n",

219 (
time_°›
 - 
time_°¨t
));

220 i‡(
muãx_cou¡î
 !
max_cou¡î
 * 
num_thªads
)

221 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
muãx_cou¡î
);

223  
APR_SUCCESS
;

224 
	}
}

226 
	$maö
(
¨gc
, c⁄° * c⁄° *
¨gv
)

228 
≠r_°©us_t
 
rv
;

229 
îrmsg
[200];

230 
≠r_gë›t_t
 *
›t
;

231 
›tch¨
;

232 c⁄° *
›èrg
;

234 
	`¥ötf
("APR Lock Performance Test\n==============\n\n");

236 
	`≠r_öôülize
();

237 
	`©exô
(
≠r_ãrmö©e
);

239 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
)

240 
	`exô
(-1);

242 i‡((
rv
 = 
	`≠r_gë›t_öô
(&
›t
, 
poﬁ
, 
¨gc
, 
¨gv
)Ë!
APR_SUCCESS
) {

243 
	`Ârötf
(
°dîr
, "CouldÇot set upÅoÖarse options: [%d] %s\n",

244 
rv
, 
	`≠r_°ªº‹
‘v, 
îrmsg
, Érrmsg));

245 
	`exô
(-1);

248 (
rv
 = 
	`≠r_gë›t
(
›t
, "c:v", &
›tch¨
, &
›èrg
)Ë=
APR_SUCCESS
) {

249 i‡(
›tch¨
 == 'c') {

250 
max_cou¡î
 = 
	`©ﬁ
(
›èrg
);

252 i‡(
›tch¨
 == 'v') {

253 
vîbo£
 = 1;

257 i‡(
rv
 !
APR_SUCCESS
 &&Ñv !
APR_EOF
) {

258 
	`Ârötf
(
°dîr
, "CouldÇotÖarse options: [%d] %s\n",

259 
rv
, 
	`≠r_°ªº‹
‘v, 
îrmsg
, Érrmsg));

260 
	`exô
(-1);

263 
i
 = 1; i <
MAX_THREADS
; ++i) {

264 i‡((
rv
 = 
	`ã°_thªad_muãx
(
i
)Ë!
APR_SUCCESS
) {

265 
	`Ârötf
(
°dîr
,"thread_mutexÅest failed : [%d] %s\n",

266 
rv
, 
	`≠r_°ªº‹
‘v, (*)
îrmsg
, 200));

267 
	`exô
(-3);

270 i‡((
rv
 = 
	`ã°_thªad_muãx_√°ed
(
i
)Ë!
APR_SUCCESS
) {

271 
	`Ârötf
(
°dîr
,"thread_mutex (NESTED)Åest failed : [%d] %s\n",

272 
rv
, 
	`≠r_°ªº‹
‘v, (*)
îrmsg
, 200));

273 
	`exô
(-4);

276 i‡((
rv
 = 
	`ã°_thªad_rwlock
(
i
)Ë!
APR_SUCCESS
) {

277 
	`Ârötf
(
°dîr
,"thread_rwlockÅest failed : [%d] %s\n",

278 
rv
, 
	`≠r_°ªº‹
‘v, (*)
îrmsg
, 200));

279 
	`exô
(-6);

284 
	}
}

	@test/testmmap.c

17 
	~"ã°utû.h
"

18 
	~"≠r_mm≠.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_fûe_io.h
"

23 
	~"≠r_°rögs.h
"

28 
	#PATH_LEN
 255

	)

29 
	#TEST_STRING
 "Thi†i†thêMMAP d©®fûe."
APR_EOL_STR


	)

31 #i‡!
APR_HAS_MMAP


32 
	$nŸ_im∂emíãd
(
abts_ˇ£
 *
tc
, *
d©a
)

34 
	`ABTS_NOT_IMPL
(
tc
, "User functions");

35 
	}
}

39 
≠r_mm≠_t
 *
	gthemm≠
 = 
NULL
;

40 
≠r_fûe_t
 *
	gthefûe
 = 
NULL
;

41 *
	gfûe1
;

42 
≠r_föfo_t
 
	gthisföfo
;

43 
≠r_size_t
 
	gthisfsize
;

45 
	$¸óã_fûíame
(
abts_ˇ£
 *
tc
, *
d©a
)

47 *
ﬁdfûïå
;

49 
	`≠r_fûï©h_gë
(&
fûe1
, 0, 
p
);

50 #i‚de‡
NETWARE


51 #ifde‡
WIN32


52 
	`ABTS_TRUE
(
tc
, 
fûe1
[1] == ':');

54 
	`ABTS_TRUE
(
tc
, 
fûe1
[0] == '/');

57 
	`ABTS_TRUE
(
tc
, 
fûe1
[
	`°æí
(file1) - 1] != '/');

59 
ﬁdfûïå
 = 
fûe1
;

60 
fûe1
 = 
	`≠r_p°rˇt
(
p
, fûe1,"/d©a/mm≠_d©afûe.txt" ,
NULL
);

61 
	`ABTS_TRUE
(
tc
, 
ﬁdfûïå
 !
fûe1
);

62 
	}
}

64 
	$ã°_fûe_˛o£
(
abts_ˇ£
 *
tc
, *
d©a
)

66 
≠r_°©us_t
 
rv
;

68 
rv
 = 
	`≠r_fûe_˛o£
(
thefûe
);

69 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

70 
	}
}

72 
	$ã°_fûe_›í
(
abts_ˇ£
 *
tc
, *
d©a
)

74 
≠r_°©us_t
 
rv
;

76 
rv
 = 
	`≠r_fûe_›í
(&
thefûe
, 
fûe1
, 
APR_FOPEN_READ
, 
APR_UREAD
 | 
APR_GREAD
, 
p
);

77 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

78 
	`ABTS_PTR_NOTNULL
(
tc
, 
thefûe
);

79 
	}
}

81 
	$ã°_gë_fûesize
(
abts_ˇ£
 *
tc
, *
d©a
)

83 
≠r_°©us_t
 
rv
;

85 
rv
 = 
	`≠r_fûe_öfo_gë
(&
thisföfo
, 
APR_FINFO_NORM
, 
thefûe
);

86 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

87 
	`ABTS_ASSERT
(
tc
, "Fûêsizêmism©ch", 
thisfsize
 =
thisföfo
.
size
);

88 
	}
}

90 
	$ã°_mm≠_¸óã
(
abts_ˇ£
 *
tc
, *
d©a
)

92 
≠r_°©us_t
 
rv
;

94 
rv
 = 
	`≠r_mm≠_¸óã
(&
themm≠
, 
thefûe
, 0, (
≠r_size_t
Ë
thisföfo
.
size
,

95 
APR_MMAP_READ
, 
p
);

96 
	`ABTS_PTR_NOTNULL
(
tc
, 
themm≠
);

97 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

98 
	}
}

100 
	$ã°_mm≠_c⁄ã¡s
(
abts_ˇ£
 *
tc
, *
d©a
)

103 
	`ABTS_PTR_NOTNULL
(
tc
, 
themm≠
);

104 
	`ABTS_PTR_NOTNULL
(
tc
, 
themm≠
->
mm
);

105 
	`ABTS_SIZE_EQUAL
(
tc
, 
thisfsize
, 
themm≠
->
size
);

108 
	`ABTS_STR_NEQUAL
(
tc
, 
themm≠
->
mm
, 
TEST_STRING
, 
thisfsize
);

109 
	}
}

111 
	$ã°_mm≠_dñëe
(
abts_ˇ£
 *
tc
, *
d©a
)

113 
≠r_°©us_t
 
rv
;

115 
	`ABTS_PTR_NOTNULL
(
tc
, 
themm≠
);

116 
rv
 = 
	`≠r_mm≠_dñëe
(
themm≠
);

117 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

118 
	}
}

120 
	$ã°_mm≠_off£t
(
abts_ˇ£
 *
tc
, *
d©a
)

122 
≠r_°©us_t
 
rv
;

123 *
addr
;

125 
	`ABTS_PTR_NOTNULL
(
tc
, 
themm≠
);

126 
rv
 = 
	`≠r_mm≠_off£t
(&
addr
, 
themm≠
, 5);

128 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

130 
	`ABTS_STR_NEQUAL
(
tc
, 
addr
, 
TEST_STRING
 + 5, 
thisfsize
-5);

131 
	}
}

134 
abts_suôe
 *
	$ã°mm≠
(
abts_suôe
 *
suôe
)

136 
suôe
 = 
	`ADD_SUITE
(suite)

138 #i‡
APR_HAS_MMAP


139 
thisfsize
 = 
	`°æí
(
TEST_STRING
);

141 
	`abts_run_ã°
(
suôe
, 
¸óã_fûíame
, 
NULL
);

142 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_›í
, 
NULL
);

143 
	`abts_run_ã°
(
suôe
, 
ã°_gë_fûesize
, 
NULL
);

144 
	`abts_run_ã°
(
suôe
, 
ã°_mm≠_¸óã
, 
NULL
);

145 
	`abts_run_ã°
(
suôe
, 
ã°_mm≠_c⁄ã¡s
, 
NULL
);

146 
	`abts_run_ã°
(
suôe
, 
ã°_mm≠_off£t
, 
NULL
);

147 
	`abts_run_ã°
(
suôe
, 
ã°_mm≠_dñëe
, 
NULL
);

148 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_˛o£
, 
NULL
);

150 
	`abts_run_ã°
(
suôe
, 
nŸ_im∂emíãd
, 
NULL
);

153  
suôe
;

154 
	}
}

	@test/testmutexscope.c

18 #unde‡
NDEBUG


19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

24 
	~"≠r.h
"

25 
	~"≠r_gíîÆ.h
"

26 
	~"≠r_¥oc_muãx.h
"

27 
	~"≠r_globÆ_muãx.h
"

28 
	~"≠r_thªad_¥oc.h
"

30 #i‡!
APR_HAS_THREADS


31 
	$maö
()

33 
	`¥ötf
("ThisÅestÑequires APRÅhread support.\n");

35 
	}
}

39 
≠r_thªad_muãx_t
 *
	gthªad_muãx
;

40 
≠r_¥oc_muãx_t
 *
	g¥oc_muãx
;

41 
≠r_globÆ_muãx_t
 *
	gglobÆ_muãx
;

42 
≠r_poﬁ_t
 *
	gp
;

43 vﬁ©ûê
	gcou¡î
;

44 íum {
	mTEST_GLOBAL
, 
	mTEST_PROC
} 
	tã°_mode_e
;

46 
	$lock_öô
(
≠r_lockmech_e
 
mech
, 
ã°_mode_e
 
ã°_mode
)

48 i‡(
ã°_mode
 =
TEST_PROC
) {

49 
	`as£π
(
	`≠r_¥oc_muãx_¸óã
(&
¥oc_muãx
,

50 
NULL
,

51 
mech
,

52 
p
Ë=
APR_SUCCESS
);

55 
	`as£π
(
	`≠r_globÆ_muãx_¸óã
(&
globÆ_muãx
,

56 
NULL
,

57 
mech
,

58 
p
Ë=
APR_SUCCESS
);

60 
	}
}

62 
	$lock_de°roy
(
ã°_mode_e
 
ã°_mode
)

64 i‡(
ã°_mode
 =
TEST_PROC
) {

65 
	`as£π
(
	`≠r_¥oc_muãx_de°roy
(
¥oc_muãx
Ë=
APR_SUCCESS
);

68 
	`as£π
(
	`≠r_globÆ_muãx_de°roy
(
globÆ_muãx
Ë=
APR_SUCCESS
);

70 
	}
}

72 
	$lock_gøb
(
ã°_mode_e
 
ã°_mode
)

74 i‡(
ã°_mode
 =
TEST_PROC
) {

75 
	`as£π
(
	`≠r_¥oc_muãx_lock
(
¥oc_muãx
Ë=
APR_SUCCESS
);

78 
	`as£π
(
	`≠r_globÆ_muãx_lock
(
globÆ_muãx
Ë=
APR_SUCCESS
);

80 
	}
}

82 
	$lock_ªÀa£
(
ã°_mode_e
 
ã°_mode
)

84 i‡(
ã°_mode
 =
TEST_PROC
) {

85 
	`as£π
(
	`≠r_¥oc_muãx_u∆ock
(
¥oc_muãx
Ë=
APR_SUCCESS
);

88 
	`as£π
(
	`≠r_globÆ_muãx_u∆ock
(
globÆ_muãx
Ë=
APR_SUCCESS
);

90 
	}
}

92 * 
APR_THREAD_FUNC
 
	$óchThªad
(
≠r_thªad_t
 *
id
, *
p
)

94 
ã°_mode_e
 
ã°_mode
 = (ã°_mode_e)
p
;

96 
	`lock_gøb
(
ã°_mode
);

97 ++
cou¡î
;

98 
	`as£π
(
	`≠r_thªad_muãx_lock
(
thªad_muãx
Ë=
APR_SUCCESS
);

99 
	`as£π
(
	`≠r_thªad_muãx_u∆ock
(
thªad_muãx
Ë=
APR_SUCCESS
);

100 
	`lock_ªÀa£
(
ã°_mode
);

101 
	`≠r_thªad_exô
(
id
, 0);

102  
NULL
;

103 
	}
}

105 
	$ã°_mech_mode
(
≠r_lockmech_e
 
mech
, c⁄° *
mech_«me
,

106 
ã°_mode_e
 
ã°_mode
)

108 
≠r_thªad_t
 *
thªads
[20];

109 
numThªads
 = 5;

110 
i
;

111 
≠r_°©us_t
 
rv
;

113 
	`¥ötf
("Trying %s mutexes with mechanism `%s'...\n",

114 
ã°_mode
 =
TEST_GLOBAL
 ? "globÆ" : "¥oc", 
mech_«me
);

116 
	`as£π
(
numThªads
 <(
thªads
) / (threads[0]));

118 
	`as£π
(
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
Ë=
APR_SUCCESS
);

120 
	`as£π
(
	`≠r_thªad_muãx_¸óã
(&
thªad_muãx
, 0, 
p
Ë=
APR_SUCCESS
);

121 
	`as£π
(
	`≠r_thªad_muãx_lock
(
thªad_muãx
Ë=
APR_SUCCESS
);

123 
	`lock_öô
(
mech
, 
ã°_mode
);

125 
cou¡î
 = 0;

127 
i
 = 0;

128 
i
 < 
numThªads
)

130 
rv
 = 
	`≠r_thªad_¸óã
(&
thªads
[
i
],

131 
NULL
,

132 
óchThªad
,

133 (*)
ã°_mode
,

134 
p
);

135 i‡(
rv
 !
APR_SUCCESS
) {

136 
	`Ârötf
(
°dîr
, "≠r_thªad_¸óã->%d\n", 
rv
);

137 
	`exô
(1);

139 ++
i
;

142 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(5));

144 i‡(
ã°_mode
 =
TEST_PROC
) {

145 
	`¥ötf
(" Mutex mechanism `%s' is %sglobal in scope onÅhisÖlatform.\n",

146 
mech_«me
, 
cou¡î
 == 1 ? "" : "not ");

149 i‡(
cou¡î
 != 1) {

150 
	`Ârötf
(
°dîr
, "\n!!!apr_global_mutex operationsáre broken onÅhis "

153 
mech_«me
);

154 
	`Ârötf
(
°dîr
, "cou¡î vÆue: %d\n", 
cou¡î
);

155 
	`exô
(1);

158 
	`¥ötf
("ÇoÖroblemsÉncountered...\n");

162 
	`as£π
(
	`≠r_thªad_muãx_u∆ock
(
thªad_muãx
Ë=
APR_SUCCESS
);

164 
i
 = 0;

165 
i
 < 
numThªads
)

167 
≠r_°©us_t
 
ign‹ed
;

169 
rv
 = 
	`≠r_thªad_joö
(&
ign‹ed
,

170 
thªads
[
i
]);

171 
	`as£π
(
rv
 =
APR_SUCCESS
);

172 ++
i
;

175 
	`lock_de°roy
(
ã°_mode
);

176 
	`≠r_thªad_muãx_de°roy
(
thªad_muãx
);

177 
	`≠r_poﬁ_de°roy
(
p
);

178 
	}
}

180 
	$ã°_mech
(
≠r_lockmech_e
 
mech
, c⁄° *
mech_«me
)

182 
	`ã°_mech_mode
(
mech
, 
mech_«me
, 
TEST_PROC
);

183 
	`ã°_mech_mode
(
mech
, 
mech_«me
, 
TEST_GLOBAL
);

184 
	}
}

186 
	$maö
()

189 
≠r_lockmech_e
 
mech
;

190 c⁄° *
mech_«me
;

191 } 
lockmechs
[] = {

192 {
APR_LOCK_DEFAULT
, "default"}

193 #i‡
APR_HAS_FLOCK_SERIALIZE


194 ,{
APR_LOCK_FLOCK
, "flock"}

196 #i‡
APR_HAS_SYSVSEM_SERIALIZE


197 ,{
APR_LOCK_SYSVSEM
, "sysvsem"}

199 #i‡
APR_HAS_POSIXSEM_SERIALIZE


200 ,{
APR_LOCK_POSIXSEM
, "posix"}

202 #i‡
APR_HAS_FCNTL_SERIALIZE


203 ,{
APR_LOCK_FCNTL
, "fcntl"}

205 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


206 ,{
APR_LOCK_PROC_PTHREAD
, "proc_pthread"}

209 
i
;

211 
	`as£π
(
	`≠r_öôülize
(Ë=
APR_SUCCESS
);

213 
i
 = 0; i < (
lockmechs
) / (lockmechs[0]); i++) {

214 
	`ã°_mech
(
lockmechs
[
i
].
mech
,Üockmechs[i].
mech_«me
);

217 
	`≠r_ãrmö©e
();

219 
	}
}

	@test/testnames.c

17 
	~"ã°utû.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_fûe_öfo.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_poﬁs.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_°rögs.h
"

26 #i‡
deföed
(
WIN32
)

27 
	~<dúe˘.h
>

30 #i‡
deföed
(
WIN32
Ë|| deföed(
OS2
)

31 
	#ABS_ROOT
 "C:/"

	)

32 #ñi‡
deföed
(
NETWARE
)

33 
	#ABS_ROOT
 "SYS:/"

	)

35 
	#ABS_ROOT
 "/"

	)

38 
	$mîge_abovîoŸ
(
abts_ˇ£
 *
tc
, *
d©a
)

40 
≠r_°©us_t
 
rv
;

41 *
d°∑th
 = 
NULL
;

42 
îrmsg
[256];

44 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo", ABS_ROOT"b¨", 
APR_FILEPATH_NOTABOVEROOT
,

45 
p
);

46 
	`≠r_°ªº‹
(
rv
, 
îrmsg
, (errmsg));

47 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EABOVEROOT
(
rv
));

48 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
d°∑th
);

49 
	`ABTS_STR_EQUAL
(
tc
, "ThêgivíÖ©h wa†abovêthêroŸÖ©h", 
îrmsg
);

50 
	}
}

52 
	$mîge_bñowroŸ
(
abts_ˇ£
 *
tc
, *
d©a
)

54 
≠r_°©us_t
 
rv
;

55 *
d°∑th
 = 
NULL
;

57 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo", ABS_ROOT"foo/bar",

58 
APR_FILEPATH_NOTABOVEROOT
, 
p
);

59 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

60 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

61 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
"foo/b¨", 
d°∑th
);

62 
	}
}

64 
	$mîge_noÊag
(
abts_ˇ£
 *
tc
, *
d©a
)

66 
≠r_°©us_t
 
rv
;

67 *
d°∑th
 = 
NULL
;

69 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo", ABS_ROOT"foo/b¨", 0, 
p
);

70 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

71 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

72 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
"foo/b¨", 
d°∑th
);

73 
	}
}

75 
	$mîge_dŸdŸ
(
abts_ˇ£
 *
tc
, *
d©a
)

77 
≠r_°©us_t
 
rv
;

78 *
d°∑th
 = 
NULL
;

80 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo/b¨", "../baz", 0, 
p
);

81 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

82 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

83 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
"foo/baz", 
d°∑th
);

85 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "", "../ã°", 0, 
p
);

86 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

87 
	`ABTS_STR_EQUAL
(
tc
, "../ã°", 
d°∑th
);

94 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "", "../ã°", 
APR_FILEPATH_TRUENAME
, 
p
);

95 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

96 
	`ABTS_STR_EQUAL
(
tc
, "../ã°", 
d°∑th
);

97 
	}
}

99 
	$mîge_dŸdŸ_dŸdŸ_dŸdŸ
(
abts_ˇ£
 *
tc
, *
d©a
)

101 
≠r_°©us_t
 
rv
;

102 *
d°∑th
 = 
NULL
;

104 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "",

105 "../../..", 
APR_FILEPATH_TRUENAME
, 
p
);

106 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

107 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

108 
	`ABTS_STR_EQUAL
(
tc
, "../../..", 
d°∑th
);

110 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "",

111 "../../../", 
APR_FILEPATH_TRUENAME
, 
p
);

112 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

113 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

114 
	`ABTS_STR_EQUAL
(
tc
, "../../../", 
d°∑th
);

115 
	}
}

117 
	$mîge_£cuª
(
abts_ˇ£
 *
tc
, *
d©a
)

119 
≠r_°©us_t
 
rv
;

120 *
d°∑th
 = 
NULL
;

122 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo/b¨", "../b¨/baz", 0, 
p
);

123 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

124 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

125 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
"foo/b¨/baz", 
d°∑th
);

126 
	}
}

128 
	$mîge_nŸªl
(
abts_ˇ£
 *
tc
, *
d©a
)

130 
≠r_°©us_t
 
rv
;

131 *
d°∑th
 = 
NULL
;

133 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo/bar", "../baz",

134 
APR_FILEPATH_NOTRELATIVE
, 
p
);

135 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

136 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

137 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
"foo/baz", 
d°∑th
);

138 
	}
}

140 
	$mîge_nŸªlÁû
(
abts_ˇ£
 *
tc
, *
d©a
)

142 
≠r_°©us_t
 
rv
;

143 *
d°∑th
 = 
NULL
;

144 
îrmsg
[256];

146 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "foo/bar", "../baz",

147 
APR_FILEPATH_NOTRELATIVE
, 
p
);

148 
	`≠r_°ªº‹
(
rv
, 
îrmsg
, (errmsg));

150 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
d°∑th
);

151 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ERELATIVE
(
rv
));

152 
	`ABTS_STR_EQUAL
(
tc
, "ThêgivíÖ©h i†ªœtive", 
îrmsg
);

153 
	}
}

155 
	$mîge_nŸabsÁû
(
abts_ˇ£
 *
tc
, *
d©a
)

157 
≠r_°©us_t
 
rv
;

158 *
d°∑th
 = 
NULL
;

159 
îrmsg
[256];

161 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, 
ABS_ROOT
"foo/bar", "../baz",

162 
APR_FILEPATH_NOTABSOLUTE
, 
p
);

163 
	`≠r_°ªº‹
(
rv
, 
îrmsg
, (errmsg));

165 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
d°∑th
);

166 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EABSOLUTE
(
rv
));

167 
	`ABTS_STR_EQUAL
(
tc
, "ThêgivíÖ©h i†absﬁuã", 
îrmsg
);

168 
	}
}

170 
	$mîge_nŸabs
(
abts_ˇ£
 *
tc
, *
d©a
)

172 
≠r_°©us_t
 
rv
;

173 *
d°∑th
 = 
NULL
;

175 
rv
 = 
	`≠r_fûï©h_mîge
(&
d°∑th
, "foo/bar", "../baz",

176 
APR_FILEPATH_NOTABSOLUTE
, 
p
);

178 
	`ABTS_PTR_NOTNULL
(
tc
, 
d°∑th
);

179 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

180 
	`ABTS_STR_EQUAL
(
tc
, "foo/baz", 
d°∑th
);

181 
	}
}

183 #i‡
deföed
 (
WIN32
)

184 
	$mîge_lowîˇ£drive
(
abts_ˇ£
 *
tc
, *
d©a
)

186 
cuºít_dú
[1024];

187 
cuºít_dú_⁄_C
[1024];

188 *
dú_⁄_c
;

189 *
ã°dú
;

190 
≠r_°©us_t
 
rv
;

194 
	`ABTS_PTR_NOTNULL
(
tc
, 
	`_gëcwd
(
cuºít_dú
, (current_dir)));

197 
	`ABTS_PTR_NOTNULL
(
tc
, 
	`_gëdcwd
(3, 
cuºít_dú_⁄_C
,

198 (
cuºít_dú_⁄_C
)));

201 
dú_⁄_c
 = 
	`≠r_p°rdup
(
p
, 
cuºít_dú_⁄_C
);

202 
dú_⁄_c
[0] = ()
	`tﬁowî
(dir_on_c[0]);

204 
	`chdú
(
dú_⁄_c
);

207 
rv
 = 
	`≠r_fûï©h_mîge
(&
ã°dú
, 
NULL
, "C:hi",

208 
APR_FILEPATH_NOTRELATIVE
, 
p
);

211 
	`chdú
("C:\\");

212 
	`chdú
(
cuºít_dú_⁄_C
);

213 
	`chdú
(
cuºít_dú
);

215 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

216 
	}
}

219 
	$roŸ_absﬁuã
(
abts_ˇ£
 *
tc
, *
d©a
)

221 
≠r_°©us_t
 
rv
;

222 c⁄° *
roŸ
 = 
NULL
;

223 c⁄° *
∑th
 = 
ABS_ROOT
"foo/bar";

225 
rv
 = 
	`≠r_fûï©h_roŸ
(&
roŸ
, &
∑th
, 0, 
p
);

227 
	`ABTS_PTR_NOTNULL
(
tc
, 
roŸ
);

228 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

229 
	`ABTS_STR_EQUAL
(
tc
, 
ABS_ROOT
, 
roŸ
);

230 
	}
}

232 
	$roŸ_ªœtive
(
abts_ˇ£
 *
tc
, *
d©a
)

234 
≠r_°©us_t
 
rv
;

235 c⁄° *
roŸ
 = 
NULL
;

236 c⁄° *
∑th
 = "foo/bar";

237 
îrmsg
[256];

239 
rv
 = 
	`≠r_fûï©h_roŸ
(&
roŸ
, &
∑th
, 0, 
p
);

240 
	`≠r_°ªº‹
(
rv
, 
îrmsg
, (errmsg));

242 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
roŸ
);

243 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ERELATIVE
(
rv
));

244 
	`ABTS_STR_EQUAL
(
tc
, "ThêgivíÖ©h i†ªœtive", 
îrmsg
);

245 
	}
}

247 
	$roŸ_‰om_¶ash
(
abts_ˇ£
 *
tc
, *
d©a
)

249 
≠r_°©us_t
 
rv
;

250 c⁄° *
roŸ
 = 
NULL
;

251 c⁄° *
∑th
 = "//";

253 
rv
 = 
	`≠r_fûï©h_roŸ
(&
roŸ
, &
∑th
, 
APR_FILEPATH_TRUENAME
, 
p
);

255 #i‡
	`deföed
(
WIN32
Ë|| deföed(
OS2
)

256 
	`ABTS_INT_EQUAL
(
tc
, 
APR_EINCOMPLETE
, 
rv
);

257 
	`ABTS_STR_EQUAL
(
tc
, "//", 
roŸ
);

259 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

260 
	`ABTS_STR_EQUAL
(
tc
, "/", 
roŸ
);

262 
	`ABTS_STR_EQUAL
(
tc
, "", 
∑th
);

263 
	}
}

265 
	$roŸ_‰om_cwd_™d_back
(
abts_ˇ£
 *
tc
, *
d©a
)

267 
≠r_°©us_t
 
rv
;

268 c⁄° *
roŸ
 = 
NULL
;

269 c⁄° *
∑th
 = "//";

270 *
‹ig∑th
;

271 *
ã°∑th
;

272 #i‡
	`deföed
(
WIN32
Ë|| deföed(
OS2
Ë|| deföed(
NETWARE
)

273 
hadÁûed
;

276 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
	`≠r_fûï©h_gë
(&
‹ig∑th
, 0, 
p
));

277 
∑th
 = 
‹ig∑th
;

278 
rv
 = 
	`≠r_fûï©h_roŸ
(&
roŸ
, &
∑th
, 
APR_FILEPATH_TRUENAME
, 
p
);

280 #i‡
	`deföed
(
WIN32
Ë|| deföed(
OS2
)

281 
hadÁûed
 = 
tc
->
Áûed
;

285 
	`ABTS_INT_EQUAL
(
tc
, 
	`touµî
(
‹ig∑th
[0]), 
roŸ
[0]);

286 
	`ABTS_INT_EQUAL
(
tc
, ':', 
roŸ
[1]);

287 
	`ABTS_INT_EQUAL
(
tc
, '/', 
roŸ
[2]);

288 
	`ABTS_INT_EQUAL
(
tc
, 0, 
roŸ
[3]);

289 
	`ABTS_STR_EQUAL
(
tc
, 
‹ig∑th
 + 3, 
∑th
);

290 #ñi‡
	`deföed
(
NETWARE
)

291 
	`ABTS_INT_EQUAL
(
tc
, 
‹ig∑th
[0], 
roŸ
[0]);

293 *
±
 = 
	`°rchr
(
roŸ
, ':');

294 
	`ABTS_PTR_NOTNULL
(
tc
, 
±
);

295 
	`ABTS_INT_EQUAL
(
tc
, ':', 
±
[0]);

296 
	`ABTS_INT_EQUAL
(
tc
, '/', 
±
[1]);

297 
	`ABTS_INT_EQUAL
(
tc
, 0, 
±
[2]);

298 
±
 = 
	`°rchr
(
‹ig∑th
, ':');

299 
	`ABTS_PTR_NOTNULL
(
tc
, 
±
);

300 
	`ABTS_STR_EQUAL
(
tc
, (
±
+2), 
∑th
);

303 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

304 
	`ABTS_STR_EQUAL
(
tc
, "/", 
roŸ
);

305 
	`ABTS_STR_EQUAL
(
tc
, 
‹ig∑th
 + 1, 
∑th
);

308 
rv
 = 
	`≠r_fûï©h_mîge
(&
ã°∑th
, 
roŸ
, 
∑th
,

309 
APR_FILEPATH_TRUENAME


310 | 
APR_FILEPATH_NOTABOVEROOT


311 | 
APR_FILEPATH_NOTRELATIVE
, 
p
);

312 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

313 #i‡
	`deföed
(
WIN32
Ë|| deföed(
OS2
Ë|| deföed(
NETWARE
)

314 
hadÁûed
 = 
tc
->
Áûed
;

321 
	`ABTS_STR_EQUAL
(
tc
, 
‹ig∑th
, 
ã°∑th
);

322 #i‡
	`deföed
(
WIN32
Ë|| deföed(
OS2
Ë|| deföed(
NETWARE
)

323 i‡(!
hadÁûed
Ë
tc
->
Áûed
 = 0;

325 
	}
}

328 
abts_suôe
 *
	$ã°«mes
(
abts_suôe
 *
suôe
)

330 
suôe
 = 
	`ADD_SUITE
(suite)

332 
	`abts_run_ã°
(
suôe
, 
mîge_abovîoŸ
, 
NULL
);

333 
	`abts_run_ã°
(
suôe
, 
mîge_bñowroŸ
, 
NULL
);

334 
	`abts_run_ã°
(
suôe
, 
mîge_noÊag
, 
NULL
);

335 
	`abts_run_ã°
(
suôe
, 
mîge_dŸdŸ
, 
NULL
);

336 
	`abts_run_ã°
(
suôe
, 
mîge_£cuª
, 
NULL
);

337 
	`abts_run_ã°
(
suôe
, 
mîge_nŸªl
, 
NULL
);

338 
	`abts_run_ã°
(
suôe
, 
mîge_nŸªlÁû
, 
NULL
);

339 
	`abts_run_ã°
(
suôe
, 
mîge_nŸabs
, 
NULL
);

340 
	`abts_run_ã°
(
suôe
, 
mîge_nŸabsÁû
, 
NULL
);

341 
	`abts_run_ã°
(
suôe
, 
mîge_dŸdŸ_dŸdŸ_dŸdŸ
, 
NULL
);

342 #i‡
	`deföed
(
WIN32
)

343 
	`abts_run_ã°
(
suôe
, 
mîge_lowîˇ£drive
, 
NULL
);

346 
	`abts_run_ã°
(
suôe
, 
roŸ_absﬁuã
, 
NULL
);

347 
	`abts_run_ã°
(
suôe
, 
roŸ_ªœtive
, 
NULL
);

348 
	`abts_run_ã°
(
suôe
, 
roŸ_‰om_¶ash
, 
NULL
);

349 
	`abts_run_ã°
(
suôe
, 
roŸ_‰om_cwd_™d_back
, 
NULL
);

351  
suôe
;

352 
	}
}

	@test/testoc.c

17 
	~"ã°utû.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_°rögs.h
"

24 #i‡
APR_HAS_OTHER_CHILD


26 
	gªas⁄°r
[256];

28 
	$ocmaöt
(
ªas⁄
, *
d©a
, 
°©us
)

30 
ªas⁄
) {

31 
APR_OC_REASON_DEATH
:

32 
	`≠r_˝y°∫
(
ªas⁄°r
, "APR_OC_REASON_DEATH",

33 
	`°æí
("APR_OC_REASON_DEATH") + 1);

35 
APR_OC_REASON_LOST
:

36 
	`≠r_˝y°∫
(
ªas⁄°r
, "APR_OC_REASON_LOST",

37 
	`°æí
("APR_OC_REASON_LOST") + 1);

39 
APR_OC_REASON_UNWRITABLE
:

40 
	`≠r_˝y°∫
(
ªas⁄°r
, "APR_OC_REASON_UNWRITEABLE",

41 
	`°æí
("APR_OC_REASON_UNWRITEABLE") + 1);

43 
APR_OC_REASON_RESTART
:

44 
	`≠r_˝y°∫
(
ªas⁄°r
, "APR_OC_REASON_RESTART",

45 
	`°æí
("APR_OC_REASON_RESTART") + 1);

48 
	}
}

50 #i‚de‡
SIGKILL


51 
	#SIGKILL
 1

	)

57 
	$ã°_chûd_kûl
(
abts_ˇ£
 *
tc
, *
d©a
)

59 
≠r_fûe_t
 *
°d
 = 
NULL
;

60 
≠r_¥oc_t
 
√w¥oc
;

61 
≠r_¥oˇâr_t
 *
¥oˇâr
 = 
NULL
;

62 c⁄° *
¨gs
[3];

63 
≠r_°©us_t
 
rv
;

65 
¨gs
[0] = 
	`≠r_p°rdup
(
p
, "occhûd" 
EXTENSION
);

66 
¨gs
[1] = 
	`≠r_p°rdup
(
p
, "-X");

67 
¨gs
[2] = 
NULL
;

69 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

70 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

72 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_FULL_BLOCK
, 
APR_NO_PIPE
,

73 
APR_NO_PIPE
);

74 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

76 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
¥oˇâr
, 
APR_PROGRAM_ENV
);

77 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

79 
rv
 = 
	`≠r_¥oc_¸óã
(&
√w¥oc
, 
TESTBINPATH
 "occhûd" 
EXTENSION
, 
¨gs
, 
NULL
, 
¥oˇâr
, 
p
);

80 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

81 
	`ABTS_PTR_NOTNULL
(
tc
, 
√w¥oc
.
ö
);

82 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
√w¥oc
.
out
);

83 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
√w¥oc
.
îr
);

85 
°d
 = 
√w¥oc
.
ö
;

87 
	`≠r_¥oc_Ÿhî_chûd_ªgi°î
(&
√w¥oc
, 
ocmaöt
, 
NULL
, 
°d
, 
p
);

89 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(1));

90 
rv
 = 
	`≠r_¥oc_kûl
(&
√w¥oc
, 
SIGKILL
);

91 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

94 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(3));

96 
	`≠r_¥oc_Ÿhî_chûd_ª‰esh_Æl
(
APR_OC_REASON_RUNNING
);

97 
	`ABTS_STR_EQUAL
(
tc
, "APR_OC_REASON_DEATH", 
ªas⁄°r
);

98 
	}
}

101 
	$oc_nŸ_im∂
(
abts_ˇ£
 *
tc
, *
d©a
)

103 
	`ABTS_NOT_IMPL
(
tc
, "Other childÜogicÇot implemented onÅhisÖlatform");

104 
	}
}

107 
abts_suôe
 *
	$ã°oc
(
abts_suôe
 *
suôe
)

109 
suôe
 = 
	`ADD_SUITE
(suite)

111 #i‡!
APR_HAS_OTHER_CHILD


112 
	`abts_run_ã°
(
suôe
, 
oc_nŸ_im∂
, 
NULL
);

115 
	`abts_run_ã°
(
suôe
, 
ã°_chûd_kûl
, 
NULL
);

118  
suôe
;

119 
	}
}

	@test/testpath.c

17 
	~"ã°utû.h
"

18 
	~"≠r_fûe_öfo.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_poﬁs.h
"

21 
	~"≠r_èbÀs.h
"

23 #i‡
deföed
(
WIN32
Ë|| deföed(
NETWARE
Ë|| deföed(
OS2
)

24 
	#PSEP
 ";"

	)

25 
	#DSEP
 "\\"

	)

27 
	#PSEP
 ":"

	)

28 
	#DSEP
 "/"

	)

31 
	#PX
 ""

	)

32 
	#P1
 "fú°Ö©h"

	)

33 
	#P2
 "£c⁄d" 
DSEP
 "∑th"

	)

34 
	#P3
 "th ird" 
DSEP
 "∑th"

	)

35 
	#P4
 "fouπh" 
DSEP
 "∑Åh"

	)

36 
	#P5
 "fi·h∑th"

	)

38 c⁄° *
	g∑πs_ö
[] = { 
P1
, 
P2
, 
P3
, 
PX
, 
P4
, 
P5
 };

39 c⁄° *
	g∑th_ö
 = 
P1
 
PSEP
 
P2
 PSEP 
P3
 PSEP 
PX
 PSEP 
P4
 PSEP 
P5
;

40 c⁄° 
	g∑πs_ö_cou¡
 = (
∑πs_ö
)/(*parts_in);

42 c⁄° *
	g∑πs_out
[] = { 
P1
, 
P2
, 
P3
, 
P4
, 
P5
 };

43 c⁄° *
	g∑th_out
 = 
P1
 
PSEP
 
P2
 PSEP 
P3
 PSEP 
P4
 PSEP 
P5
;

44 c⁄° 
	g∑πs_out_cou¡
 = (
∑πs_out
)/(*parts_out);

46 
	$li°_•lô_mu…i
(
abts_ˇ£
 *
tc
, *
d©a
)

48 
i
;

49 
≠r_°©us_t
 
rv
;

50 
≠r_¨øy_hódî_t
 *
∑thñts
;

52 
∑thñts
 = 
NULL
;

53 
rv
 = 
	`≠r_fûï©h_li°_•lô
(&
∑thñts
, 
∑th_ö
, 
p
);

54 
	`ABTS_PTR_NOTNULL
(
tc
, 
∑thñts
);

55 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

56 
	`ABTS_INT_EQUAL
(
tc
, 
∑πs_out_cou¡
, 
∑thñts
->
√…s
);

57 
i
 = 0; i < 
∑thñts
->
√…s
; ++i)

58 
	`ABTS_STR_EQUAL
(
tc
, 
∑πs_out
[
i
], ((**)
∑thñts
->
ñts
)[i]);

59 
	}
}

61 
	$li°_•lô_sögÀ
(
abts_ˇ£
 *
tc
, *
d©a
)

63 
i
;

64 
≠r_°©us_t
 
rv
;

65 
≠r_¨øy_hódî_t
 *
∑thñts
;

67 
i
 = 0; i < 
∑πs_ö_cou¡
; ++i)

69 
∑thñts
 = 
NULL
;

70 
rv
 = 
	`≠r_fûï©h_li°_•lô
(&
∑thñts
, 
∑πs_ö
[
i
], 
p
);

71 
	`ABTS_PTR_NOTNULL
(
tc
, 
∑thñts
);

72 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

73 i‡(
∑πs_ö
[
i
][0] == '\0')

74 
	`ABTS_INT_EQUAL
(
tc
, 0, 
∑thñts
->
√…s
);

77 
	`ABTS_INT_EQUAL
(
tc
, 1, 
∑thñts
->
√…s
);

78 
	`ABTS_STR_EQUAL
(
tc
, 
∑πs_ö
[
i
], *(**)
∑thñts
->
ñts
);

81 
	}
}

83 
	$li°_mîge_mu…i
(
abts_ˇ£
 *
tc
, *
d©a
)

85 
i
;

86 *
li°°r
;

87 
≠r_°©us_t
 
rv
;

88 
≠r_¨øy_hódî_t
 *
∑thñts
;

90 
∑thñts
 = 
	`≠r_¨øy_make
(
p
, 
∑πs_ö_cou¡
, (const *));

91 
i
 = 0; i < 
∑πs_ö_cou¡
; ++i)

92 *(c⁄° **)
	`≠r_¨øy_push
(
∑thñts
Ë
∑πs_ö
[
i
];

94 
li°°r
 = 
NULL
;

95 
rv
 = 
	`≠r_fûï©h_li°_mîge
(&
li°°r
, 
∑thñts
, 
p
);

96 
	`ABTS_PTR_NOTNULL
(
tc
, 
li°°r
);

97 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

98 
	`ABTS_STR_EQUAL
(
tc
, 
li°°r
, 
∑th_out
);

99 
	}
}

101 
	$li°_mîge_sögÀ
(
abts_ˇ£
 *
tc
, *
d©a
)

103 
i
;

104 *
li°°r
;

105 
≠r_°©us_t
 
rv
;

106 
≠r_¨øy_hódî_t
 *
∑thñts
;

108 
∑thñts
 = 
	`≠r_¨øy_make
(
p
, 1, (const *));

109 
	`≠r_¨øy_push
(
∑thñts
);

110 
i
 = 0; i < 
∑πs_ö_cou¡
; ++i)

112 *(c⁄° **)
∑thñts
->
ñts
 = 
∑πs_ö
[
i
];

113 
li°°r
 = 
NULL
;

114 
rv
 = 
	`≠r_fûï©h_li°_mîge
(&
li°°r
, 
∑thñts
, 
p
);

115 i‡(
∑πs_ö
[
i
][0] == '\0')

116 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
li°°r
);

119 
	`ABTS_PTR_NOTNULL
(
tc
, 
li°°r
);

120 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

121 
	`ABTS_STR_EQUAL
(
tc
, 
li°°r
, 
∑πs_ö
[
i
]);

124 
	}
}

127 
abts_suôe
 *
	$ã°∑th
(
abts_suôe
 *
suôe
)

129 
suôe
 = 
	`ADD_SUITE
(suite)

131 
	`abts_run_ã°
(
suôe
, 
li°_•lô_mu…i
, 
NULL
);

132 
	`abts_run_ã°
(
suôe
, 
li°_•lô_sögÀ
, 
NULL
);

133 
	`abts_run_ã°
(
suôe
, 
li°_mîge_mu…i
, 
NULL
);

134 
	`abts_run_ã°
(
suôe
, 
li°_mîge_sögÀ
, 
NULL
);

136  
suôe
;

137 
	}
}

	@test/testpipe.c

17 
	~<°dlib.h
>

19 
	~"ã°utû.h
"

20 
	~"≠r_fûe_io.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_thªad_¥oc.h
"

25 
	~"≠r_°rögs.h
"

27 
≠r_fûe_t
 *
	gªadp
 = 
NULL
;

28 
≠r_fûe_t
 *
	gwrôï
 = 
NULL
;

30 
	$¸óã_pùe
(
abts_ˇ£
 *
tc
, *
d©a
)

32 
≠r_°©us_t
 
rv
;

34 
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
ªadp
, &
wrôï
, 
p
);

35 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

36 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadp
);

37 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôï
);

38 
	}
}

40 
	$˛o£_pùe
(
abts_ˇ£
 *
tc
, *
d©a
)

42 
≠r_°©us_t
 
rv
;

43 
≠r_size_t
 
nbyãs
 = 256;

44 
buf
[256];

46 
rv
 = 
	`≠r_fûe_˛o£
(
ªadp
);

47 
rv
 = 
	`≠r_fûe_˛o£
(
wrôï
);

48 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

50 
rv
 = 
	`≠r_fûe_ªad
(
ªadp
, 
buf
, &
nbyãs
);

51 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_EBADF
(
rv
));

52 
	}
}

54 
	$£t_timeout
(
abts_ˇ£
 *
tc
, *
d©a
)

56 
≠r_°©us_t
 
rv
;

57 
≠r_öãrvÆ_time_t
 
timeout
;

59 
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
ªadp
, &
wrôï
, 
APR_WRITE_BLOCK
, 
p
);

60 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

61 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadp
);

62 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôï
);

64 
rv
 = 
	`≠r_fûe_pùe_timeout_gë
(
wrôï
, &
timeout
);

65 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

66 
	`ABTS_ASSERT
(
tc
, "Timeouàmism©ch,Éx≥˘ed -1", 
timeout
 == -1);

68 
rv
 = 
	`≠r_fûe_pùe_timeout_£t
(
ªadp
, 
	`≠r_time_‰om_£c
(1));

69 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

71 
rv
 = 
	`≠r_fûe_pùe_timeout_gë
(
ªadp
, &
timeout
);

72 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

73 
	`ABTS_ASSERT
(
tc
, "Timeout mismatch,Éxpected 1 second",

74 
timeout
 =
	`≠r_time_‰om_£c
(1));

75 
	}
}

77 
	$ªad_wrôe
(
abts_ˇ£
 *
tc
, *
d©a
)

79 
≠r_°©us_t
 
rv
;

80 *
buf
;

81 
≠r_size_t
 
nbyãs
;

83 
nbyãs
 = 
	`°æí
("this isáÅest");

84 
buf
 = (*)
	`≠r_∑Œoc
(
p
, 
nbyãs
 + 1);

86 
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
ªadp
, &
wrôï
, 
APR_WRITE_BLOCK
, 
p
);

87 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

88 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadp
);

89 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôï
);

91 
rv
 = 
	`≠r_fûe_pùe_timeout_£t
(
ªadp
, 
	`≠r_time_‰om_£c
(1));

92 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

94 i‡(!
rv
) {

95 
rv
 = 
	`≠r_fûe_ªad
(
ªadp
, 
buf
, &
nbyãs
);

96 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

97 
	`ABTS_SIZE_EQUAL
(
tc
, 0, 
nbyãs
);

99 
	}
}

101 
	$ªad_wrôe_nŸimeout
(
abts_ˇ£
 *
tc
, *
d©a
)

103 
≠r_°©us_t
 
rv
;

104 *
buf
 = "this isáÅest";

105 *
öput
;

106 
≠r_size_t
 
nbyãs
;

108 
nbyãs
 = 
	`°æí
("this isáÅest");

110 
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
ªadp
, &
wrôï
, 
p
);

111 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

112 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadp
);

113 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôï
);

115 
rv
 = 
	`≠r_fûe_wrôe
(
wrôï
, 
buf
, &
nbyãs
);

116 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
("thi†i†®ã°"), 
nbyãs
);

117 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

119 
nbyãs
 = 256;

120 
öput
 = 
	`≠r_pˇŒoc
(
p
, 
nbyãs
 + 1);

121 
rv
 = 
	`≠r_fûe_ªad
(
ªadp
, 
öput
, &
nbyãs
);

122 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

123 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
("thi†i†®ã°"), 
nbyãs
);

124 
	`ABTS_STR_EQUAL
(
tc
, "thi†i†®ã°", 
öput
);

125 
	}
}

127 
	$ã°_pùe_wrôefuŒ
(
abts_ˇ£
 *
tc
, *
d©a
)

129 
ôî©i⁄s
 = 1000;

130 
i
;

131 
byãs_≥r_ôî©i⁄
 = 8000;

132 *
buf
 = (*)
	`mÆloc
(
byãs_≥r_ôî©i⁄
);

133 
ª•⁄£buf
[128];

134 
≠r_size_t
 
nbyãs
;

135 
byãs_¥o˚s£d
;

136 
≠r_¥oc_t
 
¥oc
 = {0};

137 
≠r_¥oˇâr_t
 *
¥oˇâr
;

138 c⁄° *
¨gs
[2];

139 
≠r_°©us_t
 
rv
;

140 
≠r_exô_why_e
 
why
;

142 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

143 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

145 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_CHILD_BLOCK
, APR_CHILD_BLOCK,

146 
APR_CHILD_BLOCK
);

147 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

149 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
¥oˇâr
, 
APR_PROGRAM_ENV
);

150 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

152 
rv
 = 
	`≠r_¥oˇâr_îr‹_check_£t
(
¥oˇâr
, 1);

153 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

155 
¨gs
[0] = "ªadchûd" 
EXTENSION
;

156 
¨gs
[1] = 
NULL
;

157 
rv
 = 
	`≠r_¥oc_¸óã
(&
¥oc
, 
TESTBINPATH
 "ªadchûd" 
EXTENSION
, 
¨gs
, 
NULL
, 
¥oˇâr
, 
p
);

158 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

160 
rv
 = 
	`≠r_fûe_pùe_timeout_£t
(
¥oc
.
ö
, 
	`≠r_time_‰om_£c
(10));

161 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

163 
rv
 = 
	`≠r_fûe_pùe_timeout_£t
(
¥oc
.
out
, 
	`≠r_time_‰om_£c
(10));

164 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

166 
i
 = 
ôî©i⁄s
;

168 
rv
 = 
	`≠r_fûe_wrôe_fuŒ
(
¥oc
.
ö
, 
buf
, 
byãs_≥r_ôî©i⁄
, 
NULL
);

169 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

170 } --
i
);

172 
	`‰ì
(
buf
);

174 
rv
 = 
	`≠r_fûe_˛o£
(
¥oc
.
ö
);

175 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

177 
nbyãs
 = (
ª•⁄£buf
);

178 
rv
 = 
	`≠r_fûe_ªad
(
¥oc
.
out
, 
ª•⁄£buf
, &
nbyãs
);

179 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

180 
byãs_¥o˚s£d
 = ()
	`≠r_°πoi64
(
ª•⁄£buf
, 
NULL
, 10);

181 
	`ABTS_INT_EQUAL
(
tc
, 
ôî©i⁄s
 * 
byãs_≥r_ôî©i⁄
, 
byãs_¥o˚s£d
);

183 
	`ABTS_ASSERT
(
tc
, "wait for childÖrocess",

184 
	`≠r_¥oc_waô
(&
¥oc
, 
NULL
, &
why
, 
APR_WAIT
Ë=
APR_CHILD_DONE
);

186 
	`ABTS_ASSERT
(
tc
, "chûdÅîmö©edÇ‹mÆly", 
why
 =
APR_PROC_EXIT
);

187 
	}
}

189 
abts_suôe
 *
	$ã°pùe
(
abts_suôe
 *
suôe
)

191 
suôe
 = 
	`ADD_SUITE
(suite)

193 
	`abts_run_ã°
(
suôe
, 
¸óã_pùe
, 
NULL
);

194 
	`abts_run_ã°
(
suôe
, 
˛o£_pùe
, 
NULL
);

195 
	`abts_run_ã°
(
suôe
, 
£t_timeout
, 
NULL
);

196 
	`abts_run_ã°
(
suôe
, 
˛o£_pùe
, 
NULL
);

197 
	`abts_run_ã°
(
suôe
, 
ªad_wrôe
, 
NULL
);

198 
	`abts_run_ã°
(
suôe
, 
˛o£_pùe
, 
NULL
);

199 
	`abts_run_ã°
(
suôe
, 
ªad_wrôe_nŸimeout
, 
NULL
);

200 
	`abts_run_ã°
(
suôe
, 
ã°_pùe_wrôefuŒ
, 
NULL
);

201 
	`abts_run_ã°
(
suôe
, 
˛o£_pùe
, 
NULL
);

203  
suôe
;

204 
	}
}

	@test/testpoll.c

17 
	~"ã°utû.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_√tw‹k_io.h
"

23 
	~"≠r_pﬁl.h
"

25 
	#SMALL_NUM_SOCKETS
 3

	)

30 
	#LARGE_NUM_SOCKETS
 50

	)

32 
≠r_sockë_t
 *
	gs
[
LARGE_NUM_SOCKETS
];

33 
≠r_sockaddr_t
 *
	gß
[
LARGE_NUM_SOCKETS
];

34 
≠r_pﬁl£t_t
 *
	gpﬁl£t
;

35 
≠r_pﬁlcb_t
 *
	gpﬁlcb
;

40 #ifde‡
OLD_POLL_INTERFACE


41 
≠r_pﬁlfd_t
 *
	gpﬁœºay
;

42 
≠r_pﬁlfd_t
 *
	gpﬁœºay_œrge
;

45 
	$make_sockë
(
≠r_sockë_t
 **
sock
, 
≠r_sockaddr_t
 **
ß
,

46 
≠r_p‹t_t
 
p‹t
, 
≠r_poﬁ_t
 *
p
, 
abts_ˇ£
 *
tc
)

48 
≠r_°©us_t
 
rv
;

50 
rv
 = 
	`≠r_sockaddr_öfo_gë
(
ß
, "127.0.0.1", 
APR_UNSPEC
, 
p‹t
, 0, 
p
);

51 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

53 
rv
 = 
	`≠r_sockë_¸óã
(
sock
, (*
ß
)->
Ámûy
, 
SOCK_DGRAM
, 0, 
p
);

54 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

56 
rv
 = 
	`≠r_sockë_böd
((*
sock
), (*
ß
));

57 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

58 
	}
}

60 #ifde‡
OLD_POLL_INTERFACE


61 
	$check_sockës
(c⁄° 
≠r_pﬁlfd_t
 *
pﬁœºay
,

62 
≠r_sockë_t
 **
sock¨øy
, 
which
, 
pﬁlö
,

63 
abts_ˇ£
 *
tc
)

65 
≠r_°©us_t
 
rv
;

66 
≠r_öt16_t
 
evít
;

67 *
°r
;

69 
rv
 = 
	`≠r_pﬁl_ªvíts_gë
(&
evít
, 
sock¨øy
[
which
],

70 (
≠r_pﬁlfd_t
 *)
pﬁœºay
);

71 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

72 i‡(
pﬁlö
) {

73 
°r
 = 
	`≠r_p•rötf
(
p
, "Socket %dÇot signalled when it should be",

74 
which
);

75 
	`ABTS_ASSERT
(
tc
, 
°r
, 
evít
 & 
APR_POLLIN
);

77 
°r
 = 
	`≠r_p•rötf
(
p
, "Socket %d signalled when it shouldÇot be",

78 
which
);

79 
	`ABTS_ASSERT
(
tc
, 
°r
, !(
evít
 & 
APR_POLLIN
));

81 
	}
}

84 
	$£nd_msg
(
≠r_sockë_t
 **
sock¨øy
, 
≠r_sockaddr_t
 **
ßs
, 
which
,

85 
abts_ˇ£
 *
tc
)

87 
≠r_size_t
 
Àn
 = 5;

88 
≠r_°©us_t
 
rv
;

90 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock¨øy
[
which
]);

92 
rv
 = 
	`≠r_sockë_£ndto
(
sock¨øy
[
which
], 
ßs
[which], 0, "hñlo", &
Àn
);

93 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

94 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
("hñlo"), 
Àn
);

95 
	}
}

97 
	$ªcv_msg
(
≠r_sockë_t
 **
sock¨øy
, 
which
, 
≠r_poﬁ_t
 *
p
,

98 
abts_ˇ£
 *
tc
)

100 
≠r_size_t
 
buÊí
 = 5;

101 *
buf„r
 = 
	`≠r_pˇŒoc
(
p
, (Ë* (
buÊí
 + 1));

102 
≠r_sockaddr_t
 *
ªcß
;

103 
≠r_°©us_t
 
rv
;

105 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock¨øy
[
which
]);

107 
	`≠r_sockaddr_öfo_gë
(&
ªcß
, "127.0.0.1", 
APR_UNSPEC
, 7770, 0, 
p
);

109 
rv
 = 
	`≠r_sockë_ªcv‰om
(
ªcß
, 
sock¨øy
[
which
], 0, 
buf„r
, &
buÊí
);

110 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

111 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
("hñlo"), 
buÊí
);

112 
	`ABTS_STR_EQUAL
(
tc
, "hñlo", 
buf„r
);

113 
	}
}

116 
	$¸óã_Æl_sockës
(
abts_ˇ£
 *
tc
, *
d©a
)

118 
i
;

120 
i
 = 0; i < 
LARGE_NUM_SOCKETS
; i++){

121 
	`make_sockë
(&
s
[
i
], &
ß
[i], 7777 + i, 
p
, 
tc
);

123 
	}
}

125 #ifde‡
OLD_POLL_INTERFACE


126 
	$£tup_smÆl_pﬁl
(
abts_ˇ£
 *
tc
, *
d©a
)

128 
≠r_°©us_t
 
rv
;

129 
i
;

131 
rv
 = 
	`≠r_pﬁl_£tup
(&
pﬁœºay
, 
SMALL_NUM_SOCKETS
, 
p
);

132 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

134 
i
 = 0; i < 
SMALL_NUM_SOCKETS
;i++){

135 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pﬁœºay
[
i
].
ªqevíts
);

136 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pﬁœºay
[
i
].
π√víts
);

138 
rv
 = 
	`≠r_pﬁl_sockë_add
(
pﬁœºay
, 
s
[
i
], 
APR_POLLIN
);

139 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

140 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[
i
], 
pﬁœºay
[i].
desc
.s);

142 
	}
}

144 
	$£tup_œrge_pﬁl
(
abts_ˇ£
 *
tc
, *
d©a
)

146 
≠r_°©us_t
 
rv
;

147 
i
;

149 
rv
 = 
	`≠r_pﬁl_£tup
(&
pﬁœºay_œrge
, 
LARGE_NUM_SOCKETS
, 
p
);

150 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

152 
i
 = 0; i < 
LARGE_NUM_SOCKETS
;i++){

153 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pﬁœºay_œrge
[
i
].
ªqevíts
);

154 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pﬁœºay_œrge
[
i
].
π√víts
);

156 
rv
 = 
	`≠r_pﬁl_sockë_add
(
pﬁœºay_œrge
, 
s
[
i
], 
APR_POLLIN
);

157 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

158 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[
i
], 
pﬁœºay_œrge
[i].
desc
.s);

160 
	}
}

162 
	$nomesßge
(
abts_ˇ£
 *
tc
, *
d©a
)

164 
≠r_°©us_t
 
rv
;

165 
§v
 = 
SMALL_NUM_SOCKETS
;

167 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

168 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

169 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 0, 
tc
);

170 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 0, 
tc
);

171 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 0, 
tc
);

172 
	}
}

174 
	$£nd_2
(
abts_ˇ£
 *
tc
, *
d©a
)

176 
≠r_°©us_t
 
rv
;

177 
§v
 = 
SMALL_NUM_SOCKETS
;

179 
	`£nd_msg
(
s
, 
ß
, 2, 
tc
);

181 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

182 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

183 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 0, 
tc
);

184 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 0, 
tc
);

185 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 1, 
tc
);

186 
	}
}

188 
	$ªcv_2_£nd_1
(
abts_ˇ£
 *
tc
, *
d©a
)

190 
≠r_°©us_t
 
rv
;

191 
§v
 = 
SMALL_NUM_SOCKETS
;

193 
	`ªcv_msg
(
s
, 2, 
p
, 
tc
);

194 
	`£nd_msg
(
s
, 
ß
, 1, 
tc
);

196 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

197 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

198 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 0, 
tc
);

199 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 1, 
tc
);

200 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 0, 
tc
);

201 
	}
}

203 
	$£nd_2_sig«Àd_1
(
abts_ˇ£
 *
tc
, *
d©a
)

205 
≠r_°©us_t
 
rv
;

206 
§v
 = 
SMALL_NUM_SOCKETS
;

208 
	`£nd_msg
(
s
, 
ß
, 2, 
tc
);

210 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

211 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

212 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 0, 
tc
);

213 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 1, 
tc
);

214 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 1, 
tc
);

215 
	}
}

217 
	$ªcv_1_£nd_0
(
abts_ˇ£
 *
tc
, *
d©a
)

219 
≠r_°©us_t
 
rv
;

220 
§v
 = 
SMALL_NUM_SOCKETS
;

222 
	`ªcv_msg
(
s
, 1, 
p
, 
tc
);

223 
	`£nd_msg
(
s
, 
ß
, 0, 
tc
);

225 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

226 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

227 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 1, 
tc
);

228 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 0, 
tc
);

229 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 1, 
tc
);

230 
	}
}

232 
	$˛ór_Æl_sig«Œed
(
abts_ˇ£
 *
tc
, *
d©a
)

234 
≠r_°©us_t
 
rv
;

235 
§v
 = 
SMALL_NUM_SOCKETS
;

237 
	`ªcv_msg
(
s
, 0, 
p
, 
tc
);

238 
	`ªcv_msg
(
s
, 2, 
p
, 
tc
);

240 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay
, 
SMALL_NUM_SOCKETS
, &
§v
, 2 * 
APR_USEC_PER_SEC
);

241 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

242 
	`check_sockës
(
pﬁœºay
, 
s
, 0, 0, 
tc
);

243 
	`check_sockës
(
pﬁœºay
, 
s
, 1, 0, 
tc
);

244 
	`check_sockës
(
pﬁœºay
, 
s
, 2, 0, 
tc
);

245 
	}
}

247 
	$£nd_œrge_pﬁœºay
(
abts_ˇ£
 *
tc
, *
d©a
)

249 
≠r_°©us_t
 
rv
;

250 
Ãv
 = 
LARGE_NUM_SOCKETS
;

251 
i
;

253 
	`£nd_msg
(
s
, 
ß
, 
LARGE_NUM_SOCKETS
 - 1, 
tc
);

255 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay_œrge
, 
LARGE_NUM_SOCKETS
, &
Ãv
,

256 2 * 
APR_USEC_PER_SEC
);

257 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

259 
i
 = 0; i < 
LARGE_NUM_SOCKETS
; i++) {

260 i‡(
i
 =(
LARGE_NUM_SOCKETS
 - 1)) {

261 
	`check_sockës
(
pﬁœºay_œrge
, 
s
, 
i
, 1, 
tc
);

264 
	`check_sockës
(
pﬁœºay_œrge
, 
s
, 
i
, 0, 
tc
);

267 
	}
}

269 
	$ªcv_œrge_pﬁœºay
(
abts_ˇ£
 *
tc
, *
d©a
)

271 
≠r_°©us_t
 
rv
;

272 
Ãv
 = 
LARGE_NUM_SOCKETS
;

273 
i
;

275 
	`ªcv_msg
(
s
, 
LARGE_NUM_SOCKETS
 - 1, 
p
, 
tc
);

277 
rv
 = 
	`≠r_pﬁl
(
pﬁœºay_œrge
, 
LARGE_NUM_SOCKETS
, &
Ãv
,

278 2 * 
APR_USEC_PER_SEC
);

279 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

281 
i
 = 0; i < 
LARGE_NUM_SOCKETS
; i++) {

282 
	`check_sockës
(
pﬁœºay_œrge
, 
s
, 
i
, 0, 
tc
);

284 
	}
}

287 
	$£tup_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

289 
≠r_°©us_t
 
rv
;

290 
rv
 = 
	`≠r_pﬁl£t_¸óã
(&
pﬁl£t
, 
LARGE_NUM_SOCKETS
, 
p
, 0);

291 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

292 
	}
}

294 
	$mu…i_evít_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

296 
≠r_°©us_t
 
rv
;

297 
≠r_pﬁlfd_t
 
sockë_pﬁlfd
;

298 
Ãv
;

299 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

301 
	`ABTS_PTR_NOTNULL
(
tc
, 
s
[0]);

302 
sockë_pﬁlfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

303 
sockë_pﬁlfd
.
ªqevíts
 = 
APR_POLLIN
 | 
APR_POLLOUT
;

304 
sockë_pﬁlfd
.
desc
.
s
 = s[0];

305 
sockë_pﬁlfd
.
˛õ¡_d©a
 = 
s
[0];

306 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
sockë_pﬁlfd
);

307 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

309 
	`£nd_msg
(
s
, 
ß
, 0, 
tc
);

311 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, -1, &
Ãv
, &
descs
);

312 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

313 i‡(
Ãv
 == 1) {

314 
ev
 = 
descs
[0].
π√víts
;

315 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
desc
.s);

316 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
˛õ¡_d©a
);

317 
	`ABTS_ASSERT
(
tc
, "either or both of APR_POLLIN, APR_POLLOUTÑeturned",

318 ((
ev
 & 
APR_POLLIN
Ë!0Ë|| (”v & 
APR_POLLOUT
) != 0));

320 i‡(
Ãv
 == 2) {

321 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
desc
.s);

322 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
˛õ¡_d©a
);

323 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[1].
desc
.s);

324 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[1].
˛õ¡_d©a
);

325 
	`ABTS_ASSERT
(
tc
, "returnedÉvents incorrect",

326 ((
descs
[0].
π√víts
 | descs[1].rtnevents)

327 =(
APR_POLLIN
 | 
APR_POLLOUT
))

328 && 
descs
[0].
π√víts
 != descs[1].rtnevents);

331 
	`ABTS_ASSERT
(
tc
, "either one orÅwoÉventsÑeturned",

332 
Ãv
 == 1 ||Ürv == 2);

335 
	`ªcv_msg
(
s
, 0, 
p
, 
tc
);

337 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 0, &
Ãv
, &
descs
);

338 
	`ABTS_INT_EQUAL
(
tc
, 0, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

339 
	`ABTS_INT_EQUAL
(
tc
, 1, 
Ãv
);

340 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
desc
.s);

341 
	`ABTS_INT_EQUAL
(
tc
, 
APR_POLLOUT
, 
descs
[0].
π√víts
);

342 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
˛õ¡_d©a
);

344 
rv
 = 
	`≠r_pﬁl£t_ªmove
(
pﬁl£t
, &
sockë_pﬁlfd
);

345 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

346 
	}
}

348 
	$add_sockës_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

350 
≠r_°©us_t
 
rv
;

351 
i
;

353 
i
 = 0; i < 
LARGE_NUM_SOCKETS
;i++){

354 
≠r_pﬁlfd_t
 
sockë_pﬁlfd
;

356 
	`ABTS_PTR_NOTNULL
(
tc
, 
s
[
i
]);

358 
sockë_pﬁlfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

359 
sockë_pﬁlfd
.
ªqevíts
 = 
APR_POLLIN
;

360 
sockë_pﬁlfd
.
desc
.
s
 = s[
i
];

361 
sockë_pﬁlfd
.
˛õ¡_d©a
 = 
s
[
i
];

362 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
sockë_pﬁlfd
);

363 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

365 
	}
}

367 
	$nomesßge_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

369 
≠r_°©us_t
 
rv
;

370 
Ãv
;

371 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

373 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 0, &
Ãv
, &
descs
);

374 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

375 
	`ABTS_INT_EQUAL
(
tc
, 0, 
Ãv
);

376 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
descs
);

377 
	}
}

379 
	$£nd0_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

381 
≠r_°©us_t
 
rv
;

382 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

383 
num
;

385 
	`£nd_msg
(
s
, 
ß
, 0, 
tc
);

386 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, -1, &
num
, &
descs
);

387 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

388 
	`ABTS_INT_EQUAL
(
tc
, 1, 
num
);

389 
	`ABTS_PTR_NOTNULL
(
tc
, 
descs
);

391 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
desc
.s);

392 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
descs
[0].
˛õ¡_d©a
);

393 
	}
}

395 
	$ªcv0_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

397 
≠r_°©us_t
 
rv
;

398 
Ãv
;

399 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

401 
	`ªcv_msg
(
s
, 0, 
p
, 
tc
);

402 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 0, &
Ãv
, &
descs
);

403 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

404 
	`ABTS_INT_EQUAL
(
tc
, 0, 
Ãv
);

405 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
descs
);

406 
	}
}

408 
	$£nd_middÀ_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

410 
≠r_°©us_t
 
rv
;

411 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

412 
num
;

414 
	`£nd_msg
(
s
, 
ß
, 2, 
tc
);

415 
	`£nd_msg
(
s
, 
ß
, 5, 
tc
);

416 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, -1, &
num
, &
descs
);

417 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

418 
	`ABTS_PTR_NOTNULL
(
tc
, 
descs
);

419 
	`ABTS_ASSERT
(
tc
, "either one orÅwoÉventsÑeturned",

420 
num
 == 1 ||Çum == 2);

424 i‡(
num
 == 2) {

425 
	`ABTS_ASSERT
(
tc
, "Incorrect socket inÑesult set",

426 ((
descs
[0].
desc
.
s
 == s[2]) && (descs[1].desc.s == s[5])) ||

427 ((
descs
[0].
desc
.
s
 == s[5]) && (descs[1].desc.s == s[2])));

429 
	}
}

431 
	$˛ór_middÀ_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

433 
≠r_°©us_t
 
rv
;

434 
Ãv
;

435 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

437 
	`ªcv_msg
(
s
, 2, 
p
, 
tc
);

438 
	`ªcv_msg
(
s
, 5, 
p
, 
tc
);

440 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 0, &
Ãv
, &
descs
);

441 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

442 
	`ABTS_INT_EQUAL
(
tc
, 0, 
Ãv
);

443 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
descs
);

444 
	}
}

446 
	$£nd_œ°_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

448 
≠r_°©us_t
 
rv
;

449 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

450 
num
;

452 
	`£nd_msg
(
s
, 
ß
, 
LARGE_NUM_SOCKETS
 - 1, 
tc
);

453 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, -1, &
num
, &
descs
);

454 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

455 
	`ABTS_INT_EQUAL
(
tc
, 1, 
num
);

456 
	`ABTS_PTR_NOTNULL
(
tc
, 
descs
);

458 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[
LARGE_NUM_SOCKETS
 - 1], 
descs
[0].
desc
.s);

459 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[
LARGE_NUM_SOCKETS
 - 1], 
descs
[0].
˛õ¡_d©a
);

460 
	}
}

462 
	$˛ór_œ°_pﬁl£t
(
abts_ˇ£
 *
tc
, *
d©a
)

464 
≠r_°©us_t
 
rv
;

465 
Ãv
;

466 c⁄° 
≠r_pﬁlfd_t
 *
descs
 = 
NULL
;

468 
	`ªcv_msg
(
s
, 
LARGE_NUM_SOCKETS
 - 1, 
p
, 
tc
);

470 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 0, &
Ãv
, &
descs
);

471 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

472 
	`ABTS_INT_EQUAL
(
tc
, 0, 
Ãv
);

473 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
descs
);

474 
	}
}

476 
	$˛o£_Æl_sockës
(
abts_ˇ£
 *
tc
, *
d©a
)

478 
≠r_°©us_t
 
rv
;

479 
i
;

481 
i
 = 0; i < 
LARGE_NUM_SOCKETS
; i++){

482 
rv
 = 
	`≠r_sockë_˛o£
(
s
[
i
]);

483 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

485 
	}
}

487 
	$pﬁl£t_ªmove
(
abts_ˇ£
 *
tc
, *
d©a
)

489 
≠r_°©us_t
 
rv
;

490 
≠r_pﬁl£t_t
 *
pﬁl£t
;

491 c⁄° 
≠r_pﬁlfd_t
 *
hŸ_fûes
;

492 
≠r_pﬁlfd_t
 
pfd
;

493 
≠r_öt32_t
 
num
;

495 
rv
 = 
	`≠r_pﬁl£t_¸óã
(&
pﬁl£t
, 5, 
p
, 0);

496 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

498 
pfd
.
p
 =Ö;

499 
pfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

500 
pfd
.
ªqevíts
 = 
APR_POLLOUT
;

502 
pfd
.
desc
.
s
 = s[0];

503 
pfd
.
˛õ¡_d©a
 = (*)1;

504 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
pfd
);

505 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

507 
pfd
.
desc
.
s
 = s[1];

508 
pfd
.
˛õ¡_d©a
 = (*)2;

509 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
pfd
);

510 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

512 
pfd
.
desc
.
s
 = s[2];

513 
pfd
.
˛õ¡_d©a
 = (*)3;

514 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
pfd
);

515 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

517 
pfd
.
desc
.
s
 = s[3];

518 
pfd
.
˛õ¡_d©a
 = (*)4;

519 
rv
 = 
	`≠r_pﬁl£t_add
(
pﬁl£t
, &
pfd
);

520 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

522 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 1000, &
num
, &
hŸ_fûes
);

523 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

524 
	`ABTS_INT_EQUAL
(
tc
, 4, 
num
);

527 
pfd
.
desc
.
s
 = s[1];

528 
pfd
.
˛õ¡_d©a
 = (*)999;

529 
rv
 = 
	`≠r_pﬁl£t_ªmove
(
pﬁl£t
, &
pfd
);

530 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

533 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 1000, &
num
, &
hŸ_fûes
);

534 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

535 
	`ABTS_INT_EQUAL
(
tc
, 3, 
num
);

536 
	`ABTS_PTR_EQUAL
(
tc
, (*)1, 
hŸ_fûes
[0].
˛õ¡_d©a
);

537 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[0], 
hŸ_fûes
[0].
desc
.s);

538 
	`ABTS_PTR_EQUAL
(
tc
, (*)3, 
hŸ_fûes
[1].
˛õ¡_d©a
);

539 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[2], 
hŸ_fûes
[1].
desc
.s);

540 
	`ABTS_PTR_EQUAL
(
tc
, (*)4, 
hŸ_fûes
[2].
˛õ¡_d©a
);

541 
	`ABTS_PTR_EQUAL
(
tc
, 
s
[3], 
hŸ_fûes
[2].
desc
.s);

544 
pfd
.
desc
.
s
 = s[2];

545 
pfd
.
˛õ¡_d©a
 = (*)999;

546 
rv
 = 
	`≠r_pﬁl£t_ªmove
(
pﬁl£t
, &
pfd
);

547 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

550 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 1000, &
num
, &
hŸ_fûes
);

551 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

552 
	`ABTS_INT_EQUAL
(
tc
, 2, 
num
);

553 
	`ABTS_ASSERT
(
tc
, "Incorrect socket inÑesult set",

554 ((
hŸ_fûes
[0].
desc
.
s
 == s[0]) && (hot_files[1].desc.s == s[3])) ||

555 ((
hŸ_fûes
[0].
desc
.
s
 == s[3]) && (hot_files[1].desc.s == s[0])));

556 
	`ABTS_ASSERT
(
tc
, "Incorrect client data inÑesult set",

557 ((
hŸ_fûes
[0].
˛õ¡_d©a
 == (*)1) &&

558 (
hŸ_fûes
[1].
˛õ¡_d©a
 == (*)4)) ||

559 ((
hŸ_fûes
[0].
˛õ¡_d©a
 == (*)4) &&

560 (
hŸ_fûes
[1].
˛õ¡_d©a
 == (*)1)));

561 
	}
}

563 
	#POLLCB_PREREQ
 \

565 i‡(
pﬁlcb
 =
NULL
) { \

566 
	`ABTS_NOT_IMPL
(
tc
, "pollcb interfaceÇot supported"); \

569 } 0)

	)

571 
	$£tup_pﬁlcb
(
abts_ˇ£
 *
tc
, *
d©a
)

573 
≠r_°©us_t
 
rv
;

574 
rv
 = 
	`≠r_pﬁlcb_¸óã
(&
pﬁlcb
, 
LARGE_NUM_SOCKETS
, 
p
, 0);

575 i‡(
rv
 =
APR_ENOTIMPL
) {

576 
pﬁlcb
 = 
NULL
;

577 
	`ABTS_NOT_IMPL
(
tc
, "pollcb interfaceÇot supported");

580 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

582 
	}
}

584 
	spﬁlcb_b©⁄_t
 {

585 
abts_ˇ£
 *
	mtc
;

586 
	mcou¡
;

587 } 
	tpﬁlcb_b©⁄_t
;

589 
≠r_°©us_t
 
	$åiggî_pﬁlcb_cb
(* 
b©⁄
, 
≠r_pﬁlfd_t
 *
des¸ùt‹
)

591 
pﬁlcb_b©⁄_t
* 
pcb
 = (pﬁlcb_b©⁄_t*Ë
b©⁄
;

592 
	`ABTS_PTR_EQUAL
(
pcb
->
tc
, 
s
[0], 
des¸ùt‹
->
desc
.s);

593 
	`ABTS_PTR_EQUAL
(
pcb
->
tc
, 
s
[0], 
des¸ùt‹
->
˛õ¡_d©a
);

594 
pcb
->
cou¡
++;

595  
APR_SUCCESS
;

596 
	}
}

598 
	$åiggî_pﬁlcb
(
abts_ˇ£
 *
tc
, *
d©a
)

600 
≠r_°©us_t
 
rv
;

601 
≠r_pﬁlfd_t
 
sockë_pﬁlfd
;

602 
pﬁlcb_b©⁄_t
 
pcb
;

604 
POLLCB_PREREQ
;

606 
	`ABTS_PTR_NOTNULL
(
tc
, 
s
[0]);

607 
sockë_pﬁlfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

608 
sockë_pﬁlfd
.
ªqevíts
 = 
APR_POLLIN
;

609 
sockë_pﬁlfd
.
desc
.
s
 = s[0];

610 
sockë_pﬁlfd
.
˛õ¡_d©a
 = 
s
[0];

611 
rv
 = 
	`≠r_pﬁlcb_add
(
pﬁlcb
, &
sockë_pﬁlfd
);

612 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

614 
	`£nd_msg
(
s
, 
ß
, 0, 
tc
);

615 
pcb
.
tc
 =Åc;

616 
pcb
.
cou¡
 = 0;

617 
rv
 = 
	`≠r_pﬁlcb_pﬁl
(
pﬁlcb
, -1, 
åiggî_pﬁlcb_cb
, &
pcb
);

618 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

619 
	`ABTS_INT_EQUAL
(
tc
, 1, 
pcb
.
cou¡
);

621 
rv
 = 
	`≠r_pﬁlcb_ªmove
(
pﬁlcb
, &
sockë_pﬁlfd
);

622 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

623 
	}
}

625 
	$timeout_pﬁlcb
(
abts_ˇ£
 *
tc
, *
d©a
)

627 
≠r_°©us_t
 
rv
;

628 
pﬁlcb_b©⁄_t
 
pcb
;

630 
POLLCB_PREREQ
;

632 
pcb
.
cou¡
 = 0;

633 
pcb
.
tc
 =Åc;

635 
rv
 = 
	`≠r_pﬁlcb_pﬁl
(
pﬁlcb
, 1, 
åiggî_pﬁlcb_cb
, &
pcb
);

636 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

637 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pcb
.
cou¡
);

638 
	}
}

640 
	$timeout_pﬁlö_pﬁlcb
(
abts_ˇ£
 *
tc
, *
d©a
)

642 
≠r_°©us_t
 
rv
;

643 
pﬁlcb_b©⁄_t
 
pcb
;

644 
≠r_pﬁlfd_t
 
sockë_pﬁlfd
;

646 
POLLCB_PREREQ
;

648 
	`ªcv_msg
(
s
, 0, 
p
, 
tc
);

650 
	`ABTS_PTR_NOTNULL
(
tc
, 
s
[0]);

651 
sockë_pﬁlfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

652 
sockë_pﬁlfd
.
ªqevíts
 = 
APR_POLLIN
;

653 
sockë_pﬁlfd
.
desc
.
s
 = s[0];

654 
sockë_pﬁlfd
.
˛õ¡_d©a
 = 
s
[0];

655 
rv
 = 
	`≠r_pﬁlcb_add
(
pﬁlcb
, &
sockë_pﬁlfd
);

656 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

658 
pcb
.
cou¡
 = 0;

659 
pcb
.
tc
 =Åc;

661 
rv
 = 
	`≠r_pﬁlcb_pﬁl
(
pﬁlcb
, 1, 
åiggî_pﬁlcb_cb
, &
pcb
);

662 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

663 
	`ABTS_INT_EQUAL
(
tc
, 0, 
pcb
.
cou¡
);

665 
rv
 = 
	`≠r_pﬁlcb_ªmove
(
pﬁlcb
, &
sockë_pﬁlfd
);

666 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

667 
	}
}

669 
	$pﬁl£t_deÁu…
(
abts_ˇ£
 *
tc
, *
d©a
)

671 
≠r_°©us_t
 
rv1
, 
rv2
;

672 
≠r_pﬁl£t_t
 *
pﬁl£t
;

680 
rv1
 = 
	`≠r_pﬁl£t_¸óã_ex
(&
pﬁl£t
, 1, 
p
, 0, 
APR_POLLSET_PORT
);

682 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv1
);

683 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁl£t
);

685 
rv1
 = 
	`≠r_pﬁl£t_¸óã_ex
(&
pﬁl£t
, 1, 
p
, 0, 
APR_POLLSET_KQUEUE
);

686 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv1
);

687 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁl£t
);

695 
rv1
 = 
	`≠r_pﬁl£t_¸óã_ex
(&
pﬁl£t
, 1, 
p
, 
APR_POLLSET_NODEFAULT
,

696 
APR_POLLSET_PORT
);

698 i‡(
rv1
 =
APR_SUCCESS
) {

699 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁl£t
);

702 
rv2
 = 
	`≠r_pﬁl£t_¸óã_ex
(&
pﬁl£t
, 1, 
p
, 
APR_POLLSET_NODEFAULT
,

703 
APR_POLLSET_KQUEUE
);

704 i‡(
rv2
 =
APR_SUCCESS
) {

705 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁl£t
);

708 
	`ABTS_ASSERT
(
tc
,

710 
rv1
 !
APR_SUCCESS
 || 
rv2
 != APR_SUCCESS);

711 
	}
}

713 
	$pﬁlcb_deÁu…
(
abts_ˇ£
 *
tc
, *
d©a
)

715 
≠r_°©us_t
 
rv1
, 
rv2
;

716 
≠r_pﬁlcb_t
 *
pﬁlcb
;

724 
rv1
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 1, 
p
, 0, 
APR_POLLSET_PORT
);

725 i‡(
rv1
 =
APR_ENOTIMPL
) {

726 
	`ABTS_NOT_IMPL
(
tc
, "pollcb interfaceÇot supported");

730 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv1
);

731 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁlcb
);

733 
rv1
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 1, 
p
, 0, 
APR_POLLSET_KQUEUE
);

734 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv1
);

735 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁlcb
);

743 
rv1
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 1, 
p
, 
APR_POLLSET_NODEFAULT
,

744 
APR_POLLSET_PORT
);

746 i‡(
rv1
 =
APR_SUCCESS
) {

747 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁlcb
);

750 
rv2
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 1, 
p
, 
APR_POLLSET_NODEFAULT
,

751 
APR_POLLSET_KQUEUE
);

752 i‡(
rv2
 =
APR_SUCCESS
) {

753 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁlcb
);

756 
	`ABTS_ASSERT
(
tc
,

758 
rv1
 !
APR_SUCCESS
 || 
rv2
 != APR_SUCCESS);

765 
rv1
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 1, 
p
, 0, 
APR_POLLSET_POLL
);

766 i‡(
rv1
 !
APR_ENOTIMPL
) {

767 
	`ABTS_INT_EQUAL
(
tc
, 
rv1
, 
APR_SUCCESS
);

768 
	`ABTS_PTR_NOTNULL
(
tc
, 
pﬁlcb
);

770 
	}
}

772 
	$ju°¶ìp
(
abts_ˇ£
 *
tc
, *
d©a
)

774 
≠r_öt32_t
 
nsds
;

775 c⁄° 
≠r_pﬁlfd_t
 *
hŸ_fûes
;

776 
≠r_pﬁl£t_t
 *
pﬁl£t
;

777 
≠r_°©us_t
 
rv
;

778 
≠r_time_t
 
t1
, 
t2
;

779 
i
;

780 
≠r_pﬁl£t_mëhod_e
 
mëhods
[] = {

781 
APR_POLLSET_DEFAULT
,

782 
APR_POLLSET_SELECT
,

783 
APR_POLLSET_KQUEUE
,

784 
APR_POLLSET_PORT
,

785 
APR_POLLSET_EPOLL
,

786 
APR_POLLSET_POLL
};

788 
nsds
 = 1;

789 
t1
 = 
	`≠r_time_now
();

790 
rv
 = 
	`≠r_pﬁl
(
NULL
, 0, &
nsds
, 
	`≠r_time_‰om_m£c
(200));

791 
t2
 = 
	`≠r_time_now
();

792 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

793 
	`ABTS_INT_EQUAL
(
tc
, 0, 
nsds
);

794 
	`ABTS_ASSERT
(
tc
,

796 (
t2
 - 
t1
Ë> 
	`≠r_time_‰om_m£c
(100));

798 
i
 = 0; i <  
mëhods
 /  methods[0]; i++) {

799 
rv
 = 
	`≠r_pﬁl£t_¸óã_ex
(&
pﬁl£t
, 5, 
p
, 0, 
mëhods
[
i
]);

800 i‡(
rv
 !
APR_ENOTIMPL
) {

801 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

803 
nsds
 = 1;

804 
t1
 = 
	`≠r_time_now
();

805 
rv
 = 
	`≠r_pﬁl£t_pﬁl
(
pﬁl£t
, 
	`≠r_time_‰om_m£c
(200), &
nsds
,

806 &
hŸ_fûes
);

807 
t2
 = 
	`≠r_time_now
();

808 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

809 
	`ABTS_INT_EQUAL
(
tc
, 0, 
nsds
);

810 
	`ABTS_ASSERT
(
tc
,

812 (
t2
 - 
t1
Ë> 
	`≠r_time_‰om_m£c
(100));

814 
rv
 = 
	`≠r_pﬁl£t_de°roy
(
pﬁl£t
);

815 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

818 
rv
 = 
	`≠r_pﬁlcb_¸óã_ex
(&
pﬁlcb
, 5, 
p
, 0, 
mëhods
[0]);

819 i‡(
rv
 !
APR_ENOTIMPL
) {

820 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

822 
t1
 = 
	`≠r_time_now
();

823 
rv
 = 
	`≠r_pﬁlcb_pﬁl
(
pﬁlcb
, 
	`≠r_time_‰om_m£c
(200), 
NULL
, NULL);

824 
t2
 = 
	`≠r_time_now
();

825 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_TIMEUP
(
rv
));

826 
	`ABTS_ASSERT
(
tc
,

828 (
t2
 - 
t1
Ë> 
	`≠r_time_‰om_m£c
(100));

833 
	}
}

835 
abts_suôe
 *
	$ã°pﬁl
(
abts_suôe
 *
suôe
)

837 
suôe
 = 
	`ADD_SUITE
(suite)

839 
	`abts_run_ã°
(
suôe
, 
¸óã_Æl_sockës
, 
NULL
);

841 #ifde‡
OLD_POLL_INTERFACE


842 
	`abts_run_ã°
(
suôe
, 
£tup_smÆl_pﬁl
, 
NULL
);

843 
	`abts_run_ã°
(
suôe
, 
£tup_œrge_pﬁl
, 
NULL
);

844 
	`abts_run_ã°
(
suôe
, 
nomesßge
, 
NULL
);

845 
	`abts_run_ã°
(
suôe
, 
£nd_2
, 
NULL
);

846 
	`abts_run_ã°
(
suôe
, 
ªcv_2_£nd_1
, 
NULL
);

847 
	`abts_run_ã°
(
suôe
, 
£nd_2_sig«Àd_1
, 
NULL
);

848 
	`abts_run_ã°
(
suôe
, 
ªcv_1_£nd_0
, 
NULL
);

849 
	`abts_run_ã°
(
suôe
, 
˛ór_Æl_sig«Œed
, 
NULL
);

850 
	`abts_run_ã°
(
suôe
, 
£nd_œrge_pﬁœºay
, 
NULL
);

851 
	`abts_run_ã°
(
suôe
, 
ªcv_œrge_pﬁœºay
, 
NULL
);

854 
	`abts_run_ã°
(
suôe
, 
£tup_pﬁl£t
, 
NULL
);

855 
	`abts_run_ã°
(
suôe
, 
mu…i_evít_pﬁl£t
, 
NULL
);

856 
	`abts_run_ã°
(
suôe
, 
add_sockës_pﬁl£t
, 
NULL
);

857 
	`abts_run_ã°
(
suôe
, 
nomesßge_pﬁl£t
, 
NULL
);

858 
	`abts_run_ã°
(
suôe
, 
£nd0_pﬁl£t
, 
NULL
);

859 
	`abts_run_ã°
(
suôe
, 
ªcv0_pﬁl£t
, 
NULL
);

860 
	`abts_run_ã°
(
suôe
, 
£nd_middÀ_pﬁl£t
, 
NULL
);

861 
	`abts_run_ã°
(
suôe
, 
˛ór_middÀ_pﬁl£t
, 
NULL
);

862 
	`abts_run_ã°
(
suôe
, 
£nd_œ°_pﬁl£t
, 
NULL
);

863 
	`abts_run_ã°
(
suôe
, 
˛ór_œ°_pﬁl£t
, 
NULL
);

864 
	`abts_run_ã°
(
suôe
, 
pﬁl£t_ªmove
, 
NULL
);

865 
	`abts_run_ã°
(
suôe
, 
˛o£_Æl_sockës
, 
NULL
);

866 
	`abts_run_ã°
(
suôe
, 
¸óã_Æl_sockës
, 
NULL
);

867 
	`abts_run_ã°
(
suôe
, 
£tup_pﬁlcb
, 
NULL
);

868 
	`abts_run_ã°
(
suôe
, 
åiggî_pﬁlcb
, 
NULL
);

869 
	`abts_run_ã°
(
suôe
, 
timeout_pﬁlcb
, 
NULL
);

870 
	`abts_run_ã°
(
suôe
, 
timeout_pﬁlö_pﬁlcb
, 
NULL
);

871 
	`abts_run_ã°
(
suôe
, 
˛o£_Æl_sockës
, 
NULL
);

872 
	`abts_run_ã°
(
suôe
, 
pﬁl£t_deÁu…
, 
NULL
);

873 
	`abts_run_ã°
(
suôe
, 
pﬁlcb_deÁu…
, 
NULL
);

874 
	`abts_run_ã°
(
suôe
, 
ju°¶ìp
, 
NULL
);

875  
suôe
;

876 
	}
}

	@test/testpools.c

18 
	~"≠r_gíîÆ.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 #i‡
APR_HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 
	~"ã°utû.h
"

30 
	#ALLOC_BYTES
 1024

	)

32 
≠r_poﬁ_t
 *
	gpmaö
 = 
NULL
;

33 
≠r_poﬁ_t
 *
	gpchûd
 = 
NULL
;

35 
	$Æloc_byãs
(
abts_ˇ£
 *
tc
, *
d©a
)

37 
i
;

38 *
Æloc
;

40 
Æloc
 = 
	`≠r_∑Œoc
(
pmaö
, 
ALLOC_BYTES
);

41 
	`ABTS_PTR_NOTNULL
(
tc
, 
Æloc
);

43 
i
=0;i<
ALLOC_BYTES
;i++) {

44 *
±r
 = 
Æloc
 + 
i
;

45 *
±r
 = 0xa;

50 
	`ABTS_TRUE
(
tc
, 1);

51 
	}
}

53 
	$ˇŒoc_byãs
(
abts_ˇ£
 *
tc
, *
d©a
)

55 
i
;

56 *
Æloc
;

58 
Æloc
 = 
	`≠r_pˇŒoc
(
pmaö
, 
ALLOC_BYTES
);

59 
	`ABTS_PTR_NOTNULL
(
tc
, 
Æloc
);

61 
i
=0;i<
ALLOC_BYTES
;i++) {

62 *
±r
 = 
Æloc
 + 
i
;

63 
	`ABTS_TRUE
(
tc
, *
±r
 == '\0');

65 
	}
}

67 
	$∑ª¡_poﬁ
(
abts_ˇ£
 *
tc
, *
d©a
)

69 
≠r_°©us_t
 
rv
;

71 
rv
 = 
	`≠r_poﬁ_¸óã
(&
pmaö
, 
NULL
);

72 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

73 
	`ABTS_PTR_NOTNULL
(
tc
, 
pmaö
);

74 
	}
}

76 
	$chûd_poﬁ
(
abts_ˇ£
 *
tc
, *
d©a
)

78 
≠r_°©us_t
 
rv
;

80 
rv
 = 
	`≠r_poﬁ_¸óã
(&
pchûd
, 
pmaö
);

81 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

82 
	`ABTS_PTR_NOTNULL
(
tc
, 
pchûd
);

83 
	}
}

85 
	$ã°_™˚°‹
(
abts_ˇ£
 *
tc
, *
d©a
)

87 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`≠r_poﬁ_is_™˚°‹
(
pmaö
, 
pchûd
));

88 
	}
}

90 
	$ã°_nŸ™˚°‹
(
abts_ˇ£
 *
tc
, *
d©a
)

92 
	`ABTS_INT_EQUAL
(
tc
, 0, 
	`≠r_poﬁ_is_™˚°‹
(
pchûd
, 
pmaö
));

93 
	}
}

95 
≠r_°©us_t
 
	$suc˚ss_˛ónup
(*
d©a
)

97  
APR_SUCCESS
;

98 
	}
}

100 *
	gcheckî_d©a
 = "Hello, world.";

102 
≠r_°©us_t
 
	$checkî_˛ónup
(*
d©a
)

104  
d©a
 =
checkî_d©a
 ? 
APR_SUCCESS
 : 
APR_EGENERAL
;

105 
	}
}

107 
	$ã°_˛ónups
(
abts_ˇ£
 *
tc
, *
d©a
)

109 
≠r_°©us_t
 
rv
;

110 
n
;

113 
n
 = 0;Ç < 5;Ç++) {

114 
	`≠r_poﬁ_˛ónup_ªgi°î
(
pchûd
, 
NULL
, 
suc˚ss_˛ónup
,

115 
suc˚ss_˛ónup
);

116 
	`≠r_poﬁ_˛ónup_ªgi°î
(
pchûd
, 
checkî_d©a
, 
checkî_˛ónup
,

117 
suc˚ss_˛ónup
);

118 
	`≠r_poﬁ_˛ónup_ªgi°î
(
pchûd
, 
NULL
, 
checkî_˛ónup
,

119 
suc˚ss_˛ónup
);

121 
rv
 = 
	`≠r_poﬁ_˛ónup_run
(
p
, 
NULL
, 
suc˚ss_˛ónup
);

122 
	`ABTS_ASSERT
(
tc
, "nuŒ› cÀ™u∞ru¿OK", 
rv
 =
APR_SUCCESS
);

123 
rv
 = 
	`≠r_poﬁ_˛ónup_run
(
p
, 
checkî_d©a
, 
checkî_˛ónup
);

124 
	`ABTS_ASSERT
(
tc
, "˛ónu∞∑s£d c‹ª˘ d©a", 
rv
 =
APR_SUCCESS
);

125 
rv
 = 
	`≠r_poﬁ_˛ónup_run
(
p
, 
NULL
, 
checkî_˛ónup
);

126 
	`ABTS_ASSERT
(
tc
, "˛ónu∞∑s£d c‹ª˘ d©a", 
rv
 =
APR_EGENERAL
);

128 i‡(
n
 == 2) {

130 
	`≠r_poﬁ_˛ór
(
pchûd
);

133 i‡(
n
 % 2 == 0) {

135 
	`≠r_poﬁ_˛ónup_ªgi°î
(
pchûd
, 
NULL
,

136 
≠r_poﬁ_˛ónup_nuŒ
,

137 
≠r_poﬁ_˛ónup_nuŒ
);

140 
	}
}

142 
abts_suôe
 *
	$ã°poﬁ
(
abts_suôe
 *
suôe
)

144 
suôe
 = 
	`ADD_SUITE
(suite)

146 
	`abts_run_ã°
(
suôe
, 
∑ª¡_poﬁ
, 
NULL
);

147 
	`abts_run_ã°
(
suôe
, 
chûd_poﬁ
, 
NULL
);

148 
	`abts_run_ã°
(
suôe
, 
ã°_™˚°‹
, 
NULL
);

149 
	`abts_run_ã°
(
suôe
, 
ã°_nŸ™˚°‹
, 
NULL
);

150 
	`abts_run_ã°
(
suôe
, 
Æloc_byãs
, 
NULL
);

151 
	`abts_run_ã°
(
suôe
, 
ˇŒoc_byãs
, 
NULL
);

152 
	`abts_run_ã°
(
suôe
, 
ã°_˛ónups
, 
NULL
);

154  
suôe
;

155 
	}
}

	@test/testproc.c

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"ã°utû.h
"

24 
	#TESTSTR
 "Thi†i†®ã°"

	)

26 
	#PROC_CHILD_NAME
 
TESTBINPATH
 "¥oc_chûd" 
EXTENSION


	)

28 *
	g¥oc_chûd
;

30 
≠r_¥oc_t
 
	g√w¥oc
;

32 
	$ã°_¸óã_¥oc
(
abts_ˇ£
 *
tc
, *
d©a
)

34 c⁄° *
¨gs
[2];

35 
≠r_¥oˇâr_t
 *
©å
;

36 
≠r_fûe_t
 *
ã°fûe
 = 
NULL
;

37 
≠r_°©us_t
 
rv
;

38 
≠r_size_t
 
Àngth
;

39 *
buf
;

41 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
©å
, 
p
);

42 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

44 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
©å
, 
APR_FULL_BLOCK
, APR_FULL_BLOCK,

45 
APR_NO_PIPE
);

46 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

48 
rv
 = 
	`≠r_¥oˇâr_dú_£t
(
©å
, "data");

49 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

51 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
©å
, 
APR_PROGRAM_ENV
);

52 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

54 
¨gs
[0] = "¥oc_chûd" 
EXTENSION
;

55 
¨gs
[1] = 
NULL
;

57 
rv
 = 
	`≠r_¥oc_¸óã
(&
√w¥oc
, 
¥oc_chûd
, 
¨gs
, 
NULL
,

58 
©å
, 
p
);

59 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

61 
ã°fûe
 = 
√w¥oc
.
ö
;

63 
Àngth
 = 
	`°æí
(
TESTSTR
);

64 
rv
 = 
	`≠r_fûe_wrôe
(
ã°fûe
, 
TESTSTR
, &
Àngth
);

65 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

66 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
TESTSTR
), 
Àngth
);

68 
ã°fûe
 = 
√w¥oc
.
out
;

69 
Àngth
 = 256;

70 
buf
 = 
	`≠r_pˇŒoc
(
p
, 
Àngth
);

71 
rv
 = 
	`≠r_fûe_ªad
(
ã°fûe
, 
buf
, &
Àngth
);

72 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

73 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
buf
);

74 
	}
}

76 
	$ã°_¥oc_waô
(
abts_ˇ£
 *
tc
, *
d©a
)

78 
≠r_°©us_t
 
rv
;

80 
rv
 = 
	`≠r_¥oc_waô
(&
√w¥oc
, 
NULL
, NULL, 
APR_WAIT
);

81 
	`ABTS_INT_EQUAL
(
tc
, 
APR_CHILD_DONE
, 
rv
);

82 
	}
}

84 
	$ã°_fûe_ªdú
(
abts_ˇ£
 *
tc
, *
d©a
)

86 
≠r_fûe_t
 *
ã°out
 = 
NULL
;

87 
≠r_fûe_t
 *
ã°îr
 = 
NULL
;

88 
≠r_off_t
 
off£t
;

89 
≠r_°©us_t
 
rv
;

90 c⁄° *
¨gs
[2];

91 
≠r_¥oˇâr_t
 *
©å
;

92 
≠r_fûe_t
 *
ã°fûe
 = 
NULL
;

93 
≠r_size_t
 
Àngth
;

94 *
buf
;

96 
ã°fûe
 = 
NULL
;

97 
rv
 = 
	`≠r_fûe_›í
(&
ã°fûe
, "data/stdin",

98 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
,

99 
APR_OS_DEFAULT
, 
p
);

100 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

101 
rv
 = 
	`≠r_fûe_›í
(&
ã°out
, "data/stdout",

102 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
,

103 
APR_OS_DEFAULT
, 
p
);

104 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

105 
rv
 = 
	`≠r_fûe_›í
(&
ã°îr
, "data/stderr",

106 
APR_FOPEN_READ
 | 
APR_FOPEN_WRITE
 | 
APR_FOPEN_CREATE
 | 
APR_FOPEN_EXCL
,

107 
APR_OS_DEFAULT
, 
p
);

108 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

110 
Àngth
 = 
	`°æí
(
TESTSTR
);

111 
	`≠r_fûe_wrôe
(
ã°fûe
, 
TESTSTR
, &
Àngth
);

112 
off£t
 = 0;

113 
rv
 = 
	`≠r_fûe_£ek
(
ã°fûe
, 
APR_SET
, &
off£t
);

114 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

115 
	`ABTS_ASSERT
(
tc
, "Fûêposôi⁄ mism©ch,Éx≥˘ed 0", 
off£t
 == 0);

117 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
©å
, 
p
);

118 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

119 
rv
 = 
	`≠r_¥oˇâr_chûd_ö_£t
(
©å
, 
ã°fûe
, 
NULL
);

120 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

121 
rv
 = 
	`≠r_¥oˇâr_chûd_out_£t
(
©å
, 
ã°out
, 
NULL
);

122 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

123 
rv
 = 
	`≠r_¥oˇâr_chûd_îr_£t
(
©å
, 
ã°îr
, 
NULL
);

124 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

125 
rv
 = 
	`≠r_¥oˇâr_dú_£t
(
©å
, "data");

126 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

127 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
©å
, 
APR_PROGRAM_ENV
);

128 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

130 
¨gs
[0] = "proc_child";

131 
¨gs
[1] = 
NULL
;

133 
rv
 = 
	`≠r_¥oc_¸óã
(&
√w¥oc
, 
¥oc_chûd
, 
¨gs
, 
NULL
,

134 
©å
, 
p
);

135 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

137 
rv
 = 
	`≠r_¥oc_waô
(&
√w¥oc
, 
NULL
, NULL, 
APR_WAIT
);

138 
	`ABTS_INT_EQUAL
(
tc
, 
APR_CHILD_DONE
, 
rv
);

140 
off£t
 = 0;

141 
rv
 = 
	`≠r_fûe_£ek
(
ã°out
, 
APR_SET
, &
off£t
);

142 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

144 
Àngth
 = 256;

145 
buf
 = 
	`≠r_pˇŒoc
(
p
, 
Àngth
);

146 
rv
 = 
	`≠r_fûe_ªad
(
ã°out
, 
buf
, &
Àngth
);

147 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

148 
	`ABTS_STR_EQUAL
(
tc
, 
TESTSTR
, 
buf
);

151 
	`≠r_fûe_˛o£
(
ã°fûe
);

152 
	`≠r_fûe_˛o£
(
ã°out
);

153 
	`≠r_fûe_˛o£
(
ã°îr
);

155 
rv
 = 
	`≠r_fûe_ªmove
("d©a/°dö", 
p
);;

156 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

157 
rv
 = 
	`≠r_fûe_ªmove
("d©a/°dout", 
p
);;

158 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

159 
rv
 = 
	`≠r_fûe_ªmove
("d©a/°dîr", 
p
);;

160 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

161 
	}
}

163 
abts_suôe
 *
	$ã°¥oc
(
abts_suôe
 *
suôe
)

165 
suôe
 = 
	`ADD_SUITE
(suite)

167 
	`≠r_fûï©h_mîge
(&
¥oc_chûd
, 
NULL
, 
PROC_CHILD_NAME
, 0, 
p
);

168 
	`abts_run_ã°
(
suôe
, 
ã°_¸óã_¥oc
, 
NULL
);

169 
	`abts_run_ã°
(
suôe
, 
ã°_¥oc_waô
, 
NULL
);

170 
	`abts_run_ã°
(
suôe
, 
ã°_fûe_ªdú
, 
NULL
);

172  
suôe
;

173 
	}
}

	@test/testprocmutex.c

17 
	~"≠r_shm.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_¥oc_muãx.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_gë›t.h
"

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~"ã°utû.h
"

28 #i‡
APR_HAS_FORK


30 
	#MAX_ITER
 200

	)

31 
	#CHILDREN
 6

	)

32 
	#MAX_COUNTER
 (
MAX_ITER
 * 
CHILDREN
)

	)

33 
	#MAX_WAIT_USEC
 (1000*1000)

	)

35 
≠r_¥oc_muãx_t
 *
	g¥oc_lock
;

36 vﬁ©ûê*
	gx
;

39 
	$ö¸emít
(
n
)

41 
	`≠r_¶ìp
(1);

42  
n
+1;

43 
	}
}

45 
	$make_chûd
(
abts_ˇ£
 *
tc
, 
åylock
, 
≠r_¥oc_t
 **
¥oc
, 
≠r_poﬁ_t
 *
p
)

47 
≠r_°©us_t
 
rv
;

49 *
¥oc
 = 
	`≠r_pˇŒoc
(
p
, (**proc));

52 
	`≠r_¶ìp
 (1);

54 
rv
 = 
	`≠r_¥oc_f‹k
(*
¥oc
, 
p
);

55 i‡(
rv
 =
APR_INCHILD
) {

56 
i
 = 0;

65 
	`≠r_öôülize
();

67 i‡(
	`≠r_¥oc_muãx_chûd_öô
(&
¥oc_lock
, 
NULL
, 
p
))

68 
	`exô
(1);

71 i‡(
åylock
) {

72 
waô_u£c
 = 0;

74 (
rv
 = 
	`≠r_¥oc_muãx_åylock
(
¥oc_lock
))) {

75 i‡(!
	`APR_STATUS_IS_EBUSY
(
rv
))

76 
	`exô
(1);

77 i‡(++
waô_u£c
 >
MAX_WAIT_USEC
)

78 
	`exô
(1);

79 
	`≠r_¶ìp
(1);

83 i‡(
	`≠r_¥oc_muãx_lock
(
¥oc_lock
))

84 
	`exô
(1);

87 
i
++;

88 *
x
 = 
	`ö¸emít
(*x);

89 i‡(
	`≠r_¥oc_muãx_u∆ock
(
¥oc_lock
))

90 
	`exô
(1);

91 } 
i
 < 
MAX_ITER
);

92 
	`exô
(0);

95 
	`ABTS_ASSERT
(
tc
, "f‹k faûed", 
rv
 =
APR_INPARENT
);

96 
	}
}

99 
	$awaô_chûd
(
abts_ˇ£
 *
tc
, 
≠r_¥oc_t
 *
¥oc
)

101 
code
;

102 
≠r_exô_why_e
 
why
;

103 
≠r_°©us_t
 
rv
;

105 
rv
 = 
	`≠r_¥oc_waô
(
¥oc
, &
code
, &
why
, 
APR_WAIT
);

106 
	`ABTS_ASSERT
(
tc
, "child didÇotÅerminate with success",

107 
rv
 =
APR_CHILD_DONE
 && 
why
 =
APR_PROC_EXIT
 && 
code
 == 0);

108 
	}
}

110 
	$ã°_ex˛usive
(
abts_ˇ£
 *
tc
, c⁄° *
lock«me
,

111 
≠r_lockmech_e
 
mech
)

113 
≠r_¥oc_t
 *
chûd
[
CHILDREN
];

114 
≠r_°©us_t
 
rv
;

115 
n
;

117 
rv
 = 
	`≠r_¥oc_muãx_¸óã
(&
¥oc_lock
, 
lock«me
, 
mech
, 
p
);

118 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óãÅhêmuãx", 
rv
);

119 i‡(
rv
 !
APR_SUCCESS
)

122 
n
 = 0;Ç < 
CHILDREN
;Ç++)

123 
	`make_chûd
(
tc
, 0, &
chûd
[
n
], 
p
);

125 
n
 = 0;Ç < 
CHILDREN
;Ç++)

126 
	`awaô_chûd
(
tc
, 
chûd
[
n
]);

128 
	`ABTS_ASSERT
(
tc
, "Lock†d⁄'à≠≥¨Åÿw‹k", *
x
 =
MAX_COUNTER
);

130 
rv
 = 
	`≠r_¥oc_muãx_åylock
(
¥oc_lock
);

131 i‡(
rv
 =
APR_ENOTIMPL
) {

132 
	`ABTS_NOT_IMPL
(
tc
, "apr_proc_mutex_trylockÇot implemented");

135 
	`APR_ASSERT_SUCCESS
(
tc
, "check f‹Årylock", 
rv
);

137 
rv
 = 
	`≠r_¥oc_muãx_u∆ock
(
¥oc_lock
);

138 
	`APR_ASSERT_SUCCESS
(
tc
, "u∆ocká·îÅrylock check", 
rv
);

140 *
x
 = 0;

142 
n
 = 0;Ç < 
CHILDREN
;Ç++)

143 
	`make_chûd
(
tc
, 1, &
chûd
[
n
], 
p
);

145 
n
 = 0;Ç < 
CHILDREN
;Ç++)

146 
	`awaô_chûd
(
tc
, 
chûd
[
n
]);

148 
	`ABTS_ASSERT
(
tc
, "Locks don'táppearÅo work withÅrylock",

149 *
x
 =
MAX_COUNTER
);

150 
	}
}

153 
	$¥oc_muãx
(
abts_ˇ£
 *
tc
, *
d©a
)

155 #i‡
APR_HAS_FORK


156 
≠r_°©us_t
 
rv
;

157 c⁄° *
shm«me
 = "tpm.shm";

158 
≠r_shm_t
 *
shm
;

159 
≠r_lockmech_e
 *
mech
 = 
d©a
;

162 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, (), 
NULL
, 
p
);

163 i‡(
rv
 =
APR_ENOTIMPL
) {

164 
	`≠r_fûe_ªmove
(
shm«me
, 
p
);

165 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, (), 
shm«me
, 
p
);

168 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óã shm segmít", 
rv
);

169 i‡(
rv
 !
APR_SUCCESS
)

172 
x
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

173 
	`ã°_ex˛usive
(
tc
, 
NULL
, *
mech
);

174 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

175 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

177 
	`ABTS_NOT_IMPL
(
tc
, "APRÜacks fork() support");

179 
	}
}

182 
abts_suôe
 *
	$ã°¥ocmuãx
(
abts_suôe
 *
suôe
)

184 
≠r_lockmech_e
 
mech
 = 
APR_LOCK_DEFAULT
;

186 
suôe
 = 
	`ADD_SUITE
(suite)

187 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

188 #i‡
APR_HAS_POSIXSEM_SERIALIZE


189 
mech
 = 
APR_LOCK_POSIXSEM
;

190 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

192 #i‡
APR_HAS_SYSVSEM_SERIALIZE


193 
mech
 = 
APR_LOCK_SYSVSEM
;

194 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

196 #i‡
APR_HAS_PROC_PTHREAD_SERIALIZE


197 
mech
 = 
APR_LOCK_PROC_PTHREAD
;

198 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

200 #i‡
APR_HAS_FCNTL_SERIALIZE


201 
mech
 = 
APR_LOCK_FCNTL
;

202 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

204 #i‡
APR_HAS_FLOCK_SERIALIZE


205 
mech
 = 
APR_LOCK_FLOCK
;

206 
	`abts_run_ã°
(
suôe
, 
¥oc_muãx
, &
mech
);

209  
suôe
;

210 
	}
}

	@test/testrand.c

17 
	~"≠r_gíîÆ.h
"

18 
	~"≠r_poﬁs.h
"

19 
	~"≠r_øndom.h
"

20 
	~"≠r_thªad_¥oc.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~"ã°utû.h
"

25 
	#RANDOM_BUF_SZ
 128

	)

27 
	$hexdump
(c⁄° *
msg
, c⁄° *
b
, 
n
)

29 
i
;

31 
	`¥ötf
("\n%s", 
msg
);

32 
i
 = 0; i < 
n
; ++i) {

34 i‡((
i
 & 0xf) == 0)

35 
	`¥ötf
("%04x", 
i
);

36 
	`¥ötf
(" %02x", 
b
[
i
]);

37 i‡((
i
 & 0xf) == 0xf)

38 
	`¥ötf
("\n");

40 
	`¥ötf
("0x%02x,", 
b
[
i
]);

41 i‡((
i
 & 7) == 7)

42 
	`¥ötf
("\n");

45 
	`¥ötf
("\n");

46 
	}
}

48 
≠r_øndom_t
 *
	gr
;

50 
≠r_°©us_t
 
	tAPR_THREAD_FUNC
 
	t∫d_‚
(
	t≠r_øndom_t
 * 
	tr
, *
	tb
,

51 
	t≠r_size_t
 
	tn
);

53 
	$ønd_run_k©
(
abts_ˇ£
 *
tc
, 
∫d_‚
 *
f
, 
≠r_øndom_t
 *
r
,

54 c⁄° 
ex≥˘ed
[
RANDOM_BUF_SZ
])

56 
c
[
RANDOM_BUF_SZ
];

57 
≠r_°©us_t
 
rv
;

59 
rv
 = 
	`f
(
r
, 
c
, 
RANDOM_BUF_SZ
);

60 
	`ABTS_INT_EQUAL
(
tc
, 0, 
rv
);

61 i‡(
rv
)

63 i‡(
	`memcmp
(
c
, 
ex≥˘ed
, 
RANDOM_BUF_SZ
)) {

64 
	`hexdump
("Gíî©ed: ", 
c
, 
RANDOM_BUF_SZ
);

65 
	`hexdump
("Ex≥˘ed: ", 
ex≥˘ed
, 
RANDOM_BUF_SZ
);

66 
	`ABTS_FAIL
(
tc
, "Randomness mismatch");

68 
	}
}

70 #i‡
APR_HAS_FORK


71 
	$ønd_check_k©
(
∫d_‚
 *
f
, 
≠r_øndom_t
 *
r
,

72 c⁄° 
ex≥˘ed
[
RANDOM_BUF_SZ
],

73 
≠r_fûe_t
 *
ªadp
,á¥_fûe_à*
wrôï
)

75 
≠r_size_t
 
nbyãs
 = 
RANDOM_BUF_SZ
;

76 
≠r_size_t
 
cmd_size
 = 1;

77 
c
[
RANDOM_BUF_SZ
];

78 
ack
;

79 
≠r_°©us_t
 
rv
;

81 
rv
 = 
	`f
(
r
, 
c
, 
RANDOM_BUF_SZ
);

82 i‡(
rv
)

84 
rv
 = 0;

85 i‡(
	`memcmp
(
c
, 
ex≥˘ed
, 
RANDOM_BUF_SZ
)) {

86 
rv
 = 1;

88 
	`hexdump
("Gíî©ed: ", 
c
, 
RANDOM_BUF_SZ
);

89 
	`hexdump
("Pªvious: ", 
ex≥˘ed
, 
RANDOM_BUF_SZ
);

92 
	`≠r_fûe_wrôe
(
wrôï
, 
c
, &
nbyãs
);

94 
	`≠r_fûe_ªad
(
ªadp
, &
ack
, &
cmd_size
);

95  
rv
;

96 
	}
}

99 
	$ønd_add_zî€s
(
≠r_øndom_t
 *
r
)

101 
c
[2048];

103 
	`≠r_øndom_add_íå›y
(
r
, 
c
,  c);

104 
	}
}

106 
	$ønd_run_£ed_sh‹t
(
abts_ˇ£
 *
tc
, 
∫d_‚
 *
f
, 
≠r_øndom_t
 *
r
,

107 
cou¡
)

109 
i
;

110 
≠r_°©us_t
 
rv
;

111 
c
[1];

113 
i
 = 0; i < 
cou¡
; ++i)

114 
	`ønd_add_zî€s
(
r
);

115 
rv
 = 
	`f
(
r
, 
c
, 1);

116 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`APR_STATUS_IS_ENOTENOUGHENTROPY
(
rv
));

117 
	}
}

119 
	$ønd_£ed_sh‹t
(
abts_ˇ£
 *
tc
, *
d©a
)

121 
r
 = 
	`≠r_øndom_°™d¨d_√w
(
p
);

122 
	`ønd_run_£ed_sh‹t
(
tc
, 
≠r_øndom_ö£cuª_byãs
, 
r
, 32);

123 
	}
}

125 
	$ønd_k©
(
abts_ˇ£
 *
tc
, *
d©a
)

127 
ex≥˘ed
[
RANDOM_BUF_SZ
] = {

146 
	`ønd_add_zî€s
(
r
);

147 
	`ønd_run_k©
(
tc
, 
≠r_øndom_ö£cuª_byãs
, 
r
, 
ex≥˘ed
);

148 
	}
}

150 
	$ønd_£ed_sh‹t2
(
abts_ˇ£
 *
tc
, *
d©a
)

152 
	`ønd_run_£ed_sh‹t
(
tc
, 
≠r_øndom_£cuª_byãs
, 
r
, 320);

153 
	}
}

155 
	$ønd_k©2
(
abts_ˇ£
 *
tc
, *
d©a
)

157 
ex≥˘ed
[
RANDOM_BUF_SZ
] = {

176 
	`ønd_add_zî€s
(
r
);

177 
	`ønd_run_k©
(
tc
, 
≠r_øndom_£cuª_byãs
, 
r
, 
ex≥˘ed
);

178 
	}
}

180 
	$ønd_b¨rõr
(
abts_ˇ£
 *
tc
, *
d©a
)

182 
	`≠r_øndom_b¨rõr
(
r
);

183 
	`ønd_run_£ed_sh‹t
(
tc
, 
≠r_øndom_£cuª_byãs
, 
r
, 320);

184 
	}
}

186 
	$ønd_k©3
(
abts_ˇ£
 *
tc
, *
d©a
)

188 
ex≥˘ed
[
RANDOM_BUF_SZ
] = {

207 
	`ønd_run_k©
(
tc
, 
≠r_øndom_ö£cuª_byãs
, 
r
, 
ex≥˘ed
);

208 
	}
}

210 
	$ønd_k©4
(
abts_ˇ£
 *
tc
, *
d©a
)

212 
ex≥˘ed
[
RANDOM_BUF_SZ
] = {

231 
	`ønd_add_zî€s
(
r
);

232 
	`ønd_run_k©
(
tc
, 
≠r_øndom_£cuª_byãs
, 
r
, 
ex≥˘ed
);

233 
	}
}

235 #i‡
APR_HAS_FORK


236 
	$ønd_f‹k
(
abts_ˇ£
 *
tc
, *
d©a
)

238 
≠r_¥oc_t
 
¥oc
;

239 
≠r_°©us_t
 
rv
;

240 
≠r_size_t
 
nbyãs
 = 
RANDOM_BUF_SZ
;

241 
≠r_size_t
 
cmd_size
 = 1;

242 
cmd
 = 'X';

243 
ex≥˘ed
[
RANDOM_BUF_SZ
] = {

262 
≠r_fûe_t
 *
ªadd©≠
 = 
NULL
;

263 
≠r_fûe_t
 *
wrôed©≠
 = 
NULL
;

264 
≠r_fûe_t
 *
ªadcmdp
 = 
NULL
;

265 
≠r_fûe_t
 *
wrôecmdp
 = 
NULL
;

266 
≠r_poﬁ_t
 *
p
;

267 
i
;

269 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

271 
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
ªadd©≠
, &
wrôed©≠
, 
p
);

272 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

273 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadd©≠
);

274 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôed©≠
);

276 
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
ªadcmdp
, &
wrôecmdp
, 
p
);

277 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

278 
	`ABTS_PTR_NOTNULL
(
tc
, 
ªadcmdp
);

279 
	`ABTS_PTR_NOTNULL
(
tc
, 
wrôecmdp
);

281 
	`ønd_run_k©
(
tc
, 
≠r_øndom_£cuª_byãs
, 
r
, 
ex≥˘ed
);

283 
i
 = 0; i< 10; i++)

285 
rv
 = 
	`≠r_¥oc_f‹k
(&
¥oc
, 
p
);

286 i‡(
rv
 =
APR_INCHILD
) {

287 
n
 = 
	`ønd_check_k©
(
≠r_øndom_£cuª_byãs
, 
r
, 
ex≥˘ed
, 
ªadcmdp
, 
wrôed©≠
);

288 
	`exô
(
n
);

290 i‡(
rv
 =
APR_INPARENT
) {

291 
exôcode
;

292 
≠r_exô_why_e
 
why
;

295 
rv
 = 
	`≠r_fûe_ªad
(
ªadd©≠
, 
ex≥˘ed
, &
nbyãs
);

296 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

298 
rv
 = 
	`≠r_fûe_wrôe
(
wrôecmdp
, &
cmd
, &
cmd_size
);

299 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

300 
	`≠r_¥oc_waô
(&
¥oc
, &
exôcode
, &
why
, 
APR_WAIT
);

301 i‡(
why
 !
APR_PROC_EXIT
) {

302 
	`ABTS_FAIL
(
tc
, "ChildÅerminatedábnormally");

304 i‡(
exôcode
 == 0) {

305 i‡(
i
 == 0)

307 
	`ABTS_FAIL
(
tc
, "ChildÖroduced ourÑandomness");

310 
	`ABTS_FAIL
(
tc
, "ChildÖroducedÑandomness ofÖrevious child");

313 i‡(
exôcode
 == 2) {

314 
	`ABTS_FAIL
(
tc
, "ChildÑandomness failed");

316 i‡(
exôcode
 != 1) {

317 
	`ABTS_FAIL
(
tc
, "Unknown childÉrror");

320 
	`ABTS_FAIL
(
tc
, "Fork failed");

324 
	}
}

327 
	$ønd_exi°s
(
abts_ˇ£
 *
tc
, *
d©a
)

329 #i‡!
APR_HAS_RANDOM


330 
	`ABTS_NOT_IMPL
(
tc
, "apr_generate_random_bytes");

332 
c
[42];

337 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_generate_random_bytes failed",

338 
	`≠r_gíî©e_øndom_byãs
(
c
,  c));

340 
	}
}

342 
abts_suôe
 *
	$ã°ønd
(
abts_suôe
 *
suôe
)

344 
suôe
 = 
	`ADD_SUITE
(suite)

346 
	`abts_run_ã°
(
suôe
, 
ønd_exi°s
, 
NULL
);

347 
	`abts_run_ã°
(
suôe
, 
ønd_£ed_sh‹t
, 
NULL
);

348 
	`abts_run_ã°
(
suôe
, 
ønd_k©
, 
NULL
);

349 
	`abts_run_ã°
(
suôe
, 
ønd_£ed_sh‹t2
, 
NULL
);

350 
	`abts_run_ã°
(
suôe
, 
ønd_k©2
, 
NULL
);

351 
	`abts_run_ã°
(
suôe
, 
ønd_b¨rõr
, 
NULL
);

352 
	`abts_run_ã°
(
suôe
, 
ønd_k©3
, 
NULL
);

353 
	`abts_run_ã°
(
suôe
, 
ønd_k©4
, 
NULL
);

354 #i‡
APR_HAS_FORK


355 
	`abts_run_ã°
(
suôe
, 
ønd_f‹k
, 
NULL
);

358  
suôe
;

359 
	}
}

	@test/testshm.c

17 
	~"ã°utû.h
"

18 
	~"≠r_shm.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_°rögs.h
"

23 
	~"≠r_thªad_¥oc.h
"

24 
	~"≠r_time.h
"

25 
	~"ã°shm.h
"

26 
	~"≠r.h
"

28 #i‡
APR_HAVE_STDLIB_H


29 
	~<°dlib.h
>

32 #i‡
APR_HAS_SHARED_MEMORY


34 #i‡
APR_HAS_FORK


35 
	$msgwaô
(
¶ìp_£c
, 
fú°_box
, 
œ°_box
)

37 
i
;

38 
ªcvd
 = 0;

39 
≠r_time_t
 
°¨t
 = 
	`≠r_time_now
();

40 
≠r_öãrvÆ_time_t
 
¶ìp_duøti⁄
 = 
	`≠r_time_‰om_£c
(
¶ìp_£c
);

41 
	`≠r_time_now
(Ë- 
°¨t
 < 
¶ìp_duøti⁄
) {

42 
i
 = 
fú°_box
; i < 
œ°_box
; i++) {

43 i‡(
boxes
[
i
].
msgavaû
 && !
	`°rcmp
(boxes[i].
msg
, 
MSG
)) {

44 
ªcvd
++;

45 
boxes
[
i
].
msgavaû
 = 0;

49 
	`mem£t
(
boxes
[
i
].
msg
, 0, 1024);

52 
	`≠r_¶ìp
(
	`≠r_time_make
(0, 10000));

54  
ªcvd
;

55 
	}
}

57 
	$msgput
(
boxnum
, *
msg
)

59 
	`≠r_˝y°∫
(
boxes
[
boxnum
].
msg
, msg, 
	`°æí
(msg) + 1);

60 
boxes
[
boxnum
].
msgavaû
 = 1;

61 
	}
}

64 
	$ã°_™⁄_¸óã
(
abts_ˇ£
 *
tc
, *
d©a
)

66 
≠r_°©us_t
 
rv
;

67 
≠r_shm_t
 *
shm
 = 
NULL
;

69 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
NULL
, 
p
);

70 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

71 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

73 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

74 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

75 
	}
}

77 
	$ã°_check_size
(
abts_ˇ£
 *
tc
, *
d©a
)

79 
≠r_°©us_t
 
rv
;

80 
≠r_shm_t
 *
shm
 = 
NULL
;

81 
≠r_size_t
 
ªtsize
;

83 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
NULL
, 
p
);

84 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

85 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

87 
ªtsize
 = 
	`≠r_shm_size_gë
(
shm
);

88 
	`ABTS_SIZE_EQUAL
(
tc
, 
SHARED_SIZE
, 
ªtsize
);

90 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

91 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

92 
	}
}

94 
	$ã°_shm_Æloˇã
(
abts_ˇ£
 *
tc
, *
d©a
)

96 
≠r_°©us_t
 
rv
;

97 
≠r_shm_t
 *
shm
 = 
NULL
;

99 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
NULL
, 
p
);

100 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

101 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

103 
boxes
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

104 
	`ABTS_PTR_NOTNULL
(
tc
, 
boxes
);

106 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

107 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

108 
	}
}

110 #i‡
APR_HAS_FORK


111 
	$ã°_™⁄
(
abts_ˇ£
 *
tc
, *
d©a
)

113 
≠r_¥oc_t
 
¥oc
;

114 
≠r_°©us_t
 
rv
;

115 
≠r_shm_t
 *
shm
;

116 
≠r_size_t
 
ªtsize
;

117 
˙t
, 
i
;

118 
ªcvd
;

120 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
NULL
, 
p
);

121 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

122 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

124 
ªtsize
 = 
	`≠r_shm_size_gë
(
shm
);

125 
	`ABTS_INT_EQUAL
(
tc
, 
SHARED_SIZE
, 
ªtsize
);

127 
boxes
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

128 
	`ABTS_PTR_NOTNULL
(
tc
, 
boxes
);

130 
rv
 = 
	`≠r_¥oc_f‹k
(&
¥oc
, 
p
);

131 i‡(
rv
 =
APR_INCHILD
) {

132 
num
 = 
	`msgwaô
(5, 0, 
N_BOXES
);

136 
	`exô
(
num
);

138 i‡(
rv
 =
APR_INPARENT
) {

139 
i
 = 
N_BOXES
;

140 
˙t
 = 0;

141 
˙t
++ < 
N_MESSAGES
) {

142 i‡((
i
-=3) < 0) {

143 
i
 +
N_BOXES
;

145 
	`msgput
(
i
, 
MSG
);

146 
	`≠r_¶ìp
(
	`≠r_time_make
(0, 10000));

150 
	`ABTS_FAIL
(
tc
, "apr_proc_fork failed");

153 
rv
 = 
	`≠r_¥oc_waô
(&
¥oc
, &
ªcvd
, 
NULL
, 
APR_WAIT
);

154 
	`ABTS_INT_EQUAL
(
tc
, 
N_MESSAGES
, 
ªcvd
);

156 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

157 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

158 
	}
}

161 
	$ã°_«med
(
abts_ˇ£
 *
tc
, *
d©a
)

163 
≠r_°©us_t
 
rv
;

164 
≠r_shm_t
 *
shm
 = 
NULL
;

165 
≠r_size_t
 
ªtsize
;

166 
≠r_¥oc_t
 
pid¥odu˚r
, 
pidc⁄sumî
;

167 
≠r_¥oˇâr_t
 *
©å1
 = 
NULL
, *
©å2
 = NULL;

168 
£¡
, 
ª˚ived
;

169 
≠r_exô_why_e
 
why
;

170 c⁄° *
¨gs
[4];

172 
	`≠r_shm_ªmove
(
SHARED_FILENAME
, 
p
);

174 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
SHARED_FILENAME
, 
p
);

175 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

176 i‡(
rv
 !
APR_SUCCESS
) {

179 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

181 
ªtsize
 = 
	`≠r_shm_size_gë
(
shm
);

182 
	`ABTS_SIZE_EQUAL
(
tc
, 
SHARED_SIZE
, 
ªtsize
);

184 
boxes
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

185 
	`ABTS_PTR_NOTNULL
(
tc
, 
boxes
);

187 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
©å1
, 
p
);

188 
	`ABTS_PTR_NOTNULL
(
tc
, 
©å1
);

189 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à¸óãáâr1", 
rv
);

191 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
©å1
, 
APR_PROGRAM_ENV
);

192 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

194 
¨gs
[0] = 
	`≠r_p°rdup
(
p
, "ã°shm¥odu˚r" 
EXTENSION
);

195 
¨gs
[1] = 
NULL
;

196 
rv
 = 
	`≠r_¥oc_¸óã
(&
pid¥odu˚r
, 
TESTBINPATH
 "ã°shm¥odu˚r" 
EXTENSION
, 
¨gs
,

197 
NULL
, 
©å1
, 
p
);

198 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àœunchÖrodu˚r", 
rv
);

200 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
©å2
, 
p
);

201 
	`ABTS_PTR_NOTNULL
(
tc
, 
©å2
);

202 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à¸óãáâr2", 
rv
);

204 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
©å2
, 
APR_PROGRAM_ENV
);

205 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

207 
¨gs
[0] = 
	`≠r_p°rdup
(
p
, "ã°shmc⁄sumî" 
EXTENSION
);

208 
rv
 = 
	`≠r_¥oc_¸óã
(&
pidc⁄sumî
, 
TESTBINPATH
 "ã°shmc⁄sumî" 
EXTENSION
, 
¨gs
,

209 
NULL
, 
©å2
, 
p
);

210 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àœunch c⁄sumî", 
rv
);

212 
rv
 = 
	`≠r_¥oc_waô
(&
pidc⁄sumî
, &
ª˚ived
, &
why
, 
APR_WAIT
);

213 
	`ABTS_INT_EQUAL
(
tc
, 
APR_CHILD_DONE
, 
rv
);

214 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PROC_EXIT
, 
why
);

216 
rv
 = 
	`≠r_¥oc_waô
(&
pid¥odu˚r
, &
£¡
, &
why
, 
APR_WAIT
);

217 
	`ABTS_INT_EQUAL
(
tc
, 
APR_CHILD_DONE
, 
rv
);

218 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PROC_EXIT
, 
why
);

224 
	`APR_ASSERT_SUCCESS
(
tc
, "Error destroying shared memory",

225 
	`≠r_shm_de°roy
(
shm
));

227 
	`ABTS_INT_EQUAL
(
tc
, 
£¡
, 
ª˚ived
);

229 
	}
}

231 
	$ã°_«med_ªmove
(
abts_ˇ£
 *
tc
, *
d©a
)

233 
≠r_°©us_t
 
rv
;

234 
≠r_shm_t
 *
shm
, *
shm2
;

236 
	`≠r_shm_ªmove
(
SHARED_FILENAME
, 
p
);

238 
rv
 = 
	`≠r_shm_¸óã
(&
shm
, 
SHARED_SIZE
, 
SHARED_FILENAME
, 
p
);

239 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

240 i‡(
rv
 !
APR_SUCCESS
) {

243 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm
);

245 
rv
 = 
	`≠r_shm_ªmove
(
SHARED_FILENAME
, 
p
);

250 i‡(
rv
 =
APR_SUCCESS
)

252 
rv
 = 
	`≠r_shm_¸óã
(&
shm2
, 
SHARED_SIZE
, 
SHARED_FILENAME
, 
p
);

253 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹áŒoˇtög sh¨ed mem‹y block", 
rv
);

254 i‡(
rv
 !
APR_SUCCESS
) {

257 
	`ABTS_PTR_NOTNULL
(
tc
, 
shm2
);

259 
rv
 = 
	`≠r_shm_de°roy
(
shm2
);

260 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

263 
rv
 = 
	`≠r_shm_de°roy
(
shm
);

264 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ de°royög sh¨ed mem‹y block", 
rv
);

267 
rv
 = 
	`≠r_shm_©èch
(&
shm
, 
SHARED_FILENAME
, 
p
);

268 
	`ABTS_TRUE
(
tc
, 
rv
 != 0);

269 
	}
}

273 
abts_suôe
 *
	$ã°shm
(
abts_suôe
 *
suôe
)

275 
suôe
 = 
	`ADD_SUITE
(suite)

277 #i‡
APR_HAS_SHARED_MEMORY


278 
	`abts_run_ã°
(
suôe
, 
ã°_™⁄_¸óã
, 
NULL
);

279 
	`abts_run_ã°
(
suôe
, 
ã°_check_size
, 
NULL
);

280 
	`abts_run_ã°
(
suôe
, 
ã°_shm_Æloˇã
, 
NULL
);

281 #i‡
APR_HAS_FORK


282 
	`abts_run_ã°
(
suôe
, 
ã°_™⁄
, 
NULL
);

284 
	`abts_run_ã°
(
suôe
, 
ã°_«med
, 
NULL
);

285 
	`abts_run_ã°
(
suôe
, 
ã°_«med_ªmove
, 
NULL
);

288  
suôe
;

289 
	}
}

	@test/testshm.h

17 #i‚de‡
TESTSHM_H


18 
	#TESTSHM_H


	)

20 
	smbox
 {

21 
	mmsg
[1024];

22 
	mmsgavaû
;

23 } 
	tmbox
;

24 
mbox
 *
	gboxes
;

26 
	#N_BOXES
 10

	)

27 
	#SHARED_SIZE
 (
≠r_size_t
)(
N_BOXES
 * (
mbox
))

	)

28 
	#SHARED_FILENAME
 "d©a/≠r.ã°shm.shm"

	)

29 
	#N_MESSAGES
 100

	)

30 
	#MSG
 "Sídögá mesßge"

	)

	@test/testshmconsumer.c

17 
	~"≠r_shm.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_time.h
"

23 
	~"ã°shm.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAVE_STDLIB_H


27 
	~<°dlib.h
>

31 #i‡
APR_HAS_SHARED_MEMORY


33 
	$msgwaô
(
¶ìp_£c
, 
fú°_box
, 
œ°_box
)

35 
i
;

36 
ªcvd
 = 0;

37 
≠r_time_t
 
°¨t
 = 
	`≠r_time_now
();

38 
≠r_öãrvÆ_time_t
 
¶ìp_duøti⁄
 = 
	`≠r_time_‰om_£c
(
¶ìp_£c
);

39 
	`≠r_time_now
(Ë- 
°¨t
 < 
¶ìp_duøti⁄
) {

40 
i
 = 
fú°_box
; i < 
œ°_box
; i++) {

41 i‡(
boxes
[
i
].
msgavaû
 && !
	`°rcmp
(boxes[i].
msg
, 
MSG
)) {

42 
ªcvd
++;

43 
boxes
[
i
].
msgavaû
 = 0;

44 
	`mem£t
(
boxes
[
i
].
msg
, 0, 1024);

47 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(1));

49  
ªcvd
;

50 
	}
}

52 
	$maö
()

54 
≠r_°©us_t
 
rv
;

55 
≠r_poﬁ_t
 *
poﬁ
;

56 
≠r_shm_t
 *
shm
;

57 
ªcvd
;

59 
	`≠r_öôülize
();

61 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

62 
	`exô
(-1);

65 
rv
 = 
	`≠r_shm_©èch
(&
shm
, 
SHARED_FILENAME
, 
poﬁ
);

66 i‡(
rv
 !
APR_SUCCESS
) {

67 
	`exô
(-2);

70 
boxes
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

73 
ªcvd
 = 
	`msgwaô
(30, 0, 
N_BOXES
);

75 
rv
 = 
	`≠r_shm_dëach
(
shm
);

76 i‡(
rv
 !
APR_SUCCESS
) {

77 
	`exô
(-3);

80  
ªcvd
;

81 
	}
}

85 
	$maö
()

91 
	}
}

	@test/testshmproducer.c

17 
	~"≠r_shm.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_°rögs.h
"

22 
	~"≠r_time.h
"

23 
	~"ã°shm.h
"

24 
	~"≠r.h
"

26 #i‡
APR_HAVE_STDLIB_H


27 
	~<°dlib.h
>

31 #i‡
APR_HAS_SHARED_MEMORY


32 
	$msgput
(
boxnum
, *
msg
)

34 
	`≠r_˝y°∫
(
boxes
[
boxnum
].
msg
, msg, 
	`°æí
(msg) + 1);

35 
boxes
[
boxnum
].
msgavaû
 = 1;

36 
	}
}

38 
	$maö
()

40 
≠r_°©us_t
 
rv
;

41 
≠r_poﬁ_t
 *
poﬁ
;

42 
≠r_shm_t
 *
shm
;

43 
i
;

44 
£¡
 = 0;

46 
	`≠r_öôülize
();

48 i‡(
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
NULL
Ë!
APR_SUCCESS
) {

49 
	`exô
(-1);

52 
rv
 = 
	`≠r_shm_©èch
(&
shm
, 
SHARED_FILENAME
, 
poﬁ
);

53 i‡(
rv
 !
APR_SUCCESS
) {

54 
	`exô
(-2);

57 
boxes
 = 
	`≠r_shm_ba£addr_gë
(
shm
);

65 
i
 = 
N_BOXES
 - 1, 
£¡
 = 0; i >= 0; i--, sent++) {

66 
	`msgput
(
i
, 
MSG
);

67 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(1));

70 
rv
 = 
	`≠r_shm_dëach
(
shm
);

71 i‡(
rv
 !
APR_SUCCESS
) {

72 
	`exô
(-3);

75  
£¡
;

76 
	}
}

80 
	$maö
()

86 
	}
}

	@test/testsleep.c

17 
	~"time.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_î∫o.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~"ã°utû.h
"

26 
	#SLEEP_INTERVAL
 5

	)

28 
	$¶ìp_⁄e
(
abts_ˇ£
 *
tc
, *
d©a
)

30 
time_t
 
¥ëime
 = 
	`time
(
NULL
);

31 
time_t
 
po°time
;

32 
time_t
 
timediff
;

34 
	`≠r_¶ìp
(
	`≠r_time_‰om_£c
(
SLEEP_INTERVAL
));

35 
po°time
 = 
	`time
(
NULL
);

40 
timediff
 = 
po°time
 - 
¥ëime
 - 
SLEEP_INTERVAL
;

41 
	`ABTS_TRUE
(
tc
, 
timediff
 >= 0);

42 
	`ABTS_TRUE
(
tc
, 
timediff
 <= 1);

43 
	}
}

45 
abts_suôe
 *
	$ã°¶ìp
(
abts_suôe
 *
suôe
)

47 
suôe
 = 
	`ADD_SUITE
(suite)

49 
	`abts_run_ã°
(
suôe
, 
¶ìp_⁄e
, 
NULL
);

51  
suôe
;

52 
	}
}

	@test/testsock.c

17 
	~"ã°utû.h
"

18 
	~"ã°sock.h
"

19 
	~"≠r_thªad_¥oc.h
"

20 
	~"≠r_√tw‹k_io.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_lib.h
"

24 
	~"≠r_°rögs.h
"

25 
	~"≠r_pﬁl.h
"

27 
	$œunch_chûd
(
abts_ˇ£
 *
tc
, 
≠r_¥oc_t
 *
¥oc
, c⁄° *
¨g1
, 
≠r_poﬁ_t
 *
p
)

29 
≠r_¥oˇâr_t
 *
¥oˇâr
;

30 c⁄° *
¨gs
[3];

31 
≠r_°©us_t
 
rv
;

33 
rv
 = 
	`≠r_¥oˇâr_¸óã
(&
¥oˇâr
, 
p
);

34 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à¸óãÖroˇâr", 
rv
);

36 
rv
 = 
	`≠r_¥oˇâr_io_£t
(
¥oˇâr
, 
APR_NO_PIPE
, APR_NO_PIPE,

37 
APR_NO_PIPE
);

38 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àiÿöÖroˇâr", 
rv
);

40 
rv
 = 
	`≠r_¥oˇâr_îr‹_check_£t
(
¥oˇâr
, 1);

41 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àîr‹ check i¿¥oˇâr", 
rv
);

43 
rv
 = 
	`≠r_¥oˇâr_cmdty≥_£t
(
¥oˇâr
, 
APR_PROGRAM_ENV
);

44 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'à£àc›yÉnvú⁄mít", 
rv
);

46 
¨gs
[0] = "sockchûd" 
EXTENSION
;

47 
¨gs
[1] = 
¨g1
;

48 
¨gs
[2] = 
NULL
;

49 
rv
 = 
	`≠r_¥oc_¸óã
(
¥oc
, 
TESTBINPATH
 "sockchûd" 
EXTENSION
, 
¨gs
, 
NULL
,

50 
¥oˇâr
, 
p
);

51 
	`APR_ASSERT_SUCCESS
(
tc
, "Couldn'àœunchÖrogøm", 
rv
);

52 
	}
}

54 
	$waô_chûd
(
abts_ˇ£
 *
tc
, 
≠r_¥oc_t
 *
¥oc
)

56 
exôcode
;

57 
≠r_exô_why_e
 
why
;

59 
	`ABTS_ASSERT
(
tc
, "Error waiting for childÖrocess",

60 
	`≠r_¥oc_waô
(
¥oc
, &
exôcode
, &
why
, 
APR_WAIT
Ë=
APR_CHILD_DONE
);

62 
	`ABTS_ASSERT
(
tc
, "chûdÅîmö©edÇ‹mÆly", 
why
 =
APR_PROC_EXIT
);

63  
exôcode
;

64 
	}
}

66 
	$ã°_addr_öfo
(
abts_ˇ£
 *
tc
, *
d©a
)

68 
≠r_°©us_t
 
rv
;

69 
≠r_sockaddr_t
 *
ß
;

70 
rc
;

72 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, 
NULL
, 
APR_UNSPEC
, 80, 0, 
p
);

73 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

75 
rc
 = 
	`≠r_sockaddr_is_wûdˇrd
(
ß
);

76 
	`ABTS_INT_NEQUAL
(
tc
, 0, 
rc
);

78 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, "127.0.0.1", 
APR_UNSPEC
, 80, 0, 
p
);

79 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

80 
	`ABTS_STR_EQUAL
(
tc
, "127.0.0.1", 
ß
->
ho°«me
);

82 
rc
 = 
	`≠r_sockaddr_is_wûdˇrd
(
ß
);

83 
	`ABTS_INT_EQUAL
(
tc
, 0, 
rc
);

85 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, "127.0.0.1", 
APR_UNSPEC
, 0, 0, 
p
);

86 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

87 
	`ABTS_STR_EQUAL
(
tc
, "127.0.0.1", 
ß
->
ho°«me
);

88 
	`ABTS_INT_EQUAL
(
tc
, 0, 
ß
->
p‹t
);

89 
	`ABTS_INT_EQUAL
(
tc
, 0, 
	`¡ohs
(
ß
->ß.
sö
.
sö_p‹t
));

90 
	}
}

92 
	$ã°_£rv_by_«me
(
abts_ˇ£
 *
tc
, *
d©a
)

94 
≠r_°©us_t
 
rv
;

95 
≠r_sockaddr_t
 *
ß
;

97 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, 
NULL
, 
APR_UNSPEC
, 0, 0, 
p
);

98 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

100 
rv
 = 
	`≠r_gë£rvby«me
(
ß
, "ftp");

101 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gëtög fç sîvi˚", 
rv
);

102 
	`ABTS_INT_EQUAL
(
tc
, 21, 
ß
->
p‹t
);

104 
rv
 = 
	`≠r_gë£rvby«me
(
ß
, "complete_and_utter_rubbish");

105 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gëtögÇ⁄-exi°íà£rvi˚", !
rv
);

107 
rv
 = 
	`≠r_gë£rvby«me
(
ß
, "telnet");

108 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gëtögÅñ√à£rvi˚", 
rv
);

109 
	`ABTS_INT_EQUAL
(
tc
, 23, 
ß
->
p‹t
);

110 
	}
}

112 
≠r_sockë_t
 *
	$£tup_sockë
(
abts_ˇ£
 *
tc
)

114 
≠r_°©us_t
 
rv
;

115 
≠r_sockaddr_t
 *
ß
;

116 
≠r_sockë_t
 *
sock
;

118 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, "127.0.0.1", 
APR_INET
, 8021, 0, 
p
);

119 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

121 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
ß
->
Ámûy
, 
SOCK_STREAM
, 
APR_PROTO_TCP
, 
p
);

122 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm cª©ög sockë", 
rv
);

124 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_REUSEADDR
, 1);

125 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ së REUSEADDR o¿sockë", 
rv
);

127 
rv
 = 
	`≠r_sockë_böd
(
sock
, 
ß
);

128 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm bödögÅÿp‹t", 
rv
);

129 i‡(
rv
Ë 
NULL
;

131 
rv
 = 
	`≠r_sockë_li°í
(
sock
, 5);

132 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀmÜi°íög o¿sockë", 
rv
);

134  
sock
;

135 
	}
}

137 
	$ã°_¸óã_böd_li°í
(
abts_ˇ£
 *
tc
, *
d©a
)

139 
≠r_°©us_t
 
rv
;

140 
≠r_sockë_t
 *
sock
 = 
	`£tup_sockë
(
tc
);

142 i‡(!
sock
) ;

144 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

145 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög sockë", 
rv
);

146 
	}
}

148 
	$ã°_£nd
(
abts_ˇ£
 *
tc
, *
d©a
)

150 
≠r_°©us_t
 
rv
;

151 
≠r_sockë_t
 *
sock
;

152 
≠r_sockë_t
 *
sock2
;

153 
≠r_¥oc_t
 
¥oc
;

154 
¥Ÿocﬁ
;

155 
≠r_size_t
 
Àngth
;

157 
sock
 = 
	`£tup_sockë
(
tc
);

158 i‡(!
sock
) ;

160 
	`œunch_chûd
(
tc
, &
¥oc
, "ªad", 
p
);

162 
rv
 = 
	`≠r_sockë_ac˚±
(&
sock2
, 
sock
, 
p
);

163 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm wôhÑe˚ivög c⁄√˘i⁄", 
rv
);

165 
	`≠r_sockë_¥Ÿocﬁ_gë
(
sock2
, &
¥Ÿocﬁ
);

166 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PROTO_TCP
, 
¥Ÿocﬁ
);

168 
Àngth
 = 
	`°æí
(
DATASTR
);

169 
	`≠r_sockë_£nd
(
sock2
, 
DATASTR
, &
Àngth
);

172 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
DATASTR
), 
	`waô_chûd
—c, &
¥oc
));

174 
rv
 = 
	`≠r_sockë_˛o£
(
sock2
);

175 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög c⁄√˘ed sockë", 
rv
);

176 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

177 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög sockë", 
rv
);

178 
	}
}

180 
	$ã°_ªcv
(
abts_ˇ£
 *
tc
, *
d©a
)

182 
≠r_°©us_t
 
rv
;

183 
≠r_sockë_t
 *
sock
;

184 
≠r_sockë_t
 *
sock2
;

185 
≠r_¥oc_t
 
¥oc
;

186 
¥Ÿocﬁ
;

187 
≠r_size_t
 
Àngth
 = 
STRLEN
;

188 
d©a°r
[
STRLEN
];

190 
sock
 = 
	`£tup_sockë
(
tc
);

191 i‡(!
sock
) ;

193 
	`œunch_chûd
(
tc
, &
¥oc
, "wrôe", 
p
);

195 
rv
 = 
	`≠r_sockë_ac˚±
(&
sock2
, 
sock
, 
p
);

196 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm wôhÑe˚ivög c⁄√˘i⁄", 
rv
);

198 
	`≠r_sockë_¥Ÿocﬁ_gë
(
sock2
, &
¥Ÿocﬁ
);

199 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PROTO_TCP
, 
¥Ÿocﬁ
);

201 
	`mem£t
(
d©a°r
, 0, 
STRLEN
);

202 
	`≠r_sockë_ªcv
(
sock2
, 
d©a°r
, &
Àngth
);

205 
	`ABTS_STR_EQUAL
(
tc
, 
DATASTR
, 
d©a°r
);

206 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
d©a°r
), 
	`waô_chûd
—c, &
¥oc
));

208 
rv
 = 
	`≠r_sockë_˛o£
(
sock2
);

209 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög c⁄√˘ed sockë", 
rv
);

210 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

211 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög sockë", 
rv
);

212 
	}
}

214 
	$ã°_©ªadeof
(
abts_ˇ£
 *
tc
, *
d©a
)

216 
≠r_°©us_t
 
rv
;

217 
≠r_sockë_t
 *
sock
;

218 
≠r_sockë_t
 *
sock2
;

219 
≠r_¥oc_t
 
¥oc
;

220 
≠r_size_t
 
Àngth
 = 
STRLEN
;

221 
d©a°r
[
STRLEN
];

222 
©ªadeof
 = -1;

224 
sock
 = 
	`£tup_sockë
(
tc
);

225 i‡(!
sock
) ;

227 
	`œunch_chûd
(
tc
, &
¥oc
, "wrôe", 
p
);

229 
rv
 = 
	`≠r_sockë_ac˚±
(&
sock2
, 
sock
, 
p
);

230 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm wôhÑe˚ivög c⁄√˘i⁄", 
rv
);

233 
rv
 = 
	`≠r_sockë_©ªadeof
(
sock2
, &
©ªadeof
);

234 
	`APR_ASSERT_SUCCESS
(
tc
, "DëîmöêwhëhîáàEOF, #1", 
rv
);

235 
	`ABTS_INT_EQUAL
(
tc
, 0, 
©ªadeof
);

237 
	`mem£t
(
d©a°r
, 0, 
STRLEN
);

238 
	`≠r_sockë_ªcv
(
sock2
, 
d©a°r
, &
Àngth
);

241 
	`ABTS_STR_EQUAL
(
tc
, 
DATASTR
, 
d©a°r
);

242 
	`ABTS_SIZE_EQUAL
(
tc
, 
	`°æí
(
d©a°r
), 
	`waô_chûd
—c, &
¥oc
));

245 
rv
 = 
	`≠r_sockë_©ªadeof
(
sock2
, &
©ªadeof
);

246 
	`APR_ASSERT_SUCCESS
(
tc
, "DëîmöêwhëhîáàEOF, #2", 
rv
);

247 
	`ABTS_INT_EQUAL
(
tc
, 1, 
©ªadeof
);

249 
rv
 = 
	`≠r_sockë_˛o£
(
sock2
);

250 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög c⁄√˘ed sockë", 
rv
);

252 
	`œunch_chûd
(
tc
, &
¥oc
, "˛o£", 
p
);

254 
rv
 = 
	`≠r_sockë_ac˚±
(&
sock2
, 
sock
, 
p
);

255 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm wôhÑe˚ivög c⁄√˘i⁄", 
rv
);

258 
rv
 = 
	`≠r_sockë_©ªadeof
(
sock2
, &
©ªadeof
);

259 
	`APR_ASSERT_SUCCESS
(
tc
, "DëîmöêwhëhîáàEOF, #3", 
rv
);

260 i‡(!
©ªadeof
) {

261 
	`≠r_¶ìp
(
	`≠r_time_‰om_m£c
(5));

262 
rv
 = 
	`≠r_sockë_©ªadeof
(
sock2
, &
©ªadeof
);

263 
	`APR_ASSERT_SUCCESS
(
tc
, "DëîmöêwhëhîáàEOF, #4", 
rv
);

265 
	`ABTS_INT_EQUAL
(
tc
, 1, 
©ªadeof
);

266 
	`waô_chûd
(
tc
, &
¥oc
);

268 
rv
 = 
	`≠r_sockë_˛o£
(
sock2
);

269 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög c⁄√˘ed sockë", 
rv
);

271 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

272 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög sockë", 
rv
);

273 
	}
}

275 
	$ã°_timeout
(
abts_ˇ£
 *
tc
, *
d©a
)

277 
≠r_°©us_t
 
rv
;

278 
≠r_sockë_t
 *
sock
;

279 
≠r_sockë_t
 *
sock2
;

280 
≠r_¥oc_t
 
¥oc
;

281 
¥Ÿocﬁ
;

282 
exô
;

284 
sock
 = 
	`£tup_sockë
(
tc
);

285 i‡(!
sock
) ;

287 
	`œunch_chûd
(
tc
, &
¥oc
, "ªad", 
p
);

289 
rv
 = 
	`≠r_sockë_ac˚±
(&
sock2
, 
sock
, 
p
);

290 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm wôhÑe˚ivög c⁄√˘i⁄", 
rv
);

292 
	`≠r_sockë_¥Ÿocﬁ_gë
(
sock2
, &
¥Ÿocﬁ
);

293 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PROTO_TCP
, 
¥Ÿocﬁ
);

295 
exô
 = 
	`waô_chûd
(
tc
, &
¥oc
);

296 
	`ABTS_INT_EQUAL
(
tc
, 
SOCKET_TIMEOUT
, 
exô
);

301 
rv
 = 
	`≠r_sockë_˛o£
(
sock2
);

302 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög c⁄√˘ed sockë", 
rv
);

303 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

304 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm closög sockë", 
rv
);

305 
	}
}

307 
	$ã°_¥öt_addr
(
abts_ˇ£
 *
tc
, *
d©a
)

309 
≠r_sockaddr_t
 *
ß
;

310 
≠r_°©us_t
 
rv
;

311 *
s
;

313 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, "0.0.0.0", 
APR_INET
, 80, 0, 
p
);

314 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

316 
s
 = 
	`≠r_p•rötf
(
p
, "foÿ%pI b¨", 
ß
);

318 
	`ABTS_STR_EQUAL
(
tc
, "foÿ0.0.0.0:80 b¨", 
s
);

320 #i‡
APR_HAVE_IPV6


321 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
ß
, "::ffff:0.0.0.0", 
APR_INET6
, 80, 0, 
p
);

322 
	`APR_ASSERT_SUCCESS
(
tc
, "ProbÀm gíî©ög sockaddr", 
rv
);

323 i‡(
rv
 =
APR_SUCCESS
)

324 
	`ABTS_TRUE
(
tc
, 
ß
 !
NULL
);

325 i‡(
rv
 =
APR_SUCCESS
 && 
ß
) {

327 
buf
[128];

328 
rc
;

330 
rc
 = 
	`≠r_sockaddr_is_wûdˇrd
(
ß
);

331 
	`ABTS_INT_NEQUAL
(
tc
, 0, 
rc
);

333 
	`mem£t
(
buf
, 'z',  buf);

335 
	`APR_ASSERT_SUCCESS
(
tc
, "couldÇot get IPáddress",

336 
	`≠r_sockaddr_ù_gëbuf
(
buf
, 22, 
ß
));

338 
	`ABTS_STR_EQUAL
(
tc
, "0.0.0.0", 
buf
);

341 
	}
}

343 
	$ã°_gë_addr
(
abts_ˇ£
 *
tc
, *
d©a
)

345 
≠r_°©us_t
 
rv
;

346 
≠r_sockë_t
 *
ld
, *
sd
, *
cd
;

347 
≠r_sockaddr_t
 *
ß
, *
ˇ
;

348 
≠r_poﬁ_t
 *
subp
;

349 *
a
, *
b
;

351 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óã subpoﬁ", 
	`≠r_poﬁ_¸óã
(&
subp
, 
p
));

353 i‡((
ld
 = 
	`£tup_sockë
(
tc
)Ë!
APR_SUCCESS
)

356 
	`APR_ASSERT_SUCCESS
(
tc
,

358 
	`≠r_sockë_addr_gë
(&
ß
, 
APR_LOCAL
, 
ld
));

360 
rv
 = 
	`≠r_sockë_¸óã
(&
cd
, 
ß
->
Ámûy
, 
SOCK_STREAM
,

361 
APR_PROTO_TCP
, 
subp
);

362 
	`APR_ASSERT_SUCCESS
(
tc
, "¸óã clõ¡ sockë", 
rv
);

364 
	`APR_ASSERT_SUCCESS
(
tc
, "enableÇon-block mode",

365 
	`≠r_sockë_›t_£t
(
cd
, 
APR_SO_NONBLOCK
, 1));

370 
rv
 = 
	`≠r_sockë_c⁄√˘
(
cd
, 
ß
);

371 i‡(
rv
 =
APR_SUCCESS
) {

372 
	`≠r_sockë_˛o£
(
ld
);

373 
	`≠r_sockë_˛o£
(
cd
);

374 
	`ABTS_NOT_IMPL
(
tc
, "CannotÅest if connect completes "

379 i‡(!
	`APR_STATUS_IS_EINPROGRESS
(
rv
)) {

380 
	`≠r_sockë_˛o£
(
ld
);

381 
	`≠r_sockë_˛o£
(
cd
);

382 
	`APR_ASSERT_SUCCESS
(
tc
, "c⁄√˘Åÿli°íî", 
rv
);

386 
	`APR_ASSERT_SUCCESS
(
tc
, "accept connection",

387 
	`≠r_sockë_ac˚±
(&
sd
, 
ld
, 
subp
));

391 
≠r_pﬁlfd_t
 
pfd
;

392 
n
;

394 
pfd
.
p
 =Ö;

395 
pfd
.
desc_ty≥
 = 
APR_POLL_SOCKET
;

396 
pfd
.
ªqevíts
 = 
APR_POLLOUT
|
APR_POLLHUP
;

397 
pfd
.
desc
.
s
 = 
cd
;

398 
pfd
.
˛õ¡_d©a
 = 
NULL
;

400 
	`APR_ASSERT_SUCCESS
(
tc
, "poll for connect completion",

401 
	`≠r_pﬁl
(&
pfd
, 1, &
n
, 5 * 
APR_USEC_PER_SEC
));

405 
	`APR_ASSERT_SUCCESS
(
tc
, "getÜocaláddress of server socket",

406 
	`≠r_sockë_addr_gë
(&
ß
, 
APR_LOCAL
, 
sd
));

407 
	`APR_ASSERT_SUCCESS
(
tc
, "getÑemoteáddress of client socket",

408 
	`≠r_sockë_addr_gë
(&
ˇ
, 
APR_REMOTE
, 
cd
));

412 
	`ABTS_PTR_EQUAL
(
tc
, 
subp
, 
ß
->
poﬁ
);

413 
	`ABTS_PTR_EQUAL
(
tc
, 
subp
, 
ˇ
->
poﬁ
);

416 
a
 = 
	`≠r_p•rötf
(
p
, "%pI fam=%d", 
ß
, sa->
Ámûy
);

417 
b
 = 
	`≠r_p•rötf
(
p
, "%pI fam=%d", 
ˇ
, ca->
Ámûy
);

418 
	`ABTS_STR_EQUAL
(
tc
, 
a
, 
b
);

421 
	`APR_ASSERT_SUCCESS
(
tc
, "getÜocaláddress of client socket",

422 
	`≠r_sockë_addr_gë
(&
ß
, 
APR_LOCAL
, 
cd
));

423 
	`APR_ASSERT_SUCCESS
(
tc
, "getÑemoteáddress of server socket",

424 
	`≠r_sockë_addr_gë
(&
ˇ
, 
APR_REMOTE
, 
sd
));

427 
a
 = 
	`≠r_p•rötf
(
p
, "%pI fam=%d", 
ß
, sa->
Ámûy
);

428 
b
 = 
	`≠r_p•rötf
(
p
, "%pI fam=%d", 
ˇ
, ca->
Ámûy
);

429 
	`ABTS_STR_EQUAL
(
tc
, 
a
, 
b
);

431 
	`ABTS_PTR_EQUAL
(
tc
, 
subp
, 
ß
->
poﬁ
);

432 
	`ABTS_PTR_EQUAL
(
tc
, 
subp
, 
ˇ
->
poﬁ
);

434 
	`≠r_sockë_˛o£
(
cd
);

435 
	`≠r_sockë_˛o£
(
sd
);

436 
	`≠r_sockë_˛o£
(
ld
);

438 
	`≠r_poﬁ_de°roy
(
subp
);

439 
	}
}

441 
abts_suôe
 *
	$ã°sock
(
abts_suôe
 *
suôe
)

443 
suôe
 = 
	`ADD_SUITE
(suite)

445 
	`abts_run_ã°
(
suôe
, 
ã°_addr_öfo
, 
NULL
);

446 
	`abts_run_ã°
(
suôe
, 
ã°_£rv_by_«me
, 
NULL
);

447 
	`abts_run_ã°
(
suôe
, 
ã°_¸óã_böd_li°í
, 
NULL
);

448 
	`abts_run_ã°
(
suôe
, 
ã°_£nd
, 
NULL
);

449 
	`abts_run_ã°
(
suôe
, 
ã°_ªcv
, 
NULL
);

450 
	`abts_run_ã°
(
suôe
, 
ã°_©ªadeof
, 
NULL
);

451 
	`abts_run_ã°
(
suôe
, 
ã°_timeout
, 
NULL
);

452 
	`abts_run_ã°
(
suôe
, 
ã°_¥öt_addr
, 
NULL
);

453 
	`abts_run_ã°
(
suôe
, 
ã°_gë_addr
, 
NULL
);

455  
suôe
;

456 
	}
}

	@test/testsock.h

17 #i‚de‡
TESTSOCK_H


18 
	#TESTSOCK_H


	)

20 
	#DATASTR
 "Thi†i†®ã°"

	)

21 
	#STRLEN
 8092

	)

31 
	#SOCKET_TIMEOUT
 1

	)

	@test/testsockets.c

17 
	~"≠r_√tw‹k_io.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"ã°utû.h
"

23 
	#STRLEN
 21

	)

25 
	$t˝_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

27 
≠r_°©us_t
 
rv
;

28 
≠r_sockë_t
 *
sock
 = 
NULL
;

29 
ty≥
;

31 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET
, 
SOCK_STREAM
, 0, 
p
);

32 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

33 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock
);

35 
rv
 = 
	`≠r_sockë_ty≥_gë
(
sock
, &
ty≥
);

36 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

37 
	`ABTS_INT_EQUAL
(
tc
, 
SOCK_STREAM
, 
ty≥
);

39 
	`≠r_sockë_˛o£
(
sock
);

40 
	}
}

42 
	$udp_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

44 
≠r_°©us_t
 
rv
;

45 
≠r_sockë_t
 *
sock
 = 
NULL
;

46 
ty≥
;

48 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET
, 
SOCK_DGRAM
, 0, 
p
);

49 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

50 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock
);

52 
rv
 = 
	`≠r_sockë_ty≥_gë
(
sock
, &
ty≥
);

53 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

54 
	`ABTS_INT_EQUAL
(
tc
, 
SOCK_DGRAM
, 
ty≥
);

56 
	`≠r_sockë_˛o£
(
sock
);

57 
	}
}

59 #i‡
APR_HAVE_IPV6


60 
	$t˝6_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

62 
≠r_°©us_t
 
rv
;

63 
≠r_sockë_t
 *
sock
 = 
NULL
;

65 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET6
, 
SOCK_STREAM
, 0, 
p
);

66 i‡(
	`APR_STATUS_IS_EAFNOSUPPORT
(
rv
)) {

67 
	`ABTS_NOT_IMPL
(
tc
, "IPv6ÇotÉnabled");

70 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

71 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock
);

72 
	`≠r_sockë_˛o£
(
sock
);

73 
	}
}

75 
	$udp6_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

77 
≠r_°©us_t
 
rv
;

78 
≠r_sockë_t
 *
sock
 = 
NULL
;

80 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET6
, 
SOCK_DGRAM
, 0, 
p
);

81 i‡(
	`APR_STATUS_IS_EAFNOSUPPORT
(
rv
)) {

82 
	`ABTS_NOT_IMPL
(
tc
, "IPv6ÇotÉnabled");

85 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

86 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock
);

87 
	`≠r_sockë_˛o£
(
sock
);

88 
	}
}

91 
	$£ndto_ª˚ive‰om_hñ≥r
(
abts_ˇ£
 *
tc
, c⁄° *
addr
,

92 
Ámûy
)

94 
≠r_°©us_t
 
rv
;

95 
≠r_sockë_t
 *
sock
 = 
NULL
;

96 
≠r_sockë_t
 *
sock2
 = 
NULL
;

97 
£ndbuf
[
STRLEN
] = "APR_INET, SOCK_DGRAM";

98 
ªcvbuf
[80];

99 *
ù_addr
;

100 
≠r_p‹t_t
 
‰omp‹t
;

101 
≠r_sockaddr_t
 *
‰om
;

102 
≠r_sockaddr_t
 *
to
;

103 
≠r_size_t
 
Àn
 = 30;

105 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
Ámûy
, 
SOCK_DGRAM
, 0, 
p
);

106 #i‡
APR_HAVE_IPV6


107 i‡((
Ámûy
 =
APR_INET6
Ë&& 
	`APR_STATUS_IS_EAFNOSUPPORT
(
rv
)) {

108 
	`ABTS_NOT_IMPL
(
tc
, "IPv6ÇotÉnabled");

112 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

113 i‡(
rv
 !
APR_SUCCESS
)

115 
rv
 = 
	`≠r_sockë_¸óã
(&
sock2
, 
Ámûy
, 
SOCK_DGRAM
, 0, 
p
);

116 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

117 i‡(
rv
 !
APR_SUCCESS
)

120 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
to
, 
addr
, 
Ámûy
, 7772, 0, 
p
);

121 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

122 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
‰om
, 
addr
, 
Ámûy
, 7771, 0, 
p
);

123 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

125 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_REUSEADDR
, 1);

126 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ së REUSEADDR o¿sockë", 
rv
);

127 
rv
 = 
	`≠r_sockë_›t_£t
(
sock2
, 
APR_SO_REUSEADDR
, 1);

128 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ së REUSEADDR o¿sockë2", 
rv
);

130 
rv
 = 
	`≠r_sockë_böd
(
sock
, 
to
);

131 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ böd sockë", 
rv
);

132 i‡(
rv
 !
APR_SUCCESS
)

134 
rv
 = 
	`≠r_mˇ°_h›s
(
sock
, 10);

135 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ së mu…iˇ° h›s", 
rv
);

136 i‡(
rv
 !
APR_SUCCESS
)

139 
rv
 = 
	`≠r_sockë_böd
(
sock2
, 
‰om
);

140 
	`APR_ASSERT_SUCCESS
(
tc
, "CouldÇŸ böd sec⁄d sockë", 
rv
);

141 i‡(
rv
 !
APR_SUCCESS
)

144 
Àn
 = 
STRLEN
;

145 
rv
 = 
	`≠r_sockë_£ndto
(
sock2
, 
to
, 0, 
£ndbuf
, &
Àn
);

146 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

147 
	`ABTS_SIZE_EQUAL
(
tc
, 
STRLEN
, 
Àn
);

151 #i‡
APR_HAVE_IPV6


152 i‡(
Ámûy
 =
APR_INET
)

153 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
‰om
, "3ffE:816e:abcd:1234::1",

154 
APR_INET6
, 4242, 0, 
p
);

157 
rv
 = 
	`≠r_sockaddr_öfo_gë
(&
‰om
, "127.1.2.3", 
APR_INET
, 4242, 0, 
p
);

158 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

160 
Àn
 = 80;

161 
rv
 = 
	`≠r_sockë_ªcv‰om
(
‰om
, 
sock
, 0, 
ªcvbuf
, &
Àn
);

162 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

163 
	`ABTS_SIZE_EQUAL
(
tc
, 
STRLEN
, 
Àn
);

164 
	`ABTS_STR_EQUAL
(
tc
, "APR_INET, SOCK_DGRAM", 
ªcvbuf
);

166 
	`≠r_sockaddr_ù_gë
(&
ù_addr
, 
‰om
);

167 
‰omp‹t
 = 
‰om
->
p‹t
;

168 
	`ABTS_STR_EQUAL
(
tc
, 
addr
, 
ù_addr
);

169 
	`ABTS_INT_EQUAL
(
tc
, 7771, 
‰omp‹t
);

171 
	`≠r_sockë_˛o£
(
sock
);

172 
	`≠r_sockë_˛o£
(
sock2
);

173 
	}
}

175 
	$£ndto_ª˚ive‰om
(
abts_ˇ£
 *
tc
, *
d©a
)

177 
Áûed
;

178 
	`£ndto_ª˚ive‰om_hñ≥r
(
tc
, "127.0.0.1", 
APR_INET
);

179 
Áûed
 = 
tc
->failed;Åc->failed = 0;

180 
	`ABTS_TRUE
(
tc
, !
Áûed
);

181 
	}
}

183 #i‡
APR_HAVE_IPV6


184 
	$£ndto_ª˚ive‰om6
(
abts_ˇ£
 *
tc
, *
d©a
)

186 
Áûed
;

187 
	`£ndto_ª˚ive‰om_hñ≥r
(
tc
, "::1", 
APR_INET6
);

188 
Áûed
 = 
tc
->failed;Åc->failed = 0;

189 
	`ABTS_TRUE
(
tc
, !
Áûed
);

190 
	}
}

193 
	$sockë_u£rd©a
(
abts_ˇ£
 *
tc
, *
d©a
)

195 
≠r_sockë_t
 *
sock1
, *
sock2
;

196 
≠r_°©us_t
 
rv
;

197 *
u£r
;

198 c⁄° *
key
 = "GENERICKEY";

200 
rv
 = 
	`≠r_sockë_¸óã
(&
sock1
, 
AF_INET
, 
SOCK_STREAM
, 0, 
p
);

201 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

202 
rv
 = 
	`≠r_sockë_¸óã
(&
sock2
, 
AF_INET
, 
SOCK_STREAM
, 0, 
p
);

203 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

205 
rv
 = 
	`≠r_sockë_d©a_£t
(
sock1
, "SOCK1", 
key
, 
NULL
);

206 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

207 
rv
 = 
	`≠r_sockë_d©a_£t
(
sock2
, "SOCK2", 
key
, 
NULL
);

208 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

210 
rv
 = 
	`≠r_sockë_d©a_gë
(&
u£r
, 
key
, 
sock1
);

211 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

212 
	`ABTS_STR_EQUAL
(
tc
, "SOCK1", 
u£r
);

213 
rv
 = 
	`≠r_sockë_d©a_gë
(&
u£r
, 
key
, 
sock2
);

214 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

215 
	`ABTS_STR_EQUAL
(
tc
, "SOCK2", 
u£r
);

216 
	}
}

218 
abts_suôe
 *
	$ã°sockës
(
abts_suôe
 *
suôe
)

220 
suôe
 = 
	`ADD_SUITE
(suite)

222 
	`abts_run_ã°
(
suôe
, 
t˝_sockë
, 
NULL
);

223 
	`abts_run_ã°
(
suôe
, 
udp_sockë
, 
NULL
);

225 
	`abts_run_ã°
(
suôe
, 
£ndto_ª˚ive‰om
, 
NULL
);

227 #i‡
APR_HAVE_IPV6


228 
	`abts_run_ã°
(
suôe
, 
t˝6_sockë
, 
NULL
);

229 
	`abts_run_ã°
(
suôe
, 
udp6_sockë
, 
NULL
);

231 
	`abts_run_ã°
(
suôe
, 
£ndto_ª˚ive‰om6
, 
NULL
);

234 
	`abts_run_ã°
(
suôe
, 
sockë_u£rd©a
, 
NULL
);

236  
suôe
;

237 
	}
}

	@test/testsockopt.c

17 
	~"≠r_√tw‹k_io.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"ã°utû.h
"

23 
≠r_sockë_t
 *
	gsock
 = 
NULL
;

25 
	$¸óã_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

27 
≠r_°©us_t
 
rv
;

29 
rv
 = 
	`≠r_sockë_¸óã
(&
sock
, 
APR_INET
, 
SOCK_STREAM
, 0, 
p
);

30 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

31 
	`ABTS_PTR_NOTNULL
(
tc
, 
sock
);

32 
	}
}

34 
	$£t_kì∑live
(
abts_ˇ£
 *
tc
, *
d©a
)

36 
≠r_°©us_t
 
rv
;

37 
≠r_öt32_t
 
ck
;

39 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_KEEPALIVE
, 1);

40 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

42 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_SO_KEEPALIVE
, &
ck
);

43 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

44 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

45 
	}
}

47 
	$£t_debug
(
abts_ˇ£
 *
tc
, *
d©a
)

49 
≠r_°©us_t
 
rv1
, 
rv2
;

50 
≠r_öt32_t
 
ck
;

54 
rv1
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_DEBUG
, 1);

55 
rv2
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_SO_DEBUG
, &
ck
);

56 
	`APR_ASSERT_SUCCESS
(
tc
, "gë SO_DEBUG o±i⁄", 
rv2
);

57 i‡(
rv1
 =
APR_SUCCESS
) {

58 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

60 
	`ABTS_INT_EQUAL
(
tc
, 0, 
ck
);

62 
	}
}

64 
	$ªmove_kì∑live
(
abts_ˇ£
 *
tc
, *
d©a
)

66 
≠r_°©us_t
 
rv
;

67 
≠r_öt32_t
 
ck
;

69 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_SO_KEEPALIVE
, &
ck
);

70 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

71 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

73 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_SO_KEEPALIVE
, 0);

74 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

76 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_SO_KEEPALIVE
, &
ck
);

77 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

78 
	`ABTS_INT_EQUAL
(
tc
, 0, 
ck
);

79 
	}
}

81 
	$c‹kabÀ
(
abts_ˇ£
 *
tc
, *
d©a
)

83 #i‡!
APR_HAVE_CORKABLE_TCP


84 
	`ABTS_NOT_IMPL
(
tc
, "TCP isn't corkable");

86 
≠r_°©us_t
 
rv
;

87 
≠r_öt32_t
 
ck
;

89 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NODELAY
, 1);

90 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

92 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_TCP_NODELAY
, &
ck
);

93 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

94 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

96 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 1);

97 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

99 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_TCP_NOPUSH
, &
ck
);

100 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

101 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

103 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_TCP_NODELAY
, &
ck
);

104 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

109 
rv
 = 
	`≠r_sockë_›t_£t
(
sock
, 
APR_TCP_NOPUSH
, 0);

110 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

112 
rv
 = 
	`≠r_sockë_›t_gë
(
sock
, 
APR_TCP_NODELAY
, &
ck
);

113 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

114 
	`ABTS_INT_EQUAL
(
tc
, 1, 
ck
);

116 
	}
}

118 
	$˛o£_sockë
(
abts_ˇ£
 *
tc
, *
d©a
)

120 
≠r_°©us_t
 
rv
;

122 
rv
 = 
	`≠r_sockë_˛o£
(
sock
);

123 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

124 
	}
}

126 
abts_suôe
 *
	$ã°sock›t
(
abts_suôe
 *
suôe
)

128 
suôe
 = 
	`ADD_SUITE
(suite)

130 
	`abts_run_ã°
(
suôe
, 
¸óã_sockë
, 
NULL
);

131 
	`abts_run_ã°
(
suôe
, 
£t_kì∑live
, 
NULL
);

132 
	`abts_run_ã°
(
suôe
, 
£t_debug
, 
NULL
);

133 
	`abts_run_ã°
(
suôe
, 
ªmove_kì∑live
, 
NULL
);

134 
	`abts_run_ã°
(
suôe
, 
c‹kabÀ
, 
NULL
);

135 
	`abts_run_ã°
(
suôe
, 
˛o£_sockë
, 
NULL
);

137  
suôe
;

138 
	}
}

	@test/teststr.c

17 
	~"ã°utû.h
"

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 #i‡
APR_HAVE_LIMITS_H


24 
	~<limôs.h
>

27 
	~"≠r_gíîÆ.h
"

28 
	~"≠r_°rögs.h
"

29 
	~"≠r_î∫o.h
"

35 
	$ã°_°πok
(
abts_ˇ£
 *
tc
, *
d©a
)

38 *
öput
;

39 *
£p
;

41 
ˇ£s
[] = {

51 
NULL
,

57 
NULL


69 
cuπc
;

71 
cuπc
 = 0; cuπ¯<  
ˇ£s
 /  cases[0]; curtc++) {

72 *
ªtvÆ1
, *
ªtvÆ2
;

73 *
°r1
, *
°r2
;

74 *
°©e
;

76 
°r1
 = 
	`≠r_p°rdup
(
p
, 
ˇ£s
[
cuπc
].
öput
);

77 
°r2
 = 
	`≠r_p°rdup
(
p
, 
ˇ£s
[
cuπc
].
öput
);

80 
ªtvÆ1
 = 
	`≠r_°πok
(
°r1
, 
ˇ£s
[
cuπc
].
£p
, &
°©e
);

81 
ªtvÆ2
 = 
	`°πok
(
°r2
, 
ˇ£s
[
cuπc
].
£p
);

83 i‡(!
ªtvÆ1
) {

84 
	`ABTS_TRUE
(
tc
, 
ªtvÆ2
 =
NULL
);

87 
	`ABTS_TRUE
(
tc
, 
ªtvÆ2
 !
NULL
);

88 
	`ABTS_STR_EQUAL
(
tc
, 
ªtvÆ2
, 
ªtvÆ1
);

91 
°r1
 = 
°r2
 = 
NULL
;

92 } 
ªtvÆ1
);

94 
	}
}

96 
	$¢¥ötf_noNULL
(
abts_ˇ£
 *
tc
, *
d©a
)

98 
buff
[100];

99 *
ã°ög
 = 
	`≠r_∑Œoc
(
p
, 10);

101 
ã°ög
[0] = 't';

102 
ã°ög
[1] = 'e';

103 
ã°ög
[2] = 's';

104 
ã°ög
[3] = 't';

105 
ã°ög
[4] = 'i';

106 
ã°ög
[5] = 'n';

107 
ã°ög
[6] = 'g';

110 
	`≠r_¢¥ötf
(
buff
, (buff), "%.*s", 7, 
ã°ög
);

111 
	`ABTS_STR_NEQUAL
(
tc
, 
buff
, 
ã°ög
, 7);

112 
	}
}

114 
	$¢¥ötf_0NULL
(
abts_ˇ£
 *
tc
, *
d©a
)

116 
rv
;

118 
rv
 = 
	`≠r_¢¥ötf
(
NULL
, 0, "%sBAR", "FOO");

119 
	`ABTS_INT_EQUAL
(
tc
, 6, 
rv
);

120 
	}
}

122 
	$¢¥ötf_0n⁄NULL
(
abts_ˇ£
 *
tc
, *
d©a
)

124 
rv
;

125 *
buff
 = "testing";

127 
rv
 = 
	`≠r_¢¥ötf
(
buff
, 0, "%sBAR", "FOO");

128 
	`ABTS_INT_EQUAL
(
tc
, 6, 
rv
);

129 
	`ABTS_ASSERT
(
tc
, "buf‡unm™gÀd", 
	`°rcmp
(
buff
, "FOOBAR") != 0);

130 
	}
}

132 
	$¢¥ötf_undîÊow
(
abts_ˇ£
 *
tc
, *
d©a
)

134 
buf
[20];

135 
rv
;

137 
rv
 = 
	`≠r_¢¥ötf
(
buf
,  buf, "%.2f", ()0.0001);

138 
	`ABTS_INT_EQUAL
(
tc
, 4, 
rv
);

139 
	`ABTS_STR_EQUAL
(
tc
, "0.00", 
buf
);

141 
rv
 = 
	`≠r_¢¥ötf
(
buf
,  buf, "%.2f", ()0.001);

142 
	`ABTS_INT_EQUAL
(
tc
, 4, 
rv
);

143 
	`ABTS_STR_EQUAL
(
tc
, "0.00", 
buf
);

145 
rv
 = 
	`≠r_¢¥ötf
(
buf
,  buf, "%.2f", ()0.01);

146 
	`ABTS_INT_EQUAL
(
tc
, 4, 
rv
);

147 
	`ABTS_STR_EQUAL
(
tc
, "0.01", 
buf
);

148 
	}
}

150 
	$°rög_îr‹
(
abts_ˇ£
 *
tc
, *
d©a
)

152 
buf
[128], *
rv
;

153 
≠r_°©us_t
 
n
;

155 
buf
[0] = '\0';

156 
rv
 = 
	`≠r_°ªº‹
(
APR_ENOENT
, 
buf
,  buf);

157 
	`ABTS_PTR_EQUAL
(
tc
, 
buf
, 
rv
);

158 
	`ABTS_TRUE
(
tc
, 
	`°æí
(
buf
) > 0);

160 
rv
 = 
	`≠r_°ªº‹
(
APR_TIMEUP
, 
buf
,  buf);

161 
	`ABTS_PTR_EQUAL
(
tc
, 
buf
, 
rv
);

162 
	`ABTS_STR_EQUAL
(
tc
, "Thêtimeouà•ecifõd ha†expúed", 
buf
);

165 
n
 = 1;Ç < 1000000;Ç *= 2) {

166 
	`≠r_°ªº‹
(
n
, 
buf
,  buf);

168 
	}
}

170 
	#SIZE
 180000

	)

171 
	$°rög_l⁄g
(
abts_ˇ£
 *
tc
, *
d©a
)

173 
s
[
SIZE
 + 1];

175 
	`mem£t
(
s
, 'A', 
SIZE
);

176 
s
[
SIZE
] = '\0';

178 
	`≠r_p•rötf
(
p
, "%s", 
s
);

179 
	}
}

182 
	#MY_LLONG_MAX
 (
	`APR_INT64_C
(9223372036854775807))

	)

183 
	#MY_LLONG_MIN
 (-
MY_LLONG_MAX
 - 
	`APR_INT64_C
(1))

	)

185 
	$°rög_°πoi64
(
abts_ˇ£
 *
tc
, *
d©a
)

188 
î∫um
, 
ba£
;

189 c⁄° *
ö
, *
íd
;

190 
≠r_öt64_t
 
ªsu…
;

191 } 
ts
[] = {

194 { 0, 10, "123545", 
NULL
, 
	`APR_INT64_C
(123545) },

195 { 0, 10, " 123545", 
NULL
, 
	`APR_INT64_C
(123545) },

196 { 0, 10, " +123545", 
NULL
, 
	`APR_INT64_C
(123545) },

197 { 0, 10, "-123545", 
NULL
, 
	`APR_INT64_C
(-123545) },

198 { 0, 10, " 00000123545", 
NULL
, 
	`APR_INT64_C
(123545) },

199 { 0, 10, "123545ZZZ", "ZZZ", 
	`APR_INT64_C
(123545) },

200 { 0, 10, " 123545 ", " ", 
	`APR_INT64_C
(123545) },

203 { 0, 16, "1E299", 
NULL
, 
	`APR_INT64_C
(123545) },

204 { 0, 16, "1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

205 { 0, 16, "0x1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

206 { 0, 16, "0X1E299", 
NULL
, 
	`APR_INT64_C
(123545) },

207 { 0, 16, "+1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

208 { 0, 16, "-1e299", 
NULL
, 
	`APR_INT64_C
(-123545) },

209 { 0, 16, " -1e299", 
NULL
, 
	`APR_INT64_C
(-123545) },

212 { 0, 0, "123545", 
NULL
, 
	`APR_INT64_C
(123545) },

213 { 0, 0, "0x1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

214 { 0, 0, " 0x1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

215 { 0, 0, "+0x1e299", 
NULL
, 
	`APR_INT64_C
(123545) },

216 { 0, 0, "-0x1e299", 
NULL
, 
	`APR_INT64_C
(-123545) },

219 { 0, 10, "8589934605", 
NULL
, 
	`APR_INT64_C
(8589934605) },

220 { 0, 10, "-8589934605", 
NULL
, 
	`APR_INT64_C
(-8589934605) },

221 { 0, 16, "0x20000000D", 
NULL
, 
	`APR_INT64_C
(8589934605) },

222 { 0, 16, "-0x20000000D", 
NULL
, 
	`APR_INT64_C
(-8589934605) },

223 { 0, 16, " 0x20000000D", 
NULL
, 
	`APR_INT64_C
(8589934605) },

224 { 0, 16, " 0x20000000D", 
NULL
, 
	`APR_INT64_C
(8589934605) },

227 { 
ERANGE
, 10, "999999999999999999999999999999999", "", 
MY_LLONG_MAX
 },

228 { 
ERANGE
, 10, "-999999999999999999999999999999999", "", 
MY_LLONG_MIN
 },

232 { 
EINVAL
, 99, "", (*)-1 , 0 },

237 { -1 , 10, "zzz", "zzz", 
	`APR_INT64_C
(0) },

238 { -1 , 10, "", 
NULL
, 
	`APR_INT64_C
(0) }

241 
n
;

243 
n
 = 0;Ç < (
ts
)/(ts[0]);Ç++) {

244 *
íd
 = "endÖtrÇot changed";

245 
≠r_öt64_t
 
ªsu…
;

246 
î∫um
;

248 
î∫o
 = 0;

249 
ªsu…
 = 
	`≠r_°πoi64
(
ts
[
n
].
ö
, &
íd
,Ås[n].
ba£
);

250 
î∫um
 = 
î∫o
;

252 
	`ABTS_ASSERT
(
tc
,

253 
	`≠r_p•rötf
(
p
, "f‹ '%s':Ñesu… wa†%" 
APR_INT64_T_FMT


254 "ÇŸ %" 
APR_INT64_T_FMT
, 
ts
[
n
].
ö
,

255 
ªsu…
, 
ts
[
n
].result),

256 
ªsu…
 =
ts
[
n
].result);

258 i‡(
ts
[
n
].
î∫um
 != -1) {

259 
	`ABTS_ASSERT
(
tc
,

260 
	`≠r_p•rötf
(
p
, "f‹ '%s':Éºnÿwa†%dÇŸ %d", 
ts
[
n
].
ö
,

261 
î∫um
, 
ts
[
n
].errnum),

262 
ts
[
n
].
î∫um
 ==Érrnum);

265 i‡(
ts
[
n
].
íd
 =
NULL
) {

267 
	`ABTS_PTR_EQUAL
(
tc
, 
ts
[
n
].
ö
 + 
	`°æí
—s[n].ö), 
íd
);

268 } i‡(
ts
[
n
].
íd
 != (*)-1) {

269 
	`ABTS_ASSERT
(
tc
,

270 
	`≠r_p•rötf
(
p
, "for '%s',Énd was '%s'Çot '%s'",

271 
ts
[
n
].
ö
, 
íd
,Ås[n].end),

272 
	`°rcmp
(
ts
[
n
].
íd
,Énd) == 0);

275 
	}
}

277 
	$°rög_°πoff
(
abts_ˇ£
 *
tc
, *
d©a
)

279 
≠r_off_t
 
off
;

281 
	`ABTS_ASSERT
(
tc
, "strtoff fails on out-of-range integer",

282 
	`≠r_°πoff
(&
off
, "999999999999999999999999999999",

283 
NULL
, 10Ë!
APR_SUCCESS
);

285 
	`ABTS_ASSERT
(
tc
, "strtoff failed for 1234",

286 
	`≠r_°πoff
(&
off
, "1234", 
NULL
, 10Ë=
APR_SUCCESS
);

288 
	`ABTS_ASSERT
(
tc
, "°πof‡ÁûedÅÿ∑r£ 1234", 
off
 == 1234);

289 
	}
}

292 
	$ovîÊow_°rfsize
(
abts_ˇ£
 *
tc
, *
d©a
)

294 
≠r_off_t
 
off
;

295 
buf
[7];

297 
buf
[5] = '$';

298 
buf
[6] = '@';

300 
off
 = -9999; off < 20000; off++) {

301 
	`≠r_°rfsize
(
off
, 
buf
);

303 ; 
off
 < 9999999; off += 9) {

304 
	`≠r_°rfsize
(
off
, 
buf
);

306 ; 
off
 < 999999999; off += 999) {

307 
	`≠r_°rfsize
(
off
, 
buf
);

309 
off
 = 1; of‡< 
LONG_MAX
 && off > 0; off *= 2) {

310 
	`≠r_°rfsize
(
off
, 
buf
);

311 
	`≠r_°rfsize
(
off
 + 1, 
buf
);

312 
	`≠r_°rfsize
(
off
 - 1, 
buf
);

315 
	`ABTS_ASSERT
(
tc
, "°rfsizêovîÊowed", 
buf
[5] == '$');

316 
	`ABTS_ASSERT
(
tc
, "°rfsizêovîÊowed", 
buf
[6] == '@');

317 
	}
}

319 
	$°rög_°rfsize
(
abts_ˇ£
 *
tc
, *
d©a
)

322 
≠r_off_t
 
size
;

323 c⁄° *
buf
;

324 } 
ts
[] = {

336 
≠r_size_t
 
n
;

338 
n
 = 0;Ç < (
ts
)/(ts[0]);Ç++) {

339 
buf
[6], *
ªt
;

341 
buf
[5] = '%';

343 
ªt
 = 
	`≠r_°rfsize
(
ts
[
n
].
size
, 
buf
);

344 
	`ABTS_ASSERT
(
tc
, "°rfsizêªtu∫ed wr⁄g buf„r", 
ªt
 =
buf
);

345 
	`ABTS_ASSERT
(
tc
, "°rfsizêovîÊowed", 
buf
[5] == '%');

347 
	`ABTS_STR_EQUAL
(
tc
, 
ts
[
n
].
buf
, 
ªt
);

349 
	}
}

351 
	$°rög_˝y°∫
(
abts_ˇ£
 *
tc
, *
d©a
)

353 
buf
[6], *
ªt
;

355 
buf
[5] = 'Z';

357 
ªt
 = 
	`≠r_˝y°∫
(
buf
, "123456", 5);

359 
	`ABTS_STR_EQUAL
(
tc
, "1234", 
buf
);

360 
	`ABTS_PTR_EQUAL
(
tc
, 
buf
 + 4, 
ªt
);

361 
	`ABTS_TRUE
(
tc
, *
ªt
 == '\0');

362 
	`ABTS_TRUE
(
tc
, 
ªt
[1] == 'Z');

363 
	}
}

365 
	$¢¥ötf_ovîÊow
(
abts_ˇ£
 *
tc
, *
d©a
)

367 
buf
[4];

368 
rv
;

370 
buf
[2] = '4';

371 
buf
[3] = '2';

373 
rv
 = 
	`≠r_¢¥ötf
(
buf
, 2, "%s", "a");

374 
	`ABTS_INT_EQUAL
(
tc
, 1, 
rv
);

376 
rv
 = 
	`≠r_¢¥ötf
(
buf
, 2, "%s", "abcd");

377 
	`ABTS_INT_EQUAL
(
tc
, 1, 
rv
);

379 
	`ABTS_STR_EQUAL
(
tc
, "a", 
buf
);

382 
	`ABTS_TRUE
(
tc
, 
buf
[2] == '4' && buf[3] == '2');

383 
	}
}

385 
abts_suôe
 *
	$ã°°r
(
abts_suôe
 *
suôe
)

387 
suôe
 = 
	`ADD_SUITE
(suite)

389 
	`abts_run_ã°
(
suôe
, 
¢¥ötf_0NULL
, 
NULL
);

390 
	`abts_run_ã°
(
suôe
, 
¢¥ötf_0n⁄NULL
, 
NULL
);

391 
	`abts_run_ã°
(
suôe
, 
¢¥ötf_noNULL
, 
NULL
);

392 
	`abts_run_ã°
(
suôe
, 
¢¥ötf_undîÊow
, 
NULL
);

393 
	`abts_run_ã°
(
suôe
, 
ã°_°πok
, 
NULL
);

394 
	`abts_run_ã°
(
suôe
, 
°rög_îr‹
, 
NULL
);

395 
	`abts_run_ã°
(
suôe
, 
°rög_l⁄g
, 
NULL
);

396 
	`abts_run_ã°
(
suôe
, 
°rög_°πoi64
, 
NULL
);

397 
	`abts_run_ã°
(
suôe
, 
°rög_°πoff
, 
NULL
);

398 
	`abts_run_ã°
(
suôe
, 
ovîÊow_°rfsize
, 
NULL
);

399 
	`abts_run_ã°
(
suôe
, 
°rög_°rfsize
, 
NULL
);

400 
	`abts_run_ã°
(
suôe
, 
°rög_˝y°∫
, 
NULL
);

401 
	`abts_run_ã°
(
suôe
, 
¢¥ötf_ovîÊow
, 
NULL
);

403  
suôe
;

404 
	}
}

	@test/teststrnatcmp.c

17 
	~"≠r_fûe_io.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"ã°utû.h
"

22 
	$Àss0
(
abts_ˇ£
 *
tc
, *
d©a
)

24 
rv
 = 
	`≠r_°∫©cmp
("a", "b");

25 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 < 0);

26 
	}
}

28 
	$°r_equÆ
(
abts_ˇ£
 *
tc
, *
d©a
)

30 
rv
 = 
	`≠r_°∫©cmp
("a", "a");

31 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 == 0);

32 
	}
}

34 
	$m‹e0
(
abts_ˇ£
 *
tc
, *
d©a
)

36 
rv
 = 
	`≠r_°∫©cmp
("b", "a");

37 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 > 0);

38 
	}
}

40 
	$Àss_ign‹e_ˇ£
(
abts_ˇ£
 *
tc
, *
d©a
)

42 
rv
 = 
	`≠r_°∫©ˇ£cmp
("a", "B");

43 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 < 0);

44 
	}
}

46 
	$°r_equÆ_ign‹e_ˇ£
(
abts_ˇ£
 *
tc
, *
d©a
)

48 
rv
 = 
	`≠r_°∫©ˇ£cmp
("a", "A");

49 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 == 0);

50 
	}
}

52 
	$m‹e_ign‹e_ˇ£
(
abts_ˇ£
 *
tc
, *
d©a
)

54 
rv
 = 
	`≠r_°∫©ˇ£cmp
("b", "A");

55 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 > 0);

56 
	}
}

58 
	$«tcmp
(
abts_ˇ£
 *
tc
, *
d©a
)

60 
rv
 = 
	`≠r_°∫©ˇ£cmp
("a2", "a10");

61 
	`ABTS_ASSERT
(
tc
, "didn'àcom∑ª sim∂ê°rög†¥›îly", 
rv
 < 0);

62 
	}
}

64 
abts_suôe
 *
	$ã°°∫©cmp
(
abts_suôe
 *
suôe
)

66 
suôe
 = 
	`ADD_SUITE
(suite)

68 
	`abts_run_ã°
(
suôe
, 
Àss0
, 
NULL
);

69 
	`abts_run_ã°
(
suôe
, 
°r_equÆ
, 
NULL
);

70 
	`abts_run_ã°
(
suôe
, 
m‹e0
, 
NULL
);

71 
	`abts_run_ã°
(
suôe
, 
Àss_ign‹e_ˇ£
, 
NULL
);

72 
	`abts_run_ã°
(
suôe
, 
°r_equÆ_ign‹e_ˇ£
, 
NULL
);

73 
	`abts_run_ã°
(
suôe
, 
m‹e_ign‹e_ˇ£
, 
NULL
);

74 
	`abts_run_ã°
(
suôe
, 
«tcmp
, 
NULL
);

76  
suôe
;

77 
	}
}

	@test/testtable.c

17 
	~"ã°utû.h
"

18 
	~"≠r.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_poﬁs.h
"

22 
	~"≠r_èbÀs.h
"

23 #i‡
APR_HAVE_STDIO_H


24 
	~<°dio.h
>

26 #i‡
APR_HAVE_STDLIB_H


27 
	~<°dlib.h
>

29 #i‡
APR_HAVE_STRING_H


30 
	~<°rög.h
>

33 
≠r_¨øy_hódî_t
 *
	ga1
 = 
NULL
;

34 
≠r_èbÀ_t
 *
	gt1
 = 
NULL
;

36 
	$¨øy_˛ór
(
abts_ˇ£
 *
tc
, *
d©a
)

38 
a1
 = 
	`≠r_¨øy_make
(
p
, 2, (const *));

39 
	`APR_ARRAY_PUSH
(
a1
, const *) = "foo";

40 
	`APR_ARRAY_PUSH
(
a1
, const *) = "bar";

41 
	`≠r_¨øy_˛ór
(
a1
);

42 
	`ABTS_INT_EQUAL
(
tc
, 0, 
a1
->
√…s
);

43 
	}
}

45 
	$èbÀ_make
(
abts_ˇ£
 *
tc
, *
d©a
)

47 
t1
 = 
	`≠r_èbÀ_make
(
p
, 5);

48 
	`ABTS_PTR_NOTNULL
(
tc
, 
t1
);

49 
	}
}

51 
	$èbÀ_gë
(
abts_ˇ£
 *
tc
, *
d©a
)

53 c⁄° *
vÆ
;

55 
	`≠r_èbÀ_£t
(
t1
, "foo", "bar");

56 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "foo");

57 
	`ABTS_STR_EQUAL
(
tc
, "b¨", 
vÆ
);

58 
	}
}

60 
	$èbÀ_gëm
(
abts_ˇ£
 *
tc
, *
d©a
)

62 c⁄° *
‹ig
, *
vÆ
;

63 
≠r_poﬁ_t
 *
subp
;

65 
	`≠r_poﬁ_¸óã
(&
subp
, 
p
);

67 
‹ig
 = "bar";

68 
	`≠r_èbÀ_£ä
(
t1
, "foo", 
‹ig
);

69 
vÆ
 = 
	`≠r_èbÀ_gëm
(
subp
, 
t1
, "foo");

70 
	`ABTS_PTR_EQUAL
(
tc
, 
‹ig
, 
vÆ
);

71 
	`ABTS_STR_EQUAL
(
tc
, "b¨", 
vÆ
);

72 
	`≠r_èbÀ_add
(
t1
, "foo", "baz");

73 
vÆ
 = 
	`≠r_èbÀ_gëm
(
subp
, 
t1
, "foo");

74 
	`ABTS_STR_EQUAL
(
tc
, "b¨,baz", 
vÆ
);

76 
	`≠r_poﬁ_de°roy
(
subp
);

77 
	}
}

79 
	$èbÀ_£t
(
abts_ˇ£
 *
tc
, *
d©a
)

81 c⁄° *
vÆ
;

83 
	`≠r_èbÀ_£t
(
t1
, "setkey", "bar");

84 
	`≠r_èbÀ_£t
(
t1
, "setkey", "2ndtry");

85 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "setkey");

86 
	`ABTS_STR_EQUAL
(
tc
, "2ndåy", 
vÆ
);

87 
	}
}

89 
	$èbÀ_gënŸthîe
(
abts_ˇ£
 *
tc
, *
d©a
)

91 c⁄° *
vÆ
;

93 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "keynotthere");

94 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, (*)
vÆ
);

95 
	}
}

97 
	$èbÀ_add
(
abts_ˇ£
 *
tc
, *
d©a
)

99 c⁄° *
vÆ
;

101 
	`≠r_èbÀ_add
(
t1
, "addkey", "bar");

102 
	`≠r_èbÀ_add
(
t1
, "addkey", "foo");

103 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "addkey");

104 
	`ABTS_STR_EQUAL
(
tc
, "b¨", 
vÆ
);

106 
	}
}

108 
	$èbÀ_√…s
(
abts_ˇ£
 *
tc
, *
d©a
)

110 c⁄° *
vÆ
;

111 
≠r_èbÀ_t
 *
t
 = 
	`≠r_èbÀ_make
(
p
, 1);

113 
	`≠r_èbÀ_£t
(
t
, "abc", "def");

114 
	`≠r_èbÀ_£t
(
t
, "def", "abc");

115 
	`≠r_èbÀ_£t
(
t
, "foo", "zzz");

116 
vÆ
 = 
	`≠r_èbÀ_gë
(
t
, "foo");

117 
	`ABTS_STR_EQUAL
(
tc
, "zzz", 
vÆ
);

118 
vÆ
 = 
	`≠r_èbÀ_gë
(
t
, "abc");

119 
	`ABTS_STR_EQUAL
(
tc
, "def", 
vÆ
);

120 
vÆ
 = 
	`≠r_èbÀ_gë
(
t
, "def");

121 
	`ABTS_STR_EQUAL
(
tc
, "abc", 
vÆ
);

122 
	`ABTS_INT_EQUAL
(
tc
, 3, 
	`≠r_èbÀ_ñts
(
t
)->
√…s
);

123 
	}
}

125 
	$èbÀ_˛ór
(
abts_ˇ£
 *
tc
, *
d©a
)

127 
	`≠r_èbÀ_˛ór
(
t1
);

128 
	`ABTS_INT_EQUAL
(
tc
, 0, 
	`≠r_èbÀ_ñts
(
t1
)->
√…s
);

129 
	}
}

131 
	$èbÀ_un£t
(
abts_ˇ£
 *
tc
, *
d©a
)

133 c⁄° *
vÆ
;

134 
≠r_èbÀ_t
 *
t
 = 
	`≠r_èbÀ_make
(
p
, 1);

136 
	`≠r_èbÀ_£t
(
t
, "a", "1");

137 
	`≠r_èbÀ_£t
(
t
, "b", "2");

138 
	`≠r_èbÀ_un£t
(
t
, "b");

139 
	`ABTS_INT_EQUAL
(
tc
, 1, 
	`≠r_èbÀ_ñts
(
t
)->
√…s
);

140 
vÆ
 = 
	`≠r_èbÀ_gë
(
t
, "a");

141 
	`ABTS_STR_EQUAL
(
tc
, "1", 
vÆ
);

142 
vÆ
 = 
	`≠r_èbÀ_gë
(
t
, "b");

143 
	`ABTS_PTR_EQUAL
(
tc
, (*)
NULL
, (*)
vÆ
);

144 
	}
}

146 
	$èbÀ_ovîœp
(
abts_ˇ£
 *
tc
, *
d©a
)

148 c⁄° *
vÆ
;

149 
≠r_èbÀ_t
 *
t1
 = 
	`≠r_èbÀ_make
(
p
, 1);

150 
≠r_èbÀ_t
 *
t2
 = 
	`≠r_èbÀ_make
(
p
, 1);

152 
	`≠r_èbÀ_addn
(
t1
, "a", "0");

153 
	`≠r_èbÀ_addn
(
t1
, "g", "7");

154 
	`≠r_èbÀ_addn
(
t2
, "a", "1");

155 
	`≠r_èbÀ_addn
(
t2
, "b", "2");

156 
	`≠r_èbÀ_addn
(
t2
, "c", "3");

157 
	`≠r_èbÀ_addn
(
t2
, "b", "2.0");

158 
	`≠r_èbÀ_addn
(
t2
, "d", "4");

159 
	`≠r_èbÀ_addn
(
t2
, "e", "5");

160 
	`≠r_èbÀ_addn
(
t2
, "b", "2.");

161 
	`≠r_èbÀ_addn
(
t2
, "f", "6");

162 
	`≠r_èbÀ_ovîœp
(
t1
, 
t2
, 
APR_OVERLAP_TABLES_SET
);

164 
	`ABTS_INT_EQUAL
(
tc
, 7, 
	`≠r_èbÀ_ñts
(
t1
)->
√…s
);

165 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "a");

166 
	`ABTS_STR_EQUAL
(
tc
, "1", 
vÆ
);

167 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "b");

168 
	`ABTS_STR_EQUAL
(
tc
, "2.", 
vÆ
);

169 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "c");

170 
	`ABTS_STR_EQUAL
(
tc
, "3", 
vÆ
);

171 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "d");

172 
	`ABTS_STR_EQUAL
(
tc
, "4", 
vÆ
);

173 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "e");

174 
	`ABTS_STR_EQUAL
(
tc
, "5", 
vÆ
);

175 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "f");

176 
	`ABTS_STR_EQUAL
(
tc
, "6", 
vÆ
);

177 
vÆ
 = 
	`≠r_èbÀ_gë
(
t1
, "g");

178 
	`ABTS_STR_EQUAL
(
tc
, "7", 
vÆ
);

179 
	}
}

181 
	$èbÀ_ovîœp2
(
abts_ˇ£
 *
tc
, *
d©a
)

183 
≠r_poﬁ_t
 *
subp
;

184 
≠r_èbÀ_t
 *
t1
, *
t2
;

186 
	`≠r_poﬁ_¸óã
(&
subp
, 
p
);

188 
t1
 = 
	`≠r_èbÀ_make
(
subp
, 1);

189 
t2
 = 
	`≠r_èbÀ_make
(
p
, 1);

190 
	`≠r_èbÀ_addn
(
t1
, "t1", "one");

191 
	`≠r_èbÀ_addn
(
t2
, "t2", "two");

193 
	`≠r_èbÀ_ovîœp
(
t1
, 
t2
, 
APR_OVERLAP_TABLES_SET
);

195 
	`ABTS_INT_EQUAL
(
tc
, 2, 
	`≠r_èbÀ_ñts
(
t1
)->
√…s
);

197 
	`ABTS_STR_EQUAL
(
tc
, "⁄e", 
	`≠r_èbÀ_gë
(
t1
, "t1"));

198 
	`ABTS_STR_EQUAL
(
tc
, "two", 
	`≠r_èbÀ_gë
(
t1
, "t2"));

200 
	}
}

202 
abts_suôe
 *
	$ã°èbÀ
(
abts_suôe
 *
suôe
)

204 
suôe
 = 
	`ADD_SUITE
(suite)

206 
	`abts_run_ã°
(
suôe
, 
¨øy_˛ór
, 
NULL
);

207 
	`abts_run_ã°
(
suôe
, 
èbÀ_make
, 
NULL
);

208 
	`abts_run_ã°
(
suôe
, 
èbÀ_gë
, 
NULL
);

209 
	`abts_run_ã°
(
suôe
, 
èbÀ_gëm
, 
NULL
);

210 
	`abts_run_ã°
(
suôe
, 
èbÀ_£t
, 
NULL
);

211 
	`abts_run_ã°
(
suôe
, 
èbÀ_gënŸthîe
, 
NULL
);

212 
	`abts_run_ã°
(
suôe
, 
èbÀ_add
, 
NULL
);

213 
	`abts_run_ã°
(
suôe
, 
èbÀ_√…s
, 
NULL
);

214 
	`abts_run_ã°
(
suôe
, 
èbÀ_˛ór
, 
NULL
);

215 
	`abts_run_ã°
(
suôe
, 
èbÀ_un£t
, 
NULL
);

216 
	`abts_run_ã°
(
suôe
, 
èbÀ_ovîœp
, 
NULL
);

217 
	`abts_run_ã°
(
suôe
, 
èbÀ_ovîœp2
, 
NULL
);

219  
suôe
;

220 
	}
}

	@test/testtemp.c

17 
	~"ã°utû.h
"

18 
	~"≠r_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

21 
	$ã°_ãmp_dú
(
abts_ˇ£
 *
tc
, *
d©a
)

23 c⁄° *
ãmpdú
 = 
NULL
;

24 
≠r_°©us_t
 
rv
;

26 
rv
 = 
	`≠r_ãmp_dú_gë
(&
ãmpdú
, 
p
);

27 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ födög Temp‹¨y Dúe˘‹y", 
rv
);

28 
	`ABTS_PTR_NOTNULL
(
tc
, 
ãmpdú
);

29 
	}
}

31 
	$ã°_mkãmp
(
abts_ˇ£
 *
tc
, *
d©a
)

33 
≠r_fûe_t
 *
f
 = 
NULL
;

34 c⁄° *
ãmpdú
 = 
NULL
;

35 *
fûëem∂©e
;

36 
≠r_°©us_t
 
rv
;

38 
rv
 = 
	`≠r_ãmp_dú_gë
(&
ãmpdú
, 
p
);

39 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ födög Temp‹¨y Dúe˘‹y", 
rv
);

41 
fûëem∂©e
 = 
	`≠r_p°rˇt
(
p
, 
ãmpdú
, "/ãmpfûeXXXXXX", 
NULL
);

42 
rv
 = 
	`≠r_fûe_mkãmp
(&
f
, 
fûëem∂©e
, 0, 
p
);

43 
	`APR_ASSERT_SUCCESS
(
tc
, "Eº‹ o≥nög Temp‹¨y fûe", 
rv
);

44 
	}
}

46 
abts_suôe
 *
	$ã°ãmp
(
abts_suôe
 *
suôe
)

48 
suôe
 = 
	`ADD_SUITE
(suite)

50 
	`abts_run_ã°
(
suôe
, 
ã°_ãmp_dú
, 
NULL
);

51 
	`abts_run_ã°
(
suôe
, 
ã°_mkãmp
, 
NULL
);

53  
suôe
;

54 
	}
}

	@test/testthread.c

17 
	~"≠r_thªad_¥oc.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_time.h
"

21 
	~"ã°utû.h
"

23 #i‡
APR_HAS_THREADS


25 
≠r_thªad_muãx_t
 *
	gthªad_lock
;

26 
≠r_thªad_⁄˚_t
 *
	gc⁄åﬁ
 = 
NULL
;

27 
	gx
 = 0;

28 
	gvÆue
 = 0;

30 
≠r_thªad_t
 *
	gt1
;

31 
≠r_thªad_t
 *
	gt2
;

32 
≠r_thªad_t
 *
	gt3
;

33 
≠r_thªad_t
 *
	gt4
;

36 
≠r_°©us_t
 
	gexô_ªt_vÆ
 = 123;

38 
	$öô_func
()

40 
vÆue
++;

41 
	}
}

43 * 
APR_THREAD_FUNC
 
	$thªad_func1
(
≠r_thªad_t
 *
thd
, *
d©a
)

45 
i
;

47 
	`≠r_thªad_⁄˚
(
c⁄åﬁ
, 
öô_func
);

49 
i
 = 0; i < 10000; i++) {

50 
	`≠r_thªad_muãx_lock
(
thªad_lock
);

51 
x
++;

52 
	`≠r_thªad_muãx_u∆ock
(
thªad_lock
);

54 
	`≠r_thªad_exô
(
thd
, 
exô_ªt_vÆ
);

55  
NULL
;

56 
	}
}

58 
	$thªad_öô
(
abts_ˇ£
 *
tc
, *
d©a
)

60 
≠r_°©us_t
 
rv
;

62 
rv
 = 
	`≠r_thªad_⁄˚_öô
(&
c⁄åﬁ
, 
p
);

63 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

65 
rv
 = 
	`≠r_thªad_muãx_¸óã
(&
thªad_lock
, 
APR_THREAD_MUTEX_DEFAULT
, 
p
);

66 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

67 
	}
}

69 
	$¸óã_thªads
(
abts_ˇ£
 *
tc
, *
d©a
)

71 
≠r_°©us_t
 
rv
;

73 
rv
 = 
	`≠r_thªad_¸óã
(&
t1
, 
NULL
, 
thªad_func1
, NULL, 
p
);

74 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

75 
rv
 = 
	`≠r_thªad_¸óã
(&
t2
, 
NULL
, 
thªad_func1
, NULL, 
p
);

76 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

77 
rv
 = 
	`≠r_thªad_¸óã
(&
t3
, 
NULL
, 
thªad_func1
, NULL, 
p
);

78 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

79 
rv
 = 
	`≠r_thªad_¸óã
(&
t4
, 
NULL
, 
thªad_func1
, NULL, 
p
);

80 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

81 
	}
}

83 
	$joö_thªads
(
abts_ˇ£
 *
tc
, *
d©a
)

85 
≠r_°©us_t
 
s
;

87 
	`≠r_thªad_joö
(&
s
, 
t1
);

88 
	`ABTS_INT_EQUAL
(
tc
, 
exô_ªt_vÆ
, 
s
);

89 
	`≠r_thªad_joö
(&
s
, 
t2
);

90 
	`ABTS_INT_EQUAL
(
tc
, 
exô_ªt_vÆ
, 
s
);

91 
	`≠r_thªad_joö
(&
s
, 
t3
);

92 
	`ABTS_INT_EQUAL
(
tc
, 
exô_ªt_vÆ
, 
s
);

93 
	`≠r_thªad_joö
(&
s
, 
t4
);

94 
	`ABTS_INT_EQUAL
(
tc
, 
exô_ªt_vÆ
, 
s
);

95 
	}
}

97 
	$check_locks
(
abts_ˇ£
 *
tc
, *
d©a
)

99 
	`ABTS_INT_EQUAL
(
tc
, 40000, 
x
);

100 
	}
}

102 
	$check_thªad_⁄˚
(
abts_ˇ£
 *
tc
, *
d©a
)

104 
	`ABTS_INT_EQUAL
(
tc
, 1, 
vÆue
);

105 
	}
}

109 
	$thªads_nŸ_im∂
(
abts_ˇ£
 *
tc
, *
d©a
)

111 
	`ABTS_NOT_IMPL
(
tc
, "ThreadsÇot implemented onÅhisÖlatform");

112 
	}
}

116 
abts_suôe
 *
	$ã°thªad
(
abts_suôe
 *
suôe
)

118 
suôe
 = 
	`ADD_SUITE
(suite)

120 #i‡!
APR_HAS_THREADS


121 
	`abts_run_ã°
(
suôe
, 
thªads_nŸ_im∂
, 
NULL
);

123 
	`abts_run_ã°
(
suôe
, 
thªad_öô
, 
NULL
);

124 
	`abts_run_ã°
(
suôe
, 
¸óã_thªads
, 
NULL
);

125 
	`abts_run_ã°
(
suôe
, 
joö_thªads
, 
NULL
);

126 
	`abts_run_ã°
(
suôe
, 
check_locks
, 
NULL
);

127 
	`abts_run_ã°
(
suôe
, 
check_thªad_⁄˚
, 
NULL
);

130  
suôe
;

131 
	}
}

	@test/testtime.c

17 
	~"≠r_time.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"ã°utû.h
"

22 
	~"≠r_°rögs.h
"

23 
	~<time.h
>

25 
	#STR_SIZE
 45

	)

33 
≠r_time_t
 
	gnow
 = 
APR_INT64_C
(1032030336186711);

35 
≠r_time_t
 
	gÀ≠_yór_now
 = 
APR_INT64_C
(1344715255151600);

37 * 
	$¥öt_time
 (
≠r_poﬁ_t
 *
poﬁ
, c⁄° 
≠r_time_exp_t
 *
xt
)

39  
	`≠r_p•rötf
 (
poﬁ
,

41 
xt
->
tm_yór
 + 1900,

42 
xt
->
tm_m⁄
 + 1,

43 
xt
->
tm_mday
,

44 
xt
->
tm_hour
,

45 
xt
->
tm_mö
,

46 
xt
->
tm_£c
,

47 
xt
->
tm_u£c
,

48 
xt
->
tm_gmtoff
,

49 
xt
->
tm_yday
 + 1,

50 
≠r_day_¢ames
[
xt
->
tm_wday
],

51 (
xt
->
tm_isd°
 ? " DST" : ""));

52 
	}
}

55 
	$ã°_now
(
abts_ˇ£
 *
tc
, *
d©a
)

57 
≠r_time_t
 
timediff
;

58 
≠r_time_t
 
cuºít
;

59 
time_t
 
os_now
;

61 
cuºít
 = 
	`≠r_time_now
();

62 
	`time
(&
os_now
);

64 
timediff
 = 
os_now
 - (
cuºít
 / 
APR_USEC_PER_SEC
);

69 
	`ABTS_ASSERT
(
tc
, "apr_timeánd OSÅime doÇotágree",

70 (
timediff
 > -2) && (timediff < 2));

71 
	}
}

73 
	$ã°_gmt°r
(
abts_ˇ£
 *
tc
, *
d©a
)

75 
≠r_°©us_t
 
rv
;

76 
≠r_time_exp_t
 
xt
;

78 
rv
 = 
	`≠r_time_exp_gmt
(&
xt
, 
now
);

79 i‡(
rv
 =
APR_ENOTIMPL
) {

80 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_gmt");

82 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

83 
	`ABTS_STR_EQUAL
(
tc
, "2002-09-14 19:05:36.186711 +0000 [257 Sat]",

84 
	`¥öt_time
(
p
, &
xt
));

85 
	}
}

87 
	$ã°_exp_…
(
abts_ˇ£
 *
tc
, *
d©a
)

89 
≠r_time_t
 
ã°_times
[] = {0, 0, 0};

90 
i
;

92 
ã°_times
[0] = 
now
;

93 
ã°_times
[1] = 
À≠_yór_now
;

95 
i
 = 0; 
ã°_times
[i] != 0; i++) {

96 
≠r_°©us_t
 
rv
;

97 
≠r_time_exp_t
 
xt
;

98 
time_t
 
posix_£cs
 = (time_t)
	`≠r_time_£c
(
ã°_times
[
i
]);

99 
tm
 *
posix_exp
 = 
	`loˇ…ime
(&
posix_£cs
);

101 
rv
 = 
	`≠r_time_exp_…
(&
xt
, 
ã°_times
[
i
]);

102 i‡(
rv
 =
APR_ENOTIMPL
) {

103 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_lt");

105 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

107 
	#CHK_FIELD
(
f
) \

108 
	`ABTS_ASSERT
(
tc
, "Mism©ch i¿" #f, 
posix_exp
->
f
 =
xt
.f)

	)

110 
	`CHK_FIELD
(
tm_£c
);

111 
	`CHK_FIELD
(
tm_mö
);

112 
	`CHK_FIELD
(
tm_hour
);

113 
	`CHK_FIELD
(
tm_mday
);

114 
	`CHK_FIELD
(
tm_m⁄
);

115 
	`CHK_FIELD
(
tm_yór
);

116 
	`CHK_FIELD
(
tm_wday
);

117 
	`CHK_FIELD
(
tm_yday
);

118 
	`CHK_FIELD
(
tm_isd°
);

119 #unde‡
CHK_FIELD


121 
	}
}

123 
	$ã°_exp_gë_gmt
(
abts_ˇ£
 *
tc
, *
d©a
)

125 
≠r_°©us_t
 
rv
;

126 
≠r_time_exp_t
 
xt
;

127 
≠r_time_t
 
imp
;

128 
≠r_öt64_t
 
hr_off_64
;

130 
rv
 = 
	`≠r_time_exp_gmt
(&
xt
, 
now
);

131 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

132 
rv
 = 
	`≠r_time_exp_gë
(&
imp
, &
xt
);

133 i‡(
rv
 =
APR_ENOTIMPL
) {

134 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_get");

136 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

137 
hr_off_64
 = (
≠r_öt64_t
Ë
xt
.
tm_gmtoff
 * 
APR_USEC_PER_SEC
;

138 
	`ABTS_TRUE
(
tc
, 
now
 + 
hr_off_64
 =
imp
);

139 
	}
}

141 
	$ã°_exp_gë_…
(
abts_ˇ£
 *
tc
, *
d©a
)

143 
≠r_°©us_t
 
rv
;

144 
≠r_time_exp_t
 
xt
;

145 
≠r_time_t
 
imp
;

146 
≠r_öt64_t
 
hr_off_64
;

148 
rv
 = 
	`≠r_time_exp_…
(&
xt
, 
now
);

149 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

150 
rv
 = 
	`≠r_time_exp_gë
(&
imp
, &
xt
);

151 i‡(
rv
 =
APR_ENOTIMPL
) {

152 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_get");

154 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

155 
hr_off_64
 = (
≠r_öt64_t
Ë
xt
.
tm_gmtoff
 * 
APR_USEC_PER_SEC
;

156 
	`ABTS_TRUE
(
tc
, 
now
 + 
hr_off_64
 =
imp
);

157 
	}
}

159 
	$ã°_imp_gmt
(
abts_ˇ£
 *
tc
, *
d©a
)

161 
≠r_°©us_t
 
rv
;

162 
≠r_time_exp_t
 
xt
;

163 
≠r_time_t
 
imp
;

165 
rv
 = 
	`≠r_time_exp_gmt
(&
xt
, 
now
);

166 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

167 
rv
 = 
	`≠r_time_exp_gmt_gë
(&
imp
, &
xt
);

168 i‡(
rv
 =
APR_ENOTIMPL
) {

169 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_gmt_get");

171 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

172 
	`ABTS_TRUE
(
tc
, 
now
 =
imp
);

173 
	}
}

175 
	$ã°_rfc°r
(
abts_ˇ£
 *
tc
, *
d©a
)

177 
≠r_°©us_t
 
rv
;

178 
°r
[
STR_SIZE
];

180 
rv
 = 
	`≠r_rfc822_d©e
(
°r
, 
now
);

181 i‡(
rv
 =
APR_ENOTIMPL
) {

182 
	`ABTS_NOT_IMPL
(
tc
, "apr_rfc822_date");

184 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

185 
	`ABTS_STR_EQUAL
(
tc
, "S©, 14 Sï 2002 19:05:36 GMT", 
°r
);

186 
	}
}

188 
	$ã°_˘ime
(
abts_ˇ£
 *
tc
, *
d©a
)

190 
≠r_°©us_t
 
rv
;

191 
≠r_°r
[
STR_SIZE
];

192 
libc_°r
[
STR_SIZE
];

193 
≠r_time_t
 
now_£c
 = 
	`≠r_time_£c
(
now
);

194 
time_t
 
posix_£c
 = (time_tË
now_£c
;

196 
rv
 = 
	`≠r_˘ime
(
≠r_°r
, 
now
);

197 i‡(
rv
 =
APR_ENOTIMPL
) {

198 
	`ABTS_NOT_IMPL
(
tc
, "apr_ctime");

200 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

201 
	`°r˝y
(
libc_°r
, 
	`˘ime
(&
posix_£c
));

202 *
	`°rchr
(
libc_°r
, '\n') = '\0';

204 
	`ABTS_STR_EQUAL
(
tc
, 
libc_°r
, 
≠r_°r
);

205 
	}
}

207 
	$ã°_°r·ime
(
abts_ˇ£
 *
tc
, *
d©a
)

209 
≠r_°©us_t
 
rv
;

210 
≠r_time_exp_t
 
xt
;

211 *
°r
 = 
NULL
;

212 
≠r_size_t
 
sz
;

214 
rv
 = 
	`≠r_time_exp_gmt
(&
xt
, 
now
);

215 
°r
 = 
	`≠r_∑Œoc
(
p
, 
STR_SIZE
 + 1);

216 
rv
 = 
	`≠r_°r·ime
(
°r
, &
sz
, 
STR_SIZE
, "%R %A %d %B %Y", &
xt
);

217 i‡(
rv
 =
APR_ENOTIMPL
) {

218 
	`ABTS_NOT_IMPL
(
tc
, "apr_strftime");

220 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

221 
	`ABTS_STR_EQUAL
(
tc
, "19:05 S©urday 14 Sïãmbî 2002", 
°r
);

222 
	}
}

224 
	$ã°_°r·imesmÆl
(
abts_ˇ£
 *
tc
, *
d©a
)

226 
≠r_°©us_t
 
rv
;

227 
≠r_time_exp_t
 
xt
;

228 
°r
[
STR_SIZE
];

229 
≠r_size_t
 
sz
;

231 
rv
 = 
	`≠r_time_exp_gmt
(&
xt
, 
now
);

232 
rv
 = 
	`≠r_°r·ime
(
°r
, &
sz
, 
STR_SIZE
, "%T", &
xt
);

233 i‡(
rv
 =
APR_ENOTIMPL
) {

234 
	`ABTS_NOT_IMPL
(
tc
, "apr_strftime");

236 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

237 
	`ABTS_STR_EQUAL
(
tc
, "19:05:36", 
°r
);

238 
	}
}

240 
	$ã°_exp_tz
(
abts_ˇ£
 *
tc
, *
d©a
)

242 
≠r_°©us_t
 
rv
;

243 
≠r_time_exp_t
 
xt
;

244 
≠r_öt32_t
 
hr_off
 = -5 * 3600;

246 
rv
 = 
	`≠r_time_exp_tz
(&
xt
, 
now
, 
hr_off
);

247 i‡(
rv
 =
APR_ENOTIMPL
) {

248 
	`ABTS_NOT_IMPL
(
tc
, "apr_time_exp_tz");

250 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

251 
	`ABTS_TRUE
(
tc
, (
xt
.
tm_u£c
 == 186711) &&

252 (
xt
.
tm_£c
 == 36) &&

253 (
xt
.
tm_mö
 == 5) &&

254 (
xt
.
tm_hour
 == 14) &&

255 (
xt
.
tm_mday
 == 14) &&

256 (
xt
.
tm_m⁄
 == 8) &&

257 (
xt
.
tm_yór
 == 102) &&

258 (
xt
.
tm_wday
 == 6) &&

259 (
xt
.
tm_yday
 == 256));

260 
	}
}

262 
	$ã°_°r·imeoff£t
(
abts_ˇ£
 *
tc
, *
d©a
)

264 
≠r_°©us_t
 
rv
;

265 
≠r_time_exp_t
 
xt
;

266 
°r
[
STR_SIZE
];

267 
≠r_size_t
 
sz
;

268 
≠r_öt32_t
 
hr_off
 = -5 * 3600;

270 
	`≠r_time_exp_tz
(&
xt
, 
now
, 
hr_off
);

271 
rv
 = 
	`≠r_°r·ime
(
°r
, &
sz
, 
STR_SIZE
, "%T", &
xt
);

272 i‡(
rv
 =
APR_ENOTIMPL
) {

273 
	`ABTS_NOT_IMPL
(
tc
, "apr_strftime");

275 
	`ABTS_TRUE
(
tc
, 
rv
 =
APR_SUCCESS
);

276 
	}
}

279 
	$ã°_2038
(
abts_ˇ£
 *
tc
, *
d©a
)

281 
≠r_time_exp_t
 
xt
;

282 
≠r_time_t
 
t
;

285 
xt
.
tm_yór
 = 138;

286 
xt
.
tm_m⁄
 = 0;

287 
xt
.
tm_mday
 = 19;

288 
xt
.
tm_hour
 = 3;

289 
xt
.
tm_mö
 = 14;

290 
xt
.
tm_£c
 = 7;

292 
	`APR_ASSERT_SUCCESS
(
tc
, "explode January 19th, 2038",

293 
	`≠r_time_exp_gë
(&
t
, &
xt
));

294 
	}
}

296 
abts_suôe
 *
	$ã°time
(
abts_suôe
 *
suôe
)

298 
suôe
 = 
	`ADD_SUITE
(suite)

300 
	`abts_run_ã°
(
suôe
, 
ã°_now
, 
NULL
);

301 
	`abts_run_ã°
(
suôe
, 
ã°_gmt°r
, 
NULL
);

302 
	`abts_run_ã°
(
suôe
, 
ã°_exp_…
, 
NULL
);

303 
	`abts_run_ã°
(
suôe
, 
ã°_exp_gë_gmt
, 
NULL
);

304 
	`abts_run_ã°
(
suôe
, 
ã°_exp_gë_…
, 
NULL
);

305 
	`abts_run_ã°
(
suôe
, 
ã°_imp_gmt
, 
NULL
);

306 
	`abts_run_ã°
(
suôe
, 
ã°_rfc°r
, 
NULL
);

307 
	`abts_run_ã°
(
suôe
, 
ã°_˘ime
, 
NULL
);

308 
	`abts_run_ã°
(
suôe
, 
ã°_°r·ime
, 
NULL
);

309 
	`abts_run_ã°
(
suôe
, 
ã°_°r·imesmÆl
, 
NULL
);

310 
	`abts_run_ã°
(
suôe
, 
ã°_exp_tz
, 
NULL
);

311 
	`abts_run_ã°
(
suôe
, 
ã°_°r·imeoff£t
, 
NULL
);

312 
	`abts_run_ã°
(
suôe
, 
ã°_2038
, 
NULL
);

314  
suôe
;

315 
	}
}

	@test/testud.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_î∫o.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_°rögs.h
"

24 
	~"ã°utû.h
"

26 
≠r_poﬁ_t
 *
	gpoﬁ
;

27 *
	gã°d©a
;

28 
	g˛ónup_ˇŒed
 = 0;

30 
≠r_°©us_t
 
	$°rög_˛ónup
(*
d©a
)

32 
˛ónup_ˇŒed
 = 1;

33  
APR_SUCCESS
;

34 
	}
}

36 
	$£t_u£rd©a
(
abts_ˇ£
 *
tc
, *
d©a
)

38 
≠r_°©us_t
 
rv
;

40 
rv
 = 
	`≠r_poﬁ_u£rd©a_£t
(
ã°d©a
, "TEST", 
°rög_˛ónup
, 
poﬁ
);

41 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

42 
	}
}

44 
	$gë_u£rd©a
(
abts_ˇ£
 *
tc
, *
d©a
)

46 
≠r_°©us_t
 
rv
;

47 *
ªtd©a
;

49 
rv
 = 
	`≠r_poﬁ_u£rd©a_gë
(&
ªtd©a
, "TEST", 
poﬁ
);

50 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

51 
	`ABTS_STR_EQUAL
(
tc
, 
ã°d©a
, 
ªtd©a
);

52 
	}
}

54 
	$gë_n⁄exi°key
(
abts_ˇ£
 *
tc
, *
d©a
)

56 
≠r_°©us_t
 
rv
;

57 *
ªtd©a
;

59 
rv
 = 
	`≠r_poﬁ_u£rd©a_gë
(&
ªtd©a
, "DOESNTEXIST", 
poﬁ
);

60 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

61 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
ªtd©a
);

62 
	}
}

64 
	$po°_poﬁ_˛ór
(
abts_ˇ£
 *
tc
, *
d©a
)

66 
≠r_°©us_t
 
rv
;

67 *
ªtd©a
;

69 
rv
 = 
	`≠r_poﬁ_u£rd©a_gë
(&
ªtd©a
, "DOESNTEXIST", 
poﬁ
);

70 
	`ABTS_INT_EQUAL
(
tc
, 
APR_SUCCESS
, 
rv
);

71 
	`ABTS_PTR_EQUAL
(
tc
, 
NULL
, 
ªtd©a
);

72 
	}
}

74 
abts_suôe
 *
	$ã°ud
(
abts_suôe
 *
suôe
)

76 
suôe
 = 
	`ADD_SUITE
(suite)

78 
	`≠r_poﬁ_¸óã
(&
poﬁ
, 
p
);

79 
ã°d©a
 = 
	`≠r_p°rdup
(
poﬁ
, "This isáÅest\n");

81 
	`abts_run_ã°
(
suôe
, 
£t_u£rd©a
, 
NULL
);

82 
	`abts_run_ã°
(
suôe
, 
gë_u£rd©a
, 
NULL
);

83 
	`abts_run_ã°
(
suôe
, 
gë_n⁄exi°key
, 
NULL
);

85 
	`≠r_poﬁ_˛ór
(
poﬁ
);

87 
	`abts_run_ã°
(
suôe
, 
po°_poﬁ_˛ór
, 
NULL
);

89  
suôe
;

90 
	}
}

	@test/testuser.c

17 
	~"ã°utû.h
"

18 
	~"≠r_î∫o.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_u£r.h
"

22 #i‡
APR_HAS_USER


23 
	$uid_cuºít
(
abts_ˇ£
 *
tc
, *
d©a
)

25 
≠r_uid_t
 
uid
;

26 
≠r_gid_t
 
gid
;

28 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_current failed",

29 
	`≠r_uid_cuºít
(&
uid
, &
gid
, 
p
));

30 
	}
}

32 
	$u£∫ame
(
abts_ˇ£
 *
tc
, *
d©a
)

34 
≠r_uid_t
 
uid
;

35 
≠r_gid_t
 
gid
;

36 
≠r_uid_t
 
ªåeived_uid
;

37 
≠r_gid_t
 
ªåeived_gid
;

38 *
u«me
 = 
NULL
;

40 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_current failed",

41 
	`≠r_uid_cuºít
(&
uid
, &
gid
, 
p
));

43 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_name_get failed",

44 
	`≠r_uid_«me_gë
(&
u«me
, 
uid
, 
p
));

45 
	`ABTS_PTR_NOTNULL
(
tc
, 
u«me
);

47 i‡(
u«me
 =
NULL
)

50 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_get failed",

51 
	`≠r_uid_gë
(&
ªåeived_uid
, &
ªåeived_gid
, 
u«me
, 
p
));

53 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_compare failed",

54 
	`≠r_uid_com∑ª
(
uid
, 
ªåeived_uid
));

55 #ifde‡
WIN32


58 i‡(!
gid
 || !
ªåeived_gid
) {

63 i‡(!
gid
) {

64 
	`ABTS_NOT_IMPL
(
tc
, "Groups fromápr_uid_current");

67 
	`ABTS_NOT_IMPL
(
tc
, "Groups fromápr_uid_get");

72 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_gid_compare failed",

73 
	`≠r_gid_com∑ª
(
gid
, 
ªåeived_gid
));

74 #ifde‡
WIN32


77 
	}
}

79 
	$grou≤ame
(
abts_ˇ£
 *
tc
, *
d©a
)

81 
≠r_uid_t
 
uid
;

82 
≠r_gid_t
 
gid
;

83 
≠r_gid_t
 
ªåeived_gid
;

84 *
g«me
 = 
NULL
;

86 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_uid_current failed",

87 
	`≠r_uid_cuºít
(&
uid
, &
gid
, 
p
));

89 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_gid_name_get failed",

90 
	`≠r_gid_«me_gë
(&
g«me
, 
gid
, 
p
));

91 
	`ABTS_PTR_NOTNULL
(
tc
, 
g«me
);

93 i‡(
g«me
 =
NULL
)

96 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_gid_get failed",

97 
	`≠r_gid_gë
(&
ªåeived_gid
, 
g«me
, 
p
));

99 
	`APR_ASSERT_SUCCESS
(
tc
, "apr_gid_compare failed",

100 
	`≠r_gid_com∑ª
(
gid
, 
ªåeived_gid
));

101 
	}
}

103 #ifde‡
APR_UID_GID_NUMERIC


105 
	$Áû_u£röfo
(
abts_ˇ£
 *
tc
, *
d©a
)

107 
≠r_uid_t
 
uid
;

108 
≠r_gid_t
 
gid
;

109 
≠r_°©us_t
 
rv
;

110 *
tmp
;

112 
î∫o
 = 0;

113 
gid
 = 
uid
 = 9999999;

114 
tmp
 = 
NULL
;

115 
rv
 = 
	`≠r_uid_«me_gë
(&
tmp
, 
uid
, 
p
);

116 
	`ABTS_ASSERT
(
tc
, "apr_uid_name_get should fail or "

118 
rv
 !
APR_SUCCESS
 || 
tmp
 !
NULL
);

120 
î∫o
 = 0;

121 
tmp
 = 
NULL
;

122 
rv
 = 
	`≠r_gid_«me_gë
(&
tmp
, 
gid
, 
p
);

123 
	`ABTS_ASSERT
(
tc
, "apr_gid_name_get should fail or "

125 
rv
 !
APR_SUCCESS
 || 
tmp
 !
NULL
);

127 
gid
 = 424242;

128 
î∫o
 = 0;

129 
rv
 = 
	`≠r_gid_gë
(&
gid
, "I_AM_NOT_A_GROUP", 
p
);

130 
	`ABTS_ASSERT
(
tc
, "apr_gid_get should fail or "

132 
rv
 !
APR_SUCCESS
 || 
gid
 == 424242);

134 
gid
 = 
uid
 = 424242;

135 
î∫o
 = 0;

136 
rv
 = 
	`≠r_uid_gë
(&
uid
, &
gid
, "I_AM_NOT_A_USER", 
p
);

137 
	`ABTS_ASSERT
(
tc
, "apr_gid_get should fail or "

139 
rv
 !
APR_SUCCESS
 || 
uid
 =424242 || 
gid
 == 4242442);

141 
î∫o
 = 0;

142 
tmp
 = 
NULL
;

143 
rv
 = 
	`≠r_uid_homï©h_gë
(&
tmp
, "I_AM_NOT_A_USER", 
p
);

144 
	`ABTS_ASSERT
(
tc
, "apr_uid_homepath_get should fail or "

146 
rv
 !
APR_SUCCESS
 || 
tmp
 !
NULL
);

147 
	}
}

152 
	$u£rs_nŸ_im∂
(
abts_ˇ£
 *
tc
, *
d©a
)

154 
	`ABTS_NOT_IMPL
(
tc
, "UsersÇot implemented onÅhisÖlatform");

155 
	}
}

158 
abts_suôe
 *
	$ã°u£r
(
abts_suôe
 *
suôe
)

160 
suôe
 = 
	`ADD_SUITE
(suite)

162 #i‡!
APR_HAS_USER


163 
	`abts_run_ã°
(
suôe
, 
u£rs_nŸ_im∂
, 
NULL
);

165 
	`abts_run_ã°
(
suôe
, 
uid_cuºít
, 
NULL
);

166 
	`abts_run_ã°
(
suôe
, 
u£∫ame
, 
NULL
);

167 
	`abts_run_ã°
(
suôe
, 
grou≤ame
, 
NULL
);

168 #ifde‡
APR_UID_GID_NUMERIC


169 
	`abts_run_ã°
(
suôe
, 
Áû_u£röfo
, 
NULL
);

173  
suôe
;

174 
	}
}

	@test/testutil.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

20 
	~"abts.h
"

21 
	~"ã°utû.h
"

22 
	~"≠r_poﬁs.h
"

24 
≠r_poﬁ_t
 *
	gp
;

26 
	$≠r_as£π_suc˚ss
(
abts_ˇ£
* 
tc
, c⁄° * 
c⁄ãxt
, 
≠r_°©us_t
 
rv
,

27 
löío
)

29 i‡(
rv
 =
APR_ENOTIMPL
) {

30 
	`abts_nŸ_im∂
(
tc
, 
c⁄ãxt
, 
löío
);

31 } i‡(
rv
 !
APR_SUCCESS
) {

32 
buf
[
STRING_MAX
], 
ebuf
[128];

33 
	`•rötf
(
buf
, "%†(%d): %s\n", 
c⁄ãxt
, 
rv
,

34 
	`≠r_°ªº‹
(
rv
, 
ebuf
, Ébuf));

35 
	`abts_Áû
(
tc
, 
buf
, 
löío
);

37 
	}
}

39 
	$öôülize
() {

40 
	`≠r_öôülize
();

41 
	`©exô
(
≠r_ãrmö©e
);

43 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

44 
	}
}

	@test/testutil.h

17 
	~"≠r_poﬁs.h
"

18 
	~"≠r_gíîÆ.h
"

19 
	~"abts.h
"

21 #i‚de‡
APR_TEST_UTIL


22 
	#APR_TEST_UTIL


	)

28 #ifde‡
WIN32


29 #ifde‡
BINPATH


30 
	#TESTBINPATH
 
	`APR_STRINGIFY
(
BINPATH
Ë"/"

	)

32 
	#TESTBINPATH
 ""

	)

35 
	#TESTBINPATH
 "./"

	)

38 #ifde‡
WIN32


39 
	#EXTENSION
 ".exe"

	)

40 #ñi‡
NETWARE


41 
	#EXTENSION
 ".∆m"

	)

43 
	#EXTENSION


	)

46 
	#STRING_MAX
 8096

	)

52 
≠r_poﬁ_t
 *
p
;

56 
≠r_as£π_suc˚ss
(
abts_ˇ£
* 
tc
, c⁄° *
c⁄ãxt
,

57 
≠r_°©us_t
 
rv
, 
löío
);

58 
	#APR_ASSERT_SUCCESS
(
tc
, 
˘xt
, 
rv
) \

59 
	`≠r_as£π_suc˚ss
(
tc
, 
˘xt
, 
rv
, 
__LINE__
)

	)

61 
öôülize
();

63 
abts_suôe
 *
ã°©omic
◊bts_suôê*
suôe
);

64 
abts_suôe
 *
ã°dú
◊bts_suôê*
suôe
);

65 
abts_suôe
 *
ã°dso
◊bts_suôê*
suôe
);

66 
abts_suôe
 *
ã°dup
◊bts_suôê*
suôe
);

67 
abts_suôe
 *
ã°esˇ≥
◊bts_suôê*
suôe
);

68 
abts_suôe
 *
ã°ív
◊bts_suôê*
suôe
);

69 
abts_suôe
 *
ã°fûe
◊bts_suôê*
suôe
);

70 
abts_suôe
 *
ã°fûec›y
◊bts_suôê*
suôe
);

71 
abts_suôe
 *
ã°fûeöfo
◊bts_suôê*
suôe
);

72 
abts_suôe
 *
ã°Êock
◊bts_suôê*
suôe
);

73 
abts_suôe
 *
ã°fmt
◊bts_suôê*
suôe
);

74 
abts_suôe
 *
ã°‚m©ch
◊bts_suôê*
suôe
);

75 
abts_suôe
 *
ã°gë›t
◊bts_suôê*
suôe
);

76 
abts_suôe
 *
ã°globÆmuãx
◊bts_suôê*
suôe
);

77 
abts_suôe
 *
ã°hash
◊bts_suôê*
suôe
);

78 
abts_suôe
 *
ã°ùsub
◊bts_suôê*
suôe
);

79 
abts_suôe
 *
ã°lock
◊bts_suôê*
suôe
);

80 
abts_suôe
 *
ã°c⁄d
◊bts_suôê*
suôe
);

81 
abts_suôe
 *
ã°lfs
◊bts_suôê*
suôe
);

82 
abts_suôe
 *
ã°mm≠
◊bts_suôê*
suôe
);

83 
abts_suôe
 *
ã°«mes
◊bts_suôê*
suôe
);

84 
abts_suôe
 *
ã°oc
◊bts_suôê*
suôe
);

85 
abts_suôe
 *
ã°∑th
◊bts_suôê*
suôe
);

86 
abts_suôe
 *
ã°pùe
◊bts_suôê*
suôe
);

87 
abts_suôe
 *
ã°pﬁl
◊bts_suôê*
suôe
);

88 
abts_suôe
 *
ã°poﬁ
◊bts_suôê*
suôe
);

89 
abts_suôe
 *
ã°¥oc
◊bts_suôê*
suôe
);

90 
abts_suôe
 *
ã°¥ocmuãx
◊bts_suôê*
suôe
);

91 
abts_suôe
 *
ã°ønd
◊bts_suôê*
suôe
);

92 
abts_suôe
 *
ã°¶ìp
◊bts_suôê*
suôe
);

93 
abts_suôe
 *
ã°shm
◊bts_suôê*
suôe
);

94 
abts_suôe
 *
ã°sock
◊bts_suôê*
suôe
);

95 
abts_suôe
 *
ã°sockës
◊bts_suôê*
suôe
);

96 
abts_suôe
 *
ã°sock›t
◊bts_suôê*
suôe
);

97 
abts_suôe
 *
ã°°r
◊bts_suôê*
suôe
);

98 
abts_suôe
 *
ã°°∫©cmp
◊bts_suôê*
suôe
);

99 
abts_suôe
 *
ã°èbÀ
◊bts_suôê*
suôe
);

100 
abts_suôe
 *
ã°ãmp
◊bts_suôê*
suôe
);

101 
abts_suôe
 *
ã°thªad
◊bts_suôê*
suôe
);

102 
abts_suôe
 *
ã°time
◊bts_suôê*
suôe
);

103 
abts_suôe
 *
ã°ud
◊bts_suôê*
suôe
);

104 
abts_suôe
 *
ã°u£r
◊bts_suôê*
suôe
);

105 
abts_suôe
 *
ã°v¢
◊bts_suôê*
suôe
);

	@test/testvsn.c

17 
	~<°dio.h
>

19 
	~"ã°utû.h
"

20 
	~"≠r_vîsi⁄.h
"

21 
	~"≠r_gíîÆ.h
"

24 
	$ã°_°rögs
(
abts_ˇ£
 *
tc
, *
d©a
)

26 
	`ABTS_STR_EQUAL
(
tc
, 
APR_VERSION_STRING
, 
	`≠r_vîsi⁄_°rög
());

27 
	}
}

29 #ifde‡
APR_IS_DEV_VERSION


30 
	#IS_DEV
 1

	)

32 
	#IS_DEV
 0

	)

35 
	$ã°_öts
(
abts_ˇ£
 *
tc
, *
d©a
)

37 
≠r_vîsi⁄_t
 
v¢
;

39 
	`≠r_vîsi⁄
(&
v¢
);

41 
	`ABTS_INT_EQUAL
(
tc
, 
APR_MAJOR_VERSION
, 
v¢
.
maj‹
);

42 
	`ABTS_INT_EQUAL
(
tc
, 
APR_MINOR_VERSION
, 
v¢
.
mö‹
);

43 
	`ABTS_INT_EQUAL
(
tc
, 
APR_PATCH_VERSION
, 
v¢
.
∑tch
);

44 
	`ABTS_INT_EQUAL
(
tc
, 
IS_DEV
, 
v¢
.
is_dev
);

45 
	}
}

47 
abts_suôe
 *
	$ã°v¢
(
abts_suôe
 *
suôe
)

49 
suôe
 = 
	`ADD_SUITE
(suite)

51 
	`abts_run_ã°
(
suôe
, 
ã°_°rögs
, 
NULL
);

52 
	`abts_run_ã°
(
suôe
, 
ã°_öts
, 
NULL
);

54  
suôe
;

55 
	}
}

	@test/tryread.c

17 
	~"ã°Êock.h
"

18 
	~"≠r_poﬁs.h
"

19 
	~"≠r_fûe_io.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r.h
"

23 #i‡
APR_HAVE_STDLIB_H


24 
	~<°dlib.h
>

27 
	$maö
(
¨gc
, c⁄° * c⁄° *
¨gv
)

29 
≠r_fûe_t
 *
fûe
;

30 
≠r_°©us_t
 
°©us
;

31 
≠r_poﬁ_t
 *
p
;

33 
	`≠r_öôülize
();

34 
	`≠r_poﬁ_¸óã
(&
p
, 
NULL
);

36 i‡(
	`≠r_fûe_›í
(&
fûe
, 
TESTFILE
, 
APR_FOPEN_WRITE
, 
APR_OS_DEFAULT
, 
p
)

37 !
APR_SUCCESS
) {

39 
	`exô
(
UNEXPECTED_ERROR
);

41 
°©us
 = 
	`≠r_fûe_lock
(
fûe
, 
APR_FLOCK_EXCLUSIVE
 | 
APR_FLOCK_NONBLOCK
);

42 i‡(
°©us
 =
APR_SUCCESS
) {

43 
	`exô
(
SUCCESSFUL_READ
);

45 i‡(
	`APR_STATUS_IS_EAGAIN
(
°©us
)) {

46 
	`exô
(
FAILED_READ
);

48 
	`exô
(
UNEXPECTED_ERROR
);

49 
	}
}

	@threadproc/beos/apr_proc_stub.c

17 
	~<kî√l/OS.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<°dio.h
>

22 
	spùefd
 {

23 
	mö
;

24 
	mout
;

25 
	mîr
;

28 
	$maö
(
¨gc
, *
¨gv
[]) {

36 *
¥og«me
 = 
¨gv
[2];

37 *
dúe˘‹y
 = 
¨gv
[1];

38 
pùefd
 *
pfd
;

39 
thªad_id
 
£ndî
;

40 *
buf„r
;

41 ** 
√w¨gs
;

42 
i
 = 0;

44 
√w¨gs
 = (**)
	`mÆloc
((*Ë* (
¨gc
 - 1));

46 
buf„r
 = (*)
	`mÆloc
((
pùefd
));

48 
	`ª˚ive_d©a
(&
£ndî
, 
buf„r
, (
pùefd
));

49 
pfd
 = (
pùefd
*)
buf„r
;

51 i‡(
pfd
->
ö
 > 
STDERR_FILENO
) {

52 i‡(
	`dup2
(
pfd
->
ö
, 
STDIN_FILENO
) != STDIN_FILENO)  (-1);

53 
	`˛o£
 (
pfd
->
ö
);

55 i‡(
pfd
->
out
 > 
STDERR_FILENO
) {

56 i‡(
	`dup2
(
pfd
->
out
, 
STDOUT_FILENO
) != STDOUT_FILENO)  (-1);

57 
	`˛o£
 (
pfd
->
out
);

59 i‡(
pfd
->
îr
 > 
STDERR_FILENO
) {

60 i‡(
	`dup2
(
pfd
->
îr
, 
STDERR_FILENO
) != STDERR_FILENO)  (-1);

61 
	`˛o£
 (
pfd
->
îr
);

64 
i
=3;i<=
¨gc
;i++){

65 
√w¨gs
[
i
-3] = 
¨gv
[i];

69 
	`£nd_d©a
(
£ndî
,1,
NULL
,0);

71 i‡(
dúe˘‹y
 !
NULL
)

72 
	`chdú
(
dúe˘‹y
);

73 
	`execve
 (
¥og«me
, 
√w¨gs
, 
ívú⁄
);

76 
	}
}

	@threadproc/beos/proc.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_°rögs.h
"

23 
≠r_fûe_t
 
	gno_fûe
 = { 
NULL
, -1, };

25 
	s£nd_pùe
 {

26 
	mö
;

27 
	mout
;

28 
	mîr
;

31 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w
, 
≠r_poﬁ_t
 *
poﬁ
)

33 (*
√w
Ë(
≠r_¥oˇâr_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

34 (
≠r_¥oˇâr_t
));

36 i‡((*
√w
Ë=
NULL
) {

37  
APR_ENOMEM
;

39 (*
√w
)->
poﬁ
 =Öool;

40 (*
√w
)->
∑ª¡_ö
 = 
NULL
;

41 (*
√w
)->
chûd_ö
 = 
NULL
;

42 (*
√w
)->
∑ª¡_out
 = 
NULL
;

43 (*
√w
)->
chûd_out
 = 
NULL
;

44 (*
√w
)->
∑ª¡_îr
 = 
NULL
;

45 (*
√w
)->
chûd_îr
 = 
NULL
;

46 (*
√w
)->
cuºdú
 = 
NULL
;

47 (*
√w
)->
cmdty≥
 = 
APR_PROGRAM
;

48 (*
√w
)->
dëached
 = 0;

49  
APR_SUCCESS
;

50 
	}
}

52 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

53 
≠r_öt32_t
 
ö
,

54 
≠r_öt32_t
 
out
,

55 
≠r_öt32_t
 
îr
)

57 
≠r_°©us_t
 
rv
;

59 i‡((
ö
 !
APR_NO_PIPE
Ë&& (ö !
APR_NO_FILE
)) {

65 i‡(
ö
 =
APR_CHILD_BLOCK
)

66 
ö
 = 
APR_READ_BLOCK
;

67 i‡(
ö
 =
APR_PARENT_BLOCK
)

68 
ö
 = 
APR_WRITE_BLOCK
;

70 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

71 
ö
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

72 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

73 i‡(
rv
 !
APR_SUCCESS
)

74  
rv
;

76 i‡(
ö
 =
APR_NO_FILE
)

77 
©å
->
chûd_ö
 = &
no_fûe
;

79 i‡((
out
 !
APR_NO_PIPE
Ë&& (ouà!
APR_NO_FILE
)) {

80 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

81 
out
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

82 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

83 i‡(
rv
 !
APR_SUCCESS
)

84  
rv
;

86 i‡(
out
 =
APR_NO_FILE
)

87 
©å
->
chûd_out
 = &
no_fûe
;

89 i‡((
îr
 !
APR_NO_PIPE
Ë&& (î∏!
APR_NO_FILE
)) {

90 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

91 
îr
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

92 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

93 i‡(
rv
 !
APR_SUCCESS
)

94  
rv
;

96 i‡(
îr
 =
APR_NO_FILE
)

97 
©å
->
chûd_îr
 = &
no_fûe
;

99  
APR_SUCCESS
;

100 
	}
}

102 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
,

103 c⁄° *
dú
)

105 * 
cwd
;

106 i‡(
dú
[0] != '/') {

107 
cwd
 = (*)
	`mÆloc
((Ë* 
PATH_MAX
);

108 
	`gëcwd
(
cwd
, 
PATH_MAX
);

109 
©å
->
cuºdú
 = (*)
	`≠r_p°rˇt
◊âr->
poﬁ
, 
cwd
, "/", 
dú
, 
NULL
);

110 
	`‰ì
(
cwd
);

112 
©å
->
cuºdú
 = (*)
	`≠r_p°rdup
◊âr->
poﬁ
, 
dú
);

114 i‡(
©å
->
cuºdú
) {

115  
APR_SUCCESS
;

117  
APR_ENOMEM
;

118 
	}
}

120 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

121 
≠r_cmdty≥_e
 
cmd
)

123 
©å
->
cmdty≥
 = 
cmd
;

124  
APR_SUCCESS
;

125 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_öt32_t
 
dëach
)

129 
©å
->
dëached
 = 
dëach
;

130  
APR_SUCCESS
;

131 
	}
}

133 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_f‹k
(
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
poﬁ
)

135 
pid
;

137 i‡((
pid
 = 
	`f‹k
()) < 0) {

138  
î∫o
;

140 i‡(
pid
 == 0) {

154 
¨ó_öfo
 
ai
;

155 
öt32
 
cookõ
 = 0;

156 
¨ó_id
 
highe°
 = 0;

158 
	`gë_√xt_¨ó_öfo
(0, &
cookõ
, &
ai
Ë=
B_OK
)

159 i‡(
ai
.
¨ó
 > 
highe°
)

160 
highe°
 = 
ai
.
¨ó
;

161 
cookõ
 = 0;

162 
	`gë_√xt_¨ó_öfo
(0, &
cookõ
, &
ai
Ë=
B_OK
) {

163 i‡(
ai
.
¨ó
 > 
highe°
)

165 i‡(
ai
.
lock
 > 0) {

166 
¨ó_id
 
‹igöÆ
 = 
	`föd_¨ó
(
ai
.
«me
);

167 
	`dñëe_¨ó
(
ai
.
¨ó
);

168 
	`˛⁄e_¨ó
(
ai
.
«me
, &ai.
addªss
, 
B_CLONE_ADDRESS
,

169 
ai
.
¥Ÿe˘i⁄
, 
‹igöÆ
);

173 
¥oc
->
pid
 =Öid;

174 
¥oc
->
ö
 = 
NULL
;

175 
¥oc
->
out
 = 
NULL
;

176 
¥oc
->
îr
 = 
NULL
;

177  
APR_INCHILD
;

179 
¥oc
->
pid
 =Öid;

180 
¥oc
->
ö
 = 
NULL
;

181 
¥oc
->
out
 = 
NULL
;

182 
¥oc
->
îr
 = 
NULL
;

183  
APR_INPARENT
;

184 
	}
}

186 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

187 
≠r_chûd_îr‚_t
 *
îr‚
)

190  
APR_SUCCESS
;

191 
	}
}

193 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

194 
≠r_öt32_t
 
chk
)

197  
APR_SUCCESS
;

198 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

201 
≠r_öt32_t
 
addr•a˚
)

204  
APR_SUCCESS
;

205 
	}
}

207 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
√w
, c⁄° *
¥og«me
,

208 c⁄° * c⁄° *
¨gs
,

209 c⁄° * c⁄° *
ív
,

210 
≠r_¥oˇâr_t
 *
©å
,

211 
≠r_poﬁ_t
 *
poﬁ
)

213 
i
=0,
«rgs
=0;

214 **
√w¨gs
 = 
NULL
;

215 
thªad_id
 
√w¥oc
, 
£ndî
;

216 
£nd_pùe
 *
•
;

217 * 
dú
 = 
NULL
;

219 
•
 = (
£nd_pùe
 *)
	`≠r_∑Œoc
(
poﬁ
, (send_pipe));

221 
√w
->
ö
 = 
©å
->
∑ª¡_ö
;

222 
√w
->
îr
 = 
©å
->
∑ª¡_îr
;

223 
√w
->
out
 = 
©å
->
∑ª¡_out
;

224 
•
->
ö
 = 
©å
->
chûd_ö
 ?áâr->chûd_ö->
fûedes
 : 
FILENO_STDIN
;

225 
•
->
out
 = 
©å
->
chûd_out
 ?áâr->chûd_out->
fûedes
 : 
FILENO_STDOUT
;

226 
•
->
îr
 = 
©å
->
chûd_îr
 ?áâr->chûd_îr->
fûedes
 : 
FILENO_STDERR
;

228 
i
 = 0;

229 
¨gs
 &&árgs[
i
]) {

230 
i
++;

233 
√w¨gs
 = (**)
	`mÆloc
((*Ë* (
i
 + 4));

234 
√w¨gs
[0] = 
	`°rdup
("/boot/home/config/bin/apr_proc_stub");

235 i‡(
©å
->
cuºdú
 =
NULL
) {

237 
dú
 = 
	`mÆloc
((Ë* 
PATH_MAX
);

238 
	`gëcwd
(
dú
, 
PATH_MAX
);

239 
√w¨gs
[1] = 
	`°rdup
(
dú
);

240 
	`‰ì
(
dú
);

242 
√w¨gs
[1] = 
	`°rdup
(
©å
->
cuºdú
);

244 
√w¨gs
[2] = 
	`°rdup
(
¥og«me
);

245 
i
=0;
«rgs
 = 3;

247 
¨gs
 &&árgs[
i
]) {

248 
√w¨gs
[
«rgs
] = 
	`°rdup
(
¨gs
[
i
]);

249 
i
++;
«rgs
++;

251 
√w¨gs
[
«rgs
] = 
NULL
;

255 
√w¥oc
 = 
	`lﬂd_image
(
«rgs
, (c⁄° **)
√w¨gs
, (c⁄° **)
ív
);

258 --
«rgs
 >= 0)

259 
	`‰ì
 (
√w¨gs
[
«rgs
]);

260 
	`‰ì
(
√w¨gs
);

262 i‡(
√w¥oc
 < 
B_NO_ERROR
) {

263  
î∫o
;

266 
	`ªsume_thªad
(
√w¥oc
);

268 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1)) {

269 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

271 i‡(
©å
->
chûd_out
 && (©å->
chûd_ö
->
fûedes
 != -1)) {

272 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

274 i‡(
©å
->
chûd_îr
 && (©å->
chûd_ö
->
fûedes
 != -1)) {

275 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

278 
	`£nd_d©a
(
√w¥oc
, 0, (*)
•
, (
£nd_pùe
));

279 
√w
->
pid
 = 
√w¥oc
;

284 
	`ª˚ive_d©a
(&
£ndî
, (*)
NULL
,0);

286  
APR_SUCCESS
;

287 
	}
}

289 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

290 *
exôcode
,

291 
≠r_exô_why_e
 *
exôwhy
,

292 
≠r_waô_how_e
 
waôhow
,

293 
≠r_poﬁ_t
 *
p
)

295 
¥oc
->
pid
 = -1;

296  
	`≠r_¥oc_waô
(
¥oc
, 
exôcode
, 
exôwhy
, 
waôhow
);

297 
	}
}

299 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

300 *
exôcode
,

301 
≠r_exô_why_e
 *
exôwhy
,

302 
≠r_waô_how_e
 
waôhow
)

304 
pid_t
 
p°©us
;

305 
waôpid_›ti⁄s
 = 
WUNTRACED
;

306 
exô_öt
;

307 
ign‹e
;

308 
≠r_exô_why_e
 
ign‹ewhy
;

310 i‡(
exôcode
 =
NULL
) {

311 
exôcode
 = &
ign‹e
;

313 i‡(
exôwhy
 =
NULL
) {

314 
exôwhy
 = &
ign‹ewhy
;

317 i‡(
waôhow
 !
APR_WAIT
) {

318 
waôpid_›ti⁄s
 |
WNOHANG
;

321 i‡((
p°©us
 = 
	`waôpid
(
¥oc
->
pid
, &
exô_öt
, 
waôpid_›ti⁄s
)) > 0) {

322 
¥oc
->
pid
 = 
p°©us
;

323 i‡(
	`WIFEXITED
(
exô_öt
)) {

324 *
exôwhy
 = 
APR_PROC_EXIT
;

325 *
exôcode
 = 
	`WEXITSTATUS
(
exô_öt
);

327 i‡(
	`WIFSIGNALED
(
exô_öt
)) {

328 *
exôwhy
 = 
APR_PROC_SIGNAL
;

329 *
exôcode
 = 
	`WTERMSIG
(
exô_öt
);

334  
APR_EGENERAL
;

336  
APR_CHILD_DONE
;

338 i‡(
p°©us
 == 0) {

339  
APR_CHILD_NOTDONE
;

342  
î∫o
;

343 
	}
}

345 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_ö
,

346 
≠r_fûe_t
 *
∑ª¡_ö
)

348 
≠r_°©us_t
 
rv
;

350 i‡(
©å
->
chûd_ö
 =
NULL
 &&áâr->
∑ª¡_ö
 == NULL

351 && 
chûd_ö
 =
NULL
 && 
∑ª¡_ö
 == NULL)

352 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

353 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

354 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

356 i‡(
chûd_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

357 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1))

358 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

360 
©å
->
chûd_ö
 = 
NULL
;

361 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
))

362 =
APR_SUCCESS
)

363 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_ö
);

367 i‡(
∑ª¡_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
)

368 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

370  
rv
;

371 
	}
}

373 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_out
,

374 
≠r_fûe_t
 *
∑ª¡_out
)

376 
≠r_°©us_t
 
rv
;

378 i‡(
©å
->
chûd_out
 =
NULL
 &&áâr->
∑ª¡_out
 == NULL

379 && 
chûd_out
 =
NULL
 && 
∑ª¡_out
 == NULL)

380 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

381 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

382 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

384 i‡(
chûd_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

385 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1))

386 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

388 
©å
->
chûd_out
 = 
NULL
;

389 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
))

390 =
APR_SUCCESS
)

391 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_out
);

395 i‡(
∑ª¡_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
)

396 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

398  
rv
;

399 
	}
}

401 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_îr
,

402 
≠r_fûe_t
 *
∑ª¡_îr
)

404 
≠r_°©us_t
 
rv
;

406 i‡(
©å
->
chûd_îr
 =
NULL
 &&áâr->
∑ª¡_îr
 == NULL

407 && 
chûd_îr
 =
NULL
 && 
∑ª¡_îr
 == NULL)

408 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

409 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

410 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

412 i‡(
chûd_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

413 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1))

414 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

416 
©å
->
chûd_îr
 = 
NULL
;

417 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
))

418 =
APR_SUCCESS
)

419 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_îr
);

423 i‡(
∑ª¡_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
)

424 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

426  
rv
;

427 
	}
}

429 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_limô_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_öt32_t
 
wh©
,

430 *
limô
)

432  
APR_ENOTIMPL
;

433 
	}
}

435 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

436 c⁄° *
u£∫ame
,

437 c⁄° *
∑ssw‹d
)

439  
APR_ENOTIMPL
;

440 
	}
}

442 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

443 c⁄° *
grou≤ame
)

445  
APR_ENOTIMPL
;

446 
	}
}

	@threadproc/beos/thread.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_p‹èbÀ.h
"

20 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w
, 
≠r_poﬁ_t
 *
poﬁ
)

22 (*
√w
Ë(
≠r_thªad©å_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

23 (
≠r_thªad©å_t
));

25 i‡((*
√w
Ë=
NULL
) {

26  
APR_ENOMEM
;

29 (*
√w
)->
poﬁ
 =Öool;

30 (*
√w
)->
©å
 = (
öt32
)
B_NORMAL_PRIORITY
;

32  
APR_SUCCESS
;

33 
	}
}

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
, 
≠r_öt32_t
 
⁄
)

37 i‡(
⁄
 == 1){

38 
©å
->
dëached
 = 1;

40 
©å
->
dëached
 = 0;

42  
APR_SUCCESS
;

43 
	}
}

45 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
)

47 i‡(
©å
->
dëached
 == 1){

48  
APR_DETACH
;

50  
APR_NOTDETACH
;

51 
	}
}

53 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

54 
≠r_size_t
 
°acksize
)

56  
APR_ENOTIMPL
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

60 
≠r_size_t
 
size
)

62  
APR_ENOTIMPL
;

63 
	}
}

65 *
	$dummy_w‹kî
(*
›aque
)

67 
≠r_thªad_t
 *
thd
 = (≠r_thªad_t*)
›aque
;

68  
thd
->
	`func
—hd,Åhd->
d©a
);

69 
	}
}

71 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w
, 
≠r_thªad©å_t
 *
©å
,

72 
≠r_thªad_°¨t_t
 
func
, *
d©a
,

73 
≠r_poﬁ_t
 *
poﬁ
)

75 
öt32
 
ãmp
;

76 
≠r_°©us_t
 
°©
;

78 (*
√w
Ë(
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

79 i‡((*
√w
Ë=
NULL
) {

80  
APR_ENOMEM
;

83 (*
√w
)->
d©a
 = data;

84 (*
√w
)->
func
 = func;

85 (*
√w
)->
exôvÆ
 = -1;

88 i‡(
©å
)

89 
ãmp
 = 
©å
->attr;

91 
ãmp
 = 
B_NORMAL_PRIORITY
;

93 
°©
 = 
	`≠r_poﬁ_¸óã
(&(*
√w
)->
poﬁ
,Öool);

94 i‡(
°©
 !
APR_SUCCESS
) {

95  
°©
;

98 (*
√w
)->
td
 = 
	`•awn_thªad
((
thªad_func
)
dummy_w‹kî
,

100 
ãmp
,

101 (*
√w
));

104 i‡(
	`ªsume_thªad
((*
√w
)->
td
Ë=
B_NO_ERROR
) {

105  
APR_SUCCESS
;

108  
î∫o
;

110 
	}
}

112 
	$APR_DECLARE
(
≠r_os_thªad_t
Ë
	$≠r_os_thªad_cuºít
()

114  
	`föd_thªad
(
NULL
);

115 
	}
}

117 
	$≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,á¥_os_thªad_à
tid2
)

119  
tid1
 =
tid2
;

120 
	}
}

122 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_exô
(
≠r_thªad_t
 *
thd
, 
≠r_°©us_t
 
ªtvÆ
)

124 
	`≠r_poﬁ_de°roy
(
thd
->
poﬁ
);

125 
thd
->
exôvÆ
 = 
ªtvÆ
;

126 
	`exô_thªad
 ((
°©us_t
)(
ªtvÆ
));

128  
APR_SUCCESS
;

129 
	}
}

131 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_joö
(
≠r_°©us_t
 *
ªtvÆ
, 
≠r_thªad_t
 *
thd
)

133 
°©us_t
 
rv
 = 0, 
ªt
;

134 
ªt
 = 
	`waô_f‹_thªad
(
thd
->
td
, &
rv
);

135 i‡(
ªt
 =
B_NO_ERROR
) {

136 *
ªtvÆ
 = 
rv
;

137  
APR_SUCCESS
;

143 i‡(
thd
->
exôvÆ
 != -1) {

144 *
ªtvÆ
 = 
thd
->
exôvÆ
;

145  
APR_SUCCESS
;

147  
ªt
;

149 
	}
}

151 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
)

153 i‡(
	`su•íd_thªad
(
thd
->
td
Ë=
B_NO_ERROR
){

154  
APR_SUCCESS
;

157  
î∫o
;

159 
	}
}

161 
	$≠r_thªad_yõld
()

163 
	}
}

165 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
, 
≠r_thªad_t
 *
thªad
)

167  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªad
->
poﬁ
);

168 
	}
}

170 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

171 
	$≠r_°©us_t
 (*
˛ónup
) (*),

172 
≠r_thªad_t
 *
thªad
)

174  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªad
->
poﬁ
);

175 
	}
}

177 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
, 
≠r_thªad_t
 *
thd
)

179 *
thëhd
 = &
thd
->
td
;

180  
APR_SUCCESS
;

181 
	}
}

183 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
, 
≠r_os_thªad_t
 *
thëhd
,

184 
≠r_poﬁ_t
 *
poﬁ
)

186 i‡(
poﬁ
 =
NULL
) {

187  
APR_ENOPOOL
;

189 i‡((*
thd
Ë=
NULL
) {

190 (*
thd
Ë(
≠r_thªad_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_t));

191 (*
thd
)->
poﬁ
 =Öool;

193 (*
thd
)->
td
 = *
thëhd
;

194  
APR_SUCCESS
;

195 
	}
}

197 
≠r_°©us_t
 
	$thªad_⁄˚_˛ónup
(*
vc⁄åﬁ
)

199 
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
 = (≠r_thªad_⁄˚_à*)
vc⁄åﬁ
;

201 i‡(
c⁄åﬁ
->
£m
) {

202 
	`ªÀa£_£m
(
c⁄åﬁ
->
£m
);

203 
	`dñëe_£m
(
c⁄åﬁ
->
£m
);

206  
APR_SUCCESS
;

207 
	}
}

209 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

210 
≠r_poﬁ_t
 *
p
)

212 
rc
;

213 *
c⁄åﬁ
 = (
≠r_thªad_⁄˚_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_thread_once_t));

214 (*
c⁄åﬁ
)->
hô
 = 0;

215 
rc
 = ((*
c⁄åﬁ
)->
£m
 = 
	`¸óã_£m
(1, "thread_once"));

216 i‡(
rc
 < 0)

217  
rc
;

219 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
c⁄åﬁ
, 
thªad_⁄˚_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

220  
APR_SUCCESS
;

221 
	}
}

225 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

226 (*
func
)())

228 i‡(!
c⁄åﬁ
->
hô
) {

229 i‡(
	`acquúe_£m
(
c⁄åﬁ
->
£m
Ë=
B_OK
) {

230 
c⁄åﬁ
->
hô
 = 1;

231 
	`func
();

234  
APR_SUCCESS
;

235 
	}
}

237 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad
)

	@threadproc/beos/threadpriv.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

19 
beos_key
 
	gkey_èbÀ
[
BEOS_MAX_DATAKEYS
];

20 
beos_¥iv©e_d©a
 *
	gbeos_d©a
[
BEOS_MAX_DATAKEYS
];

21 
£m_id
 
	glock
;

23 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

24 (*
de°
)(*), 
≠r_poﬁ_t
 *
poﬁ
)

26 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

27 i‡((*
key
Ë=
NULL
) {

28  
APR_ENOMEM
;

31 (*
key
)->
poﬁ
 =Öool;

33 
	`acquúe_£m
(
lock
);

34 (*
key
)->key=0; (*key)->key < 
BEOS_MAX_DATAKEYS
; (*key)->key++){

35 i‡(
key_èbÀ
[(*
key
)->key].
assig√d
 == 0){

36 
key_èbÀ
[(*
key
)->key].
assig√d
 = 1;

37 
key_èbÀ
[(*
key
)->key].
de°ru˘‹
 = 
de°
;

38 
	`ªÀa£_£m
(
lock
);

39  
APR_SUCCESS
;

43 
	`ªÀa£_£m
(
lock
);

44  
APR_ENOMEM
;

45 
	}
}

47 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_gë
(**
√w
, 
≠r_thªadkey_t
 *
key
)

49 
thªad_id
 
tid
;

50 
i
, 
ödex
=0;

51 
tid
 = 
	`föd_thªad
(
NULL
);

52 
i
=0;i<
BEOS_MAX_DATAKEYS
;i++){

53 i‡(
beos_d©a
[
i
]->
d©a
){

55 i‡(
beos_d©a
[
i
]->
td
 =
tid
){

56 
ödex
 = 
i
;

60 i‡(
ödex
 == 0){

62  
APR_ENOMEM
;

65 i‡((
key
->key < 
BEOS_MAX_DATAKEYS
Ë&& (
key_èbÀ
)){

66 
	`acquúe_£m
(
key_èbÀ
[
key
->key].
lock
);

67 i‡(
key_èbÀ
[
key
->key].
cou¡
){

68 (*
√w
Ë(*)
beos_d©a
[
ödex
]->
d©a
[
key
->key];

70 (*
√w
Ë
NULL
;

72 
	`ªÀa£_£m
(
key_èbÀ
[
key
->key].
lock
);

74 (*
√w
Ë
NULL
;

76  
APR_SUCCESS
;

77 
	}
}

79 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_£t
(*
¥iv
, 
≠r_thªadkey_t
 *
key
)

81 
thªad_id
 
tid
;

82 
i
,
ödex
 = 0, 
ªt
 = 0;

84 
tid
 = 
	`föd_thªad
(
NULL
);

85 
i
=0; i < 
BEOS_MAX_DATAKEYS
; i++){

86 i‡(
beos_d©a
[
i
]->
d©a
){

87 i‡(
beos_d©a
[
i
]->
td
 =
tid
){
ödex
 = i;}

90 i‡(
ödex
==0){

92 
i
=0; i< 
BEOS_MAX_DATAKEYS
; i++){

93 i‡(! 
beos_d©a
[
i
]->
d©a
){

95 
ödex
 = 
i
;

96 
beos_d©a
[
i
]->
d©a
 = (c⁄° **)
	`mÆloc
((*Ë* 
BEOS_MAX_DATAKEYS
);

97 
	`mem£t
((*)
beos_d©a
[
i
]->
d©a
, 0, (*Ë* 
BEOS_MAX_DATAKEYS
);

98 
beos_d©a
[
i
]->
cou¡
 = ()
	`mÆloc
(());

99 
beos_d©a
[
i
]->
td
 = (
thªad_id
)
	`mÆloc
((thread_id));

100 
beos_d©a
[
i
]->
td
 = 
tid
;

104 i‡(
ödex
 == 0){

106  
APR_ENOMEM
;

108 i‡((
key
->key < 
BEOS_MAX_DATAKEYS
Ë&& (
key_èbÀ
)){

109 
	`acquúe_£m
(
key_èbÀ
[
key
->key].
lock
);

110 i‡(
key_èbÀ
[
key
->key].
cou¡
){

111 i‡(
beos_d©a
[
ödex
]->
d©a
[
key
->key] =
NULL
){

112 i‡(
¥iv
 !
NULL
){

113 
beos_d©a
[
ödex
]->
cou¡
++;

114 
key_èbÀ
[
key
->key].
cou¡
++;

117 i‡(
¥iv
 =
NULL
){

118 
beos_d©a
[
ödex
]->
cou¡
--;

119 
key_èbÀ
[
key
->key].
cou¡
--;

122 
beos_d©a
[
ödex
]->
d©a
[
key
->key] = 
¥iv
;

123 
ªt
 = 1;

125 
ªt
 = 0;

127 
	`ªÀa£_£m
(
key_èbÀ
[
key
->key].
lock
);

129 i‡(
ªt
)

130  
APR_SUCCESS
;

131  
APR_ENOMEM
;

132 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
)

136 i‡(
key
->key < 
BEOS_MAX_DATAKEYS
){

137 
	`acquúe_£m
(
key_èbÀ
[
key
->key].
lock
);

138 i‡(
key_èbÀ
[
key
->key].
cou¡
 == 1){

139 
key_èbÀ
[
key
->key].
de°ru˘‹
 = 
NULL
;

140 
key_èbÀ
[
key
->key].
cou¡
 = 0;

142 
	`ªÀa£_£m
(
key_èbÀ
[
key
->key].
lock
);

144  
APR_ENOMEM
;

146  
APR_SUCCESS
;

147 
	}
}

149 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
,

150 
≠r_thªadkey_t
 *
thªadkey
)

152  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªadkey
->
poﬁ
);

153 
	}
}

155 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_d©a_£t
(*
d©a
, c⁄° *
key
,

156 
	$≠r_°©us_t
 (*
˛ónup
) (*),

157 
≠r_thªadkey_t
 *
thªadkey
)

159  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªadkey
->
poﬁ
);

160 
	}
}

162 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
, 
≠r_thªadkey_t
 *
key
)

164 *
thekey
 = 
key
->key;

165  
APR_SUCCESS
;

166 
	}
}

168 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

169 
≠r_os_thªadkey_t
 *
thekey
, 
≠r_poﬁ_t
 *
poﬁ
)

171 i‡(
poﬁ
 =
NULL
) {

172  
APR_ENOPOOL
;

174 i‡((*
key
Ë=
NULL
) {

175 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_threadkey_t));

176 (*
key
)->
poﬁ
 =Öool;

178 (*
key
)->key = *
thekey
;

179  
APR_SUCCESS
;

180 
	}
}

	@threadproc/beos/threadproc_common.c

19 
	~"../unix/sig«ls.c
"

20 
	~"../unix/¥ocsup.c
"

	@threadproc/netware/proc.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_p‹èbÀ.h
"

22 
	~<¥oc.h
>

27 
≠r_fûe_t
 
	gno_fûe
 = { 
NULL
, -1, };

29 
≠r_°©us_t
 
	$≠r_√tw¨e_¥oc_˛ónup
(*
thïroc
)

31 
≠r_¥oc_t
 *
¥oc
 = 
thïroc
;

32 
exô_öt
;

33 
waôpid_›ti⁄s
 = 
WUNTRACED
 | 
WNOHANG
;

35 i‡(
¥oc
->
pid
 > 0) {

36 
	`waôpid
(
¥oc
->
pid
, &
exô_öt
, 
waôpid_›ti⁄s
);

40  
APR_SUCCESS
;

41 
	}
}

43 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w
,
≠r_poﬁ_t
 *
poﬁ
)

45 (*
√w
Ë(
≠r_¥oˇâr_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_procattr_t));

47 i‡((*
√w
Ë=
NULL
) {

48  
APR_ENOMEM
;

50 (*
√w
)->
poﬁ
 =Öool;

51 (*
√w
)->
cmdty≥
 = 
APR_PROGRAM
;

53 
	`≠r_fûï©h_gë
(&((*
√w
)->
cuºdú
), 
APR_FILEPATH_NATIVE
, 
poﬁ
);

54 (*
√w
)->
dëached
 = 1;

55  
APR_SUCCESS
;

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

60 
≠r_öt32_t
 
ö
,

61 
≠r_öt32_t
 
out
,

62 
≠r_öt32_t
 
îr
)

64 
≠r_°©us_t
 
rv
;

66 i‡((
ö
 !
APR_NO_PIPE
Ë&& (ö !
APR_NO_FILE
)) {

72 i‡(
ö
 =
APR_CHILD_BLOCK
)

73 
ö
 = 
APR_READ_BLOCK
;

74 i‡(
ö
 =
APR_PARENT_BLOCK
)

75 
ö
 = 
APR_WRITE_BLOCK
;

77 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

78 
ö
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

79 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

80 i‡(
rv
 !
APR_SUCCESS
)

81  
rv
;

83 i‡(
ö
 =
APR_NO_FILE
)

84 
©å
->
chûd_ö
 = &
no_fûe
;

86 i‡((
out
 !
APR_NO_PIPE
Ë&& (ouà!
APR_NO_FILE
)) {

87 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

88 
out
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

89 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

90 i‡(
rv
 !
APR_SUCCESS
)

91  
rv
;

93 i‡(
out
 =
APR_NO_FILE
)

94 
©å
->
chûd_out
 = &
no_fûe
;

96 i‡((
îr
 !
APR_NO_PIPE
Ë&& (î∏!
APR_NO_FILE
)) {

97 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

98 
îr
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

99 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

100 i‡(
rv
 !
APR_SUCCESS
)

101  
rv
;

103 i‡(
îr
 =
APR_NO_FILE
)

104 
©å
->
chûd_îr
 = &
no_fûe
;

106  
APR_SUCCESS
;

107 
	}
}

110 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_ö
,

111 
≠r_fûe_t
 *
∑ª¡_ö
)

113 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

115 i‡(
©å
->
chûd_ö
 =
NULL
 &&áâr->
∑ª¡_ö
 == NULL

116 && 
chûd_ö
 =
NULL
 && 
∑ª¡_ö
 == NULL)

117 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

118 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

119 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

121 i‡(
chûd_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

122 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1))

123 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

125 
©å
->
chûd_ö
 = 
NULL
;

126 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
))

127 =
APR_SUCCESS
)

128 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_ö
);

132 i‡(
∑ª¡_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

133 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

136  
rv
;

137 
	}
}

140 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_out
,

141 
≠r_fûe_t
 *
∑ª¡_out
)

143 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

145 i‡(
©å
->
chûd_out
 =
NULL
 &&áâr->
∑ª¡_out
 == NULL

146 && 
chûd_out
 =
NULL
 && 
∑ª¡_out
 == NULL)

147 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

148 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

149 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

151 i‡(
chûd_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

152 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1))

153 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

155 
©å
->
chûd_out
 = 
NULL
;

156 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
))

157 =
APR_SUCCESS
)

158 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_out
);

162 i‡(
∑ª¡_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

163 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

166  
rv
;

167 
	}
}

170 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_îr
,

171 
≠r_fûe_t
 *
∑ª¡_îr
)

173 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

175 i‡(
©å
->
chûd_îr
 =
NULL
 &&áâr->
∑ª¡_îr
 == NULL

176 && 
chûd_îr
 =
NULL
 && 
∑ª¡_îr
 == NULL)

177 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

178 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

179 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

181 i‡(
chûd_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

182 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1))

183 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

185 
©å
->
chûd_îr
 = 
NULL
;

186 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
))

187 =
APR_SUCCESS
)

188 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_îr
);

192 i‡(
∑ª¡_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

193 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

196  
rv
;

197 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
,

201 c⁄° *
dú
)

203  
	`≠r_fûï©h_mîge
(&
©å
->
cuºdú
, 
NULL
, 
dú
,

204 
APR_FILEPATH_NATIVE
, 
©å
->
poﬁ
);

205 
	}
}

207 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

208 
≠r_cmdty≥_e
 
cmd
)

211  
APR_SUCCESS
;

212 
	}
}

214 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_öt32_t
 
dëach
)

216 
©å
->
dëached
 = 
dëach
;

217  
APR_SUCCESS
;

218 
	}
}

220 #i‡
APR_HAS_FORK


221 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_f‹k
(
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
poﬁ
)

223 
pid
;

225 i‡((
pid
 = 
	`f‹k
()) < 0) {

226  
î∫o
;

228 i‡(
pid
 == 0) {

229 
¥oc
->
pid
 =Öid;

230 
¥oc
->
ö
 = 
NULL
;

231 
¥oc
->
out
 = 
NULL
;

232 
¥oc
->
îr
 = 
NULL
;

233  
APR_INCHILD
;

235 
¥oc
->
pid
 =Öid;

236 
¥oc
->
ö
 = 
NULL
;

237 
¥oc
->
out
 = 
NULL
;

238 
¥oc
->
îr
 = 
NULL
;

239  
APR_INPARENT
;

240 
	}
}

243 
≠r_°©us_t
 
	$limô_¥oc
(
≠r_¥oˇâr_t
 *
©å
)

245 #i‡
APR_HAVE_STRUCT_RLIMIT
 && 
APR_HAVE_SETRLIMIT


246 #ifde‡
RLIMIT_CPU


247 i‡(
©å
->
limô_˝u
 !
NULL
) {

248 i‡((
	`£ålimô
(
RLIMIT_CPU
, 
©å
->
limô_˝u
)) != 0) {

249  
î∫o
;

253 #ifde‡
RLIMIT_NPROC


254 i‡(
©å
->
limô_≈roc
 !
NULL
) {

255 i‡((
	`£ålimô
(
RLIMIT_NPROC
, 
©å
->
limô_≈roc
)) != 0) {

256  
î∫o
;

260 #i‡
	`deföed
(
RLIMIT_AS
)

261 i‡(
©å
->
limô_mem
 !
NULL
) {

262 i‡((
	`£ålimô
(
RLIMIT_AS
, 
©å
->
limô_mem
)) != 0) {

263  
î∫o
;

266 #ñi‡
	`deföed
(
RLIMIT_DATA
)

267 i‡(
©å
->
limô_mem
 !
NULL
) {

268 i‡((
	`£ålimô
(
RLIMIT_DATA
, 
©å
->
limô_mem
)) != 0) {

269  
î∫o
;

272 #ñi‡
	`deföed
(
RLIMIT_VMEM
)

273 i‡(
©å
->
limô_mem
 !
NULL
) {

274 i‡((
	`£ålimô
(
RLIMIT_VMEM
, 
©å
->
limô_mem
)) != 0) {

275  
î∫o
;

285  
APR_SUCCESS
;

286 
	}
}

288 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

289 
≠r_chûd_îr‚_t
 *
îr‚
)

292  
APR_SUCCESS
;

293 
	}
}

295 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

296 
≠r_öt32_t
 
chk
)

299  
APR_SUCCESS
;

300 
	}
}

302 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

303 
≠r_öt32_t
 
addr•a˚
)

305 
©å
->
addr•a˚
 =áddrspace;

306  
APR_SUCCESS
;

307 
	}
}

309 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
√w¥oc
,

310 c⁄° *
¥og«me
,

311 c⁄° * c⁄° *
¨gs
,

312 c⁄° * c⁄° *
ív
,

313 
≠r_¥oˇâr_t
 *
©å
,

314 
≠r_poﬁ_t
 *
poﬁ
)

316 
wúög_t
 
wúe
;

317 
addr_•a˚
;

319 
wúe
.
öfd
 = 
©å
->
chûd_ö


320 ? (
©å
->
chûd_ö
->
fûedes
 != -1 ?áttr->child_in->filedes

321 : 
FD_UNUSED
)

322 : 
	`fûío
(
°dö
);

323 
wúe
.
outfd
 = 
©å
->
chûd_out


324 ? (
©å
->
chûd_out
->
fûedes
 != -1 ?áttr->child_out->filedes

325 : 
FD_UNUSED
)

326 : 
	`fûío
(
°dout
);

327 
wúe
.
îrfd
 = 
©å
->
chûd_îr


328 ? (
©å
->
chûd_îr
->
fûedes
 != -1 ?áttr->child_err->filedes

329 : 
FD_UNUSED
)

330 : 
	`fûío
(
°dîr
);

332 
√w¥oc
->
ö
 = 
©å
->
∑ª¡_ö
;

333 
√w¥oc
->
out
 = 
©å
->
∑ª¡_out
;

334 
√w¥oc
->
îr
 = 
©å
->
∑ª¡_îr
;

339 
addr_•a˚
 = 
PROC_LOAD_SILENT
 | (
©å
->
addr•a˚
 ? 0 : 
PROC_CURRENT_SPACE
);

340 
addr_•a˚
 |(
©å
->
dëached
 ? 
PROC_DETACHED
 : 0);

342 i‡(
©å
->
cuºdú
) {

343 *
fuŒ∑th
 = 
NULL
;

344 
≠r_°©us_t
 
rv
;

346 i‡((
rv
 = 
	`≠r_fûï©h_mîge
(&
fuŒ∑th
, 
©å
->
cuºdú
, 
¥og«me
,

347 
APR_FILEPATH_NATIVE
, 
poﬁ
)Ë!
APR_SUCCESS
) {

348  
rv
;

350 
¥og«me
 = 
fuŒ∑th
;

353 i‡((
√w¥oc
->
pid
 = 
	`¥ocve
(
¥og«me
, 
addr_•a˚
, (c⁄° **)
ív
, &
wúe
,

354 
NULL
, NULL, 0, NULL, (c⁄° **)
¨gs
)) == -1) {

355  
î∫o
;

358 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1)) {

359 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_ö
),

360 
©å
->
chûd_ö
, 
≠r_unix_fûe_˛ónup
);

361 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

363 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1)) {

364 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_out
),

365 
©å
->
chûd_out
, 
≠r_unix_fûe_˛ónup
);

366 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

368 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1)) {

369 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_îr
),

370 
©å
->
chûd_îr
, 
≠r_unix_fûe_˛ónup
);

371 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

374 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, (*)
√w¥oc
, 
≠r_√tw¨e_¥oc_˛ónup
,

375 
≠r_poﬁ_˛ónup_nuŒ
);

377  
APR_SUCCESS
;

378 
	}
}

380 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

381 *
exôcode
,

382 
≠r_exô_why_e
 *
exôwhy
,

383 
≠r_waô_how_e
 
waôhow
,

384 
≠r_poﬁ_t
 *
p
)

386 
¥oc
->
pid
 = -1;

387  
	`≠r_¥oc_waô
(
¥oc
, 
exôcode
, 
exôwhy
, 
waôhow
);

388 
	}
}

390 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

391 *
exôcode
, 
≠r_exô_why_e
 *
exôwhy
,

392 
≠r_waô_how_e
 
waôhow
)

394 
pid_t
 
p°©us
;

395 
waôpid_›ti⁄s
 = 
WUNTRACED
;

396 
exô_öt
;

397 
ign‹e
;

398 
≠r_exô_why_e
 
ign‹ewhy
;

400 i‡(
exôcode
 =
NULL
) {

401 
exôcode
 = &
ign‹e
;

404 i‡(
exôwhy
 =
NULL
) {

405 
exôwhy
 = &
ign‹ewhy
;

408 i‡(
waôhow
 !
APR_WAIT
) {

409 
waôpid_›ti⁄s
 |
WNOHANG
;

420 i‡(
¥oc
->
pid
 == 0) {

421 *
exôwhy
 = 
APR_PROC_EXIT
;

422 *
exôcode
 = 0;

423  
APR_CHILD_DONE
;

426 i‡((
p°©us
 = 
	`waôpid
(
¥oc
->
pid
, &
exô_öt
, 
waôpid_›ti⁄s
)) > 0) {

427 
¥oc
->
pid
 = 
p°©us
;

429 i‡(
	`WIFEXITED
(
exô_öt
)) {

430 *
exôwhy
 = 
APR_PROC_EXIT
;

431 *
exôcode
 = 
	`WEXITSTATUS
(
exô_öt
);

433 i‡(
	`WIFSIGNALED
(
exô_öt
)) {

434 *
exôwhy
 = 
APR_PROC_SIGNAL
;

435 *
exôcode
 = 
	`WIFTERMSIG
(
exô_öt
);

439  
APR_EGENERAL
;

442  
APR_CHILD_DONE
;

444 i‡(
p°©us
 == 0) {

445  
APR_CHILD_NOTDONE
;

448  
î∫o
;

449 
	}
}

451 #i‡
APR_HAVE_STRUCT_RLIMIT


452 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_limô_£t
(
≠r_¥oˇâr_t
 *
©å
,

453 
≠r_öt32_t
 
wh©
,

454 
æimô
 *
limô
)

456 
wh©
) {

457 
APR_LIMIT_CPU
:

458 #ifde‡
RLIMIT_CPU


459 
©å
->
limô_˝u
 = 
limô
;

462  
APR_ENOTIMPL
;

465 
APR_LIMIT_MEM
:

466 #i‡
	`deföed
(
RLIMIT_DATA
Ë|| deföed(
RLIMIT_VMEM
Ë|| deföed(
RLIMIT_AS
)

467 
©å
->
limô_mem
 = 
limô
;

470  
APR_ENOTIMPL
;

473 
APR_LIMIT_NPROC
:

474 #ifde‡
RLIMIT_NPROC


475 
©å
->
limô_≈roc
 = 
limô
;

478  
APR_ENOTIMPL
;

481 
APR_LIMIT_NOFILE
:

482 #ifde‡
RLIMIT_NOFILE


483 
©å
->
limô_nofûe
 = 
limô
;

486  
APR_ENOTIMPL
;

490  
APR_SUCCESS
;

491 
	}
}

494 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

495 c⁄° *
u£∫ame
,

496 c⁄° *
∑ssw‹d
)

499  
APR_SUCCESS
;

500 
	}
}

502 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

503 c⁄° *
grou≤ame
)

506  
APR_SUCCESS
;

507 
	}
}

	@threadproc/netware/procsup.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

19 
≠r_°©us_t
 
	$≠r_¥oc_dëach
(
d´m⁄ize
)

22 
x
;

23 
pid_t
 
pgΩ
;

25 
	`chdú
("/");

26 #i‡!
	`deföed
(
MPE
Ë&& !deföed(
OS2
Ë&& !deföed(
TPF
Ë&& !deföed(
BEOS
)

29 i‡((
x
 = 
	`f‹k
()) > 0)

30 
	`exô
(0);

31 i‡(
x
 == -1) {

32 
	`≥º‹
("fork");

33 
	`Ârötf
(
°dîr
, "unableÅo forkÇewÖrocess\n");

34 
	`exô
(1);

38 #i‡
APR_HAVE_SETSID


39 i‡((
pgΩ
 = 
	`£tsid
()) == -1) {

40  
î∫o
;

42 #ñi‡
	`deföed
(
NEXT
Ë|| deföed(
NEWSOS
)

43 i‡(
	`£çgΩ
(0, 
	`gëpid
()Ë=-1 || (
pgΩ
 = 
	`gëpgΩ
(0)) == -1) {

44  
î∫o
;

46 #ñi‡
	`deföed
(
OS2
Ë|| deföed(
TPF
)

48 
pgΩ
 = 
	`gëpid
();

49 #ñi‡
	`deföed
(
MPE
)

51 
pgΩ
 = -
	`gëpid
();

53 i‡((
pgΩ
 = 
	`£çgid
(0, 0)) == -1) {

54  
î∫o
;

59 i‡(
	`‰e›í
("/dev/nuŒ", "r", 
°dö
Ë=
NULL
) {

60  
î∫o
;

67 i‡(
	`‰e›í
("/dev/nuŒ", "w", 
°dout
Ë=
NULL
) {

68  
î∫o
;

74 i‡(
	`‰e›í
("/dev/nuŒ", "w", 
°dîr
Ë=
NULL
) {

75  
î∫o
;

78  
APR_SUCCESS
;

79 
	}
}

82 #i‡(!
HAVE_WAITPID
)

88 
	$waôpid
(
pid_t
 
pid
, *
°©u•
, 
›ti⁄s
)

90 
tmp_pid
;

91 i‡(
	`kûl
(
pid
, 0) == -1) {

92 
î∫o
 = 
ECHILD
;

95 ((
tmp_pid
 = 
	`waô3
(
°©u•
, 
›ti⁄s
, 0)Ë!
pid
) &&

96 (
tmp_pid
 !-1Ë&& (tmp_pid !0Ë&& (
pid
 != -1))

98  
tmp_pid
;

99 
	}
}

	@threadproc/netware/signals.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_¥iv©e.h
"

19 
	~"≠r_poﬁs.h
"

20 
	~"≠r_sig«l.h
"

21 
	~"≠r_°rögs.h
"

23 
	~<as£π.h
>

24 #i‡
APR_HAS_THREADS
 && 
APR_HAVE_PTHREAD_H


25 
	~<±hªad.h
>

28 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_kûl
(
≠r_¥oc_t
 *
¥oc
, 
signum
)

30  
APR_ENOTIMPL
;

31 
	}
}

34 
	$≠r_sig«l_öô
(
≠r_poﬁ_t
 *
pglobÆ
)

36 
	}
}

38 c⁄° *
	$≠r_sig«l_des¸ùti⁄_gë
(
signum
)

40 
signum
)

42 
SIGABRT
:

44 
SIGFPE
:

46 
SIGILL
:

48 
SIGINT
:

50 
SIGSEGV
:

52 
SIGTERM
:

54 
SIGPOLL
:

59 
	}
}

61 *
	$sig«l_thªad_func
(*
sig«l_h™dÀr
)

63  
NULL
;

64 
	}
}

66 #i‡(
APR_HAVE_SIGWAIT
 || 
APR_HAVE_SIGSUSPEND
)

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_£tup_sig«l_thªad
()

70 
	}
}

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_block
(
signum
)

75  
APR_ENOTIMPL
;

76 
	}
}

78 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_unblock
(
signum
)

80  
APR_ENOTIMPL
;

81 
	}
}

	@threadproc/netware/thread.c

17 
	~"≠r.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_°rögs.h
"

20 
	~"≠r_¨ch_thªad¥oc.h
"

22 
	gthªad_cou¡
 = 0;

24 
≠r_°©us_t
 
	$≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w
,

25 
≠r_poﬁ_t
 *
poﬁ
)

27 (*
√w
Ë(
≠r_thªad©å_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

28 (
≠r_thªad©å_t
));

30 i‡((*
√w
Ë=
NULL
) {

31  
APR_ENOMEM
;

34 (*
√w
)->
poﬁ
 =Öool;

35 (*
√w
)->
°ack_size
 = 
APR_DEFAULT_STACK_SIZE
;

36 (*
√w
)->
dëach
 = 0;

37 (*
√w
)->
thªad_«me
 = 
NULL
;

38  
APR_SUCCESS
;

39 
	}
}

41 
≠r_°©us_t
 
	$≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
,
≠r_öt32_t
 
⁄
)

43 
©å
->
dëach
 = 
⁄
;

44  
APR_SUCCESS
;

45 
	}
}

47 
≠r_°©us_t
 
	$≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
)

49 i‡(
©å
->
dëach
 == 1)

50  
APR_DETACH
;

51  
APR_NOTDETACH
;

52 
	}
}

54 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

55 
≠r_size_t
 
°acksize
)

57 
©å
->
°ack_size
 = 
°acksize
;

58  
APR_SUCCESS
;

59 
	}
}

61 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

62 
≠r_size_t
 
size
)

64  
APR_ENOTIMPL
;

65 
	}
}

67 *
	$dummy_w‹kî
(*
›aque
)

69 
≠r_thªad_t
 *
thd
 = (≠r_thªad_à*)
›aque
;

70  
thd
->
	`func
—hd,Åhd->
d©a
);

71 
	}
}

73 
≠r_°©us_t
 
	$≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w
,

74 
≠r_thªad©å_t
 *
©å
,

75 
≠r_thªad_°¨t_t
 
func
,

76 *
d©a
,

77 
≠r_poﬁ_t
 *
poﬁ
)

79 
≠r_°©us_t
 
°©
;

80 
Êags
 = 
NX_THR_BIND_CONTEXT
;

81 
thªadName
[
NX_MAX_OBJECT_NAME_LEN
+1];

82 
size_t
 
°ack_size
 = 
APR_DEFAULT_STACK_SIZE
;

84 i‡(
©å
 &&áâr->
thªad_«me
) {

85 
	`°∫˝y
 (
thªadName
, 
©å
->
thªad_«me
, 
NX_MAX_OBJECT_NAME_LEN
);

88 
	`•rötf
(
thªadName
, "APR_thªad %04ld", ++
thªad_cou¡
);

96 i‡(
©å
 && (©å->
°ack_size
 >= 0)) {

97 
°ack_size
 = 
©å
->stack_size;

100 (*
√w
Ë(
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

102 i‡((*
√w
Ë=
NULL
) {

103  
APR_ENOMEM
;

106 (*
√w
)->
d©a
 = data;

107 (*
√w
)->
func
 = func;

108 (*
√w
)->
thªad_«me
 = (*)
	`≠r_p°rdup
(
poﬁ
, 
thªadName
);

110 
°©
 = 
	`≠r_poﬁ_¸óã
(&(*
√w
)->
poﬁ
,Öool);

111 i‡(
°©
 !
APR_SUCCESS
) {

112  
°©
;

115 i‡(
©å
 &&áâr->
dëach
) {

116 
Êags
 |
NX_THR_DETACHED
;

119 (*
√w
)->
˘x
 = 
	`NXC⁄ãxtAŒoc
(

120  ((*)(*)Ë
dummy_w‹kî
,

121  (*
√w
),

122  
NX_PRIO_MED
,

123  
°ack_size
,

124  
NX_CTX_NORMAL
,

125  &
°©
);

127 
°©
 = 
	`NXC⁄ãxtSëName
(

128  (*
√w
)->
˘x
,

129  
thªadName
);

131 
°©
 = 
	`NXThªadCª©e
(

132  (*
√w
)->
˘x
,

133  
Êags
,

134  &(*
√w
)->
td
);

136 i‡(
°©
 == 0)

137  
APR_SUCCESS
;

139 (
°©
);

140 
	}
}

142 
≠r_os_thªad_t
 
	$≠r_os_thªad_cuºít
()

144  
	`NXThªadGëId
();

145 
	}
}

147 
	$≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,á¥_os_thªad_à
tid2
)

149  (
tid1
 =
tid2
);

150 
	}
}

152 
	$≠r_thªad_yõld
()

154 
	`NXThªadYõld
();

155 
	}
}

157 
≠r_°©us_t
 
	$≠r_thªad_exô
(
≠r_thªad_t
 *
thd
,

158 
≠r_°©us_t
 
ªtvÆ
)

160 
thd
->
exôvÆ
 = 
ªtvÆ
;

161 
	`≠r_poﬁ_de°roy
(
thd
->
poﬁ
);

162 
	`NXThªadExô
(
NULL
);

163  
APR_SUCCESS
;

164 
	}
}

166 
≠r_°©us_t
 
	$≠r_thªad_joö
(
≠r_°©us_t
 *
ªtvÆ
,

167 
≠r_thªad_t
 *
thd
)

169 
≠r_°©us_t
 
°©
;

170 
NXThªadId_t
 
dthr
;

172 i‡((
°©
 = 
	`NXThªadJoö
(
thd
->
td
, &
dthr
, 
NULL
)) == 0) {

173 *
ªtvÆ
 = 
thd
->
exôvÆ
;

174  
APR_SUCCESS
;

177  
°©
;

179 
	}
}

181 
≠r_°©us_t
 
	$≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
)

183  
APR_SUCCESS
;

184 
	}
}

186 
≠r_°©us_t
 
	$≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
,

187 
≠r_thªad_t
 *
thªad
)

189 i‡(
thªad
 !
NULL
) {

190  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªad
->
poﬁ
);

193 
d©a
 = 
NULL
;

194  
APR_ENOTHREAD
;

196 
	}
}

198 
≠r_°©us_t
 
≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

199 
	$≠r_°©us_t
 (*
˛ónup
) (*),

200 
≠r_thªad_t
 *
thªad
)

202 i‡(
thªad
 !
NULL
) {

203  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªad
->
poﬁ
);

206 
d©a
 = 
NULL
;

207  
APR_ENOTHREAD
;

209 
	}
}

211 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
,

212 
≠r_thªad_t
 *
thd
)

214 i‡(
thd
 =
NULL
) {

215  
APR_ENOTHREAD
;

217 *
thëhd
 = &(
thd
->
td
);

218  
APR_SUCCESS
;

219 
	}
}

221 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
,

222 
≠r_os_thªad_t
 *
thëhd
,

223 
≠r_poﬁ_t
 *
poﬁ
)

225 i‡(
poﬁ
 =
NULL
) {

226  
APR_ENOPOOL
;

228 i‡((*
thd
Ë=
NULL
) {

229 (*
thd
Ë(
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

230 (*
thd
)->
poﬁ
 =Öool;

232 (*
thd
)->
td
 = *
thëhd
;

233  
APR_SUCCESS
;

234 
	}
}

236 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

237 
≠r_poﬁ_t
 *
p
)

239 (*
c⁄åﬁ
Ë
	`≠r_pˇŒoc
(
p
, (**control));

240  
APR_SUCCESS
;

241 
	}
}

243 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

244 (*
func
)())

246 i‡(!
	`©omic_xchg
(&
c⁄åﬁ
->
vÆue
, 1)) {

247 
	`func
();

249  
APR_SUCCESS
;

250 
	}
}

252 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad
)

	@threadproc/netware/threadpriv.c

17 
	~"≠r_p‹èbÀ.h
"

18 
	~"≠r_¨ch_thªad¥oc.h
"

20 
≠r_°©us_t
 
≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

21 (*
de°
)(*), 
≠r_poﬁ_t
 *
poﬁ
)

23 
≠r_°©us_t
 
°©
;

25 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

26 i‡((*
key
Ë=
NULL
) {

27  
APR_ENOMEM
;

30 (*
key
)->
poﬁ
 =Öool;

32 i‡((
°©
 = 
	`NXKeyCª©e
(
NULL
, 
de°
, &(*
key
)->key)) == 0) {

33  
°©
;

35  
°©
;

36 
	}
}

38 
≠r_°©us_t
 
	$≠r_thªadkey_¥iv©e_gë
(**
√w
, 
≠r_thªadkey_t
 *
key
)

40 
≠r_°©us_t
 
°©
;

42 i‡((
°©
 = 
	`NXKeyGëVÆue
(
key
->key, 
√w
)) == 0) {

43  
APR_SUCCESS
;

46  
°©
;

48 
	}
}

50 
≠r_°©us_t
 
	$≠r_thªadkey_¥iv©e_£t
(*
¥iv
, 
≠r_thªadkey_t
 *
key
)

52 
≠r_°©us_t
 
°©
;

53 i‡((
°©
 = 
	`NXKeySëVÆue
(
key
->key, 
¥iv
)) == 0) {

54  
APR_SUCCESS
;

57  
°©
;

59 
	}
}

61 
≠r_°©us_t
 
	$≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
)

63 
≠r_°©us_t
 
°©
;

64 i‡((
°©
 = 
	`NXKeyDñëe
(
key
->key)) == 0) {

65  
APR_SUCCESS
;

67  
°©
;

68 
	}
}

70 
≠r_°©us_t
 
	$≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
, 
≠r_thªadkey_t
 *
thªadkey
)

72  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªadkey
->
poﬁ
);

73 
	}
}

75 
≠r_°©us_t
 
≠r_thªadkey_d©a_£t
(*
d©a
,

76 c⁄° *
key
, 
	$≠r_°©us_t
 (*
˛ónup
) (*),

77 
≠r_thªadkey_t
 *
thªadkey
)

79  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªadkey
->
poﬁ
);

80 
	}
}

82 
≠r_°©us_t
 
	$≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
,

83 
≠r_thªadkey_t
 *
key
)

85 
thekey
 = &(
key
->key);

86  
APR_SUCCESS
;

87 
	}
}

89 
≠r_°©us_t
 
	$≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

90 
≠r_os_thªadkey_t
 *
thekey
, 
≠r_poﬁ_t
 *
poﬁ
)

92 i‡(
poﬁ
 =
NULL
) {

93  
APR_ENOPOOL
;

95 i‡((*
key
Ë=
NULL
) {

96 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

97 (*
key
)->
poﬁ
 =Öool;

99 (*
key
)->key = *
thekey
;

100  
APR_SUCCESS
;

101 
	}
}

	@threadproc/os2/proc.c

17 
	#INCL_DOS


	)

18 
	#INCL_DOSERRORS


	)

20 
	~"≠r_¨ch_thªad¥oc.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

22 
	~"≠r_¥iv©e.h
"

23 
	~"≠r_thªad_¥oc.h
"

24 
	~"≠r_fûe_io.h
"

25 
	~"≠r_gíîÆ.h
"

26 
	~"≠r_lib.h
"

27 
	~"≠r_p‹èbÀ.h
"

28 
	~"≠r_°rögs.h
"

29 
	~"≠r_sig«l.h
"

30 
	~<sig«l.h
>

31 
	~<°rög.h
>

32 
	~<sys/waô.h
>

33 
	~<uni°d.h
>

34 
	~<¥o˚ss.h
>

35 
	~<°dlib.h
>

40 
≠r_fûe_t
 
	gno_fûe
 = { 
NULL
, -1, };

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w
, 
≠r_poﬁ_t
 *
poﬁ
)

44 (*
√w
Ë(
≠r_¥oˇâr_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

45 (
≠r_¥oˇâr_t
));

47 i‡((*
√w
Ë=
NULL
) {

48  
APR_ENOMEM
;

50 (*
√w
)->
poﬁ
 =Öool;

51 (*
√w
)->
∑ª¡_ö
 = 
NULL
;

52 (*
√w
)->
chûd_ö
 = 
NULL
;

53 (*
√w
)->
∑ª¡_out
 = 
NULL
;

54 (*
√w
)->
chûd_out
 = 
NULL
;

55 (*
√w
)->
∑ª¡_îr
 = 
NULL
;

56 (*
√w
)->
chûd_îr
 = 
NULL
;

57 (*
√w
)->
cuºdú
 = 
NULL
;

58 (*
√w
)->
cmdty≥
 = 
APR_PROGRAM
;

59 (*
√w
)->
dëached
 = 
FALSE
;

60  
APR_SUCCESS
;

61 
	}
}

63 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

64 
≠r_öt32_t
 
ö
,

65 
≠r_öt32_t
 
out
,

66 
≠r_öt32_t
 
îr
)

68 
≠r_°©us_t
 
rv
;

70 i‡((
ö
 !
APR_NO_PIPE
Ë&& (ö !
APR_NO_FILE
)) {

76 i‡(
ö
 =
APR_CHILD_BLOCK
)

77 
ö
 = 
APR_READ_BLOCK
;

78 i‡(
ö
 =
APR_PARENT_BLOCK
)

79 
ö
 = 
APR_WRITE_BLOCK
;

81 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

82 
ö
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

83 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

84 i‡(
rv
 !
APR_SUCCESS
)

85  
rv
;

87 i‡(
ö
 =
APR_NO_FILE
)

88 
©å
->
chûd_ö
 = &
no_fûe
;

90 i‡((
out
 !
APR_NO_PIPE
Ë&& (ouà!
APR_NO_FILE
)) {

91 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

92 
out
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

93 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

94 i‡(
rv
 !
APR_SUCCESS
)

95  
rv
;

97 i‡(
out
 =
APR_NO_FILE
)

98 
©å
->
chûd_out
 = &
no_fûe
;

100 i‡((
îr
 !
APR_NO_PIPE
Ë&& (î∏!
APR_NO_FILE
)) {

101 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

102 
îr
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

103 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

104 i‡(
rv
 !
APR_SUCCESS
)

105  
rv
;

107 i‡(
îr
 =
APR_NO_FILE
)

108 
©å
->
chûd_îr
 = &
no_fûe
;

110  
APR_SUCCESS
;

111 
	}
}

113 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_ö
,

114 
≠r_fûe_t
 *
∑ª¡_ö
)

116 
≠r_°©us_t
 
rv
;

118 i‡(
©å
->
chûd_ö
 =
NULL
 &&áâr->
∑ª¡_ö
 == NULL

119 && 
chûd_ö
 =
NULL
 && 
∑ª¡_ö
 == NULL)

120 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

121 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

122 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

124 i‡(
chûd_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

125 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1))

126 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

128 
©å
->
chûd_ö
 = 
NULL
;

129 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
))

130 =
APR_SUCCESS
)

131 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_ö
);

135 i‡(
∑ª¡_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

136 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

139  
rv
;

140 
	}
}

142 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_out
,

143 
≠r_fûe_t
 *
∑ª¡_out
)

145 
≠r_°©us_t
 
rv
;

147 i‡(
©å
->
chûd_out
 =
NULL
 &&áâr->
∑ª¡_out
 == NULL

148 && 
chûd_out
 =
NULL
 && 
∑ª¡_out
 == NULL)

149 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

150 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

151 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

153 i‡(
chûd_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

154 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1))

155 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

157 
©å
->
chûd_out
 = 
NULL
;

158 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
))

159 =
APR_SUCCESS
)

160 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_out
);

164 i‡(
∑ª¡_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

165 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

168  
rv
;

169 
	}
}

171 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_fûe_t
 *
chûd_îr
,

172 
≠r_fûe_t
 *
∑ª¡_îr
)

174 
≠r_°©us_t
 
rv
;

176 i‡(
©å
->
chûd_îr
 =
NULL
 &&áâr->
∑ª¡_îr
 == NULL

177 && 
chûd_îr
 =
NULL
 && 
∑ª¡_îr
 == NULL)

178 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

179 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

180 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

182 i‡(
chûd_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

183 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1))

184 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

186 
©å
->
chûd_îr
 = 
NULL
;

187 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
))

188 =
APR_SUCCESS
)

189 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_îr
);

193 i‡(
∑ª¡_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

194 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

197  
rv
;

198 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
, c⁄° *
dú
)

202 
©å
->
cuºdú
 = 
	`≠r_p°rdup
◊âr->
poﬁ
, 
dú
);

203 i‡(
©å
->
cuºdú
) {

204  
APR_SUCCESS
;

206  
APR_ENOMEM
;

207 
	}
}

209 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

210 
≠r_cmdty≥_e
 
cmd
)

212 
©å
->
cmdty≥
 = 
cmd
;

213  
APR_SUCCESS
;

214 
	}
}

216 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
, 
≠r_öt32_t
 
dëach
)

218 
©å
->
dëached
 = 
dëach
;

219  
APR_SUCCESS
;

220 
	}
}

222 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_f‹k
(
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
poﬁ
)

224 
pid
;

226 i‡((
pid
 = 
	`f‹k
()) < 0) {

227  
î∫o
;

229 i‡(
pid
 == 0) {

230 
¥oc
->
pid
 =Öid;

231 
¥oc
->
ö
 = 
NULL
;

232 
¥oc
->
out
 = 
NULL
;

233 
¥oc
->
îr
 = 
NULL
;

234  
APR_INCHILD
;

236 
¥oc
->
pid
 =Öid;

237 
¥oc
->
ö
 = 
NULL
;

238 
¥oc
->
out
 = 
NULL
;

239 
¥oc
->
îr
 = 
NULL
;

240  
APR_INPARENT
;

241 
	}
}

248 *
	$doubÀ_quŸes
(
≠r_poﬁ_t
 *
poﬁ
, c⁄° *
°r
)

250 
num_quŸes
 = 0;

251 
Àn
 = 0;

252 *
quŸe_doubÀd_°r
, *
de°
;

254 
°r
[
Àn
]) {

255 
num_quŸes
 +
°r
[
Àn
++] == '\"';

258 
quŸe_doubÀd_°r
 = 
	`≠r_∑Œoc
(
poﬁ
, 
Àn
 + 
num_quŸes
 + 1);

259 
de°
 = 
quŸe_doubÀd_°r
;

261 *
°r
) {

262 i‡(*
°r
 == '\"')

263 *(
de°
++) = '\"';

264 *(
de°
++Ë*(
°r
++);

267 *
de°
 = 0;

268  
quŸe_doubÀd_°r
;

269 
	}
}

273 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

274 
≠r_chûd_îr‚_t
 *
îr‚
)

277  
APR_SUCCESS
;

278 
	}
}

282 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

283 
≠r_öt32_t
 
chk
)

286  
APR_SUCCESS
;

287 
	}
}

289 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

290 
≠r_öt32_t
 
addr•a˚
)

293  
APR_SUCCESS
;

294 
	}
}

298 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
¥oc
, c⁄° *
¥og«me
,

299 c⁄° * c⁄° *
¨gs
,

300 c⁄° * c⁄° *
ív
,

301 
≠r_¥oˇâr_t
 *
©å
, 
≠r_poﬁ_t
 *
poﬁ
)

303 
i
, 
¨g
, 
num¨gs
, 
cmdÀn
;

304 
≠r_°©us_t
 
°©us
;

305 c⁄° **
√w¨gs
;

306 
ßvedú
[300];

307 
HFILE
 
ßve_ö
, 
ßve_out
, 
ßve_îr
, 
dup
;

308 
¸ôiˇl£˘i⁄
 = 
FALSE
;

309 *
exãnsi⁄
, *
√w¥og«me
, *
exåa_¨g
 = 
NULL
, *
cmdlöe
, *
cmdlöe_pos
;

310 
öãΩªãr
[1024];

311 
îr‹_obje˘
[260];

312 
≠r_fûe_t
 *
¥ogfûe
;

313 
ív_Àn
, 
e
;

314 *
ív_block
, *
ív_block_pos
;

315 
RESULTCODES
 
ªscodes
;

317 
¥oc
->
ö
 = 
©å
->
∑ª¡_ö
;

318 
¥oc
->
îr
 = 
©å
->
∑ª¡_îr
;

319 
¥oc
->
out
 = 
©å
->
∑ª¡_out
;

322 i‡(
©å
->
chûd_ö
 ||áâr->
chûd_out
 ||áâr->
chûd_îr
 ||áâr->
cuºdú
) {

323 
¸ôiˇl£˘i⁄
 = 
TRUE
;

324 
	`DosE¡îCrôSec
();

327 i‡(
©å
->
chûd_ö
) {

328 
ßve_ö
 = -1;

329 
	`DosDupH™dÀ
(
STDIN_FILENO
, &
ßve_ö
);

330 
dup
 = 
STDIN_FILENO
;

331 i‡(
©å
->
chûd_ö
->
fûedes
 == -1)

332 
	`DosClo£
(
dup
);

334 
	`DosDupH™dÀ
(
©å
->
chûd_ö
->
fûedes
, &
dup
);

337 i‡(
©å
->
chûd_out
) {

338 
ßve_out
 = -1;

339 
	`DosDupH™dÀ
(
STDOUT_FILENO
, &
ßve_out
);

340 
dup
 = 
STDOUT_FILENO
;

341 i‡(
©å
->
chûd_out
->
fûedes
 == -1)

342 
	`DosClo£
(
dup
);

344 
	`DosDupH™dÀ
(
©å
->
chûd_out
->
fûedes
, &
dup
);

347 i‡(
©å
->
chûd_îr
) {

348 
ßve_îr
 = -1;

349 
	`DosDupH™dÀ
(
STDERR_FILENO
, &
ßve_îr
);

350 
dup
 = 
STDERR_FILENO
;

351 i‡(
©å
->
chûd_îr
->
fûedes
 == -1)

352 
	`DosClo£
(
dup
);

354 
	`DosDupH™dÀ
(
©å
->
chûd_îr
->
fûedes
, &
dup
);

357 
	`≠r_sig«l
(
SIGCHLD
, 
SIG_DFL
);

359 i‡(
©å
->
cuºdú
 !
NULL
) {

360 
	`_gëcwd2
(
ßvedú
, (savedir));

362 i‡(
	`_chdú2
(
©å
->
cuºdú
) < 0) {

363 i‡(
¸ôiˇl£˘i⁄
)

364 
	`DosExôCrôSec
();

365  
î∫o
;

369 
öãΩªãr
[0] = 0;

370 
exãnsi⁄
 = 
	`°ºchr
(
¥og«me
, '.');

372 i‡(
exãnsi⁄
 =
NULL
 || 
	`°rchr
(extension, '/') || strchr(extension, '\\'))

373 
exãnsi⁄
 = "";

377 i‡(
©å
->
cmdty≥
 =
APR_SHELLCMD
 ||

378 
©å
->
cmdty≥
 =
APR_SHELLCMD_ENV
 ||

379 
	`°rˇ£cmp
(
exãnsi⁄
, ".cmd") == 0) {

380 
	`°r˝y
(
öãΩªãr
, "#!" 
SHELL_PATH
);

381 
exåa_¨g
 = "/C";

382 } i‡(
	`°ricmp
(
exãnsi⁄
, ".exe") != 0) {

383 
°©us
 = 
	`≠r_fûe_›í
(&
¥ogfûe
, 
¥og«me
, 
APR_READ
|
APR_BUFFERED
, 0, 
poﬁ
);

385 i‡(
°©us
 !
APR_SUCCESS
 && 
	`APR_STATUS_IS_ENOENT
(status)) {

386 
¥og«me
 = 
	`≠r_p°rˇt
(
poﬁ
,Örog«me, ".exe", 
NULL
);

389 i‡(
°©us
 =
APR_SUCCESS
) {

390 
°©us
 = 
	`≠r_fûe_gës
(
öãΩªãr
, (öãΩªãr), 
¥ogfûe
);

392 i‡(
°©us
 =
APR_SUCCESS
) {

393 i‡(
öãΩªãr
[0] == '#' && interpreter[1] == '!') {

395 
íd
 = 
	`°æí
(
öãΩªãr
) - 1;

397 
íd
 >0 && 
	`≠r_is•a˚
(
öãΩªãr
[end])) {

398 
öãΩªãr
[
íd
] = '\0';

399 
íd
--;

402 i‡(
öãΩªãr
[2] != '/' && interpreter[2] != '\\' && interpreter[3] != ':') {

403 
buf„r
[300];

405 i‡(
	`DosSórchP©h
(
SEARCH_ENVIRONMENT
, "PATH", 
öãΩªãr
+2, 
buf„r
, (buffer)) == 0) {

406 
	`°r˝y
(
öãΩªãr
+2, 
buf„r
);

408 
	`°rˇt
(
öãΩªãr
, ".exe");

409 i‡(
	`DosSórchP©h
(
SEARCH_ENVIRONMENT
, "PATH", 
öãΩªãr
+2, 
buf„r
, (buffer)) == 0) {

410 
	`°r˝y
(
öãΩªãr
+2, 
buf„r
);

415 
öãΩªãr
[0] = 0;

419 
	`≠r_fûe_˛o£
(
¥ogfûe
);

423 
i
 = 0;

425 
¨gs
 &&árgs[
i
]) {

426 
i
++;

429 
√w¨gs
 = (c⁄° **)
	`≠r_∑Œoc
(
poﬁ
,  (*Ë* (
i
 + 4));

430 
num¨gs
 = 0;

432 i‡(
öãΩªãr
[0])

433 
√w¨gs
[
num¨gs
++] = 
öãΩªãr
 + 2;

434 i‡(
exåa_¨g
)

435 
√w¨gs
[
num¨gs
++] = "/c";

437 
√w¨gs
[
num¨gs
++] = 
√w¥og«me
 = 
	`≠r_p°rdup
(
poﬁ
, 
¥og«me
);

438 
¨g
 = 1;

440 
¨gs
 &&árgs[
¨g
]) {

441 
√w¨gs
[
num¨gs
++] = 
¨gs
[
¨g
++];

444 
√w¨gs
[
num¨gs
] = 
NULL
;

446 
i
=0; 
√w¥og«me
[i]; i++)

447 i‡(
√w¥og«me
[
i
] == '/')

448 
√w¥og«me
[
i
] = '\\';

450 
cmdÀn
 = 0;

452 
i
=0; i<
num¨gs
; i++)

453 
cmdÀn
 +
	`°æí
(
√w¨gs
[
i
]) + 3;

455 
cmdlöe
 = 
	`≠r_∑Œoc
(
poﬁ
, 
cmdÀn
 + 2);

456 
cmdlöe_pos
 = 
cmdlöe
;

458 
i
=0; i<
num¨gs
; i++) {

459 c⁄° *
a
 = 
√w¨gs
[
i
];

461 i‡(
	`°Ωbrk
(
a
, "&|<>\" "))

462 
a
 = 
	`≠r_p°rˇt
(
poﬁ
, "\"", 
	`doubÀ_quŸes
’oﬁ,á), "\"", 
NULL
);

464 i‡(
i
)

465 *(
cmdlöe_pos
++) = ' ';

467 
	`°r˝y
(
cmdlöe_pos
, 
a
);

468 
cmdlöe_pos
 +
	`°æí
(cmdline_pos);

471 *(++
cmdlöe_pos
) = 0;

472 
cmdlöe_pos
 = 
	`°rchr
(
cmdlöe
, ' ');

474 i‡(
cmdlöe_pos
) {

475 *
cmdlöe_pos
 = 0;

476 
cmdlöe_pos
++;

480 i‡(
ív
) {

481 
ív_Àn
=1, 
e
=0; 
ív
[e];É++)

482 
ív_Àn
 +
	`°æí
(
ív
[
e
]) + 1;

484 
ív_block
 = 
	`≠r_∑Œoc
(
poﬁ
, 
ív_Àn
);

485 
ív_block_pos
 = 
ív_block
;

487 
e
=0; 
ív
[e];É++) {

488 
	`°r˝y
(
ív_block_pos
, 
ív
[
e
]);

489 
ív_block_pos
 +
	`°æí
(env_block_pos) + 1;

492 *
ív_block_pos
 = 0;

494 
ív_block
 = 
NULL
;

496 
°©us
 = 
	`DosExecPgm
(
îr‹_obje˘
, (error_object),

497 
©å
->
dëached
 ? 
EXEC_BACKGROUND
 : 
EXEC_ASYNCRESULT
,

498 
cmdlöe
, 
ív_block
, &
ªscodes
, cmdline);

500 
¥oc
->
pid
 = 
ªscodes
.
codeTîmö©e
;

502 i‡(
©å
->
cuºdú
 !
NULL
) {

503 
	`chdú
(
ßvedú
);

506 i‡(
©å
->
chûd_ö
) {

507 i‡(
©å
->
chûd_ö
->
fûedes
 != -1) {

508 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

511 
dup
 = 
STDIN_FILENO
;

512 
	`DosDupH™dÀ
(
ßve_ö
, &
dup
);

513 
	`DosClo£
(
ßve_ö
);

516 i‡(
©å
->
chûd_out
) {

517 i‡(
©å
->
chûd_out
->
fûedes
 != -1) {

518 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

521 
dup
 = 
STDOUT_FILENO
;

522 
	`DosDupH™dÀ
(
ßve_out
, &
dup
);

523 
	`DosClo£
(
ßve_out
);

526 i‡(
©å
->
chûd_îr
) {

527 i‡(
©å
->
chûd_îr
->
fûedes
 != -1) {

528 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

531 
dup
 = 
STDERR_FILENO
;

532 
	`DosDupH™dÀ
(
ßve_îr
, &
dup
);

533 
	`DosClo£
(
ßve_îr
);

536 i‡(
¸ôiˇl£˘i⁄
)

537 
	`DosExôCrôSec
();

539  
°©us
;

540 
	}
}

544 
	$¥o˚s_ªsu…_codes
(
RESULTCODES
 
codes
,

545 *
exôcode
,

546 
≠r_exô_why_e
 *
exôwhy
)

548 
ªsu…
 = 0;

549 
≠r_exô_why_e
 
why
 = 
APR_PROC_EXIT
;

551 
codes
.
codeTîmö©e
) {

552 
TC_EXIT
:

553 
why
 = 
APR_PROC_EXIT
;

554 
ªsu…
 = 
codes
.
codeResu…
;

557 
TC_HARDERROR
:

558 
why
 = 
APR_PROC_SIGNAL
;

559 
ªsu…
 = 
SIGSYS
;

562 
TC_KILLPROCESS
:

563 
why
 = 
APR_PROC_SIGNAL
;

564 
ªsu…
 = 
SIGKILL
;

567 
TC_TRAP
:

568 
TC_EXCEPTION
:

569 
why
 = 
APR_PROC_SIGNAL
;

571 
codes
.
codeResu…
 | 
XCPT_FATAL_EXCEPTION
) {

572 
XCPT_ACCESS_VIOLATION
:

573 
ªsu…
 = 
SIGSEGV
;

576 
XCPT_ILLEGAL_INSTRUCTION
:

577 
ªsu…
 = 
SIGILL
;

580 
XCPT_FLOAT_DIVIDE_BY_ZERO
:

581 
XCPT_INTEGER_DIVIDE_BY_ZERO
:

582 
ªsu…
 = 
SIGFPE
;

586 
ªsu…
 = 
codes
.
codeResu…
;

591 i‡(
exôcode
) {

592 *
exôcode
 = 
ªsu…
;

595 i‡(
exôwhy
) {

596 *
exôwhy
 = 
why
;

598 
	}
}

602 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

603 *
exôcode
,

604 
≠r_exô_why_e
 *
exôwhy
,

605 
≠r_waô_how_e
 
waôhow
,

606 
≠r_poﬁ_t
 *
p
)

608 
RESULTCODES
 
codes
;

609 
ULONG
 
rc
;

610 
PID
 
pid
;

612 
rc
 = 
	`DosWaôChûd
(
DCWA_PROCESSTREE
, 
waôhow
 =
APR_WAIT
 ? 
DCWW_WAIT
 : 
DCWW_NOWAIT
, &
codes
, &
pid
, 0);

614 i‡(
rc
 == 0) {

615 
¥oc
->
pid
 =Öid;

616 
	`¥o˚s_ªsu…_codes
(
codes
, 
exôcode
, 
exôwhy
);

617  
APR_CHILD_DONE
;

618 } i‡(
rc
 =
ERROR_CHILD_NOT_COMPLETE
) {

619  
APR_CHILD_NOTDONE
;

622  
	`APR_OS2_STATUS
(
rc
);

623 
	}
}

627 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

628 *
exôcode
, 
≠r_exô_why_e
 *
exôwhy
,

629 
≠r_waô_how_e
 
waôhow
)

631 
RESULTCODES
 
codes
;

632 
ULONG
 
rc
;

633 
PID
 
pid
;

634 
rc
 = 
	`DosWaôChûd
(
DCWA_PROCESS
, 
waôhow
 =
APR_WAIT
 ? 
DCWW_WAIT
 : 
DCWW_NOWAIT
, &
codes
, &
pid
, 
¥oc
->pid);

636 i‡(
rc
 == 0) {

637 
	`¥o˚s_ªsu…_codes
(
codes
, 
exôcode
, 
exôwhy
);

638  
APR_CHILD_DONE
;

639 } i‡(
rc
 =
ERROR_CHILD_NOT_COMPLETE
) {

640  
APR_CHILD_NOTDONE
;

643  
	`APR_OS2_STATUS
(
rc
);

644 
	}
}

648 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_dëach
(
d´m⁄ize
)

650  
APR_ENOTIMPL
;

651 
	}
}

653 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

654 c⁄° *
u£∫ame
,

655 c⁄° *
∑ssw‹d
)

657  
APR_ENOTIMPL
;

658 
	}
}

660 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

661 c⁄° *
grou≤ame
)

663  
APR_ENOTIMPL
;

664 
	}
}

	@threadproc/os2/signals.c

1 
	~"../unix/sig«ls.c
"

	@threadproc/os2/thread.c

17 
	#INCL_DOSERRORS


	)

18 
	#INCL_DOS


	)

19 
	~"≠r_¨ch_thªad¥oc.h
"

20 
	~"≠r_thªad_¥oc.h
"

21 
	~"≠r_gíîÆ.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_p‹èbÀ.h
"

24 
	~"≠r_¨ch_fûe_io.h
"

25 
	~<°dlib.h
>

27 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w
, 
≠r_poﬁ_t
 *
poﬁ
)

29 (*
√w
Ë(
≠r_thªad©å_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadattr_t));

31 i‡((*
√w
Ë=
NULL
) {

32  
APR_ENOMEM
;

35 (*
√w
)->
poﬁ
 =Öool;

36 (*
√w
)->
©å
 = 0;

37 (*
√w
)->
°acksize
 = 0;

38  
APR_SUCCESS
;

39 
	}
}

43 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
, 
≠r_öt32_t
 
⁄
)

45 
©å
->©å |
APR_THREADATTR_DETACHED
;

46  
APR_SUCCESS
;

47 
	}
}

51 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
)

53  (
©å
->©å & 
APR_THREADATTR_DETACHED
Ë? 
APR_DETACH
 : 
APR_NOTDETACH
;

54 
	}
}

56 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

57 
≠r_size_t
 
°acksize
)

59 
©å
->
°acksize
 = stacksize;

60  
APR_SUCCESS
;

61 
	}
}

63 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

64 
≠r_size_t
 
size
)

66  
APR_ENOTIMPL
;

67 
	}
}

69 
	$≠r_thªad_begö
(*
¨g
)

71 
≠r_thªad_t
 *
thªad
 = (≠r_thªad_à*)
¨g
;

72 
thªad
->
exôvÆ
 =Åhªad->
	`func
—hªad,Åhªad->
d©a
);

73 
	}
}

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w
, 
≠r_thªad©å_t
 *
©å
,

78 
≠r_thªad_°¨t_t
 
func
, *
d©a
,

79 
≠r_poﬁ_t
 *
poﬁ
)

81 
≠r_°©us_t
 
°©
;

82 
≠r_thªad_t
 *
thªad
;

84 
thªad
 = (
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

85 *
√w
 = 
thªad
;

87 i‡(
thªad
 =
NULL
) {

88  
APR_ENOMEM
;

91 
thªad
->
©å
 =áttr;

92 
thªad
->
func
 = func;

93 
thªad
->
d©a
 = data;

94 
°©
 = 
	`≠r_poﬁ_¸óã
(&
thªad
->
poﬁ
,Öool);

96 i‡(
°©
 !
APR_SUCCESS
) {

97  
°©
;

100 i‡(
©å
 =
NULL
) {

101 
°©
 = 
	`≠r_thªad©å_¸óã
(&
thªad
->
©å
,Åhªad->
poﬁ
);

103 i‡(
°©
 !
APR_SUCCESS
) {

104  
°©
;

108 
thªad
->
tid
 = 
	`_begöthªad
(
≠r_thªad_begö
, 
NULL
,

109 
thªad
->
©å
->
°acksize
 > 0 ?

110 
thªad
->
©å
->
°acksize
 : 
APR_THREAD_STACKSIZE
,

111 
thªad
);

113 i‡(
thªad
->
tid
 < 0) {

114  
î∫o
;

117  
APR_SUCCESS
;

118 
	}
}

122 
	$APR_DECLARE
(
≠r_os_thªad_t
Ë
	$≠r_os_thªad_cuºít
()

124 
PIB
 *
µib
;

125 
TIB
 *
±ib
;

126 
	`DosGëInfoBlocks
(&
±ib
, &
µib
);

127  
±ib
->
tib_±ib2
->
tib2_u…id
;

128 
	}
}

132 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_exô
(
≠r_thªad_t
 *
thd
, 
≠r_°©us_t
 
ªtvÆ
)

134 
thd
->
exôvÆ
 = 
ªtvÆ
;

135 
	`_ídthªad
();

137 
	}
}

141 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_joö
(
≠r_°©us_t
 *
ªtvÆ
, 
≠r_thªad_t
 *
thd
)

143 
ULONG
 
rc
;

144 
TID
 
waôtid
 = 
thd
->
tid
;

146 i‡(
thd
->
©å
->©å & 
APR_THREADATTR_DETACHED
)

147  
APR_EINVAL
;

149 
rc
 = 
	`DosWaôThªad
(&
waôtid
, 
DCWW_WAIT
);

151 i‡(
rc
 =
ERROR_INVALID_THREADID
)

152 
rc
 = 0;

154 *
ªtvÆ
 = 
thd
->
exôvÆ
;

155  
	`APR_OS2_STATUS
(
rc
);

156 
	}
}

160 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
)

162 
thd
->
©å
->©å |
APR_THREADATTR_DETACHED
;

163  
APR_SUCCESS
;

164 
	}
}

168 
	$≠r_thªad_yõld
()

170 
	`DosSÀï
(0);

171 
	}
}

175 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
, 
≠r_thªad_t
 *
thd
)

177 *
thëhd
 = &
thd
->
tid
;

178  
APR_SUCCESS
;

179 
	}
}

183 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
, 
≠r_os_thªad_t
 *
thëhd
,

184 
≠r_poﬁ_t
 *
poﬁ
)

186 i‡((*
thd
Ë=
NULL
) {

187 (*
thd
Ë(
≠r_thªad_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_t));

188 (*
thd
)->
poﬁ
 =Öool;

190 (*
thd
)->
tid
 = *
thëhd
;

191  
APR_SUCCESS
;

192 
	}
}

196 
	$≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,á¥_os_thªad_à
tid2
)

198  
tid1
 =
tid2
;

199 
	}
}

203 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
, 
≠r_thªad_t
 *
thªad
)

205  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªad
->
poﬁ
);

206 
	}
}

210 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

211 
	$≠r_°©us_t
 (*
˛ónup
) (*),

212 
≠r_thªad_t
 *
thªad
)

214  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªad
->
poﬁ
);

215 
	}
}

217 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
thªad
)

221 
≠r_°©us_t
 
	$thªad_⁄˚_˛ónup
(*
vc⁄åﬁ
)

223 
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
 = (≠r_thªad_⁄˚_à*)
vc⁄åﬁ
;

225 i‡(
c⁄åﬁ
->
£m
) {

226 
	`DosClo£EvítSem
(
c⁄åﬁ
->
£m
);

229  
APR_SUCCESS
;

230 
	}
}

234 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

235 
≠r_poﬁ_t
 *
p
)

237 
ULONG
 
rc
;

238 *
c⁄åﬁ
 = (
≠r_thªad_⁄˚_t
 *)
	`≠r_pˇŒoc
(
p
, (apr_thread_once_t));

239 
rc
 = 
	`DosCª©eEvítSem
(
NULL
, &(*
c⁄åﬁ
)->
£m
, 0, 
TRUE
);

240 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, 
c⁄åﬁ
, 
thªad_⁄˚_˛ónup
, 
≠r_poﬁ_˛ónup_nuŒ
);

241  
	`APR_FROM_OS_ERROR
(
rc
);

242 
	}
}

246 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

247 (*
func
)())

249 i‡(!
c⁄åﬁ
->
hô
) {

250 
ULONG
 
cou¡
, 
rc
;

251 
rc
 = 
	`DosRe£tEvítSem
(
c⁄åﬁ
->
£m
, &
cou¡
);

253 i‡(
rc
 =0 && 
cou¡
) {

254 
c⁄åﬁ
->
hô
 = 1;

255 
	`func
();

259  
APR_SUCCESS
;

260 
	}
}

	@threadproc/os2/threadpriv.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_lib.h
"

23 
	~"≠r_¨ch_fûe_io.h
"

25 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

26 (*
de°
)(*),

27 
≠r_poﬁ_t
 *
poﬁ
)

29 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

31 i‡((*
key
Ë=
NULL
) {

32  
APR_ENOMEM
;

35 (*
key
)->
poﬁ
 =Öool;

36  
	`APR_OS2_STATUS
(
	`DosAŒocThªadLoˇlMem‹y
(1, &((*
key
)->key)));

37 
	}
}

39 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_gë
(**
√w
, 
≠r_thªadkey_t
 *
key
)

41 (*
√w
Ë(*)*(
key
->key);

42  
APR_SUCCESS
;

43 
	}
}

45 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_£t
(*
¥iv
, 
≠r_thªadkey_t
 *
key
)

47 *(
key
->keyË(
ULONG
)
¥iv
;

48  
APR_SUCCESS
;

49 
	}
}

51 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
)

53  
	`APR_OS2_STATUS
(
	`DosFªeThªadLoˇlMem‹y
(
key
->key));

54 
	}
}

56 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
,

57 
≠r_thªadkey_t
 *
thªadkey
)

59  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªadkey
->
poﬁ
);

60 
	}
}

62 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_d©a_£t
(*
d©a
, c⁄° *
key
,

63 
	$≠r_°©us_t
 (*
˛ónup
) (*),

64 
≠r_thªadkey_t
 *
thªadkey
)

66  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªadkey
->
poﬁ
);

67 
	}
}

69 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
, 
≠r_thªadkey_t
 *
key
)

71 *
thekey
 = 
key
->key;

72  
APR_SUCCESS
;

73 
	}
}

75 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

76 
≠r_os_thªadkey_t
 *
thekey
,

77 
≠r_poﬁ_t
 *
poﬁ
)

79 i‡(
poﬁ
 =
NULL
) {

80  
APR_ENOPOOL
;

82 i‡((*
key
Ë=
NULL
) {

83 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_threadkey_t));

84 (*
key
)->
poﬁ
 =Öool;

86 (*
key
)->key = *
thekey
;

87  
APR_SUCCESS
;

88 
	}
}

	@threadproc/unix/proc.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_sig«l.h
"

21 
	~"≠r_øndom.h
"

26 
≠r_fûe_t
 
	gno_fûe
 = { 
NULL
, -1, };

28 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w
,

29 
≠r_poﬁ_t
 *
poﬁ
)

31 (*
√w
Ë(
≠r_¥oˇâr_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_procattr_t));

33 i‡((*
√w
Ë=
NULL
) {

34  
APR_ENOMEM
;

36 (*
√w
)->
poﬁ
 =Öool;

37 (*
√w
)->
cmdty≥
 = 
APR_PROGRAM
;

38 (*
√w
)->
uid
 = (*√w)->
gid
 = -1;

39  
APR_SUCCESS
;

40 
	}
}

42 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

43 
≠r_öt32_t
 
ö
,

44 
≠r_öt32_t
 
out
,

45 
≠r_öt32_t
 
îr
)

47 
≠r_°©us_t
 
rv
;

49 i‡((
ö
 !
APR_NO_PIPE
Ë&& (ö !
APR_NO_FILE
)) {

55 i‡(
ö
 =
APR_CHILD_BLOCK
)

56 
ö
 = 
APR_READ_BLOCK
;

57 i‡(
ö
 =
APR_PARENT_BLOCK
)

58 
ö
 = 
APR_WRITE_BLOCK
;

60 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

61 
ö
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

62 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

63 i‡(
rv
 !
APR_SUCCESS
)

64  
rv
;

66 i‡(
ö
 =
APR_NO_FILE
)

67 
©å
->
chûd_ö
 = &
no_fûe
;

69 i‡((
out
 !
APR_NO_PIPE
Ë&& (ouà!
APR_NO_FILE
)) {

70 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

71 
out
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

72 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

73 i‡(
rv
 !
APR_SUCCESS
)

74  
rv
;

76 i‡(
out
 =
APR_NO_FILE
)

77 
©å
->
chûd_out
 = &
no_fûe
;

79 i‡((
îr
 !
APR_NO_PIPE
Ë&& (î∏!
APR_NO_FILE
)) {

80 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

81 
îr
, 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

82 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

83 i‡(
rv
 !
APR_SUCCESS
)

84  
rv
;

86 i‡(
îr
 =
APR_NO_FILE
)

87 
©å
->
chûd_îr
 = &
no_fûe
;

89  
APR_SUCCESS
;

90 
	}
}

93 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
,

94 
≠r_fûe_t
 *
chûd_ö
,

95 
≠r_fûe_t
 *
∑ª¡_ö
)

97 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

99 i‡(
©å
->
chûd_ö
 =
NULL
 &&áâr->
∑ª¡_ö
 == NULL

100 && 
chûd_ö
 =
NULL
 && 
∑ª¡_ö
 == NULL)

101 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

102 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

103 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

105 i‡(
chûd_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

106 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1))

107 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

109 
©å
->
chûd_ö
 = 
NULL
;

110 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
))

111 =
APR_SUCCESS
)

112 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_ö
);

116 i‡(
∑ª¡_ö
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

117 i‡(
©å
->
∑ª¡_ö
)

118 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

120 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

123  
rv
;

124 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
,

128 
≠r_fûe_t
 *
chûd_out
,

129 
≠r_fûe_t
 *
∑ª¡_out
)

131 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

133 i‡(
©å
->
chûd_out
 =
NULL
 &&áâr->
∑ª¡_out
 == NULL

134 && 
chûd_out
 =
NULL
 && 
∑ª¡_out
 == NULL)

135 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

136 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

137 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

139 i‡(
chûd_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

140 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1))

141 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

143 
©å
->
chûd_out
 = 
NULL
;

144 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
))

145 =
APR_SUCCESS
)

146 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_out
);

150 i‡(
∑ª¡_out
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

151 i‡(
©å
->
∑ª¡_out
)

152 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

154 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

157  
rv
;

158 
	}
}

161 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
,

162 
≠r_fûe_t
 *
chûd_îr
,

163 
≠r_fûe_t
 *
∑ª¡_îr
)

165 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

167 i‡(
©å
->
chûd_îr
 =
NULL
 &&áâr->
∑ª¡_îr
 == NULL

168 && 
chûd_îr
 =
NULL
 && 
∑ª¡_îr
 == NULL)

169 i‡((
rv
 = 
	`≠r_fûe_pùe_¸óã
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

170 
©å
->
poﬁ
)Ë=
APR_SUCCESS
)

171 
rv
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

173 i‡(
chûd_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

174 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1))

175 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

177 
©å
->
chûd_îr
 = 
NULL
;

178 i‡((
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
))

179 =
APR_SUCCESS
)

180 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_îr
);

183 i‡(
∑ª¡_îr
 !
NULL
 && 
rv
 =
APR_SUCCESS
) {

184 i‡(
©å
->
∑ª¡_îr
)

185 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

187 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

190  
rv
;

191 
	}
}

194 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
,

195 c⁄° *
dú
)

197 
©å
->
cuºdú
 = 
	`≠r_p°rdup
◊âr->
poﬁ
, 
dú
);

198 i‡(
©å
->
cuºdú
) {

199  
APR_SUCCESS
;

202  
APR_ENOMEM
;

203 
	}
}

205 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

206 
≠r_cmdty≥_e
 
cmd
)

208 
©å
->
cmdty≥
 = 
cmd
;

209  
APR_SUCCESS
;

210 
	}
}

212 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
,

213 
≠r_öt32_t
 
dëach
)

215 
©å
->
dëached
 = 
dëach
;

216  
APR_SUCCESS
;

217 
	}
}

219 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_f‹k
(
≠r_¥oc_t
 *
¥oc
, 
≠r_poﬁ_t
 *
poﬁ
)

221 
pid
;

223 
	`mem£t
(
¥oc
, 0, (
≠r_¥oc_t
));

225 i‡((
pid
 = 
	`f‹k
()) < 0) {

226  
î∫o
;

228 i‡(
pid
 == 0) {

229 
¥oc
->
pid
 = 
	`gëpid
();

231 
	`≠r_øndom_a·î_f‹k
(
¥oc
);

233  
APR_INCHILD
;

236 
¥oc
->
pid
 =Öid;

238  
APR_INPARENT
;

239 
	}
}

241 
≠r_°©us_t
 
	$limô_¥oc
(
≠r_¥oˇâr_t
 *
©å
)

243 #i‡
APR_HAVE_STRUCT_RLIMIT
 && 
APR_HAVE_SETRLIMIT


244 #ifde‡
RLIMIT_CPU


245 i‡(
©å
->
limô_˝u
 !
NULL
) {

246 i‡((
	`£ålimô
(
RLIMIT_CPU
, 
©å
->
limô_˝u
)) != 0) {

247  
î∫o
;

251 #ifde‡
RLIMIT_NPROC


252 i‡(
©å
->
limô_≈roc
 !
NULL
) {

253 i‡((
	`£ålimô
(
RLIMIT_NPROC
, 
©å
->
limô_≈roc
)) != 0) {

254  
î∫o
;

258 #ifde‡
RLIMIT_NOFILE


259 i‡(
©å
->
limô_nofûe
 !
NULL
) {

260 i‡((
	`£ålimô
(
RLIMIT_NOFILE
, 
©å
->
limô_nofûe
)) != 0) {

261  
î∫o
;

265 #i‡
	`deföed
(
RLIMIT_AS
)

266 i‡(
©å
->
limô_mem
 !
NULL
) {

267 i‡((
	`£ålimô
(
RLIMIT_AS
, 
©å
->
limô_mem
)) != 0) {

268  
î∫o
;

271 #ñi‡
	`deföed
(
RLIMIT_DATA
)

272 i‡(
©å
->
limô_mem
 !
NULL
) {

273 i‡((
	`£ålimô
(
RLIMIT_DATA
, 
©å
->
limô_mem
)) != 0) {

274  
î∫o
;

277 #ñi‡
	`deföed
(
RLIMIT_VMEM
)

278 i‡(
©å
->
limô_mem
 !
NULL
) {

279 i‡((
	`£ålimô
(
RLIMIT_VMEM
, 
©å
->
limô_mem
)) != 0) {

280  
î∫o
;

290  
APR_SUCCESS
;

291 
	}
}

293 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

294 
≠r_chûd_îr‚_t
 *
îr‚
)

296 
©å
->
îr‚
 =Érrfn;

297  
APR_SUCCESS
;

298 
	}
}

300 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

301 
≠r_öt32_t
 
chk
)

303 
©å
->
îrchk
 = 
chk
;

304  
APR_SUCCESS
;

305 
	}
}

307 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

308 
≠r_öt32_t
 
addr•a˚
)

311  
APR_SUCCESS
;

312 
	}
}

314 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

315 c⁄° *
u£∫ame
,

316 c⁄° *
∑ssw‹d
)

318 
≠r_°©us_t
 
rv
;

319 
≠r_gid_t
 
gid
;

321 i‡((
rv
 = 
	`≠r_uid_gë
(&
©å
->
uid
, &
gid
, 
u£∫ame
,

322 
©å
->
poﬁ
)Ë!
APR_SUCCESS
) {

323 
©å
->
uid
 = -1;

324  
rv
;

328 i‡(
©å
->
gid
 == -1) {

329 
©å
->
gid
 = gid;

331  
APR_SUCCESS
;

332 
	}
}

334 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

335 c⁄° *
grou≤ame
)

337 
≠r_°©us_t
 
rv
;

339 i‡((
rv
 = 
	`≠r_gid_gë
(&
©å
->
gid
, 
grou≤ame
,áâr->
poﬁ
)Ë!
APR_SUCCESS
)

340 
©å
->
gid
 = -1;

341  
rv
;

342 
	}
}

344 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
√w
,

345 c⁄° *
¥og«me
,

346 c⁄° * c⁄° *
¨gs
,

347 c⁄° * c⁄° *
ív
,

348 
≠r_¥oˇâr_t
 *
©å
,

349 
≠r_poﬁ_t
 *
poﬁ
)

351 
i
;

352 c⁄° * c⁄° 
em±y_ívp
[] = {
NULL
};

354 i‡(!
ív
) {

358 
ív
 = 
em±y_ívp
;

361 
√w
->
ö
 = 
©å
->
∑ª¡_ö
;

362 
√w
->
îr
 = 
©å
->
∑ª¡_îr
;

363 
√w
->
out
 = 
©å
->
∑ª¡_out
;

365 i‡(
©å
->
îrchk
) {

366 i‡(
©å
->
cuºdú
) {

367 i‡(
	`ac˚ss
(
©å
->
cuºdú
, 
X_OK
) == -1) {

369  
î∫o
;

373 i‡(
©å
->
cmdty≥
 =
APR_PROGRAM
 ||

374 
©å
->
cmdty≥
 =
APR_PROGRAM_ENV
 ||

375 *
¥og«me
 == '/') {

381 i‡(
	`ac˚ss
(
¥og«me
, 
X_OK
) == -1) {

383  
î∫o
;

391 i‡((
√w
->
pid
 = 
	`f‹k
()) < 0) {

392  
î∫o
;

394 i‡(
√w
->
pid
 == 0) {

410 i‡(
©å
->
chûd_ö
) {

411 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_ö
),

412 
©å
->
chûd_ö
, 
≠r_unix_fûe_˛ónup
);

415 i‡(
©å
->
chûd_out
) {

416 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_out
),

417 
©å
->
chûd_out
, 
≠r_unix_fûe_˛ónup
);

420 i‡(
©å
->
chûd_îr
) {

421 
	`≠r_poﬁ_˛ónup_kûl
(
	`≠r_fûe_poﬁ_gë
(
©å
->
chûd_îr
),

422 
©å
->
chûd_îr
, 
≠r_unix_fûe_˛ónup
);

425 
	`≠r_poﬁ_˛ónup_f‹_exec
();

427 i‡((
©å
->
chûd_ö
Ë&& (©å->chûd_ö->
fûedes
 == -1)) {

428 
	`˛o£
(
STDIN_FILENO
);

430 i‡(
©å
->
chûd_ö
 &&

431 
©å
->
chûd_ö
->
fûedes
 !
STDIN_FILENO
) {

432 
	`dup2
(
©å
->
chûd_ö
->
fûedes
, 
STDIN_FILENO
);

433 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

436 i‡((
©å
->
chûd_out
Ë&& (©å->chûd_out->
fûedes
 == -1)) {

437 
	`˛o£
(
STDOUT_FILENO
);

439 i‡(
©å
->
chûd_out
 &&

440 
©å
->
chûd_out
->
fûedes
 !
STDOUT_FILENO
) {

441 
	`dup2
(
©å
->
chûd_out
->
fûedes
, 
STDOUT_FILENO
);

442 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

445 i‡((
©å
->
chûd_îr
Ë&& (©å->chûd_îr->
fûedes
 == -1)) {

446 
	`˛o£
(
STDERR_FILENO
);

448 i‡(
©å
->
chûd_îr
 &&

449 
©å
->
chûd_îr
->
fûedes
 !
STDERR_FILENO
) {

450 
	`dup2
(
©å
->
chûd_îr
->
fûedes
, 
STDERR_FILENO
);

451 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

454 
	`≠r_sig«l
(
SIGCHLD
, 
SIG_DFL
);

456 i‡(
©å
->
cuºdú
 !
NULL
) {

457 i‡(
	`chdú
(
©å
->
cuºdú
) == -1) {

458 i‡(
©å
->
îr‚
) {

459 
©å
->
	`îr‚
(
poﬁ
, 
î∫o
, "change of working directory failed");

461 
	`_exô
(-1);

466 i‡(
©å
->
gid
 !-1 && !
	`gëeuid
()) {

467 i‡(
	`£tgid
(
©å
->
gid
)) {

468 i‡(
©å
->
îr‚
) {

469 
©å
->
	`îr‚
(
poﬁ
, 
î∫o
, "setting of group failed");

471 
	`_exô
(-1);

475 i‡(
©å
->
uid
 !-1 && !
	`gëeuid
()) {

476 i‡(
	`£tuid
(
©å
->
uid
)) {

477 i‡(
©å
->
îr‚
) {

478 
©å
->
	`îr‚
(
poﬁ
, 
î∫o
, "setting of user failed");

480 
	`_exô
(-1);

484 i‡(
	`limô_¥oc
(
©å
Ë!
APR_SUCCESS
) {

485 i‡(
©å
->
îr‚
) {

486 
©å
->
	`îr‚
(
poﬁ
, 
î∫o
, "setting ofÑesourceÜimits failed");

488 
	`_exô
(-1);

491 i‡(
©å
->
cmdty≥
 =
APR_SHELLCMD
 ||

492 
©å
->
cmdty≥
 =
APR_SHELLCMD_ENV
) {

493 
⁄órg_Àn
 = 0;

494 c⁄° *
√w¨gs
[4];

496 
√w¨gs
[0] = 
SHELL_PATH
;

497 
√w¨gs
[1] = "-c";

499 
i
 = 0;

500 
¨gs
[
i
]) {

501 
⁄órg_Àn
 +
	`°æí
(
¨gs
[
i
]);

502 
⁄órg_Àn
++;

503 
i
++;

506 
i
) {

514 
√w¨gs
[2] = 
¨gs
[0];

518 *
ch
, *
⁄órg
;

520 
ch
 = 
⁄órg
 = 
	`≠r_∑Œoc
(
poﬁ
, 
⁄órg_Àn
);

521 
i
 = 0;

522 
¨gs
[
i
]) {

523 
size_t
 
Àn
 = 
	`°æí
(
¨gs
[
i
]);

525 
	`mem˝y
(
ch
, 
¨gs
[
i
], 
Àn
);

526 
ch
 +
Àn
;

527 *
ch
 = ' ';

528 ++
ch
;

529 ++
i
;

531 --
ch
;

532 *
ch
 = '\0';

533 
√w¨gs
[2] = 
⁄órg
;

537 
√w¨gs
[3] = 
NULL
;

539 i‡(
©å
->
dëached
) {

540 
	`≠r_¥oc_dëach
(
APR_PROC_DETACH_DAEMONIZE
);

543 i‡(
©å
->
cmdty≥
 =
APR_SHELLCMD
) {

544 
	`execve
(
SHELL_PATH
, (* c⁄° *Ë
√w¨gs
, (* c⁄° *)
ív
);

547 
	`execv
(
SHELL_PATH
, (* c⁄° *)
√w¨gs
);

550 i‡(
©å
->
cmdty≥
 =
APR_PROGRAM
) {

551 i‡(
©å
->
dëached
) {

552 
	`≠r_¥oc_dëach
(
APR_PROC_DETACH_DAEMONIZE
);

555 
	`execve
(
¥og«me
, (* c⁄° *)
¨gs
, (* c⁄° *)
ív
);

557 i‡(
©å
->
cmdty≥
 =
APR_PROGRAM_ENV
) {

558 i‡(
©å
->
dëached
) {

559 
	`≠r_¥oc_dëach
(
APR_PROC_DETACH_DAEMONIZE
);

562 
	`execv
(
¥og«me
, (* c⁄° *)
¨gs
);

566 i‡(
©å
->
dëached
) {

567 
	`≠r_¥oc_dëach
(
APR_PROC_DETACH_DAEMONIZE
);

570 
	`execvp
(
¥og«me
, (* c⁄° *)
¨gs
);

572 i‡(
©å
->
îr‚
) {

573 *
desc
;

575 
desc
 = 
	`≠r_p•rötf
(
poﬁ
, "exec of '%s' failed",

576 
¥og«me
);

577 
©å
->
	`îr‚
(
poﬁ
, 
î∫o
, 
desc
);

580 
	`_exô
(-1);

585 i‡(
©å
->
chûd_ö
 && (©å->chûd_ö->
fûedes
 != -1)) {

586 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

589 i‡(
©å
->
chûd_out
 && (©å->chûd_out->
fûedes
 != -1)) {

590 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

593 i‡(
©å
->
chûd_îr
 && (©å->chûd_îr->
fûedes
 != -1)) {

594 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

597  
APR_SUCCESS
;

598 
	}
}

600 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

601 *
exôcode
,

602 
≠r_exô_why_e
 *
exôwhy
,

603 
≠r_waô_how_e
 
waôhow
,

604 
≠r_poﬁ_t
 *
p
)

606 
¥oc
->
pid
 = -1;

607  
	`≠r_¥oc_waô
(
¥oc
, 
exôcode
, 
exôwhy
, 
waôhow
);

608 
	}
}

610 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

611 *
exôcode
, 
≠r_exô_why_e
 *
exôwhy
,

612 
≠r_waô_how_e
 
waôhow
)

614 
pid_t
 
p°©us
;

615 
waôpid_›ti⁄s
 = 
WUNTRACED
;

616 
exô_öt
;

617 
ign‹e
;

618 
≠r_exô_why_e
 
ign‹ewhy
;

620 i‡(
exôcode
 =
NULL
) {

621 
exôcode
 = &
ign‹e
;

624 i‡(
exôwhy
 =
NULL
) {

625 
exôwhy
 = &
ign‹ewhy
;

628 i‡(
waôhow
 !
APR_WAIT
) {

629 
waôpid_›ti⁄s
 |
WNOHANG
;

633 
p°©us
 = 
	`waôpid
(
¥oc
->
pid
, &
exô_öt
, 
waôpid_›ti⁄s
);

634 } 
p°©us
 < 0 && 
î∫o
 =
EINTR
);

636 i‡(
p°©us
 > 0) {

637 
¥oc
->
pid
 = 
p°©us
;

639 i‡(
	`WIFEXITED
(
exô_öt
)) {

640 *
exôwhy
 = 
APR_PROC_EXIT
;

641 *
exôcode
 = 
	`WEXITSTATUS
(
exô_öt
);

643 i‡(
	`WIFSIGNALED
(
exô_öt
)) {

644 *
exôwhy
 = 
APR_PROC_SIGNAL
;

646 #ifde‡
WCOREDUMP


647 i‡(
	`WCOREDUMP
(
exô_öt
)) {

648 *
exôwhy
 |
APR_PROC_SIGNAL_CORE
;

652 *
exôcode
 = 
	`WTERMSIG
(
exô_öt
);

656  
APR_EGENERAL
;

659  
APR_CHILD_DONE
;

661 i‡(
p°©us
 == 0) {

662  
APR_CHILD_NOTDONE
;

665  
î∫o
;

666 
	}
}

668 #i‡
APR_HAVE_STRUCT_RLIMIT


669 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_limô_£t
(
≠r_¥oˇâr_t
 *
©å
,

670 
≠r_öt32_t
 
wh©
,

671 
æimô
 *
limô
)

673 
wh©
) {

674 
APR_LIMIT_CPU
:

675 #ifde‡
RLIMIT_CPU


676 
©å
->
limô_˝u
 = 
limô
;

679  
APR_ENOTIMPL
;

682 
APR_LIMIT_MEM
:

683 #i‡
	`deföed
(
RLIMIT_DATA
Ë|| deföed(
RLIMIT_VMEM
Ë|| deföed(
RLIMIT_AS
)

684 
©å
->
limô_mem
 = 
limô
;

687  
APR_ENOTIMPL
;

690 
APR_LIMIT_NPROC
:

691 #ifde‡
RLIMIT_NPROC


692 
©å
->
limô_≈roc
 = 
limô
;

695  
APR_ENOTIMPL
;

698 
APR_LIMIT_NOFILE
:

699 #ifde‡
RLIMIT_NOFILE


700 
©å
->
limô_nofûe
 = 
limô
;

703  
APR_ENOTIMPL
;

708  
APR_SUCCESS
;

709 
	}
}

	@threadproc/unix/procsup.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

19 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_dëach
(
d´m⁄ize
)

21 i‡(
	`chdú
("/") == -1) {

22  
î∫o
;

25 #i‡!
	`deföed
(
MPE
Ë&& !deföed(
OS2
Ë&& !deföed(
TPF
Ë&& !deföed(
BEOS
)

28 i‡(
d´m⁄ize
) {

29 
x
;

31 i‡((
x
 = 
	`f‹k
()) > 0) {

32 
	`exô
(0);

34 i‡(
x
 == -1) {

35 
	`≥º‹
("fork");

36 
	`Ârötf
(
°dîr
, "unableÅo forkÇewÖrocess\n");

37 
	`exô
(1);

43 #ifde‡
HAVE_SETSID


48 i‡(
	`£tsid
(Ë=-1 && 
d´m⁄ize
) {

49  
î∫o
;

51 #ñi‡
	`deföed
(
NEXT
Ë|| deföed(
NEWSOS
)

52 i‡(
	`£çgΩ
(0, 
	`gëpid
()) == -1) {

53  
î∫o
;

55 #ñi‡
	`deföed
(
OS2
Ë|| deföed(
TPF
Ë|| deföed(
MPE
)

58 i‡(
	`£çgid
(0, 0) == -1) {

59  
î∫o
;

64 i‡(
	`‰e›í
("/dev/nuŒ", "r", 
°dö
Ë=
NULL
) {

65  
î∫o
;

72 i‡(
	`‰e›í
("/dev/nuŒ", "w", 
°dout
Ë=
NULL
) {

73  
î∫o
;

79 i‡(
	`‰e›í
("/dev/nuŒ", "w", 
°dîr
Ë=
NULL
) {

80  
î∫o
;

82  
APR_SUCCESS
;

83 
	}
}

85 #i‡(!
HAVE_WAITPID
)

91 
	$waôpid
(
pid_t
 
pid
, *
°©u•
, 
›ti⁄s
)

93 
tmp_pid
;

94 i‡(
	`kûl
(
pid
, 0) == -1) {

95 
î∫o
 = 
ECHILD
;

98 ((
tmp_pid
 = 
	`waô3
(
°©u•
, 
›ti⁄s
, 0)Ë!
pid
) &&

99 (
tmp_pid
 !-1Ë&& (tmp_pid !0Ë&& (
pid
 != -1))

101  
tmp_pid
;

102 
	}
}

	@threadproc/unix/signals.c

17 
	#INCL_DOSEXCEPTIONS


	)

18 
	~"≠r_¨ch_thªad¥oc.h
"

19 
	~"≠r_¥iv©e.h
"

20 
	~"≠r_poﬁs.h
"

21 
	~"≠r_sig«l.h
"

22 
	~"≠r_°rögs.h
"

24 
	~<as£π.h
>

25 #i‡
APR_HAS_THREADS
 && 
APR_HAVE_PTHREAD_H


26 
	~<±hªad.h
>

29 #ifde‡
SIGWAIT_TAKES_ONE_ARG


30 
	#≠r_sigwaô
(
a
,
b
Ë((*(b)=
	`sigwaô
(◊)))<0?-1:0)

	)

32 
	#≠r_sigwaô
(
a
,
b
Ë
	`sigwaô
(◊),(b))

	)

35 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_kûl
(
≠r_¥oc_t
 *
¥oc
, 
signum
)

37 #ifde‡
OS2


42 i‡(
signum
 =
SIGTERM
) {

43  
	`APR_OS2_STATUS
(
	`DosSídSig«lEx˚±i⁄
(
¥oc
->
pid
,

44 
XCPT_SIGNAL_BREAK
));

48 i‡(
	`kûl
(
¥oc
->
pid
, 
signum
) == -1) {

49  
î∫o
;

52  
APR_SUCCESS
;

53 
	}
}

56 #i‡
APR_HAVE_SIGACTION


58 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
DARWIN
)

59 
	$avoid_zombõs
(
signo
)

61 
exô_°©us
;

63 
	`waôpid
(-1, &
exô_°©us
, 
WNOHANG
) > 0) {

66 
	}
}

74 
	$APR_DECLARE
(
≠r_sigfunc_t
 *Ë
	$≠r_sig«l
(
signo
, 
≠r_sigfunc_t
 * 
func
)

76 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

78 
a˘
.
ß_h™dÀr
 = 
func
;

79 
	`sigem±y£t
(&
a˘
.
ß_mask
);

80 
a˘
.
ß_Êags
 = 0;

81 #ifde‡
SA_INTERRUPT


82 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

84 #i‡
	`deföed
(
__osf__
Ë&& deföed(
__Æpha
)

90 i‡((
signo
 =
SIGCHLD
Ë&& (
func
 =
SIG_IGN
)) {

91 
a˘
.
ß_Êags
 |
SA_NOCLDWAIT
;

94 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
DARWIN
)

99 i‡((
signo
 =
SIGCHLD
Ë&& (
func
 =
SIG_IGN
)) {

100 
a˘
.
ß_h™dÀr
 = 
avoid_zombõs
;

103 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

104  
SIG_ERR
;

105  
ﬂ˘
.
ß_h™dÀr
;

106 
	}
}

112 #i‡
deföed
(
SYS_SIGLIST_DECLARED
Ë|| 
HAVE_DECL_SYS_SIGLIST


114 
	$≠r_sig«l_öô
(
≠r_poﬁ_t
 *
pglobÆ
)

116 
	}
}

117 c⁄° *
	$≠r_sig«l_des¸ùti⁄_gë
(
signum
)

119  (
signum
 >0Ë? 
sys_sigli°
[signum] : "unknown signal (number)";

120 
	}
}

126 #i‡
deföed
(
NSIG
)

127 
	#APR_NUMSIG
 
NSIG


	)

128 #ñi‡
deföed
(
_NSIG
)

129 
	#APR_NUMSIG
 
_NSIG


	)

130 #ñi‡
deföed
(
__NSIG
)

131 
	#APR_NUMSIG
 
__NSIG


	)

133 
	#APR_NUMSIG
 33

	)

136 c⁄° *
	gsig«l_des¸ùti⁄
[
APR_NUMSIG
];

138 
	#°‹e_desc
(
ödex
, 
°rög
) \

140 i‡(
ödex
 >
APR_NUMSIG
) { \

141 
	`as£π
(
ödex
 < 
APR_NUMSIG
); \

144 
sig«l_des¸ùti⁄
[
ödex
] = 
°rög
; \

146 } 0)

	)

148 
	$≠r_sig«l_öô
(
≠r_poﬁ_t
 *
pglobÆ
)

150 
sig
;

152 
	`°‹e_desc
(0, "Signal 0");

154 #ifde‡
SIGHUP


155 
	`°‹e_desc
(
SIGHUP
, "Hangup");

157 #ifde‡
SIGINT


158 
	`°‹e_desc
(
SIGINT
, "Interrupt");

160 #ifde‡
SIGQUIT


161 
	`°‹e_desc
(
SIGQUIT
, "Quit");

163 #ifde‡
SIGILL


164 
	`°‹e_desc
(
SIGILL
, "Illegal instruction");

166 #ifde‡
SIGTRAP


167 
	`°‹e_desc
(
SIGTRAP
, "Trace/BPTÅrap");

169 #ifde‡
SIGIOT


170 
	`°‹e_desc
(
SIGIOT
, "IOT instruction");

172 #ifde‡
SIGABRT


173 
	`°‹e_desc
(
SIGABRT
, "Abort");

175 #ifde‡
SIGEMT


176 
	`°‹e_desc
(
SIGEMT
, "EmulatorÅrap");

178 #ifde‡
SIGFPE


179 
	`°‹e_desc
(
SIGFPE
, "ArithmeticÉxception");

181 #ifde‡
SIGKILL


182 
	`°‹e_desc
(
SIGKILL
, "Killed");

184 #ifde‡
SIGBUS


185 
	`°‹e_desc
(
SIGBUS
, "BusÉrror");

187 #ifde‡
SIGSEGV


188 
	`°‹e_desc
(
SIGSEGV
, "Segmentation fault");

190 #ifde‡
SIGSYS


191 
	`°‹e_desc
(
SIGSYS
, "Bad system call");

193 #ifde‡
SIGPIPE


194 
	`°‹e_desc
(
SIGPIPE
, "BrokenÖipe");

196 #ifde‡
SIGALRM


197 
	`°‹e_desc
(
SIGALRM
, "Alarm clock");

199 #ifde‡
SIGTERM


200 
	`°‹e_desc
(
SIGTERM
, "Terminated");

202 #ifde‡
SIGUSR1


203 
	`°‹e_desc
(
SIGUSR1
, "User defined signal 1");

205 #ifde‡
SIGUSR2


206 
	`°‹e_desc
(
SIGUSR2
, "User defined signal 2");

208 #ifde‡
SIGCLD


209 
	`°‹e_desc
(
SIGCLD
, "Child status change");

211 #ifde‡
SIGCHLD


212 
	`°‹e_desc
(
SIGCHLD
, "Child status change");

214 #ifde‡
SIGPWR


215 
	`°‹e_desc
(
SIGPWR
, "Power-failÑestart");

217 #ifde‡
SIGWINCH


218 
	`°‹e_desc
(
SIGWINCH
, "Window changed");

220 #ifde‡
SIGURG


221 
	`°‹e_desc
(
SIGURG
, "urgent socket condition");

223 #ifde‡
SIGPOLL


224 
	`°‹e_desc
(
SIGPOLL
, "PollableÉvent occurred");

226 #ifde‡
SIGIO


227 
	`°‹e_desc
(
SIGIO
, "socket I/OÖossible");

229 #ifde‡
SIGSTOP


230 
	`°‹e_desc
(
SIGSTOP
, "Stopped (signal)");

232 #ifde‡
SIGTSTP


233 
	`°‹e_desc
(
SIGTSTP
, "Stopped");

235 #ifde‡
SIGCONT


236 
	`°‹e_desc
(
SIGCONT
, "Continued");

238 #ifde‡
SIGTTIN


239 
	`°‹e_desc
(
SIGTTIN
, "Stopped (tty input)");

241 #ifde‡
SIGTTOU


242 
	`°‹e_desc
(
SIGTTOU
, "Stopped (tty output)");

244 #ifde‡
SIGVTALRM


245 
	`°‹e_desc
(
SIGVTALRM
, "virtualÅimerÉxpired");

247 #ifde‡
SIGPROF


248 
	`°‹e_desc
(
SIGPROF
, "profilingÅimerÉxpired");

250 #ifde‡
SIGXCPU


251 
	`°‹e_desc
(
SIGXCPU
, "exceeded cpuÜimit");

253 #ifde‡
SIGXFSZ


254 
	`°‹e_desc
(
SIGXFSZ
, "exceeded file sizeÜimit");

257 
sig
 = 0; sig < 
APR_NUMSIG
; ++sig)

258 i‡(
sig«l_des¸ùti⁄
[
sig
] =
NULL
)

259 
sig«l_des¸ùti⁄
[
sig
] = 
	`≠r_p•rötf
(
pglobÆ
, "signal #%d", sig);

260 
	}
}

262 c⁄° *
	$≠r_sig«l_des¸ùti⁄_gë
(
signum
)

265 (
signum
 >0 && signum < 
APR_NUMSIG
)

266 ? 
sig«l_des¸ùti⁄
[
signum
]

268 
	}
}

272 #i‡
APR_HAS_THREADS
 && (
HAVE_SIGSUSPEND
 || 
APR_HAVE_SIGWAIT
Ë&& !
deföed
(
OS2
)

274 
	$ªmove_sync_sigs
(
sig£t_t
 *
sig_mask
)

276 #ifde‡
SIGABRT


277 
	`sigdñ£t
(
sig_mask
, 
SIGABRT
);

279 #ifde‡
SIGBUS


280 
	`sigdñ£t
(
sig_mask
, 
SIGBUS
);

282 #ifde‡
SIGEMT


283 
	`sigdñ£t
(
sig_mask
, 
SIGEMT
);

285 #ifde‡
SIGFPE


286 
	`sigdñ£t
(
sig_mask
, 
SIGFPE
);

288 #ifde‡
SIGILL


289 
	`sigdñ£t
(
sig_mask
, 
SIGILL
);

291 #ifde‡
SIGIOT


292 
	`sigdñ£t
(
sig_mask
, 
SIGIOT
);

294 #ifde‡
SIGPIPE


295 
	`sigdñ£t
(
sig_mask
, 
SIGPIPE
);

297 #ifde‡
SIGSEGV


298 
	`sigdñ£t
(
sig_mask
, 
SIGSEGV
);

300 #ifde‡
SIGSYS


301 
	`sigdñ£t
(
sig_mask
, 
SIGSYS
);

303 #ifde‡
SIGTRAP


304 
	`sigdñ£t
(
sig_mask
, 
SIGTRAP
);

314 #ifde‡
SIGUSR2


315 
	`sigdñ£t
(
sig_mask
, 
SIGUSR2
);

317 
	}
}

319 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_sig«l_thªad
((*
sig«l_h™dÀr
)(
signum
))

321 
sig£t_t
 
sig_mask
;

322 #i‡
APR_HAVE_SIGWAIT


323 (*
sig_func
)(
signum
Ë((*)())
sig«l_h™dÀr
;

327 
	`sigfûl£t
(&
sig_mask
);

333 #ifde‡
SIGKILL


334 
	`sigdñ£t
(&
sig_mask
, 
SIGKILL
);

336 #ifde‡
SIGSTOP


337 
	`sigdñ£t
(&
sig_mask
, 
SIGSTOP
);

339 #ifde‡
SIGCONT


340 
	`sigdñ£t
(&
sig_mask
, 
SIGCONT
);

342 #ifde‡
SIGWAITING


343 
	`sigdñ£t
(&
sig_mask
, 
SIGWAITING
);

347 
	`ªmove_sync_sigs
(&
sig_mask
);

363 #i‡
	`deföed
(
_AIX
)

364 #i‡
	`deföed
(
__64BIT__
Ë&& deföed(
_AIXVERSION_510
)

365 #ifde‡
_ALL_SOURCE


366 
sig_mask
.
ss_£t
[3] &= 0x7FFFFFFF;

368 
sig_mask
.
__ss_£t
[3] &= 0x7FFFFFFF;

371 #ifde‡
_ALL_SOURCE


372 
sig_mask
.
hisigs
 &= 0x7FFFFFFF;

374 
sig_mask
.
__hisigs
 &= 0x7FFFFFFF;

380 #i‡
APR_HAVE_SIGWAIT


381 
sig«l_ª˚ived
;

383 i‡(
	`≠r_sigwaô
(&
sig_mask
, &
sig«l_ª˚ived
) != 0)

388 i‡(
	`sig_func
(
sig«l_ª˚ived
) == 1) {

389  
APR_SUCCESS
;

391 #ñi‡
HAVE_SIGSUSPEND


392 
	`sigsu•íd
(&
sig_mask
);

394 #îr‹ 
No
 
	`≠r_sigwaô
(Ë
™d
 
no
 
	`sigsu•íd
()

397 
	}
}

399 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_£tup_sig«l_thªad
()

401 
sig£t_t
 
sig_mask
;

402 
rv
;

416 
	`sigfûl£t
(&
sig_mask
);

417 
	`ªmove_sync_sigs
(&
sig_mask
);

419 #i‡
	`deföed
(
SIGPROCMASK_SETS_THREAD_MASK
Ë|| ! 
APR_HAS_THREADS


420 i‡((
rv
 = 
	`sig¥ocmask
(
SIG_SETMASK
, &
sig_mask
, 
NULL
)) != 0) {

421 
rv
 = 
î∫o
;

424 i‡((
rv
 = 
	`±hªad_sigmask
(
SIG_SETMASK
, &
sig_mask
, 
NULL
)) != 0) {

425 #ifde‡
HAVE_ZOS_PTHREADS


426 
rv
 = 
î∫o
;

430  
rv
;

431 
	}
}

435 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_block
(
signum
)

437 #i‡
APR_HAVE_SIGACTION


438 
sig£t_t
 
sig_mask
;

439 
rv
;

441 
	`sigem±y£t
(&
sig_mask
);

443 
	`sigadd£t
(&
sig_mask
, 
signum
);

445 #i‡
	`deföed
(
SIGPROCMASK_SETS_THREAD_MASK
Ë|| ! 
APR_HAS_THREADS


446 i‡((
rv
 = 
	`sig¥ocmask
(
SIG_BLOCK
, &
sig_mask
, 
NULL
)) != 0) {

447 
rv
 = 
î∫o
;

450 i‡((
rv
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
sig_mask
, 
NULL
)) != 0) {

451 #ifde‡
HAVE_ZOS_PTHREADS


452 
rv
 = 
î∫o
;

456  
rv
;

458  
APR_ENOTIMPL
;

460 
	}
}

462 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_unblock
(
signum
)

464 #i‡
APR_HAVE_SIGACTION


465 
sig£t_t
 
sig_mask
;

466 
rv
;

468 
	`sigem±y£t
(&
sig_mask
);

470 
	`sigadd£t
(&
sig_mask
, 
signum
);

472 #i‡
	`deföed
(
SIGPROCMASK_SETS_THREAD_MASK
Ë|| ! 
APR_HAS_THREADS


473 i‡((
rv
 = 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
sig_mask
, 
NULL
)) != 0) {

474 
rv
 = 
î∫o
;

477 i‡((
rv
 = 
	`±hªad_sigmask
(
SIG_UNBLOCK
, &
sig_mask
, 
NULL
)) != 0) {

478 #ifde‡
HAVE_ZOS_PTHREADS


479 
rv
 = 
î∫o
;

483  
rv
;

485  
APR_ENOTIMPL
;

487 
	}
}

	@threadproc/unix/thread.c

17 
	~"≠r.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_¨ch_thªad¥oc.h
"

21 #i‡
APR_HAS_THREADS


23 #i‡
APR_HAVE_PTHREAD_H


26 
≠r_°©us_t
 
	$thªad©å_˛ónup
(*
d©a
)

28 
≠r_thªad©å_t
 *
©å
 = 
d©a
;

29 
≠r_°©us_t
 
rv
;

31 
rv
 = 
	`±hªad_©å_de°roy
(&
©å
->attr);

32 #ifde‡
HAVE_ZOS_PTHREADS


33 i‡(
rv
) {

34 
rv
 = 
î∫o
;

37  
rv
;

38 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w
,

41 
≠r_poﬁ_t
 *
poﬁ
)

43 
≠r_°©us_t
 
°©
;

45 (*
√w
Ë
	`≠r_∑Œoc
(
poﬁ
, (
≠r_thªad©å_t
));

46 (*
√w
)->
poﬁ
 =Öool;

47 
°©
 = 
	`±hªad_©å_öô
(&(*
√w
)->
©å
);

49 i‡(
°©
 == 0) {

50 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, *
√w
, 
thªad©å_˛ónup
,

51 
≠r_poﬁ_˛ónup_nuŒ
);

52  
APR_SUCCESS
;

54 #ifde‡
HAVE_ZOS_PTHREADS


55 
°©
 = 
î∫o
;

58  
°©
;

59 
	}
}

61 #i‡
deföed
(
PTHREAD_CREATE_DETACHED
)

62 
	#DETACH_ARG
(
v
Ë((vË? 
PTHREAD_CREATE_DETACHED
 : 
PTHREAD_CREATE_JOINABLE
)

	)

64 
	#DETACH_ARG
(
v
Ë((vË? 1 : 0)

	)

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
,

68 
≠r_öt32_t
 
⁄
)

70 
≠r_°©us_t
 
°©
;

71 #ifde‡
HAVE_ZOS_PTHREADS


72 
¨g
 = 
	`DETACH_ARG
(
⁄
);

74 i‡((
°©
 = 
	`±hªad_©å_£tdëach°©e
(&
©å
->©å, &
¨g
)) == 0) {

76 i‡((
°©
 = 
	`±hªad_©å_£tdëach°©e
(&
©å
->attr,

77 
	`DETACH_ARG
(
⁄
))) == 0) {

79  
APR_SUCCESS
;

82 #ifde‡
HAVE_ZOS_PTHREADS


83 
°©
 = 
î∫o
;

86  
°©
;

88 
	}
}

90 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
)

92 
°©e
;

94 #ifde‡
PTHREAD_ATTR_GETDETACHSTATE_TAKES_ONE_ARG


95 
°©e
 = 
	`±hªad_©å_gëdëach°©e
(&
©å
->attr);

97 
	`±hªad_©å_gëdëach°©e
(&
©å
->©å, &
°©e
);

99 i‡(
°©e
 =
	`DETACH_ARG
(1))

100  
APR_DETACH
;

101  
APR_NOTDETACH
;

102 
	}
}

104 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

105 
≠r_size_t
 
°acksize
)

107 
°©
;

109 
°©
 = 
	`±hªad_©å_£t°acksize
(&
©å
->©å, 
°acksize
);

110 i‡(
°©
 == 0) {

111  
APR_SUCCESS
;

113 #ifde‡
HAVE_ZOS_PTHREADS


114 
°©
 = 
î∫o
;

117  
°©
;

118 
	}
}

120 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

121 
≠r_size_t
 
size
)

123 #ifde‡
HAVE_PTHREAD_ATTR_SETGUARDSIZE


124 
≠r_°©us_t
 
rv
;

126 
rv
 = 
	`±hªad_©å_£tgu¨dsize
(&
©å
->©å, 
size
);

127 i‡(
rv
 == 0) {

128  
APR_SUCCESS
;

130 #ifde‡
HAVE_ZOS_PTHREADS


131 
rv
 = 
î∫o
;

133  
rv
;

135  
APR_ENOTIMPL
;

137 
	}
}

139 *
	$dummy_w‹kî
(*
›aque
)

141 
≠r_thªad_t
 *
thªad
 = (≠r_thªad_t*)
›aque
;

142  
thªad
->
	`func
—hªad,Åhªad->
d©a
);

143 
	}
}

145 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w
,

146 
≠r_thªad©å_t
 *
©å
,

147 
≠r_thªad_°¨t_t
 
func
,

148 *
d©a
,

149 
≠r_poﬁ_t
 *
poﬁ
)

151 
≠r_°©us_t
 
°©
;

152 
±hªad_©å_t
 *
ãmp
;

154 (*
√w
Ë(
≠r_thªad_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_t));

156 i‡((*
√w
Ë=
NULL
) {

157  
APR_ENOMEM
;

160 (*
√w
)->
td
 = (
±hªad_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (pthread_t));

162 i‡((*
√w
)->
td
 =
NULL
) {

163  
APR_ENOMEM
;

166 (*
√w
)->
d©a
 = data;

167 (*
√w
)->
func
 = func;

169 i‡(
©å
)

170 
ãmp
 = &
©å
->attr;

172 
ãmp
 = 
NULL
;

174 
°©
 = 
	`≠r_poﬁ_¸óã
(&(*
√w
)->
poﬁ
,Öool);

175 i‡(
°©
 !
APR_SUCCESS
) {

176  
°©
;

179 i‡((
°©
 = 
	`±hªad_¸óã
((*
√w
)->
td
, 
ãmp
, 
dummy_w‹kî
, (*new))) == 0) {

180  
APR_SUCCESS
;

183 #ifde‡
HAVE_ZOS_PTHREADS


184 
°©
 = 
î∫o
;

187  
°©
;

189 
	}
}

191 
	$APR_DECLARE
(
≠r_os_thªad_t
Ë
	$≠r_os_thªad_cuºít
()

193  
	`±hªad_£lf
();

194 
	}
}

196 
	$APR_DECLARE
(Ë
	$≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,

197 
≠r_os_thªad_t
 
tid2
)

199  
	`±hªad_equÆ
(
tid1
, 
tid2
);

200 
	}
}

202 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_exô
(
≠r_thªad_t
 *
thd
,

203 
≠r_°©us_t
 
ªtvÆ
)

205 
thd
->
exôvÆ
 = 
ªtvÆ
;

206 
	`≠r_poﬁ_de°roy
(
thd
->
poﬁ
);

207 
	`±hªad_exô
(
NULL
);

208  
APR_SUCCESS
;

209 
	}
}

211 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_joö
(
≠r_°©us_t
 *
ªtvÆ
,

212 
≠r_thªad_t
 *
thd
)

214 
≠r_°©us_t
 
°©
;

215 
≠r_°©us_t
 *
thªad_°©
;

217 i‡((
°©
 = 
	`±hªad_joö
(*
thd
->
td
,(*)&
thªad_°©
)) == 0) {

218 *
ªtvÆ
 = 
thd
->
exôvÆ
;

219  
APR_SUCCESS
;

222 #ifde‡
HAVE_ZOS_PTHREADS


223 
°©
 = 
î∫o
;

226  
°©
;

228 
	}
}

230 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
)

232 
≠r_°©us_t
 
°©
;

234 #ifde‡
HAVE_ZOS_PTHREADS


235 i‡((
°©
 = 
	`±hªad_dëach
(
thd
->
td
)) == 0) {

237 i‡((
°©
 = 
	`±hªad_dëach
(*
thd
->
td
)) == 0) {

240  
APR_SUCCESS
;

243 #ifde‡
HAVE_ZOS_PTHREADS


244 
°©
 = 
î∫o
;

247  
°©
;

249 
	}
}

251 
	$APR_DECLARE
(Ë
	$≠r_thªad_yõld
()

253 #ifde‡
HAVE_PTHREAD_YIELD


254 #ifde‡
HAVE_ZOS_PTHREADS


255 
	`±hªad_yõld
(
NULL
);

257 
	`±hªad_yõld
();

260 #ifde‡
HAVE_SCHED_YIELD


261 
	`sched_yõld
();

264 
	}
}

266 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
,

267 
≠r_thªad_t
 *
thªad
)

269  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªad
->
poﬁ
);

270 
	}
}

272 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

273 
	$≠r_°©us_t
 (*
˛ónup
)(*),

274 
≠r_thªad_t
 *
thªad
)

276  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªad
->
poﬁ
);

277 
	}
}

279 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
,

280 
≠r_thªad_t
 *
thd
)

282 *
thëhd
 = 
thd
->
td
;

283  
APR_SUCCESS
;

284 
	}
}

286 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
,

287 
≠r_os_thªad_t
 *
thëhd
,

288 
≠r_poﬁ_t
 *
poﬁ
)

290 i‡(
poﬁ
 =
NULL
) {

291  
APR_ENOPOOL
;

294 i‡((*
thd
Ë=
NULL
) {

295 (*
thd
Ë(
≠r_thªad_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_thread_t));

296 (*
thd
)->
poﬁ
 =Öool;

299 (*
thd
)->
td
 = 
thëhd
;

300  
APR_SUCCESS
;

301 
	}
}

303 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

304 
≠r_poﬁ_t
 *
p
)

306 c⁄° 
±hªad_⁄˚_t
 
⁄˚_öô
 = 
PTHREAD_ONCE_INIT
;

308 *
c⁄åﬁ
 = 
	`≠r_∑Œoc
(
p
, (**control));

309 (*
c⁄åﬁ
)->
⁄˚
 = 
⁄˚_öô
;

310  
APR_SUCCESS
;

311 
	}
}

313 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

314 (*
func
)())

316  
	`±hªad_⁄˚
(&
c⁄åﬁ
->
⁄˚
, 
func
);

317 
	}
}

319 
	$APR_POOL_IMPLEMENT_ACCESSOR
(
thªad
)

324 #i‡!
APR_HAS_THREADS


327 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_os_thªad_gë
();

329 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
()

331  
APR_ENOTIMPL
;

332 
	}
}

	@threadproc/unix/threadpriv.c

17 
	~"≠r.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_¨ch_thªad¥oc.h
"

21 #i‡
APR_HAS_THREADS


23 #i‡
APR_HAVE_PTHREAD_H


24 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

25 (*
de°
)(*),

26 
≠r_poﬁ_t
 *
poﬁ
)

28 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_threadkey_t));

30 i‡((*
key
Ë=
NULL
) {

31  
APR_ENOMEM
;

34 (*
key
)->
poﬁ
 =Öool;

36  
	`±hªad_key_¸óã
(&(*
key
)->key, 
de°
);

38 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_gë
(**
√w
,

41 
≠r_thªadkey_t
 *
key
)

43 #ifde‡
PTHREAD_GETSPECIFIC_TAKES_TWO_ARGS


44 i‡(
	`±hªad_gë•ecific
(
key
->key,
√w
))

45 *
√w
 = 
NULL
;

47 (*
√w
Ë
	`±hªad_gë•ecific
(
key
->key);

49  
APR_SUCCESS
;

50 
	}
}

52 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_£t
(*
¥iv
,

53 
≠r_thªadkey_t
 *
key
)

55 
≠r_°©us_t
 
°©
;

57 i‡((
°©
 = 
	`±hªad_£t•ecific
(
key
->key, 
¥iv
)) == 0) {

58  
APR_SUCCESS
;

61  
°©
;

63 
	}
}

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
)

67 #ifde‡
HAVE_PTHREAD_KEY_DELETE


68 
≠r_°©us_t
 
°©
;

70 i‡((
°©
 = 
	`±hªad_key_dñëe
(
key
->key)) == 0) {

71  
APR_SUCCESS
;

74  
°©
;

76  
APR_ENOTIMPL
;

78 
	}
}

80 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
,

81 
≠r_thªadkey_t
 *
thªadkey
)

83  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªadkey
->
poﬁ
);

84 
	}
}

86 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_d©a_£t
(*
d©a
, c⁄° *
key
,

87 
	$≠r_°©us_t
 (*
˛ónup
)(*),

88 
≠r_thªadkey_t
 *
thªadkey
)

90  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªadkey
->
poﬁ
);

91 
	}
}

93 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
,

94 
≠r_thªadkey_t
 *
key
)

96 *
thekey
 = 
key
->key;

97  
APR_SUCCESS
;

98 
	}
}

100 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

101 
≠r_os_thªadkey_t
 *
thekey
,

102 
≠r_poﬁ_t
 *
poﬁ
)

104 i‡(
poﬁ
 =
NULL
) {

105  
APR_ENOPOOL
;

108 i‡((*
key
Ë=
NULL
) {

109 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_threadkey_t));

110 (*
key
)->
poﬁ
 =Öool;

113 (*
key
)->key = *
thekey
;

114  
APR_SUCCESS
;

115 
	}
}

119 #i‡!
APR_HAS_THREADS


122 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_os_thªadkey_gë
();

124 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_gë
()

126  
APR_ENOTIMPL
;

127 
	}
}

	@threadproc/win32/proc.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

20 
	~"≠r_thªad_¥oc.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"≠r_gíîÆ.h
"

23 
	~"≠r_°rögs.h
"

24 
	~"≠r_p‹èbÀ.h
"

25 
	~"≠r_lib.h
"

26 
	~<°dlib.h
>

27 #i‡
APR_HAVE_SIGNAL_H


28 
	~<sig«l.h
>

30 
	~<°rög.h
>

31 #i‡
APR_HAVE_PROCESS_H


32 
	~<¥o˚ss.h
>

38 
≠r_fûe_t
 
	gno_fûe
 = { 
NULL
, 
INVALID_HANDLE_VALUE
, };

44 #i‚de‡
LOGON32_LOGON_NETWORK


45 
	#LOGON32_LOGON_NETWORK
 3

	)

48 #ifde‡
_WIN32_WCE


49 #i‚de‡
DETACHED_PROCESS


50 
	#DETACHED_PROCESS
 0

	)

52 #i‚de‡
CREATE_UNICODE_ENVIRONMENT


53 
	#CREATE_UNICODE_ENVIRONMENT
 0

	)

55 #i‚de‡
STARTF_USESHOWWINDOW


56 
	#STARTF_USESHOWWINDOW
 0

	)

58 #i‚de‡
SW_HIDE


59 
	#SW_HIDE
 0

	)

68 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_¸óã
(
≠r_¥oˇâr_t
 **
√w
,

69 
≠r_poﬁ_t
 *
poﬁ
)

71 (*
√w
Ë(
≠r_¥oˇâr_t
 *)
	`≠r_pˇŒoc
(
poﬁ
, (apr_procattr_t));

72 (*
√w
)->
poﬁ
 =Öool;

73 (*
√w
)->
cmdty≥
 = 
APR_PROGRAM
;

74  
APR_SUCCESS
;

75 
	}
}

77 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_io_£t
(
≠r_¥oˇâr_t
 *
©å
,

78 
≠r_öt32_t
 
ö
,

79 
≠r_öt32_t
 
out
,

80 
≠r_öt32_t
 
îr
)

82 
≠r_°©us_t
 
°©
 = 
APR_SUCCESS
;

84 i‡(
ö
) {

90 i‡(
ö
 =
APR_CHILD_BLOCK
)

91 
ö
 = 
APR_READ_BLOCK
;

92 i‡(
ö
 =
APR_PARENT_BLOCK
)

93 
ö
 = 
APR_WRITE_BLOCK
;

95 i‡(
ö
 =
APR_NO_FILE
)

96 
©å
->
chûd_ö
 = &
no_fûe
;

98 
°©
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
chûd_ö
, &©å->
∑ª¡_ö
,

99 
ö
, 
©å
->
poﬁ
);

101 i‡(
°©
 =
APR_SUCCESS
)

102 
°©
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_ö
);

104 i‡(
out
 && 
°©
 =
APR_SUCCESS
) {

105 i‡(
out
 =
APR_NO_FILE
)

106 
©å
->
chûd_out
 = &
no_fûe
;

108 
°©
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_out
, &©å->
chûd_out
,

109 
out
, 
©å
->
poﬁ
);

111 i‡(
°©
 =
APR_SUCCESS
)

112 
°©
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_out
);

114 i‡(
îr
 && 
°©
 =
APR_SUCCESS
) {

115 i‡(
îr
 =
APR_NO_FILE
)

116 
©å
->
chûd_îr
 = &
no_fûe
;

118 
°©
 = 
	`≠r_fûe_pùe_¸óã_ex
(&
©å
->
∑ª¡_îr
, &©å->
chûd_îr
,

119 
îr
, 
©å
->
poﬁ
);

121 i‡(
°©
 =
APR_SUCCESS
)

122 
°©
 = 
	`≠r_fûe_öhîô_un£t
(
©å
->
∑ª¡_îr
);

124  
°©
;

125 
	}
}

127 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_ö_£t
(
≠r_¥oˇâr_t
 *
©å
,

128 
≠r_fûe_t
 *
chûd_ö
,

129 
≠r_fûe_t
 *
∑ª¡_ö
)

131 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

133 i‡(
chûd_ö
) {

134 i‡((
©å
->
chûd_ö
 =
NULL
Ë|| (©å->chûd_ö =&
no_fûe
))

135 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

137 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_ö
, chûd_ö,áâr->
poﬁ
);

139 i‡(
rv
 =
APR_SUCCESS
)

140 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_ö
);

143 i‡(
∑ª¡_ö
 && 
rv
 =
APR_SUCCESS
) {

144 i‡(
©å
->
∑ª¡_ö
 =
NULL
)

145 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

147 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_ö
,Ö¨ít_ö,áâr->
poﬁ
);

150  
rv
;

151 
	}
}

153 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_out_£t
(
≠r_¥oˇâr_t
 *
©å
,

154 
≠r_fûe_t
 *
chûd_out
,

155 
≠r_fûe_t
 *
∑ª¡_out
)

157 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

159 i‡(
chûd_out
) {

160 i‡((
©å
->
chûd_out
 =
NULL
Ë|| (©å->chûd_ouà=&
no_fûe
))

161 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

163 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_out
, chûd_out,áâr->
poﬁ
);

165 i‡(
rv
 =
APR_SUCCESS
)

166 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_out
);

169 i‡(
∑ª¡_out
 && 
rv
 =
APR_SUCCESS
) {

170 i‡(
©å
->
∑ª¡_out
 =
NULL
)

171 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

173 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_out
,Ö¨ít_out,áâr->
poﬁ
);

176  
rv
;

177 
	}
}

179 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr_£t
(
≠r_¥oˇâr_t
 *
©å
,

180 
≠r_fûe_t
 *
chûd_îr
,

181 
≠r_fûe_t
 *
∑ª¡_îr
)

183 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

185 i‡(
chûd_îr
) {

186 i‡((
©å
->
chûd_îr
 =
NULL
Ë|| (©å->chûd_î∏=&
no_fûe
))

187 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

189 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
chûd_îr
, chûd_îr,áâr->
poﬁ
);

191 i‡(
rv
 =
APR_SUCCESS
)

192 
rv
 = 
	`≠r_fûe_öhîô_£t
(
©å
->
chûd_îr
);

195 i‡(
∑ª¡_îr
 && 
rv
 =
APR_SUCCESS
) {

196 i‡(
©å
->
∑ª¡_îr
 =
NULL
)

197 
rv
 = 
	`≠r_fûe_dup
(&
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

199 
rv
 = 
	`≠r_fûe_dup2
(
©å
->
∑ª¡_îr
,Ö¨ít_îr,áâr->
poﬁ
);

202  
rv
;

203 
	}
}

205 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dú_£t
(
≠r_¥oˇâr_t
 *
©å
,

206 c⁄° *
dú
)

211  
	`≠r_fûï©h_mîge
(&
©å
->
cuºdú
, 
NULL
, 
dú
,

212 
APR_FILEPATH_NATIVE
, 
©å
->
poﬁ
);

213 
	}
}

215 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_cmdty≥_£t
(
≠r_¥oˇâr_t
 *
©å
,

216 
≠r_cmdty≥_e
 
cmd
)

218 
©å
->
cmdty≥
 = 
cmd
;

219  
APR_SUCCESS
;

220 
	}
}

222 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_dëach_£t
(
≠r_¥oˇâr_t
 *
©å
,

223 
≠r_öt32_t
 
dë
)

225 
©å
->
dëached
 = 
dë
;

226  
APR_SUCCESS
;

227 
	}
}

229 #i‚de‡
_WIN32_WCE


230 
≠r_°©us_t
 
	$©å_˛ónup
(*
thóâr
)

232 
≠r_¥oˇâr_t
 *
©å
 = (≠r_¥oˇâr_à*)
thóâr
;

233 i‡(
©å
->
u£r_tokí
)

234 
	`Clo£H™dÀ
(
©å
->
u£r_tokí
);

235 
©å
->
u£r_tokí
 = 
NULL
;

236  
APR_SUCCESS
;

237 
	}
}

240 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_u£r_£t
(
≠r_¥oˇâr_t
 *
©å
,

241 c⁄° *
u£∫ame
,

242 c⁄° *
∑ssw‹d
)

244 #ifde‡
_WIN32_WCE


245  
APR_ENOTIMPL
;

247 
HANDLE
 
u£r
;

248 
≠r_wch¨_t
 *
wu£∫ame
 = 
NULL
;

249 
≠r_wch¨_t
 *
w∑ssw‹d
 = 
NULL
;

250 
≠r_°©us_t
 
rv
;

251 
≠r_size_t
 
Àn
, 
wÀn
;

253 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT_4
)

255 i‡(
©å
->
u£r_tokí
) {

257 i‡(
©å
->
îr‚
) {

258 
©å
->
	`îr‚
◊âr->
poﬁ
, 0,

259 
	`≠r_p°rˇt
(
©å
->
poﬁ
,

261 " o¿u£∫ame: ", 
u£∫ame
, 
NULL
));

263  
APR_EINVAL
;

265 
Àn
 = 
	`°æí
(
u£∫ame
) + 1;

266 
wÀn
 = 
Àn
;

267 
wu£∫ame
 = 
	`≠r_∑Œoc
(
©å
->
poﬁ
, 
wÀn
 * (
≠r_wch¨_t
));

268 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
u£∫ame
, &
Àn
, 
wu£∫ame
, &
wÀn
))

269 !
APR_SUCCESS
) {

270 i‡(
©å
->
îr‚
) {

271 
©å
->
	`îr‚
◊âr->
poﬁ
, 
rv
,

272 
	`≠r_p°rˇt
(
©å
->
poﬁ
,

274 " o¿u£∫ame: ", 
u£∫ame
, 
NULL
));

276  
rv
;

278 i‡(
∑ssw‹d
) {

279 
Àn
 = 
	`°æí
(
∑ssw‹d
) + 1;

280 
wÀn
 = 
Àn
;

281 
w∑ssw‹d
 = 
	`≠r_∑Œoc
(
©å
->
poﬁ
, 
wÀn
 * (
≠r_wch¨_t
));

282 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
∑ssw‹d
, &
Àn
, 
w∑ssw‹d
, &
wÀn
))

283 !
APR_SUCCESS
) {

284 i‡(
©å
->
îr‚
) {

285 
©å
->
	`îr‚
◊âr->
poﬁ
, 
rv
,

286 
	`≠r_p°rˇt
(
©å
->
poﬁ
,

288 " o¿∑ssw‹d: ", 
∑ssw‹d
, 
NULL
));

290  
rv
;

293 i‡(!
	`Log⁄U£rW
(
wu£∫ame
,

294 
NULL
,

295 
w∑ssw‹d
 ? w∑ssw‹d : 
L
"",

296 
LOGON32_LOGON_NETWORK
,

297 
LOGON32_PROVIDER_DEFAULT
,

298 &
u£r
)) {

300  
	`≠r_gë_os_îr‹
();

302 i‡(
w∑ssw‹d
)

303 
	`mem£t
(
w∑ssw‹d
, 0, 
wÀn
 * (
≠r_wch¨_t
));

305 i‡(!
	`Du∂iˇãTokíEx
(
u£r
,

306 
TOKEN_QUERY
 | 
TOKEN_DUPLICATE
 | 
TOKEN_ASSIGN_PRIMARY
,

307 
NULL
,

308 
SecurôyIm≥rs⁄©i⁄
,

309 
TokíPrim¨y
,

310 &(
©å
->
u£r_tokí
))) {

312 
rv
 = 
	`≠r_gë_os_îr‹
();

313 
	`Clo£H™dÀ
(
u£r
);

314  
rv
;

316 
	`Clo£H™dÀ
(
u£r
);

318 
©å
->
sd
 = 
	`≠r_pˇŒoc
◊âr->
poﬁ
, 
SECURITY_DESCRIPTOR_MIN_LENGTH
);

319 
	`InôülizeSecurôyDes¸ùt‹
(
©å
->
sd
, 
SECURITY_DESCRIPTOR_REVISION
);

320 
	`SëSecurôyDes¸ùt‹Da˛
(
©å
->
sd
, -1, 0, 0);

321 
©å
->
ß
 = 
	`≠r_∑Œoc
◊âr->
poﬁ
, (
SECURITY_ATTRIBUTES
));

322 
©å
->
ß
->
nLígth
 =  (
SECURITY_ATTRIBUTES
);

323 
©å
->
ß
->
ÕSecurôyDes¸ùt‹
 =áâr->
sd
;

324 
©å
->
ß
->
bInhîôH™dÀ
 = 
FALSE
;

327 
	`≠r_poﬁ_˛ónup_ªgi°î
(
©å
->
poﬁ
, (*)attr,

328 
©å_˛ónup
,

329 
≠r_poﬁ_˛ónup_nuŒ
);

330  
APR_SUCCESS
;

333  
APR_ENOTIMPL
;

335 
	}
}

337 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_group_£t
(
≠r_¥oˇâr_t
 *
©å
,

338 c⁄° *
grou≤ame
)

341  
APR_SUCCESS
;

342 
	}
}

344 c⁄° * 
	$has_•a˚
(c⁄° *
°r
)

346 c⁄° *
ch
;

347 
ch
 = 
°r
; *ch; ++ch) {

348 i‡(
	`≠r_is•a˚
(*
ch
)) {

349  
ch
;

352  
NULL
;

353 
	}
}

355 *
	$≠r_ˇªt_esˇ≥_¨gs
(
≠r_poﬁ_t
 *
p
, c⁄° *
°r
)

357 *
cmd
;

358 *
d
;

359 c⁄° *
s
;

361 
cmd
 = 
	`≠r_∑Œoc
(
p
, 2 * 
	`°æí
(
°r
) + 1);

362 
d
 = (*)
cmd
;

363 
s
 = (c⁄° *)
°r
;

364 ; *
s
; ++s) {

371 i‡(*
s
 == '\r' || *s == '\n') {

372 *
d
++ = ' ';

376 i‡(
	`IS_SHCHAR
(*
s
)) {

377 *
d
++ = '^';

379 *
d
++ = *
s
;

381 *
d
 = '\0';

383  
cmd
;

384 
	}
}

386 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_chûd_îr‚_£t
(
≠r_¥oˇâr_t
 *
©å
,

387 
≠r_chûd_îr‚_t
 *
îr‚
)

389 
©å
->
îr‚
 =Érrfn;

390  
APR_SUCCESS
;

391 
	}
}

393 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_îr‹_check_£t
(
≠r_¥oˇâr_t
 *
©å
,

394 
≠r_öt32_t
 
chk
)

396 
©å
->
îrchk
 = 
chk
;

397  
APR_SUCCESS
;

398 
	}
}

400 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oˇâr_addr•a˚_£t
(
≠r_¥oˇâr_t
 *
©å
,

401 
≠r_öt32_t
 
addr•a˚
)

404  
APR_SUCCESS
;

405 
	}
}

407 #i‡
APR_HAS_UNICODE_FS
 && !
deföed
(
_WIN32_WCE
)

412 
CRITICAL_SECTION
 
	g¥oc_lock
;

414 
≠r_°©us_t
 
	$thªad¥oc_globÆ_˛ónup
(*
ign‹ed
)

416 
	`DñëeCrôiˇlSe˘i⁄
(&
¥oc_lock
);

417  
APR_SUCCESS
;

418 
	}
}

426 
≠r_°©us_t
 
	$≠r_thªad¥oc_öô
(
≠r_poﬁ_t
 *
poﬁ
)

428 
IF_WIN_OS_IS_UNICODE


430 
	`InôülizeCrôiˇlSe˘i⁄
(&
¥oc_lock
);

432 
	`≠r_poﬁ_˛ónup_ªgi°î
(
poﬁ
, &
¥oc_lock
,

433 
thªad¥oc_globÆ_˛ónup
,

434 
≠r_poﬁ_˛ónup_nuŒ
);

436  
APR_SUCCESS
;

437 
	}
}

441 
≠r_°©us_t
 
	$≠r_thªad¥oc_öô
(
≠r_poﬁ_t
 *
poﬁ
)

443  
APR_SUCCESS
;

444 
	}
}

448 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_¸óã
(
≠r_¥oc_t
 *
√w
,

449 c⁄° *
¥og«me
,

450 c⁄° * c⁄° *
¨gs
,

451 c⁄° * c⁄° *
ív
,

452 
≠r_¥oˇâr_t
 *
©å
,

453 
≠r_poﬁ_t
 *
poﬁ
)

455 
≠r_°©us_t
 
rv
;

456 
≠r_size_t
 
i
;

457 c⁄° *
¨gv0
;

458 *
cmdlöe
;

459 *
pEnvBlock
;

460 
PROCESS_INFORMATION
 
pi
;

461 
DWORD
 
dwCª©i⁄Fœgs
 = 0;

463 
√w
->
ö
 = 
©å
->
∑ª¡_ö
;

464 
√w
->
out
 = 
©å
->
∑ª¡_out
;

465 
√w
->
îr
 = 
©å
->
∑ª¡_îr
;

467 i‡(
©å
->
dëached
) {

475 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

480 
dwCª©i⁄Fœgs
 |
DETACHED_PROCESS
;

488 i‡(
¥og«me
[0] == '\"') {

489 
¥og«me
 = 
	`≠r_p°∫dup
(
poﬁ
,Örog«mê+ 1, 
	`°æí
(progname) - 2);

492 i‡(
©å
->
cmdty≥
 =
APR_PROGRAM
 ||áâr->cmdty≥ =
APR_PROGRAM_ENV
) {

493 *
fuŒ∑th
 = 
NULL
;

494 i‡((
rv
 = 
	`≠r_fûï©h_mîge
(&
fuŒ∑th
, 
©å
->
cuºdú
, 
¥og«me
,

495 
APR_FILEPATH_NATIVE
, 
poﬁ
)Ë!
APR_SUCCESS
) {

496 i‡(
©å
->
îr‚
) {

497 
©å
->
	`îr‚
(
poﬁ
, 
rv
,

498 
	`≠r_p°rˇt
(
poﬁ
, "filepath_merge failed.",

499 " cuºdú: ", 
©å
->
cuºdú
,

500 "Örog«me: ", 
¥og«me
, 
NULL
));

502  
rv
;

504 
¥og«me
 = 
fuŒ∑th
;

514 *
fuŒ∑th
 = 
NULL
;

515 i‡((
rv
 = 
	`≠r_fûï©h_mîge
(&
fuŒ∑th
, "", 
¥og«me
,

516 
APR_FILEPATH_NATIVE
, 
poﬁ
)Ë=
APR_SUCCESS
) {

517 
¥og«me
 = 
fuŒ∑th
;

521 i‡(
	`has_•a˚
(
¥og«me
)) {

522 
¨gv0
 = 
	`≠r_p°rˇt
(
poﬁ
, "\"", 
¥og«me
, "\"", 
NULL
);

525 
¨gv0
 = 
¥og«me
;

529 
cmdlöe
 = "";

530 
i
 = 1; 
¨gs
 &&árgs[i]; ++i) {

531 i‡(
	`has_•a˚
(
¨gs
[
i
]) || !args[i][0]) {

532 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, cmdlöe, " \"", 
¨gs
[
i
], "\"", 
NULL
);

535 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, cmdlöe, " ", 
¨gs
[
i
], 
NULL
);

539 #i‚de‡
_WIN32_WCE


540 i‡(
©å
->
cmdty≥
 =
APR_SHELLCMD
 ||áâr->cmdty≥ =
APR_SHELLCMD_ENV
) {

541 *
shñlcmd
 = 
	`gëív
("COMSPEC");

542 i‡(!
shñlcmd
) {

543 i‡(
©å
->
îr‚
) {

544 
©å
->
	`îr‚
(
poﬁ
, 
APR_EINVAL
, "COMSPECÉnvar isÇot set");

546  
APR_EINVAL
;

548 i‡(
shñlcmd
[0] == '"') {

549 
¥og«me
 = 
	`≠r_p°∫dup
(
poﬁ
, 
shñlcmd
 + 1, 
	`°æí
(shellcmd) - 2);

552 
¥og«me
 = 
shñlcmd
;

553 i‡(
	`has_•a˚
(
shñlcmd
)) {

554 
shñlcmd
 = 
	`≠r_p°rˇt
(
poﬁ
, "\"", shñlcmd, "\"", 
NULL
);

559 
i
 = 
	`°æí
(
¥og«me
);

560 i‡(
i
 >11 && 
	`°rˇ£cmp
(
¥og«me
 + i - 11, "command.com") == 0) {

561 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
shñlcmd
, " /C ", 
¨gv0
, cmdlöe, 
NULL
);

564 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
shñlcmd
, " /C \"", 
¨gv0
, cmdlöe, "\"", 
NULL
);

570 #i‡
	`deföed
(
_WIN32_WCE
)

579 
i
 = 
	`°æí
(
¥og«me
);

580 i‡(
i
 >4 && (
	`°rˇ£cmp
(
¥og«me
 + i - 4, ".bat") == 0

581 || 
	`°rˇ£cmp
(
¥og«me
 + 
i
 - 4, ".cmd") == 0))

583 *
shñlcmd
 = 
	`gëív
("COMSPEC");

584 i‡(!
shñlcmd
) {

585 i‡(
©å
->
îr‚
) {

586 
©å
->
	`îr‚
(
poﬁ
, 
APR_EINVAL
, "COMSPECÉnvar isÇot set");

588  
APR_EINVAL
;

590 i‡(
shñlcmd
[0] == '"') {

591 
¥og«me
 = 
	`≠r_p°∫dup
(
poﬁ
, 
shñlcmd
 + 1, 
	`°æí
(shellcmd) - 2);

594 
¥og«me
 = 
shñlcmd
;

595 i‡(
	`has_•a˚
(
shñlcmd
)) {

596 
shñlcmd
 = 
	`≠r_p°rˇt
(
poﬁ
, "\"", shñlcmd, "\"", 
NULL
);

599 
i
 = 
	`°æí
(
¥og«me
);

600 i‡(
i
 >11 && 
	`°rˇ£cmp
(
¥og«me
 + i - 11, "command.com") == 0) {

606 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
shñlcmd
, " /C ", 
¨gv0
, cmdlöe, 
NULL
);

616 
cmdlöe
 = 
	`≠r_ˇªt_esˇ≥_¨gs
(
poﬁ
, cmdline);

621 i‡(*
¨gv0
 != '"') {

622 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
shñlcmd
, " /C \"\"", 
¨gv0
, "\"", cmdlöe, "\"", 
NULL
);

625 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
shñlcmd
, " /C \"", 
¨gv0
, cmdlöe, "\"", 
NULL
);

638 
cmdlöe
 = 
	`≠r_p°rˇt
(
poﬁ
, 
¨gv0
, cmdlöe, 
NULL
);

640 i‡(
©å
->
cmdty≥
 =
APR_PROGRAM_PATH
) {

641 
¥og«me
 = 
NULL
;

646 i‡(!
ív
 || 
©å
->
cmdty≥
 =
APR_PROGRAM_ENV
 ||

647 
©å
->
cmdty≥
 =
APR_SHELLCMD_ENV
) {

648 
pEnvBlock
 = 
NULL
;

651 
≠r_size_t
 
iEnvBlockLí
;

657 
i
 = 0;

658 
iEnvBlockLí
 = 1;

659 
ív
[
i
]) {

660 
iEnvBlockLí
 +
	`°æí
(
ív
[
i
]) + 1;

661 
i
++;

663 i‡(!
i
)

664 ++
iEnvBlockLí
;

666 #i‡
APR_HAS_UNICODE_FS


667 
IF_WIN_OS_IS_UNICODE


669 
≠r_wch¨_t
 *
pNext
;

670 
pEnvBlock
 = (*)
	`≠r_∑Œoc
(
poﬁ
, 
iEnvBlockLí
 * 2);

671 
dwCª©i⁄Fœgs
 |
CREATE_UNICODE_ENVIRONMENT
;

673 
i
 = 0;

674 
pNext
 = (
≠r_wch¨_t
*)
pEnvBlock
;

675 
ív
[
i
]) {

676 
≠r_size_t
 
ö
 = 
	`°æí
(
ív
[
i
]) + 1;

677 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
ív
[
i
], &
ö
,

678 
pNext
, &
iEnvBlockLí
))

679 !
APR_SUCCESS
) {

680 i‡(
©å
->
îr‚
) {

681 
©å
->
	`îr‚
(
poﬁ
, 
rv
,

682 
	`≠r_p°rˇt
(
poﬁ
,

684 " o¿thi†°rög: ", 
ív
[
i
], 
NULL
));

686  
rv
;

688 
pNext
 = 
	`wcschr
’Next, 
L
'\0') + 1;

689 
i
++;

691 i‡(!
i
)

692 *(
pNext
++Ë
L
'\0';

693 *
pNext
 = 
L
'\0';

696 #i‡
APR_HAS_ANSI_FS


697 
ELSE_WIN_OS_IS_ANSI


699 *
pNext
;

700 
pEnvBlock
 = (*)
	`≠r_∑Œoc
(
poﬁ
, 
iEnvBlockLí
);

702 
i
 = 0;

703 
pNext
 = 
pEnvBlock
;

704 
ív
[
i
]) {

705 
	`°r˝y
(
pNext
, 
ív
[
i
]);

706 
pNext
 = 
	`°rchr
(pNext, '\0') + 1;

707 
i
++;

709 i‡(!
i
)

710 *(
pNext
++) = '\0';

711 *
pNext
 = '\0';

716 
√w
->
övoked
 = 
cmdlöe
;

718 #i‡
APR_HAS_UNICODE_FS


719 
IF_WIN_OS_IS_UNICODE


721 
STARTUPINFOW
 
si
;

722 
DWORD
 
°dö_ª£t
 = 0;

723 
DWORD
 
°dout_ª£t
 = 0;

724 
DWORD
 
°dîr_ª£t
 = 0;

725 
≠r_wch¨_t
 *
w¥g
 = 
NULL
;

726 
≠r_wch¨_t
 *
wcmd
 = 
NULL
;

727 
≠r_wch¨_t
 *
wcwd
 = 
NULL
;

729 i‡(
¥og«me
) {

730 
≠r_size_t
 
≈rg
 = 
	`°æí
(
¥og«me
) + 1;

731 
≠r_size_t
 
nw¥g
 = 
≈rg
 + 6;

732 
w¥g
 = 
	`≠r_∑Œoc
(
poﬁ
, 
nw¥g
 * (wprg[0]));

733 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
¥og«me
, &
≈rg
, 
w¥g
, &
nw¥g
))

734 !
APR_SUCCESS
) {

735 i‡(
©å
->
îr‚
) {

736 
©å
->
	`îr‚
(
poﬁ
, 
rv
,

737 
	`≠r_p°rˇt
(
poﬁ
,

739 " o¿¥og«me: ", 
¥og«me
, 
NULL
));

741  
rv
;

745 i‡(
cmdlöe
) {

746 
≠r_size_t
 
ncmd
 = 
	`°æí
(
cmdlöe
) + 1;

747 
≠r_size_t
 
nwcmd
 = 
ncmd
;

748 
wcmd
 = 
	`≠r_∑Œoc
(
poﬁ
, 
nwcmd
 * (wcmd[0]));

749 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
cmdlöe
, &
ncmd
, 
wcmd
, &
nwcmd
))

750 !
APR_SUCCESS
) {

751 i‡(
©å
->
îr‚
) {

752 
©å
->
	`îr‚
(
poﬁ
, 
rv
,

753 
	`≠r_p°rˇt
(
poﬁ
,

755 " o¿cmdlöe: ", 
cmdlöe
, 
NULL
));

757  
rv
;

761 i‡(
©å
->
cuºdú
)

763 
≠r_size_t
 
ncwd
 = 
	`°æí
(
©å
->
cuºdú
) + 1;

764 
≠r_size_t
 
nwcwd
 = 
ncwd
;

765 
wcwd
 = 
	`≠r_∑Œoc
(
poﬁ
, 
ncwd
 * (wcwd[0]));

766 i‡((
rv
 = 
	`≠r_c⁄v_utf8_to_ucs2
(
©å
->
cuºdú
, &
ncwd
,

767 
wcwd
, &
nwcwd
))

768 !
APR_SUCCESS
) {

769 i‡(
©å
->
îr‚
) {

770 
©å
->
	`îr‚
(
poﬁ
, 
rv
,

771 
	`≠r_p°rˇt
(
poﬁ
,

773 " o¿cuºdú: ", 
©å
->
cuºdú
, 
NULL
));

775  
rv
;

779 
	`mem£t
(&
si
, 0, (si));

780 
si
.
cb
 = (si);

782 i‡(
©å
->
dëached
) {

783 
si
.
dwFœgs
 |
STARTF_USESHOWWINDOW
;

784 
si
.
wShowWödow
 = 
SW_HIDE
;

787 #i‚de‡
_WIN32_WCE


791 
	`E¡îCrôiˇlSe˘i⁄
(&
¥oc_lock
);

793 i‡((
©å
->
chûd_ö
 &&áâr->chûd_ö->
fûeh™d
)

794 || (
©å
->
chûd_out
 &&áâr->chûd_out->
fûeh™d
)

795 || (
©å
->
chûd_îr
 &&áâr->chûd_îr->
fûeh™d
))

797 
si
.
dwFœgs
 |
STARTF_USESTDHANDLES
;

799 
si
.
hStdI≈ut
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

800 i‡(
©å
->
chûd_ö
 &&áâr->chûd_ö->
fûeh™d
)

802 i‡(
	`GëH™dÀInf‹m©i⁄
(
si
.
hStdI≈ut
,

803 &
°dö_ª£t
)

804 && (
°dö_ª£t
 &
HANDLE_FLAG_INHERIT
))

805 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdI≈ut
,

806 
HANDLE_FLAG_INHERIT
, 0);

808 i‡–(
si
.
hStdI≈ut
 = 
©å
->
chûd_ö
->
fûeh™d
)

809 !
INVALID_HANDLE_VALUE
 )

810 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdI≈ut
, 
HANDLE_FLAG_INHERIT
,

811 
HANDLE_FLAG_INHERIT
);

814 
si
.
hStdOuçut
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

815 i‡(
©å
->
chûd_out
 &&áâr->chûd_out->
fûeh™d
)

817 i‡(
	`GëH™dÀInf‹m©i⁄
(
si
.
hStdOuçut
,

818 &
°dout_ª£t
)

819 && (
°dout_ª£t
 &
HANDLE_FLAG_INHERIT
))

820 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdOuçut
,

821 
HANDLE_FLAG_INHERIT
, 0);

823 i‡–(
si
.
hStdOuçut
 = 
©å
->
chûd_out
->
fûeh™d
)

824 !
INVALID_HANDLE_VALUE
 )

825 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdOuçut
, 
HANDLE_FLAG_INHERIT
,

826 
HANDLE_FLAG_INHERIT
);

829 
si
.
hStdEº‹
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

830 i‡(
©å
->
chûd_îr
 &&áâr->chûd_îr->
fûeh™d
)

832 i‡(
	`GëH™dÀInf‹m©i⁄
(
si
.
hStdEº‹
,

833 &
°dîr_ª£t
)

834 && (
°dîr_ª£t
 &
HANDLE_FLAG_INHERIT
))

835 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdEº‹
,

836 
HANDLE_FLAG_INHERIT
, 0);

838 i‡–(
si
.
hStdEº‹
 = 
©å
->
chûd_îr
->
fûeh™d
)

839 !
INVALID_HANDLE_VALUE
 )

840 
	`SëH™dÀInf‹m©i⁄
(
si
.
hStdEº‹
, 
HANDLE_FLAG_INHERIT
,

841 
HANDLE_FLAG_INHERIT
);

844 i‡(
©å
->
u£r_tokí
) {

850 
si
.
ÕDeskt›
 = 
L
"Winsta0\\Default";

851 i‡(!
	`Im≥rs⁄©eLoggedOnU£r
(
©å
->
u£r_tokí
)) {

853 
rv
 = 
	`≠r_gë_os_îr‹
();

854 
	`Clo£H™dÀ
(
©å
->
u£r_tokí
);

855 
©å
->
u£r_tokí
 = 
NULL
;

856 
	`LóveCrôiˇlSe˘i⁄
(&
¥oc_lock
);

857  
rv
;

859 
rv
 = 
	`Cª©ePro˚ssAsU£rW
(
©å
->
u£r_tokí
,

860 
w¥g
, 
wcmd
,

861 
©å
->
ß
,

862 
NULL
,

863 
TRUE
,

864 
dwCª©i⁄Fœgs
,

865 
pEnvBlock
,

866 
wcwd
,

867 &
si
, &
pi
);

869 
	`RevîtToSñf
();

872 
rv
 = 
	`Cª©ePro˚ssW
(
w¥g
, 
wcmd
,

873 
NULL
, NULL,

874 
TRUE
,

875 
dwCª©i⁄Fœgs
,

876 
pEnvBlock
,

877 
wcwd
,

878 &
si
, &
pi
);

881 i‡((
©å
->
chûd_ö
 &&áâr->chûd_ö->
fûeh™d
)

882 || (
©å
->
chûd_out
 &&áâr->chûd_out->
fûeh™d
)

883 || (
©å
->
chûd_îr
 &&áâr->chûd_îr->
fûeh™d
))

885 i‡(
°dö_ª£t
)

886 
	`SëH™dÀInf‹m©i⁄
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
),

887 
°dö_ª£t
, stdin_reset);

889 i‡(
°dout_ª£t
)

890 
	`SëH™dÀInf‹m©i⁄
(
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
),

891 
°dout_ª£t
, stdout_reset);

893 i‡(
°dîr_ª£t
)

894 
	`SëH™dÀInf‹m©i⁄
(
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
),

895 
°dîr_ª£t
, stderr_reset);

900 
	`LóveCrôiˇlSe˘i⁄
(&
¥oc_lock
);

903 
rv
 = 
	`Cª©ePro˚ssW
(
w¥g
, 
wcmd
,

904 
NULL
, NULL,

905 
FALSE
,

906 
dwCª©i⁄Fœgs
,

907 
NULL
,

908 
NULL
,

909 
NULL
,

910 &
pi
);

914 #i‡
APR_HAS_ANSI_FS


915 
ELSE_WIN_OS_IS_ANSI


917 
STARTUPINFOA
 
si
;

918 
	`mem£t
(&
si
, 0, (si));

919 
si
.
cb
 = (si);

921 i‡(
©å
->
dëached
) {

922 
si
.
dwFœgs
 |
STARTF_USESHOWWINDOW
;

923 
si
.
wShowWödow
 = 
SW_HIDE
;

926 i‡((
©å
->
chûd_ö
 &&áâr->chûd_ö->
fûeh™d
)

927 || (
©å
->
chûd_out
 &&áâr->chûd_out->
fûeh™d
)

928 || (
©å
->
chûd_îr
 &&áâr->chûd_îr->
fûeh™d
))

930 
si
.
dwFœgs
 |
STARTF_USESTDHANDLES
;

932 
si
.
hStdI≈ut
 = (
©å
->
chûd_ö
)

933 ? 
©å
->
chûd_ö
->
fûeh™d


934 : 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

936 
si
.
hStdOuçut
 = (
©å
->
chûd_out
)

937 ? 
©å
->
chûd_out
->
fûeh™d


938 : 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

940 
si
.
hStdEº‹
 = (
©å
->
chûd_îr
)

941 ? 
©å
->
chûd_îr
->
fûeh™d


942 : 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

945 
rv
 = 
	`Cª©ePro˚ssA
(
¥og«me
, 
cmdlöe
,

946 
NULL
, NULL,

947 
TRUE
,

948 
dwCª©i⁄Fœgs
,

949 
pEnvBlock
,

950 
©å
->
cuºdú
,

951 &
si
, &
pi
);

957 i‡(!
rv
)

958  
	`≠r_gë_os_îr‹
();

962 
√w
->
h¥oc
 = 
pi
.
hPro˚ss
;

963 
√w
->
pid
 = 
pi
.
dwPro˚ssId
;

965 i‡((
©å
->
chûd_ö
Ë&& (©å->chûd_ö !&
no_fûe
)) {

966 
	`≠r_fûe_˛o£
(
©å
->
chûd_ö
);

968 i‡((
©å
->
chûd_out
Ë&& (©å->chûd_ouà!&
no_fûe
)) {

969 
	`≠r_fûe_˛o£
(
©å
->
chûd_out
);

971 i‡((
©å
->
chûd_îr
Ë&& (©å->chûd_î∏!&
no_fûe
)) {

972 
	`≠r_fûe_˛o£
(
©å
->
chûd_îr
);

974 
	`Clo£H™dÀ
(
pi
.
hThªad
);

976  
APR_SUCCESS
;

977 
	}
}

979 
≠r_exô_why_e
 
	$why_‰om_exô_code
(
DWORD
 
exô
) {

983 i‡(((
exô
 & 0xC0000000) == 0xC0000000)

984 && !(
exô
 & 0x3FFF0000))

985  
APR_PROC_SIGNAL
;

987  
APR_PROC_EXIT
;

990 
	}
}

992 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô_Æl_¥ocs
(
≠r_¥oc_t
 *
¥oc
,

993 *
exôcode
,

994 
≠r_exô_why_e
 *
exôwhy
,

995 
≠r_waô_how_e
 
waôhow
,

996 
≠r_poﬁ_t
 *
p
)

998 #i‡
APR_HAS_UNICODE_FS


999 #i‚de‡
_WIN32_WCE


1000 
IF_WIN_OS_IS_UNICODE


1002 
DWORD
 
dwId
 = 
	`GëCuºítPro˚ssId
();

1003 
DWORD
 
i
;

1004 
DWORD
 
nChûds
 = 0;

1005 
DWORD
 
nA˘ive
 = 0;

1006 
HANDLE
 
ps32
;

1007 
PROCESSENTRY32W
 
≥32
;

1008 
BOOL
 
bHasM‹e
 = 
FALSE
;

1009 
DWORD
 
dwFœgs
 = 
PROCESS_QUERY_INFORMATION
;

1010 
≠r_°©us_t
 
rv
 = 
APR_EGENERAL
;

1012 i‡(
waôhow
 =
APR_WAIT
)

1013 
dwFœgs
 |
SYNCHRONIZE
;

1014 i‡(!(
ps32
 = 
	`Cª©eToﬁhñp32S«pshŸ
(
TH32CS_SNAPPROCESS
, 0))) {

1015  
	`≠r_gë_os_îr‹
();

1017 
≥32
.
dwSize
 = (
PROCESSENTRY32W
);

1018 i‡(!
	`Pro˚ss32Fú°W
(
ps32
, &
≥32
)) {

1019 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_NO_MORE_FILES
)

1020  
APR_EOF
;

1022  
	`≠r_gë_os_îr‹
();

1025 
DWORD
 
dwRëvÆ
 = 0;

1026 
DWORD
 
nH™dÀs
 = 0;

1027 
HANDLE
 
hPro˚ss
 = 
NULL
;

1028 
HANDLE
 
pH™dÀs
[
MAXIMUM_WAIT_OBJECTS
];

1030 i‡(
≥32
.
th32P¨ítPro˚ssID
 =
dwId
) {

1031 
nChûds
++;

1032 i‡((
hPro˚ss
 = 
	`O≥nPro˚ss
(
dwFœgs
, 
FALSE
,

1033 
≥32
.
th32Pro˚ssID
)Ë!
NULL
) {

1034 i‡(
	`GëExôCodePro˚ss
(
hPro˚ss
, &
dwRëvÆ
)) {

1035 i‡(
dwRëvÆ
 =
STILL_ACTIVE
) {

1036 
nA˘ive
++;

1037 i‡(
waôhow
 =
APR_WAIT
)

1038 
pH™dÀs
[
nH™dÀs
++] = 
hPro˚ss
;

1040 
	`Clo£H™dÀ
(
hPro˚ss
);

1046 
	`Clo£H™dÀ
(
hPro˚ss
);

1047 i‡(
exôcode
)

1048 *
exôcode
 = 
dwRëvÆ
;

1049 i‡(
exôwhy
)

1050 *
exôwhy
 = 
	`why_‰om_exô_code
(
dwRëvÆ
);

1051 
¥oc
->
pid
 = 
≥32
.
th32Pro˚ssID
;

1058 
rv
 = 
	`≠r_gë_os_îr‹
();

1059 
	`Clo£H™dÀ
(
hPro˚ss
);

1060 
i
 = 0; i < 
nH™dÀs
; i++)

1061 
	`Clo£H™dÀ
(
pH™dÀs
[
i
]);

1062  
rv
;

1073 } (
bHasM‹e
 = 
	`Pro˚ss32NextW
(
ps32
, &
≥32
)) &&

1074 
nH™dÀs
 < 
MAXIMUM_WAIT_OBJECTS
);

1075 i‡(
nH™dÀs
) {

1077 
DWORD
 
waôSètus
 = 
	`WaôF‹Mu…ùÀObje˘s
(
nH™dÀs
, 
pH™dÀs
,

1078 
TRUE
, 
INFINITE
);

1079 
i
 = 0; i < 
nH™dÀs
; i++)

1080 
	`Clo£H™dÀ
(
pH™dÀs
[
i
]);

1081 i‡(
waôSètus
 =
WAIT_OBJECT_0
) {

1085 
nA˘ive
 -
nH™dÀs
;

1092 } 
bHasM‹e
);

1093 
	`Clo£H™dÀ
(
ps32
);

1094 i‡(
waôhow
 !
APR_WAIT
) {

1095 i‡(
nChûds
 &&ÇChûd†=
nA˘ive
) {

1097 
rv
 = 
APR_CHILD_NOTDONE
;

1098 
¥oc
->
pid
 = -1;

1104 
rv
 = 
APR_CHILD_DONE
;

1107 i‡(
nA˘ive
 == 0) {

1108 
rv
 = 
APR_CHILD_DONE
;

1109 
¥oc
->
pid
 = -1;

1111  
rv
;

1115  
APR_ENOTIMPL
;

1116 
	}
}

1118 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_waô
(
≠r_¥oc_t
 *
¥oc
,

1119 *
exôcode
, 
≠r_exô_why_e
 *
exôwhy
,

1120 
≠r_waô_how_e
 
waôhow
)

1122 
DWORD
 
°©
;

1123 
DWORD
 
time
;

1125 i‡(
waôhow
 =
APR_WAIT
)

1126 
time
 = 
INFINITE
;

1128 
time
 = 0;

1130 i‡((
°©
 = 
	`WaôF‹SögÀObje˘
(
¥oc
->
h¥oc
, 
time
)Ë=
WAIT_OBJECT_0
) {

1131 i‡(
	`GëExôCodePro˚ss
(
¥oc
->
h¥oc
, &
°©
)) {

1132 i‡(
exôcode
)

1133 *
exôcode
 = 
°©
;

1134 i‡(
exôwhy
)

1135 *
exôwhy
 = 
	`why_‰om_exô_code
(
°©
);

1136 
	`Clo£H™dÀ
(
¥oc
->
h¥oc
);

1137 
¥oc
->
h¥oc
 = 
NULL
;

1138  
APR_CHILD_DONE
;

1141 i‡(
°©
 =
WAIT_TIMEOUT
) {

1142  
APR_CHILD_NOTDONE
;

1144  
	`≠r_gë_os_îr‹
();

1145 
	}
}

1147 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_dëach
(
d´m⁄ize
)

1149  
APR_ENOTIMPL
;

1150 
	}
}

	@threadproc/win32/signals.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_¨ch_fûe_io.h
"

19 
	~"≠r_thªad_¥oc.h
"

20 
	~"≠r_sig«l.h
"

21 
	~"≠r_fûe_io.h
"

22 
	~"≠r_gíîÆ.h
"

23 #i‡
APR_HAVE_SIGNAL_H


24 
	~<sig«l.h
>

26 
	~<°rög.h
>

27 #i‡
APR_HAVE_SYS_WAIT


28 
	~<sys/waô.h
>

36 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_¥oc_kûl
(
≠r_¥oc_t
 *
¥oc
, 
sig«l
)

38 i‡(
¥oc
->
h¥oc
 !
NULL
) {

39 i‡(
	`Tîmö©ePro˚ss
(
¥oc
->
h¥oc
, 
sig«l
) == 0) {

40  
	`≠r_gë_os_îr‹
();

45  
APR_SUCCESS
;

47  
APR_EPROC_UNKNOWN
;

48 
	}
}

50 
	$≠r_sig«l_öô
(
≠r_poﬁ_t
 *
pglobÆ
)

52 
	}
}

54 
	$APR_DECLARE
(c⁄° *Ë
	$≠r_sig«l_des¸ùti⁄_gë
(
signum
)

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_block
(
signum
)

61  
APR_ENOTIMPL
;

62 
	}
}

64 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_sig«l_unblock
(
signum
)

66  
APR_ENOTIMPL
;

67 
	}
}

	@threadproc/win32/thread.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_¨ch_thªad¥oc.h
"

19 
	~"≠r_thªad_¥oc.h
"

20 
	~"≠r_gíîÆ.h
"

21 
	~"≠r_lib.h
"

22 
	~"≠r_p‹èbÀ.h
"

23 #i‡
APR_HAVE_PROCESS_H


24 
	~<¥o˚ss.h
>

26 
	~"≠r_¨ch_misc.h
"

29 
DWORD
 
	gés_≠r_thªad
 = 0;

31 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_¸óã
(
≠r_thªad©å_t
 **
√w
,

32 
≠r_poﬁ_t
 *
poﬁ
)

34 (*
√w
Ë(
≠r_thªad©å_t
 *)
	`≠r_∑Œoc
(
poﬁ
,

35 (
≠r_thªad©å_t
));

37 i‡((*
√w
Ë=
NULL
) {

38  
APR_ENOMEM
;

41 (*
√w
)->
poﬁ
 =Öool;

42 (*
√w
)->
dëach
 = 0;

43 (*
√w
)->
°acksize
 = 0;

45  
APR_SUCCESS
;

46 
	}
}

48 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_£t
(
≠r_thªad©å_t
 *
©å
,

49 
≠r_öt32_t
 
⁄
)

51 
©å
->
dëach
 = 
⁄
;

52  
APR_SUCCESS
;

53 
	}
}

55 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_dëach_gë
(
≠r_thªad©å_t
 *
©å
)

57 i‡(
©å
->
dëach
 == 1)

58  
APR_DETACH
;

59  
APR_NOTDETACH
;

60 
	}
}

62 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_°acksize_£t
(
≠r_thªad©å_t
 *
©å
,

63 
≠r_size_t
 
°acksize
)

65 
©å
->
°acksize
 = stacksize;

66  
APR_SUCCESS
;

67 
	}
}

69 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad©å_gu¨dsize_£t
(
≠r_thªad©å_t
 *
©å
,

70 
≠r_size_t
 
size
)

72  
APR_ENOTIMPL
;

73 
	}
}

75 *
	$dummy_w‹kî
(*
›aque
)

77 
≠r_thªad_t
 *
thd
 = (≠r_thªad_à*)
›aque
;

78 
	`TlsSëVÆue
(
és_≠r_thªad
, 
thd
->
td
);

79  
thd
->
	`func
—hd,Åhd->
d©a
);

80 
	}
}

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_¸óã
(
≠r_thªad_t
 **
√w
,

83 
≠r_thªad©å_t
 *
©å
,

84 
≠r_thªad_°¨t_t
 
func
,

85 *
d©a
, 
≠r_poﬁ_t
 *
poﬁ
)

87 
≠r_°©us_t
 
°©
;

88 
ãmp
;

89 
HANDLE
 
h™dÀ
;

91 (*
√w
Ë(
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

93 i‡((*
√w
Ë=
NULL
) {

94  
APR_ENOMEM
;

97 (*
√w
)->
d©a
 = data;

98 (*
√w
)->
func
 = func;

99 (*
√w
)->
td
 = 
NULL
;

100 
°©
 = 
	`≠r_poﬁ_¸óã
(&(*
√w
)->
poﬁ
,Öool);

101 i‡(
°©
 !
APR_SUCCESS
) {

102  
°©
;

108 #i‚de‡
_WIN32_WCE


109 i‡((
h™dÀ
 = (
HANDLE
)
	`_begöthªadex
(
NULL
,

110 (
DWORD
Ë(
©å
 ?áâr->
°acksize
 : 0),

111 ((
APR_THREAD_FUNC
 *)(*))
dummy_w‹kî
,

112 (*
√w
), 0, &
ãmp
)) == 0) {

113  
	`APR_FROM_OS_ERROR
(
_do£ºno
);

116 i‡((
h™dÀ
 = 
	`Cª©eThªad
(
NULL
,

117 
©å
 &&áâr->
°acksize
 > 0 ?áttr->stacksize : 0,

118 ((
APR_THREAD_FUNC
 *)(*))
dummy_w‹kî
,

119 (*
√w
), 0, &
ãmp
)) == 0) {

120  
	`≠r_gë_os_îr‹
();

123 i‡(
©å
 &&áâr->
dëach
) {

124 
	`Clo£H™dÀ
(
h™dÀ
);

127 (*
√w
)->
td
 = 
h™dÀ
;

129  
APR_SUCCESS
;

130 
	}
}

132 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_exô
(
≠r_thªad_t
 *
thd
,

133 
≠r_°©us_t
 
ªtvÆ
)

135 
thd
->
exôvÆ
 = 
ªtvÆ
;

136 
	`≠r_poﬁ_de°roy
(
thd
->
poﬁ
);

137 
thd
->
poﬁ
 = 
NULL
;

138 #i‚de‡
_WIN32_WCE


139 
	`_ídthªadex
(0);

141 
	`ExôThªad
(0);

143  
APR_SUCCESS
;

144 
	}
}

146 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_joö
(
≠r_°©us_t
 *
ªtvÆ
,

147 
≠r_thªad_t
 *
thd
)

149 
≠r_°©us_t
 
rv
 = 
APR_SUCCESS
;

151 i‡(!
thd
->
td
) {

153  
APR_DETACH
;

155 
rv
 = 
	`WaôF‹SögÀObje˘
(
thd
->
td
, 
INFINITE
);

156 i‡–
rv
 =
WAIT_OBJECT_0
 ||Ñv =
WAIT_ABANDONED
) {

158 i‡(!
thd
->
poﬁ
)

159 *
ªtvÆ
 = 
thd
->
exôvÆ
;

161 
rv
 = 
APR_INCOMPLETE
;

164 
rv
 = 
	`≠r_gë_os_îr‹
();

165 
	`Clo£H™dÀ
(
thd
->
td
);

166 
thd
->
td
 = 
NULL
;

168  
rv
;

169 
	}
}

171 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_dëach
(
≠r_thªad_t
 *
thd
)

173 i‡(
thd
->
td
 && 
	`Clo£H™dÀ
(thd->td)) {

174 
thd
->
td
 = 
NULL
;

175  
APR_SUCCESS
;

178  
	`≠r_gë_os_îr‹
();

180 
	}
}

182 
	$APR_DECLARE
(Ë
	$≠r_thªad_yõld
()

189 #i‚de‡
_WIN32_WCE


190 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

191 
	`SwôchToThªad
();

194 
	}
}

196 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_d©a_gë
(**
d©a
, c⁄° *
key
,

197 
≠r_thªad_t
 *
thªad
)

199  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªad
->
poﬁ
);

200 
	}
}

202 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_d©a_£t
(*
d©a
, c⁄° *
key
,

203 
	$≠r_°©us_t
 (*
˛ónup
) (*),

204 
≠r_thªad_t
 *
thªad
)

206  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªad
->
poﬁ
);

207 
	}
}

210 
	$APR_DECLARE
(
≠r_os_thªad_t
Ë
	$≠r_os_thªad_cuºít
()

212 
HANDLE
 
hthªad
 = (HANDLE)
	`TlsGëVÆue
(
és_≠r_thªad
);

213 
HANDLE
 
h¥oc
;

215 i‡(
hthªad
) {

216  
hthªad
;

219 
h¥oc
 = 
	`GëCuºítPro˚ss
();

220 
hthªad
 = 
	`GëCuºítThªad
();

221 i‡(!
	`Du∂iˇãH™dÀ
(
h¥oc
, 
hthªad
,

222 
h¥oc
, &
hthªad
, 0, 
FALSE
,

223 
DUPLICATE_SAME_ACCESS
)) {

224  
NULL
;

226 
	`TlsSëVÆue
(
és_≠r_thªad
, 
hthªad
);

227  
hthªad
;

228 
	}
}

230 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_gë
(
≠r_os_thªad_t
 **
thëhd
,

231 
≠r_thªad_t
 *
thd
)

233 i‡(
thd
 =
NULL
) {

234  
APR_ENOTHREAD
;

236 *
thëhd
 = 
thd
->
td
;

237  
APR_SUCCESS
;

238 
	}
}

240 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªad_put
(
≠r_thªad_t
 **
thd
,

241 
≠r_os_thªad_t
 *
thëhd
,

242 
≠r_poﬁ_t
 *
poﬁ
)

244 i‡(
poﬁ
 =
NULL
) {

245  
APR_ENOPOOL
;

247 i‡((*
thd
Ë=
NULL
) {

248 (*
thd
Ë(
≠r_thªad_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_thread_t));

249 (*
thd
)->
poﬁ
 =Öool;

251 (*
thd
)->
td
 = 
thëhd
;

252  
APR_SUCCESS
;

253 
	}
}

255 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªad_⁄˚_öô
(
≠r_thªad_⁄˚_t
 **
c⁄åﬁ
,

256 
≠r_poﬁ_t
 *
p
)

258 (*
c⁄åﬁ
Ë
	`≠r_pˇŒoc
(
p
, (**control));

259  
APR_SUCCESS
;

260 
	}
}

262 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªad_⁄˚
(
≠r_thªad_⁄˚_t
 *
c⁄åﬁ
,

263 (*
func
)())

265 i‡(!
	`I¡îlockedExch™ge
(&
c⁄åﬁ
->
vÆue
, 1)) {

266 
	`func
();

268  
APR_SUCCESS
;

269 
	}
}

271 
	$APR_DECLARE
(Ë
	$≠r_os_thªad_equÆ
(
≠r_os_thªad_t
 
tid1
,

272 
≠r_os_thªad_t
 
tid2
)

278  (
tid1
 =
tid2
);

279 
	}
}

281 
APR_POOL_IMPLEMENT_ACCESSOR
(
thªad
)

	@threadproc/win32/threadpriv.c

17 
	~"≠r_¨ch_thªad¥oc.h
"

18 
	~"≠r_thªad_¥oc.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_î∫o.h
"

22 
	~"≠r_p‹èbÀ.h
"

24 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_¥iv©e_¸óã
(
≠r_thªadkey_t
 **
key
,

25 (*
de°
)(*),

26 
≠r_poﬁ_t
 *
poﬁ
)

28 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

29 i‡((*
key
Ë=
NULL
) {

30  
APR_ENOMEM
;

33 (*
key
)->
poﬁ
 =Öool;

35 i‡(((*
key
)->key = 
	`TlsAŒoc
()) != 0xFFFFFFFF) {

36  
APR_SUCCESS
;

38  
	`≠r_gë_os_îr‹
();

39 
	}
}

41 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_gë
(**
√w
,

42 
≠r_thªadkey_t
 *
key
)

44 i‡(((*
√w
Ë
	`TlsGëVÆue
(
key
->key))) {

45  
APR_SUCCESS
;

47  
	`≠r_gë_os_îr‹
();

48 
	}
}

50 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_£t
(*
¥iv
,

51 
≠r_thªadkey_t
 *
key
)

53 i‡(
	`TlsSëVÆue
(
key
->key, 
¥iv
)) {

54  
APR_SUCCESS
;

56  
	`≠r_gë_os_îr‹
();

57 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_¥iv©e_dñëe
(
≠r_thªadkey_t
 *
key
)

61 i‡(
	`TlsFªe
(
key
->key)) {

62  
APR_SUCCESS
;

64  
	`≠r_gë_os_îr‹
();

65 
	}
}

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_thªadkey_d©a_gë
(**
d©a
, c⁄° *
key
,

68 
≠r_thªadkey_t
 *
thªadkey
)

70  
	`≠r_poﬁ_u£rd©a_gë
(
d©a
, 
key
, 
thªadkey
->
poﬁ
);

71 
	}
}

73 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	`≠r_thªadkey_d©a_£t
(*
d©a
, c⁄° *
key
,

74 
	$≠r_°©us_t
 (*
˛ónup
)(*),

75 
≠r_thªadkey_t
 *
thªadkey
)

77  
	`≠r_poﬁ_u£rd©a_£t
(
d©a
, 
key
, 
˛ónup
, 
thªadkey
->
poﬁ
);

78 
	}
}

80 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_gë
(
≠r_os_thªadkey_t
 *
thekey
,

81 
≠r_thªadkey_t
 *
key
)

83 *
thekey
 = 
key
->key;

84  
APR_SUCCESS
;

85 
	}
}

87 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_thªadkey_put
(
≠r_thªadkey_t
 **
key
,

88 
≠r_os_thªadkey_t
 *
thekey
,

89 
≠r_poﬁ_t
 *
poﬁ
)

91 i‡(
poﬁ
 =
NULL
) {

92  
APR_ENOPOOL
;

94 i‡((*
key
Ë=
NULL
) {

95 (*
key
Ë(
≠r_thªadkey_t
 *)
	`≠r_∑Œoc
(
poﬁ
, (apr_threadkey_t));

96 (*
key
)->
poﬁ
 =Öool;

98 (*
key
)->key = *
thekey
;

99  
APR_SUCCESS
;

100 
	}
}

	@time/unix/time.c

17 
	~"≠r_p‹èbÀ.h
"

18 
	~"≠r_time.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_¥iv©e.h
"

21 
	~"≠r_°rögs.h
"

24 
	~"≠r_¨ch_öã∫Æ_time.h
"

27 #i‡
APR_HAVE_SYS_TIME_H


28 
	~<sys/time.h
>

30 #i‡
APR_HAVE_UNISTD_H


31 
	~<uni°d.h
>

33 #ifde‡
HAVE_TIME_H


34 
	~<time.h
>

38 #i‡!
deföed
(
HAVE_STRUCT_TM_TM_GMTOFF
Ë&& !deföed(
HAVE_STRUCT_TM___TM_GMTOFF
)

39 
≠r_öt32_t
 
	g£rvî_gmt_off£t
;

40 
	#NO_GMTOFF_IN_STRUCT_TM


	)

43 
≠r_öt32_t
 
	$gë_off£t
(
tm
 *tm)

45 #i‡
	`deföed
(
HAVE_STRUCT_TM_TM_GMTOFF
)

46  
tm
->
tm_gmtoff
;

47 #ñi‡
	`deföed
(
HAVE_STRUCT_TM___TM_GMTOFF
)

48  
tm
->
__tm_gmtoff
;

50 #ifde‡
NETWARE


55 i‡(
daylightOnOff
) {

56  
£rvî_gmt_off£t
 + 
daylightOff£t
;

59 i‡(
tm
->
tm_isd°
)

60  
£rvî_gmt_off£t
 + 3600;

62  
£rvî_gmt_off£t
;

64 
	}
}

66 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_™si_put
(
≠r_time_t
 *
ªsu…
,

67 
time_t
 
öput
)

69 *
ªsu…
 = (
≠r_time_t
)
öput
 * 
APR_USEC_PER_SEC
;

70  
APR_SUCCESS
;

71 
	}
}

74 
	$APR_DECLARE
(
≠r_time_t
Ë
	$≠r_time_now
()

76 
timevÆ
 
tv
;

77 
	`gëtimeofday
(&
tv
, 
NULL
);

78  
tv
.
tv_£c
 * 
APR_USEC_PER_SEC
 +Åv.
tv_u£c
;

79 
	}
}

81 
	$ex∂ode_time
(
≠r_time_exp_t
 *
xt
, 
≠r_time_t
 
t
,

82 
≠r_öt32_t
 
off£t
, 
u£_loˇ…ime
)

84 
tm
Åm;

85 
time_t
 
â
 = (
t
 / 
APR_USEC_PER_SEC
Ë+ 
off£t
;

86 
xt
->
tm_u£c
 = 
t
 % 
APR_USEC_PER_SEC
;

88 #i‡
APR_HAS_THREADS
 && 
	`deföed
 (
_POSIX_THREAD_SAFE_FUNCTIONS
)

89 i‡(
u£_loˇ…ime
)

90 
	`loˇ…ime_r
(&
â
, &
tm
);

92 
	`gmtime_r
(&
â
, &
tm
);

94 i‡(
u£_loˇ…ime
)

95 
tm
 = *
	`loˇ…ime
(&
â
);

97 
tm
 = *
	`gmtime
(&
â
);

100 
xt
->
tm_£c
 = 
tm
.tm_sec;

101 
xt
->
tm_mö
 = 
tm
.tm_min;

102 
xt
->
tm_hour
 = 
tm
.tm_hour;

103 
xt
->
tm_mday
 = 
tm
.tm_mday;

104 
xt
->
tm_m⁄
 = 
tm
.tm_mon;

105 
xt
->
tm_yór
 = 
tm
.tm_year;

106 
xt
->
tm_wday
 = 
tm
.tm_wday;

107 
xt
->
tm_yday
 = 
tm
.tm_yday;

108 
xt
->
tm_isd°
 = 
tm
.tm_isdst;

109 
xt
->
tm_gmtoff
 = 
	`gë_off£t
(&
tm
);

110 
	}
}

112 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_tz
(
≠r_time_exp_t
 *
ªsu…
,

113 
≠r_time_t
 
öput
, 
≠r_öt32_t
 
offs
)

115 
	`ex∂ode_time
(
ªsu…
, 
öput
, 
offs
, 0);

116 
ªsu…
->
tm_gmtoff
 = 
offs
;

117  
APR_SUCCESS
;

118 
	}
}

120 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gmt
(
≠r_time_exp_t
 *
ªsu…
,

121 
≠r_time_t
 
öput
)

123  
	`≠r_time_exp_tz
(
ªsu…
, 
öput
, 0);

124 
	}
}

126 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_…
(
≠r_time_exp_t
 *
ªsu…
,

127 
≠r_time_t
 
öput
)

129 #i‡
	`deföed
(
__EMX__
)

131  
	`≠r_time_exp_tz
(
ªsu…
, 
öput
, -
timez⁄e
);

133 
	`ex∂ode_time
(
ªsu…
, 
öput
, 0, 1);

134  
APR_SUCCESS
;

136 
	}
}

138 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gë
(
≠r_time_t
 *
t
, 
≠r_time_exp_t
 *
xt
)

140 
≠r_time_t
 
yór
 = 
xt
->
tm_yór
;

141 
≠r_time_t
 
days
;

142 c⁄° 
dayoff£t
[12] =

147 i‡(
xt
->
tm_m⁄
 < 2)

148 
yór
--;

152 
days
 = 
yór
 * 365 + year / 4 - year / 100 + (year / 100 + 3) / 4;

153 
days
 +
dayoff£t
[
xt
->
tm_m⁄
] + xt->
tm_mday
 - 1;

154 
days
 -= 25508;

155 
days
 = ((day†* 24 + 
xt
->
tm_hour
Ë* 60 + xt->
tm_mö
Ë* 60 + xt->
tm_£c
;

157 i‡(
days
 < 0) {

158  
APR_EBADDATE
;

160 *
t
 = 
days
 * 
APR_USEC_PER_SEC
 + 
xt
->
tm_u£c
;

161  
APR_SUCCESS
;

162 
	}
}

164 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gmt_gë
(
≠r_time_t
 *
t
,

165 
≠r_time_exp_t
 *
xt
)

167 
≠r_°©us_t
 
°©us
 = 
	`≠r_time_exp_gë
(
t
, 
xt
);

168 i‡(
°©us
 =
APR_SUCCESS
)

169 *
t
 -(
≠r_time_t
Ë
xt
->
tm_gmtoff
 * 
APR_USEC_PER_SEC
;

170  
°©us
;

171 
	}
}

173 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_imp_time_gë
(
≠r_os_imp_time_t
 **
o°ime
,

174 
≠r_time_t
 *
≠πime
)

176 (*
o°ime
)->
tv_u£c
 = *
≠πime
 % 
APR_USEC_PER_SEC
;

177 (*
o°ime
)->
tv_£c
 = *
≠πime
 / 
APR_USEC_PER_SEC
;

178  
APR_SUCCESS
;

179 
	}
}

181 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_exp_time_gë
(
≠r_os_exp_time_t
 **
o°ime
,

182 
≠r_time_exp_t
 *
≠πime
)

184 (*
o°ime
)->
tm_£c
 = 
≠πime
->tm_sec;

185 (*
o°ime
)->
tm_mö
 = 
≠πime
->tm_min;

186 (*
o°ime
)->
tm_hour
 = 
≠πime
->tm_hour;

187 (*
o°ime
)->
tm_mday
 = 
≠πime
->tm_mday;

188 (*
o°ime
)->
tm_m⁄
 = 
≠πime
->tm_mon;

189 (*
o°ime
)->
tm_yór
 = 
≠πime
->tm_year;

190 (*
o°ime
)->
tm_wday
 = 
≠πime
->tm_wday;

191 (*
o°ime
)->
tm_yday
 = 
≠πime
->tm_yday;

192 (*
o°ime
)->
tm_isd°
 = 
≠πime
->tm_isdst;

194 #i‡
	`deföed
(
HAVE_STRUCT_TM_TM_GMTOFF
)

195 (*
o°ime
)->
tm_gmtoff
 = 
≠πime
->tm_gmtoff;

196 #ñi‡
	`deföed
(
HAVE_STRUCT_TM___TM_GMTOFF
)

197 (*
o°ime
)->
__tm_gmtoff
 = 
≠πime
->
tm_gmtoff
;

200  
APR_SUCCESS
;

201 
	}
}

203 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_imp_time_put
(
≠r_time_t
 *
≠πime
,

204 
≠r_os_imp_time_t
 **
o°ime
,

205 
≠r_poﬁ_t
 *
c⁄t
)

207 *
≠πime
 = (*
o°ime
)->
tv_£c
 * 
APR_USEC_PER_SEC
 + (*o°ime)->
tv_u£c
;

208  
APR_SUCCESS
;

209 
	}
}

211 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_exp_time_put
(
≠r_time_exp_t
 *
≠πime
,

212 
≠r_os_exp_time_t
 **
o°ime
,

213 
≠r_poﬁ_t
 *
c⁄t
)

215 
≠πime
->
tm_£c
 = (*
o°ime
)->tm_sec;

216 
≠πime
->
tm_mö
 = (*
o°ime
)->tm_min;

217 
≠πime
->
tm_hour
 = (*
o°ime
)->tm_hour;

218 
≠πime
->
tm_mday
 = (*
o°ime
)->tm_mday;

219 
≠πime
->
tm_m⁄
 = (*
o°ime
)->tm_mon;

220 
≠πime
->
tm_yór
 = (*
o°ime
)->tm_year;

221 
≠πime
->
tm_wday
 = (*
o°ime
)->tm_wday;

222 
≠πime
->
tm_yday
 = (*
o°ime
)->tm_yday;

223 
≠πime
->
tm_isd°
 = (*
o°ime
)->tm_isdst;

225 #i‡
	`deföed
(
HAVE_STRUCT_TM_TM_GMTOFF
)

226 
≠πime
->
tm_gmtoff
 = (*
o°ime
)->tm_gmtoff;

227 #ñi‡
	`deföed
(
HAVE_STRUCT_TM___TM_GMTOFF
)

228 
≠πime
->
tm_gmtoff
 = (*
o°ime
)->
__tm_gmtoff
;

231  
APR_SUCCESS
;

232 
	}
}

234 
	$APR_DECLARE
(Ë
	$≠r_¶ìp
(
≠r_öãrvÆ_time_t
 
t
)

236 #ifde‡
OS2


237 
	`DosSÀï
(
t
/1000);

238 #ñi‡
	`deföed
(
BEOS
)

239 
	`¢ooze
(
t
);

240 #ñi‡
	`deföed
(
NETWARE
)

241 
	`dñay
(
t
/1000);

243 
timevÆ
 
tv
;

244 
tv
.
tv_u£c
 = 
t
 % 
APR_USEC_PER_SEC
;

245 
tv
.
tv_£c
 = 
t
 / 
APR_USEC_PER_SEC
;

246 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tv
);

248 
	}
}

250 #ifde‡
OS2


251 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os2_time_to_≠r_time
(
≠r_time_t
 *
ªsu…
,

252 
FDATE
 
os2d©e
,

253 
FTIME
 
os2time
)

255 
tm
 
tmpd©e
;

257 
	`mem£t
(&
tmpd©e
, 0, (tmpdate));

258 
tmpd©e
.
tm_hour
 = 
os2time
.
hours
;

259 
tmpd©e
.
tm_mö
 = 
os2time
.
möuãs
;

260 
tmpd©e
.
tm_£c
 = 
os2time
.
two£cs
 * 2;

262 
tmpd©e
.
tm_mday
 = 
os2d©e
.
day
;

263 
tmpd©e
.
tm_m⁄
 = 
os2d©e
.
m⁄th
 - 1;

264 
tmpd©e
.
tm_yór
 = 
os2d©e
.
yór
 + 80;

265 
tmpd©e
.
tm_isd°
 = -1;

267 *
ªsu…
 = 
	`mktime
(&
tmpd©e
Ë* 
APR_USEC_PER_SEC
;

268  
APR_SUCCESS
;

269 
	}
}

271 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_≠r_time_to_os2_time
(
FDATE
 *
os2d©e
,

272 
FTIME
 *
os2time
,

273 
≠r_time_t
 
≠πime
)

275 
time_t
 
™sôime
 = 
≠πime
 / 
APR_USEC_PER_SEC
;

276 
tm
 *
…
;

277 
…
 = 
	`loˇ…ime
(&
™sôime
);

278 
os2time
->
hours
 = 
…
->
tm_hour
;

279 
os2time
->
möuãs
 = 
…
->
tm_mö
;

280 
os2time
->
two£cs
 = 
…
->
tm_£c
 / 2;

282 
os2d©e
->
day
 = 
…
->
tm_mday
;

283 
os2d©e
->
m⁄th
 = 
…
->
tm_m⁄
 + 1;

284 
os2d©e
->
yór
 = 
…
->
tm_yór
 - 80;

285  
APR_SUCCESS
;

286 
	}
}

289 #ifde‡
NETWARE


290 
	$APR_DECLARE
(Ë
	$≠r_√tw¨e_£tup_time
()

292 
	`tz£t
();

293 
£rvî_gmt_off£t
 = -
TZONE
;

294 
	}
}

296 
	$APR_DECLARE
(Ë
	$≠r_unix_£tup_time
()

298 #ifde‡
NO_GMTOFF_IN_STRUCT_TM


322 
timevÆ
 
now
;

323 
time_t
 
t1
, 
t2
;

324 
tm
 
t
;

326 
	`gëtimeofday
(&
now
, 
NULL
);

327 
t1
 = 
now
.
tv_£c
;

328 
t2
 = 0;

330 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
)

331 
	`gmtime_r
(&
t1
, &
t
);

333 
t
 = *
	`gmtime
(&
t1
);

335 
t
.
tm_isd°
 = 0;

336 
t2
 = 
	`mktime
(&
t
);

337 
£rvî_gmt_off£t
 = (
≠r_öt32_t
Ë
	`dif·ime
(
t1
, 
t2
);

339 
	}
}

344 
	$APR_DECLARE
(Ë
	$≠r_time_˛ock_húes
(
≠r_poﬁ_t
 *
p
)

347 
	}
}

	@time/unix/timestr.c

17 
	~"≠r_p‹èbÀ.h
"

18 
	~"≠r_time.h
"

19 
	~"≠r_lib.h
"

20 
	~"≠r_¥iv©e.h
"

22 #i‡
APR_HAVE_SYS_TIME_H


23 
	~<sys/time.h
>

25 #ifde‡
HAVE_TIME_H


26 
	~<time.h
>

28 #i‡
APR_HAVE_STRING_H


29 
	~<°rög.h
>

33 
APR_DECLARE_DATA
 c⁄° 
	g≠r_m⁄th_¢ames
[12][4] =

37 
APR_DECLARE_DATA
 c⁄° 
	g≠r_day_¢ames
[7][4] =

42 
≠r_°©us_t
 
	$≠r_rfc822_d©e
(*
d©e_°r
, 
≠r_time_t
 
t
)

44 
≠r_time_exp_t
 
xt
;

45 c⁄° *
s
;

46 
ªÆ_yór
;

48 
	`≠r_time_exp_gmt
(&
xt
, 
t
);

53 
s
 = &
≠r_day_¢ames
[
xt
.
tm_wday
][0];

54 *
d©e_°r
++ = *
s
++;

55 *
d©e_°r
++ = *
s
++;

56 *
d©e_°r
++ = *
s
++;

57 *
d©e_°r
++ = ',';

58 *
d©e_°r
++ = ' ';

59 *
d©e_°r
++ = 
xt
.
tm_mday
 / 10 + '0';

60 *
d©e_°r
++ = 
xt
.
tm_mday
 % 10 + '0';

61 *
d©e_°r
++ = ' ';

62 
s
 = &
≠r_m⁄th_¢ames
[
xt
.
tm_m⁄
][0];

63 *
d©e_°r
++ = *
s
++;

64 *
d©e_°r
++ = *
s
++;

65 *
d©e_°r
++ = *
s
++;

66 *
d©e_°r
++ = ' ';

67 
ªÆ_yór
 = 1900 + 
xt
.
tm_yór
;

69 *
d©e_°r
++ = 
ªÆ_yór
 / 1000 + '0';

70 *
d©e_°r
++ = 
ªÆ_yór
 % 1000 / 100 + '0';

71 *
d©e_°r
++ = 
ªÆ_yór
 % 100 / 10 + '0';

72 *
d©e_°r
++ = 
ªÆ_yór
 % 10 + '0';

73 *
d©e_°r
++ = ' ';

74 *
d©e_°r
++ = 
xt
.
tm_hour
 / 10 + '0';

75 *
d©e_°r
++ = 
xt
.
tm_hour
 % 10 + '0';

76 *
d©e_°r
++ = ':';

77 *
d©e_°r
++ = 
xt
.
tm_mö
 / 10 + '0';

78 *
d©e_°r
++ = 
xt
.
tm_mö
 % 10 + '0';

79 *
d©e_°r
++ = ':';

80 *
d©e_°r
++ = 
xt
.
tm_£c
 / 10 + '0';

81 *
d©e_°r
++ = 
xt
.
tm_£c
 % 10 + '0';

82 *
d©e_°r
++ = ' ';

83 *
d©e_°r
++ = 'G';

84 *
d©e_°r
++ = 'M';

85 *
d©e_°r
++ = 'T';

86 *
d©e_°r
++ = 0;

87  
APR_SUCCESS
;

88 
	}
}

90 
≠r_°©us_t
 
	$≠r_˘ime
(*
d©e_°r
, 
≠r_time_t
 
t
)

92 
≠r_time_exp_t
 
xt
;

93 c⁄° *
s
;

94 
ªÆ_yór
;

99 
	`≠r_time_exp_…
(&
xt
, 
t
);

100 
s
 = &
≠r_day_¢ames
[
xt
.
tm_wday
][0];

101 *
d©e_°r
++ = *
s
++;

102 *
d©e_°r
++ = *
s
++;

103 *
d©e_°r
++ = *
s
++;

104 *
d©e_°r
++ = ' ';

105 
s
 = &
≠r_m⁄th_¢ames
[
xt
.
tm_m⁄
][0];

106 *
d©e_°r
++ = *
s
++;

107 *
d©e_°r
++ = *
s
++;

108 *
d©e_°r
++ = *
s
++;

109 *
d©e_°r
++ = ' ';

110 *
d©e_°r
++ = 
xt
.
tm_mday
 / 10 + '0';

111 *
d©e_°r
++ = 
xt
.
tm_mday
 % 10 + '0';

112 *
d©e_°r
++ = ' ';

113 *
d©e_°r
++ = 
xt
.
tm_hour
 / 10 + '0';

114 *
d©e_°r
++ = 
xt
.
tm_hour
 % 10 + '0';

115 *
d©e_°r
++ = ':';

116 *
d©e_°r
++ = 
xt
.
tm_mö
 / 10 + '0';

117 *
d©e_°r
++ = 
xt
.
tm_mö
 % 10 + '0';

118 *
d©e_°r
++ = ':';

119 *
d©e_°r
++ = 
xt
.
tm_£c
 / 10 + '0';

120 *
d©e_°r
++ = 
xt
.
tm_£c
 % 10 + '0';

121 *
d©e_°r
++ = ' ';

122 
ªÆ_yór
 = 1900 + 
xt
.
tm_yór
;

123 *
d©e_°r
++ = 
ªÆ_yór
 / 1000 + '0';

124 *
d©e_°r
++ = 
ªÆ_yór
 % 1000 / 100 + '0';

125 *
d©e_°r
++ = 
ªÆ_yór
 % 100 / 10 + '0';

126 *
d©e_°r
++ = 
ªÆ_yór
 % 10 + '0';

127 *
d©e_°r
++ = 0;

129  
APR_SUCCESS
;

130 
	}
}

132 
≠r_°©us_t
 
	$≠r_°r·ime
(*
s
, 
≠r_size_t
 *
ªtsize
,á¥_size_à
max
,

133 c⁄° *
f‹m©
, 
≠r_time_exp_t
 *
xt
)

135 
tm
Åm;

136 
	`mem£t
(&
tm
, 0, Åm);

137 
tm
.
tm_£c
 = 
xt
->tm_sec;

138 
tm
.
tm_mö
 = 
xt
->tm_min;

139 
tm
.
tm_hour
 = 
xt
->tm_hour;

140 
tm
.
tm_mday
 = 
xt
->tm_mday;

141 
tm
.
tm_m⁄
 = 
xt
->tm_mon;

142 
tm
.
tm_yór
 = 
xt
->tm_year;

143 
tm
.
tm_wday
 = 
xt
->tm_wday;

144 
tm
.
tm_yday
 = 
xt
->tm_yday;

145 
tm
.
tm_isd°
 = 
xt
->tm_isdst;

146 #i‡
	`deföed
(
HAVE_STRUCT_TM_TM_GMTOFF
)

147 
tm
.
tm_gmtoff
 = 
xt
->tm_gmtoff;

148 #ñi‡
	`deföed
(
HAVE_STRUCT_TM___TM_GMTOFF
)

149 
tm
.
__tm_gmtoff
 = 
xt
->
tm_gmtoff
;

151 (*
ªtsize
Ë
	`°r·ime
(
s
, 
max
, 
f‹m©
, &
tm
);

152  
APR_SUCCESS
;

153 
	}
}

	@time/win32/time.c

17 
	~"≠r_¨ch_©ime.h
"

18 
	~"≠r_time.h
"

19 
	~"≠r_gíîÆ.h
"

20 
	~"≠r_lib.h
"

21 
	~"≠r_p‹èbÀ.h
"

22 #i‡
APR_HAVE_TIME_H


23 
	~<time.h
>

25 #i‡
APR_HAVE_ERRNO_H


26 
	~<î∫o.h
>

28 
	~<°rög.h
>

29 
	~<wöba£.h
>

30 
	~"≠r_¨ch_misc.h
"

35 
	#IsLópYór
(
y
Ë((!(y % 4)Ë? (((y % 400Ë&& !(y % 100)Ë? 0 : 1Ë: 0)

	)

37 
DWORD
 
	$gë_loˇl_timez⁄e
(
TIME_ZONE_INFORMATION
 **
tzªsu…
)

39 
TIME_ZONE_INFORMATION
 
tz
;

40 
DWORD
 
ªsu…
;

41 
öô
 = 0;

43 i‡(!
öô
) {

44 
ªsu…
 = 
	`GëTimeZ⁄eInf‹m©i⁄
(&
tz
);

45 
öô
 = 1;

48 *
tzªsu…
 = &
tz
;

49  
ªsu…
;

50 
	}
}

52 
	$Sy°emTimeToA¥ExpTime
(
≠r_time_exp_t
 *
xt
, 
SYSTEMTIME
 *
tm
)

54 c⁄° 
dayoff£t
[12] =

60 
xt
->
tm_u£c
 = 
tm
->
wMûli£c⁄ds
 * 1000;

61 
xt
->
tm_£c
 = 
tm
->
wSec⁄d
;

62 
xt
->
tm_mö
 = 
tm
->
wMöuã
;

63 
xt
->
tm_hour
 = 
tm
->
wHour
;

64 
xt
->
tm_mday
 = 
tm
->
wDay
;

65 
xt
->
tm_m⁄
 = 
tm
->
wM⁄th
 - 1;

66 
xt
->
tm_yór
 = 
tm
->
wYór
 - 1900;

67 
xt
->
tm_wday
 = 
tm
->
wDayOfWìk
;

68 
xt
->
tm_yday
 = 
dayoff£t
[xt->
tm_m⁄
] + (
tm
->
wDay
 - 1);

69 
xt
->
tm_isd°
 = 0;

70 
xt
->
tm_gmtoff
 = 0;

75 i‡(
	`IsLópYór
(
tm
->
wYór
Ë&& (
xt
->
tm_yday
 > 58))

76 
xt
->
tm_yday
++;

77 
	}
}

79 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_™si_put
(
≠r_time_t
 *
ªsu…
,

80 
time_t
 
öput
)

82 *
ªsu…
 = (
≠r_time_t
Ë
öput
 * 
APR_USEC_PER_SEC
;

83  
APR_SUCCESS
;

84 
	}
}

87 
	$APR_DECLARE
(
≠r_time_t
Ë
	$≠r_time_now
()

89 
LONGLONG
 
≠πime
 = 0;

90 
FILETIME
 
time
;

91 #i‚de‡
_WIN32_WCE


92 
	`GëSy°emTimeAsFûeTime
(&
time
);

94 
SYSTEMTIME
 
°
;

95 
	`GëSy°emTime
(&
°
);

96 
	`Sy°emTimeToFûeTime
(&
°
, &
time
);

98 
	`FûeTimeToA¥Time
(&
≠πime
, &
time
);

99  
≠πime
;

100 
	}
}

102 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gmt
(
≠r_time_exp_t
 *
ªsu…
,

103 
≠r_time_t
 
öput
)

105 
FILETIME
 
·
;

106 
SYSTEMTIME
 
°
;

107 
	`A¥TimeToFûeTime
(&
·
, 
öput
);

108 
	`FûeTimeToSy°emTime
(&
·
, &
°
);

112 
	`Sy°emTimeToA¥ExpTime
(
ªsu…
, &
°
);

113 
ªsu…
->
tm_u£c
 = (
≠r_öt32_t
Ë(
öput
 % 
APR_USEC_PER_SEC
);

114  
APR_SUCCESS
;

115 
	}
}

117 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_tz
(
≠r_time_exp_t
 *
ªsu…
,

118 
≠r_time_t
 
öput
,

119 
≠r_öt32_t
 
offs
)

121 
FILETIME
 
·
;

122 
SYSTEMTIME
 
°
;

123 
	`A¥TimeToFûeTime
(&
·
, 
öput
 + (
offs
 * 
APR_USEC_PER_SEC
));

124 
	`FûeTimeToSy°emTime
(&
·
, &
°
);

128 
	`Sy°emTimeToA¥ExpTime
(
ªsu…
, &
°
);

129 
ªsu…
->
tm_u£c
 = (
≠r_öt32_t
Ë(
öput
 % 
APR_USEC_PER_SEC
);

130 
ªsu…
->
tm_gmtoff
 = 
offs
;

131  
APR_SUCCESS
;

132 
	}
}

134 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_…
(
≠r_time_exp_t
 *
ªsu…
,

135 
≠r_time_t
 
öput
)

137 
SYSTEMTIME
 
°
;

138 
FILETIME
 
·
, 
loˇl·
;

140 
	`A¥TimeToFûeTime
(&
·
, 
öput
);

142 #i‡
APR_HAS_UNICODE_FS
 && !
	`deföed
(
_WIN32_WCE
)

143 
IF_WIN_OS_IS_UNICODE


145 
TIME_ZONE_INFORMATION
 *
tz
;

146 
SYSTEMTIME
 
loˇl°
;

147 
≠r_time_t
 
loˇ…ime
;

149 
	`gë_loˇl_timez⁄e
(&
tz
);

151 
	`FûeTimeToSy°emTime
(&
·
, &
°
);

159 
	`Sy°emTimeToTzS≥cificLoˇlTime
(
tz
, &
°
, &
loˇl°
);

160 
	`Sy°emTimeToA¥ExpTime
(
ªsu…
, &
loˇl°
);

161 
ªsu…
->
tm_u£c
 = (
≠r_öt32_t
Ë(
öput
 % 
APR_USEC_PER_SEC
);

167 
	`Sy°emTimeToFûeTime
(&
loˇl°
, &
loˇl·
);

168 
	`FûeTimeToA¥Time
(&
loˇ…ime
, &
loˇl·
);

169 
ªsu…
->
tm_gmtoff
 = ()
	`≠r_time_£c
(
loˇ…ime
)

170 - ()
	`≠r_time_£c
(
öput
);

177 
ªsu…
->
tm_isd°
 = (ªsu…->
tm_gmtoff
 / 3600)

178 - (-(
tz
->
Büs
 +Åz->
Sènd¨dBüs
) / 60);

181 #i‡
APR_HAS_ANSI_FS
 || 
	`deföed
(
_WIN32_WCE
)

182 
ELSE_WIN_OS_IS_ANSI


184 
TIME_ZONE_INFORMATION
 
tz
;

189 
	`FûeTimeToLoˇlFûeTime
(&
·
, &
loˇl·
);

190 
	`FûeTimeToSy°emTime
(&
loˇl·
, &
°
);

191 
	`Sy°emTimeToA¥ExpTime
(
ªsu…
, &
°
);

192 
ªsu…
->
tm_u£c
 = (
≠r_öt32_t
Ë(
öput
 % 
APR_USEC_PER_SEC
);

194 
	`GëTimeZ⁄eInf‹m©i⁄
(&
tz
)) {

195 
TIME_ZONE_ID_UNKNOWN
:

196 
ªsu…
->
tm_isd°
 = 0;

200 
ªsu…
->
tm_gmtoff
 = 
tz
.
Büs
 * -60;

202 
TIME_ZONE_ID_STANDARD
:

203 
ªsu…
->
tm_isd°
 = 0;

204 
ªsu…
->
tm_gmtoff
 = (
tz
.
Büs
 +Åz.
Sènd¨dBüs
) * -60;

206 
TIME_ZONE_ID_DAYLIGHT
:

207 
ªsu…
->
tm_isd°
 = 1;

208 
ªsu…
->
tm_gmtoff
 = (
tz
.
Büs
 +Åz.
DaylightBüs
) * -60;

216  
APR_SUCCESS
;

217 
	}
}

219 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gë
(
≠r_time_t
 *
t
,

220 
≠r_time_exp_t
 *
xt
)

222 
≠r_time_t
 
yór
 = 
xt
->
tm_yór
;

223 
≠r_time_t
 
days
;

224 c⁄° 
dayoff£t
[12] =

229 i‡(
xt
->
tm_m⁄
 < 2)

230 
yór
--;

234 
days
 = 
yór
 * 365 + year / 4 - year / 100 + (year / 100 + 3) / 4;

235 
days
 +
dayoff£t
[
xt
->
tm_m⁄
] + xt->
tm_mday
 - 1;

236 
days
 -= 25508;

238 
days
 = ((day†* 24 + 
xt
->
tm_hour
Ë* 60 + xt->
tm_mö
Ë* 60 + xt->
tm_£c
;

240 i‡(
days
 < 0) {

241  
APR_EBADDATE
;

243 *
t
 = 
days
 * 
APR_USEC_PER_SEC
 + 
xt
->
tm_u£c
;

244  
APR_SUCCESS
;

245 
	}
}

247 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_time_exp_gmt_gë
(
≠r_time_t
 *
t
,

248 
≠r_time_exp_t
 *
xt
)

250 
≠r_°©us_t
 
°©us
 = 
	`≠r_time_exp_gë
(
t
, 
xt
);

251 i‡(
°©us
 =
APR_SUCCESS
)

252 *
t
 -(
≠r_time_t
Ë
xt
->
tm_gmtoff
 * 
APR_USEC_PER_SEC
;

253  
°©us
;

254 
	}
}

256 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_imp_time_gë
(
≠r_os_imp_time_t
 **
o°ime
,

257 
≠r_time_t
 *
≠πime
)

260 
	`A¥TimeToFûeTime
(*
o°ime
, *
≠πime
);

261  
APR_SUCCESS
;

262 
	}
}

264 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_exp_time_gë
(
≠r_os_exp_time_t
 **
o°ime
,

265 
≠r_time_exp_t
 *
≠ªx±ime
)

267 (*
o°ime
)->
wYór
 = 
≠ªx±ime
->
tm_yór
 + 1900;

268 (*
o°ime
)->
wM⁄th
 = 
≠ªx±ime
->
tm_m⁄
 + 1;

269 (*
o°ime
)->
wDayOfWìk
 = 
≠ªx±ime
->
tm_wday
;

270 (*
o°ime
)->
wDay
 = 
≠ªx±ime
->
tm_mday
;

271 (*
o°ime
)->
wHour
 = 
≠ªx±ime
->
tm_hour
;

272 (*
o°ime
)->
wMöuã
 = 
≠ªx±ime
->
tm_mö
;

273 (*
o°ime
)->
wSec⁄d
 = 
≠ªx±ime
->
tm_£c
;

274 (*
o°ime
)->
wMûli£c⁄ds
 = 
≠ªx±ime
->
tm_u£c
 / 1000;

275  
APR_SUCCESS
;

276 
	}
}

278 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_imp_time_put
(
≠r_time_t
 *
≠πime
,

279 
≠r_os_imp_time_t
 **
o°ime
,

280 
≠r_poﬁ_t
 *
c⁄t
)

284 
	`FûeTimeToA¥Time
(
≠πime
, *
o°ime
);

285  
APR_SUCCESS
;

286 
	}
}

288 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_os_exp_time_put
(
≠r_time_exp_t
 *
≠πime
,

289 
≠r_os_exp_time_t
 **
o°ime
,

290 
≠r_poﬁ_t
 *
c⁄t
)

295 
	`Sy°emTimeToA¥ExpTime
(
≠πime
, *
o°ime
);

296  
APR_SUCCESS
;

297 
	}
}

299 
	$APR_DECLARE
(Ë
	$≠r_¶ìp
(
≠r_öãrvÆ_time_t
 
t
)

304 
	`SÀï
((
DWORD
)(
t
 / 1000));

305 
	}
}

307 #i‡
deföed
(
_WIN32_WCE
)

309 
	$APR_DECLARE
(Ë
	$≠r_time_˛ock_húes
(
≠r_poﬁ_t
 *
p
)

312 
	}
}

314 
≠r_°©us_t
 
	$˛ock_ª°‹e
(*
un£åes
)

316 
ULONG
 
√wRes
;

317 
	`SëTimîResﬁuti⁄
((
ULONG
)(
≠r_ssize_t
)
un£åes
, 
FALSE
, &
√wRes
);

318  
APR_SUCCESS
;

319 
	}
}

321 
	$APR_DECLARE
(Ë
	$≠r_time_˛ock_húes
(
≠r_poﬁ_t
 *
p
)

323 
ULONG
 
√wRes
;

327 i‡(
	`SëTimîResﬁuti⁄
(10000, 
TRUE
, &
√wRes
) == 0 ) {

329 
	`≠r_poﬁ_˛ónup_ªgi°î
(
p
, (*)10000, 
˛ock_ª°‹e
,

330 
≠r_poﬁ_˛ónup_nuŒ
);

332 
	}
}

	@time/win32/timestr.c

17 
	~"≠r_¨ch_©ime.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_°rögs.h
"

21 #i‡
APR_HAVE_STDLIB_H


22 
	~<°dlib.h
>

25 
APR_DECLARE_DATA
 c⁄° 
	g≠r_m⁄th_¢ames
[12][4] =

29 
APR_DECLARE_DATA
 c⁄° 
	g≠r_day_¢ames
[7][4] =

34 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_rfc822_d©e
(*
d©e_°r
, 
≠r_time_t
 
t
)

36 
≠r_time_exp_t
 
xt
;

37 c⁄° *
s
;

38 
ªÆ_yór
;

40 
	`≠r_time_exp_gmt
(&
xt
, 
t
);

45 
s
 = &
≠r_day_¢ames
[
xt
.
tm_wday
][0];

46 *
d©e_°r
++ = *
s
++;

47 *
d©e_°r
++ = *
s
++;

48 *
d©e_°r
++ = *
s
++;

49 *
d©e_°r
++ = ',';

50 *
d©e_°r
++ = ' ';

51 *
d©e_°r
++ = 
xt
.
tm_mday
 / 10 + '0';

52 *
d©e_°r
++ = 
xt
.
tm_mday
 % 10 + '0';

53 *
d©e_°r
++ = ' ';

54 
s
 = &
≠r_m⁄th_¢ames
[
xt
.
tm_m⁄
][0];

55 *
d©e_°r
++ = *
s
++;

56 *
d©e_°r
++ = *
s
++;

57 *
d©e_°r
++ = *
s
++;

58 *
d©e_°r
++ = ' ';

59 
ªÆ_yór
 = 1900 + 
xt
.
tm_yór
;

61 *
d©e_°r
++ = 
ªÆ_yór
 / 1000 + '0';

62 *
d©e_°r
++ = 
ªÆ_yór
 % 1000 / 100 + '0';

63 *
d©e_°r
++ = 
ªÆ_yór
 % 100 / 10 + '0';

64 *
d©e_°r
++ = 
ªÆ_yór
 % 10 + '0';

65 *
d©e_°r
++ = ' ';

66 *
d©e_°r
++ = 
xt
.
tm_hour
 / 10 + '0';

67 *
d©e_°r
++ = 
xt
.
tm_hour
 % 10 + '0';

68 *
d©e_°r
++ = ':';

69 *
d©e_°r
++ = 
xt
.
tm_mö
 / 10 + '0';

70 *
d©e_°r
++ = 
xt
.
tm_mö
 % 10 + '0';

71 *
d©e_°r
++ = ':';

72 *
d©e_°r
++ = 
xt
.
tm_£c
 / 10 + '0';

73 *
d©e_°r
++ = 
xt
.
tm_£c
 % 10 + '0';

74 *
d©e_°r
++ = ' ';

75 *
d©e_°r
++ = 'G';

76 *
d©e_°r
++ = 'M';

77 *
d©e_°r
++ = 'T';

78 *
d©e_°r
++ = 0;

79  
APR_SUCCESS
;

80 
	}
}

82 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_˘ime
(*
d©e_°r
, 
≠r_time_t
 
t
)

84 
≠r_time_exp_t
 
xt
;

85 c⁄° *
s
;

86 
ªÆ_yór
;

91 
	`≠r_time_exp_…
(&
xt
, 
t
);

92 
s
 = &
≠r_day_¢ames
[
xt
.
tm_wday
][0];

93 *
d©e_°r
++ = *
s
++;

94 *
d©e_°r
++ = *
s
++;

95 *
d©e_°r
++ = *
s
++;

96 *
d©e_°r
++ = ' ';

97 
s
 = &
≠r_m⁄th_¢ames
[
xt
.
tm_m⁄
][0];

98 *
d©e_°r
++ = *
s
++;

99 *
d©e_°r
++ = *
s
++;

100 *
d©e_°r
++ = *
s
++;

101 *
d©e_°r
++ = ' ';

102 *
d©e_°r
++ = 
xt
.
tm_mday
 / 10 + '0';

103 *
d©e_°r
++ = 
xt
.
tm_mday
 % 10 + '0';

104 *
d©e_°r
++ = ' ';

105 *
d©e_°r
++ = 
xt
.
tm_hour
 / 10 + '0';

106 *
d©e_°r
++ = 
xt
.
tm_hour
 % 10 + '0';

107 *
d©e_°r
++ = ':';

108 *
d©e_°r
++ = 
xt
.
tm_mö
 / 10 + '0';

109 *
d©e_°r
++ = 
xt
.
tm_mö
 % 10 + '0';

110 *
d©e_°r
++ = ':';

111 *
d©e_°r
++ = 
xt
.
tm_£c
 / 10 + '0';

112 *
d©e_°r
++ = 
xt
.
tm_£c
 % 10 + '0';

113 *
d©e_°r
++ = ' ';

114 
ªÆ_yór
 = 1900 + 
xt
.
tm_yór
;

115 *
d©e_°r
++ = 
ªÆ_yór
 / 1000 + '0';

116 *
d©e_°r
++ = 
ªÆ_yór
 % 1000 / 100 + '0';

117 *
d©e_°r
++ = 
ªÆ_yór
 % 100 / 10 + '0';

118 *
d©e_°r
++ = 
ªÆ_yór
 % 10 + '0';

119 *
d©e_°r
++ = 0;

121  
APR_SUCCESS
;

122 
	}
}

125 #i‚de‡
_WIN32_WCE


127 
≠r_size_t
 
	$wö32_°r·ime_exåa
(*
s
, 
size_t
 
max
, c⁄° *
f‹m©
,

128 c⁄° 
tm
 *tm)

133 *
√w_f‹m©
 = (*Ë
	`mÆloc
(
max
 + 11);

134 
size_t
 
i
, 
j
, 
f‹m©_Àngth
 = 
	`°æí
(
f‹m©
);

135 
≠r_size_t
 
ªtu∫_vÆue
;

136 
Àngth_wrôãn
;

138 
i
 = 0, 
j
 = 0; (ò< 
f‹m©_Àngth
 && j < 
max
);) {

139 i‡(
f‹m©
[
i
] != '%') {

140 
√w_f‹m©
[
j
++] = 
f‹m©
[
i
++];

143 
f‹m©
[
i
+1]) {

145 
Àngth_wrôãn
 = 
	`≠r_¢¥ötf
(
√w_f‹m©
 + 
j
, 
max
 - j, "%2d",

146 (
tm
->
tm_yór
 + 1970)/100);

147 
j
 = (
Àngth_wrôãn
 =-1Ë? 
max
 : (j +Üength_written);

148 
i
 += 2;

153 
	`mem˝y
(
√w_f‹m©
 + 
j
, "%m/%d/%y", 8);

154 
i
 += 2;

155 
j
 += 8;

158 
	`mem˝y
(
√w_f‹m©
 + 
j
, "%I:%M:%S %p", 11);

159 
i
 += 2;

160 
j
 += 11;

163 
	`mem˝y
(
√w_f‹m©
 + 
j
, "%H:%M", 5);

164 
i
 += 2;

165 
j
 += 5;

168 
	`mem˝y
(
√w_f‹m©
 + 
j
, "%H:%M:%S", 8);

169 
i
 += 2;

170 
j
 += 8;

173 
Àngth_wrôãn
 = 
	`≠r_¢¥ötf
(
√w_f‹m©
 + 
j
, 
max
 - j, "%2d",

174 
tm
->
tm_mday
);

175 
j
 = (
Àngth_wrôãn
 =-1Ë? 
max
 : (j +Üength_written);

176 
i
 += 2;

181 
√w_f‹m©
[
j
++] = 
f‹m©
[
i
++];

182 
√w_f‹m©
[
j
++] = 
f‹m©
[
i
++];

185 i‡(
j
 >
max
) {

186 *
s
 = '\0';

187 
ªtu∫_vÆue
 = 0;

189 
√w_f‹m©
[
j
] = '\0';

190 
ªtu∫_vÆue
 = 
	`°r·ime
(
s
, 
max
, 
√w_f‹m©
, 
tm
);

192 
	`‰ì
(
√w_f‹m©
);

193  
ªtu∫_vÆue
;

194 
	}
}

199 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_°r·ime
(*
s
, 
≠r_size_t
 *
ªtsize
,

200 
≠r_size_t
 
max
, c⁄° *
f‹m©
,

201 
≠r_time_exp_t
 *
xt
)

203 #ifde‡
_WIN32_WCE


204  
APR_ENOTIMPL
;

206 
tm
Åm;

207 
	`mem£t
(&
tm
, 0, Åm);

208 
tm
.
tm_£c
 = 
xt
->tm_sec;

209 
tm
.
tm_mö
 = 
xt
->tm_min;

210 
tm
.
tm_hour
 = 
xt
->tm_hour;

211 
tm
.
tm_mday
 = 
xt
->tm_mday;

212 
tm
.
tm_m⁄
 = 
xt
->tm_mon;

213 
tm
.
tm_yór
 = 
xt
->tm_year;

214 
tm
.
tm_wday
 = 
xt
->tm_wday;

215 
tm
.
tm_yday
 = 
xt
->tm_yday;

216 
tm
.
tm_isd°
 = 
xt
->tm_isdst;

217 (*
ªtsize
Ë
	`wö32_°r·ime_exåa
(
s
, 
max
, 
f‹m©
, &
tm
);

218  
APR_SUCCESS
;

220 
	}
}

	@tools/gen_test_char.c

17 #i‡
deföed
(
WIN32
Ë|| deföed(
OS2
)

18 
	#NEED_ENHANCED_ESCAPES


	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dio.h
>

24 
	~<˘y≥.h
>

29 
	#T_ESCAPE_SHELL_CMD
 (0x01)

	)

30 
	#T_ESCAPE_PATH_SEGMENT
 (0x02)

	)

31 
	#T_OS_ESCAPE_PATH
 (0x04)

	)

32 
	#T_ESCAPE_ECHO
 (0x08)

	)

33 
	#T_ESCAPE_URLENCODED
 (0x10)

	)

34 
	#T_ESCAPE_XML
 (0x20)

	)

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
c
;

39 
Êags
;

41 
	`¥ötf
("/*Åhis file isáutomatically generated by gen_test_char, "

51 
T_ESCAPE_SHELL_CMD
,

52 
T_ESCAPE_PATH_SEGMENT
,

53 
T_OS_ESCAPE_PATH
,

54 
T_ESCAPE_ECHO
,

55 
T_ESCAPE_URLENCODED
,

56 
T_ESCAPE_XML
);

58 
c
 = 0; c < 256; ++c) {

59 
Êags
 = 0;

60 i‡(
c
 % 20 == 0)

61 
	`¥ötf
("\n ");

64 #ifde‡
NEED_ENHANCED_ESCAPES


75 i‡(
c
 && 
	`°rchr
("&;`'\"|*?~<>^()[]{}$\\\n\r%", c)) {

76 
Êags
 |
T_ESCAPE_SHELL_CMD
;

79 i‡(
c
 && 
	`°rchr
("&;`'\"|*?~<>^()[]{}$\\\n", c)) {

80 
Êags
 |
T_ESCAPE_SHELL_CMD
;

84 i‡(!
	`iß um
(
c
Ë&& !
	`°rchr
("$-_.+!*'(),:@&=~", c)) {

85 
Êags
 |
T_ESCAPE_PATH_SEGMENT
;

88 i‡(!
	`iß um
(
c
Ë&& !
	`°rchr
("$-_.+!*'(),:@&=/~", c)) {

89 
Êags
 |
T_OS_ESCAPE_PATH
;

92 i‡(!
	`iß um
(
c
Ë&& !
	`°rchr
(".-*_ ", c)) {

93 
Êags
 |
T_ESCAPE_URLENCODED
;

101 i‡(
c
 && (!
	`i•röt
(cË|| c ='"' || c ='\\' || 
	`is˙ål
(c))) {

102 
Êags
 |
T_ESCAPE_ECHO
;

105 i‡(
	`°rchr
("<>&\"", 
c
)) {

106 
Êags
 |
T_ESCAPE_XML
;

109 
	`¥ötf
("%u%c", 
Êags
, (
c
 < 255) ? ',' : ' ');

112 
	`¥ötf
("\n};\n");

115 
	}
}

	@user/netware/groupinfo.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_u£r.h
"

20 
	~"≠r_¥iv©e.h
"

21 #ifde‡
HAVE_GRP_H


22 
	~<gΩ.h
>

24 #i‡
APR_HAVE_SYS_TYPES_H


25 
	~<sys/ty≥s.h
>

27 #i‡
APR_HAVE_UNISTD_H


28 
	~<uni°d.h
>

31 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_«me_gë
(**
grou≤ame
, 
≠r_gid_t
 
groupid
,

32 
≠r_poﬁ_t
 *
p
)

34  
APR_ENOTIMPL
;

35 
	}
}

37 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_gë
(
≠r_gid_t
 *
groupid
,

38 c⁄° *
grou≤ame
, 
≠r_poﬁ_t
 *
p
)

40  
APR_ENOTIMPL
;

41 
	}
}

	@user/netware/userinfo.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_u£r.h
"

20 
	~"≠r_¥iv©e.h
"

21 #ifde‡
HAVE_PWD_H


22 
	~<pwd.h
>

24 #i‡
APR_HAVE_SYS_TYPES_H


25 
	~<sys/ty≥s.h
>

27 #i‡
APR_HAVE_UNISTD_H


28 
	~<uni°d.h
>

31 
	#PWBUF_SIZE
 512

	)

33 
≠r_°©us_t
 
	$gëpw«m_ß„
(c⁄° *
u£∫ame
,

34 
∑sswd
 *
pw
,

35 
pwbuf
[
PWBUF_SIZE
])

37  
APR_ENOTIMPL
;

38 
	}
}

40 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_homï©h_gë
(**
dú«me
,

41 c⁄° *
u£∫ame
,

42 
≠r_poﬁ_t
 *
p
)

44  
APR_ENOTIMPL
;

45 
	}
}

49 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_cuºít
(
≠r_uid_t
 *
uid
,

50 
≠r_gid_t
 *
gid
,

51 
≠r_poﬁ_t
 *
p
)

53  
APR_ENOTIMPL
;

54 
	}
}

59 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_gë
(
≠r_uid_t
 *
uid
, 
≠r_gid_t
 *
gid
,

60 c⁄° *
u£∫ame
, 
≠r_poﬁ_t
 *
p
)

62  
APR_ENOTIMPL
;

63 
	}
}

65 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_«me_gë
(**
u£∫ame
, 
≠r_uid_t
 
u£rid
,

66 
≠r_poﬁ_t
 *
p
)

68  
APR_ENOTIMPL
;

69 
	}
}

	@user/unix/groupinfo.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_u£r.h
"

20 
	~"≠r_¥iv©e.h
"

21 #ifde‡
HAVE_GRP_H


22 
	~<gΩ.h
>

24 #i‡
APR_HAVE_SYS_TYPES_H


25 
	~<sys/ty≥s.h
>

27 #i‡
APR_HAVE_UNISTD_H


28 
	~<uni°d.h
>

31 
	#GRBUF_SIZE
 8192

	)

33 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_«me_gë
(**
grou≤ame
, 
≠r_gid_t
 
groupid
,

34 
≠r_poﬁ_t
 *
p
)

36 
group
 *
gr
;

38 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
Ë&& deföed(
HAVE_GETGRGID_R
)

39 
group
 
gΩ
;

40 
grbuf
[
GRBUF_SIZE
];

41 
≠r_°©us_t
 
rv
;

44 
rv
 = 
	`gëgrgid_r
(
groupid
, &
gΩ
, 
grbuf
, (grbuf), &
gr
);

45 i‡(
rv
) {

46  
rv
;

48 i‡(
gr
 =
NULL
) {

49  
APR_ENOENT
;

52 
î∫o
 = 0;

53 i‡((
gr
 = 
	`gëgrgid
(
groupid
)Ë=
NULL
) {

54  
î∫o
 ?Éºnÿ: 
APR_ENOENT
;

57 *
grou≤ame
 = 
	`≠r_p°rdup
(
p
, 
gr
->
gr_«me
);

58  
APR_SUCCESS
;

59 
	}
}

61 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_gë
(
≠r_gid_t
 *
groupid
,

62 c⁄° *
grou≤ame
, 
≠r_poﬁ_t
 *
p
)

64 
group
 *
gr
;

66 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
Ë&& deföed(
HAVE_GETGRNAM_R
)

67 
group
 
gΩ
;

68 
grbuf
[
GRBUF_SIZE
];

69 
≠r_°©us_t
 
rv
;

72 
rv
 = 
	`gëg∫am_r
(
grou≤ame
, &
gΩ
, 
grbuf
, (grbuf), &
gr
);

73 i‡(
rv
) {

74  
rv
;

76 i‡(
gr
 =
NULL
) {

77  
APR_ENOENT
;

80 
î∫o
 = 0;

81 i‡((
gr
 = 
	`gëg∫am
(
grou≤ame
)Ë=
NULL
) {

82  
î∫o
 ?Éºnÿ: 
APR_ENOENT
;

85 *
groupid
 = 
gr
->
gr_gid
;

86  
APR_SUCCESS
;

87 
	}
}

	@user/unix/userinfo.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_u£r.h
"

20 
	~"≠r_¥iv©e.h
"

21 #ifde‡
HAVE_PWD_H


22 
	~<pwd.h
>

24 #i‡
APR_HAVE_SYS_TYPES_H


25 
	~<sys/ty≥s.h
>

27 #i‡
APR_HAVE_UNISTD_H


28 
	~<uni°d.h
>

30 
	#APR_WANT_MEMFUNC


	)

31 
	~"≠r_w™t.h
"

33 
	#PWBUF_SIZE
 2048

	)

35 
≠r_°©us_t
 
	$gëpw«m_ß„
(c⁄° *
u£∫ame
,

36 
∑sswd
 *
pw
,

37 
pwbuf
[
PWBUF_SIZE
])

39 
∑sswd
 *
pw±r
;

40 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
Ë&& deföed(
HAVE_GETPWNAM_R
)

41 
≠r_°©us_t
 
rv
;

48 
rv
 = 
	`gëpw«m_r
(
u£∫ame
, 
pw
, 
pwbuf
, 
PWBUF_SIZE
, &
pw±r
);

49 i‡(
rv
) {

50  
rv
;

52 i‡(
pw±r
 =
NULL
) {

53  
APR_ENOENT
;

58 
î∫o
 = 0;

59 i‡((
pw±r
 = 
	`gëpw«m
(
u£∫ame
)Ë!
NULL
) {

60 
	`mem˝y
(
pw
, 
pw±r
,  *pw);

63  
î∫o
 ?Éºnÿ: 
APR_ENOENT
;

66  
APR_SUCCESS
;

67 
	}
}

69 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_homï©h_gë
(**
dú«me
,

70 c⁄° *
u£∫ame
,

71 
≠r_poﬁ_t
 *
p
)

73 
∑sswd
 
pw
;

74 
pwbuf
[
PWBUF_SIZE
];

75 
≠r_°©us_t
 
rv
;

77 i‡((
rv
 = 
	`gëpw«m_ß„
(
u£∫ame
, &
pw
, 
pwbuf
)Ë!
APR_SUCCESS
)

78  
rv
;

80 #ifde‡
OS2


82 *
dú«me
 = 
	`≠r_p°rˇt
(
p
, 
pw
.
pw_dú
,Öw.
pw_«me
, 
NULL
);

84 *
dú«me
 = 
	`≠r_p°rdup
(
p
, 
pw
.
pw_dú
);

86  
APR_SUCCESS
;

87 
	}
}

91 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_cuºít
(
≠r_uid_t
 *
uid
,

92 
≠r_gid_t
 *
gid
,

93 
≠r_poﬁ_t
 *
p
)

95 *
uid
 = 
	`gëuid
();

96 *
gid
 = 
	`gëgid
();

98  
APR_SUCCESS
;

99 
	}
}

104 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_gë
(
≠r_uid_t
 *
uid
, 
≠r_gid_t
 *
gid
,

105 c⁄° *
u£∫ame
, 
≠r_poﬁ_t
 *
p
)

107 
∑sswd
 
pw
;

108 
pwbuf
[
PWBUF_SIZE
];

109 
≠r_°©us_t
 
rv
;

111 i‡((
rv
 = 
	`gëpw«m_ß„
(
u£∫ame
, &
pw
, 
pwbuf
)Ë!
APR_SUCCESS
)

112  
rv
;

114 *
uid
 = 
pw
.
pw_uid
;

115 *
gid
 = 
pw
.
pw_gid
;

117  
APR_SUCCESS
;

118 
	}
}

120 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_«me_gë
(**
u£∫ame
, 
≠r_uid_t
 
u£rid
,

121 
≠r_poﬁ_t
 *
p
)

123 
∑sswd
 *
pw
;

124 #i‡
APR_HAS_THREADS
 && 
	`deföed
(
_POSIX_THREAD_SAFE_FUNCTIONS
Ë&& deföed(
HAVE_GETPWUID_R
)

125 
∑sswd
 
pwd
;

126 
pwbuf
[
PWBUF_SIZE
];

127 
≠r_°©us_t
 
rv
;

129 
rv
 = 
	`gëpwuid_r
(
u£rid
, &
pwd
, 
pwbuf
, ’wbuf), &
pw
);

130 i‡(
rv
) {

131  
rv
;

134 i‡(
pw
 =
NULL
) {

135  
APR_ENOENT
;

139 
î∫o
 = 0;

140 i‡((
pw
 = 
	`gëpwuid
(
u£rid
)Ë=
NULL
) {

141  
î∫o
 ?Éºnÿ: 
APR_ENOENT
;

144 *
u£∫ame
 = 
	`≠r_p°rdup
(
p
, 
pw
->
pw_«me
);

145  
APR_SUCCESS
;

146 
	}
}

	@user/win32/groupinfo.c

17 
	~"≠r_°rögs.h
"

18 
	~"≠r_p‹èbÀ.h
"

19 
	~"≠r_u£r.h
"

20 
	~"≠r_¥iv©e.h
"

21 #i‡
APR_HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_gë
(
≠r_gid_t
 *
gid
,

26 c⁄° *
grou≤ame
, 
≠r_poﬁ_t
 *
p
)

28 #ifde‡
_WIN32_WCE


29  
APR_ENOTIMPL
;

31 
SID_NAME_USE
 
sidty≥
;

32 
™ydomaö
[256];

33 *
domaö
;

34 
DWORD
 
sidÀn
 = 0;

35 
DWORD
 
domÀn
 = (
™ydomaö
);

36 
DWORD
 
rv
;

37 *
pos
;

39 i‡((
pos
 = 
	`°rchr
(
grou≤ame
, '/'))) {

40 
domaö
 = 
	`≠r_p°∫dup
(
p
, 
grou≤ame
, 
pos
 - groupname);

41 
grou≤ame
 = 
pos
 + 1;

43 i‡((
pos
 = 
	`°rchr
(
grou≤ame
, '\\'))) {

44 
domaö
 = 
	`≠r_p°∫dup
(
p
, 
grou≤ame
, 
pos
 - groupname);

45 
grou≤ame
 = 
pos
 + 1;

48 
domaö
 = 
NULL
;

52 
rv
 = 
	`LookupAccou¡Name
(
domaö
, 
grou≤ame
, domaö, &
sidÀn
,

53 
™ydomaö
, &
domÀn
, &
sidty≥
);

54 i‡(
sidÀn
) {

57 *
gid
 = 
	`≠r_∑Œoc
(
p
, 
sidÀn
);

58 
domÀn
 = (
™ydomaö
);

59 
rv
 = 
	`LookupAccou¡Name
(
domaö
, 
grou≤ame
, *
gid
, &
sidÀn
,

60 
™ydomaö
, &
domÀn
, &
sidty≥
);

62 i‡(!
sidÀn
 || !
rv
) {

63  
	`≠r_gë_os_îr‹
();

65  
APR_SUCCESS
;

67 
	}
}

69 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_«me_gë
(**
grou≤ame
, 
≠r_gid_t
 
groupid
, 
≠r_poﬁ_t
 *
p
)

71 #ifde‡
_WIN32_WCE


72 *
grou≤ame
 = 
	`≠r_p°rdup
(
p
, "Administrators");

74 
SID_NAME_USE
 
ty≥
;

75 
«me
[
MAX_PATH
], 
domaö
[MAX_PATH];

76 
DWORD
 
cb«me
 = (
«me
), 
cbdomaö
 = (
domaö
);

77 i‡(!
groupid
)

78  
APR_EINVAL
;

79 i‡(!
	`LookupAccou¡Sid
(
NULL
, 
groupid
, 
«me
, &
cb«me
, 
domaö
, &
cbdomaö
, &
ty≥
))

80  
	`≠r_gë_os_îr‹
();

81 i‡(
ty≥
 !
SidTy≥Group
 &&Åy≥ !
SidTy≥WñlKnownGroup


82 && 
ty≥
 !
SidTy≥Alüs
)

83  
APR_EINVAL
;

84 *
grou≤ame
 = 
	`≠r_p°rdup
(
p
, 
«me
);

86  
APR_SUCCESS
;

87 
	}
}

89 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_gid_com∑ª
(
≠r_gid_t
 
À·
,á¥_gid_à
right
)

91 i‡(!
À·
 || !
right
)

92  
APR_EINVAL
;

93 #i‚de‡
_WIN32_WCE


94 i‡(!
	`IsVÆidSid
(
À·
Ë|| !IsVÆidSid(
right
))

95  
APR_EINVAL
;

96 i‡(!
	`EquÆSid
(
À·
, 
right
))

97  
APR_EMISMATCH
;

99  
APR_SUCCESS
;

100 
	}
}

	@user/win32/userinfo.c

17 
	~"≠r_¥iv©e.h
"

18 
	~"≠r_°rögs.h
"

19 
	~"≠r_p‹èbÀ.h
"

20 
	~"≠r_u£r.h
"

21 
	~"≠r_¨ch_fûe_io.h
"

22 #i‡
APR_HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #i‚de‡
_WIN32_WCE


33 
	$gë_sid_°rög
(*
buf
, 
≠r_size_t
 
bÀn
, 
≠r_uid_t
 
id
)

35 
PSID_IDENTIFIER_AUTHORITY
 
psü
;

36 
DWORD
 
nß
;

37 
DWORD
 
ß
;

38 
¶í
;

43 
psü
 = 
	`GëSidIdítifõrAuth‹ôy
(
id
);

44 
nß
 = (
DWORD
)(
psü
->
VÆue
[5]) + ((DWORD)(psia->Value[4]) << 8)

45 + ((
DWORD
)(
psü
->
VÆue
[3]) << 16) + ((DWORD)(psia->Value[2]) << 24);

46 
ß
 = (
DWORD
)(
psü
->
VÆue
[1]) + ((DWORD)(psia->Value[0]) << 8);

47 i‡(
ß
) {

48 
¶í
 = 
	`≠r_¢¥ötf
(
buf
, 
bÀn
, "S-%d-0x%04x%08x",

49 
SID_REVISION
, ()
ß
, ()
nß
);

51 
¶í
 = 
	`≠r_¢¥ötf
(
buf
, 
bÀn
, "S-%d-%lu",

52 
SID_REVISION
, 
nß
);

57 
nß
 = *
	`GëSidSubAuth‹ôyCou¡
(
id
);

58 
ß
 = 0; s®< 
nß
; ++sa) {

59 
¶í
 +
	`≠r_¢¥ötf
(
buf
 + sÀn, 
bÀn
 - slen, "-%lu",

60 *
	`GëSidSubAuth‹ôy
(
id
, 
ß
));

62 
	}
}

67 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_homï©h_gë
(**
dú«me
,

68 c⁄° *
u£∫ame
,

69 
≠r_poﬁ_t
 *
p
)

71 #ifde‡
_WIN32_WCE


72 *
dú«me
 = 
	`≠r_p°rdup
(
p
, "/My Documents");

73  
APR_SUCCESS
;

75 
≠r_°©us_t
 
rv
;

76 
ªgkey
[
MAX_PATH
 * 2];

77 *
fixch
;

78 
DWORD
 
keyÀn
;

79 
DWORD
 
ty≥
;

80 
HKEY
 
key
;

82 i‡(
≠r_os_Àvñ
 >
APR_WIN_NT
) {

83 
≠r_uid_t
 
uid
;

84 
≠r_gid_t
 
gid
;

86 i‡((
rv
 = 
	`≠r_uid_gë
(&
uid
, &
gid
, 
u£∫ame
, 
p
)Ë!
APR_SUCCESS
)

87  
rv
;

89 
	`°r˝y
(
ªgkey
, "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\"

91 
keyÀn
 = (
DWORD
)
	`°æí
(
ªgkey
);

92 
	`gë_sid_°rög
(
ªgkey
 + 
keyÀn
, ‘egkeyË- keyÀn, 
uid
);

95 
	`°r˝y
(
ªgkey
, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\"

97 
keyÀn
 = (
DWORD
)
	`°æí
(
ªgkey
);

98 
	`≠r_˝y°∫
(
ªgkey
 + 
keyÀn
, 
u£∫ame
, (regkey) - keylen);

101 i‡((
rv
 = 
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
ªgkey
, 0,

102 
KEY_QUERY_VALUE
, &
key
)Ë!
ERROR_SUCCESS
)

103  
	`APR_FROM_OS_ERROR
(
rv
);

105 #i‡
APR_HAS_UNICODE_FS


106 
IF_WIN_OS_IS_UNICODE


108 
keyÀn
 = (
ªgkey
);

109 
rv
 = 
	`RegQuîyVÆueExW
(
key
, 
L
"ProfûeImageP©h", 
NULL
, &
ty≥
,

110 (*)
ªgkey
, &
keyÀn
);

111 
	`RegClo£Key
(
key
);

112 i‡(
rv
 !
ERROR_SUCCESS
)

113  
	`APR_FROM_OS_ERROR
(
rv
);

114 i‡(
ty≥
 =
REG_SZ
) {

115 
ªtdú
[
MAX_PATH
];

116 i‡((
rv
 = 
	`unicode_to_utf8_∑th
(
ªtdú
, (retdir),

117 (
≠r_wch¨_t
*)
ªgkey
)Ë!
APR_SUCCESS
)

118  
rv
;

119 *
dú«me
 = 
	`≠r_p°rdup
(
p
, 
ªtdú
);

121 i‡(
ty≥
 =
REG_EXPAND_SZ
) {

122 
≠r_wch¨_t
 
∑th
[
MAX_PATH
];

123 
ªtdú
[
MAX_PATH
];

124 
	`Ex∑ndEnvú⁄mítSåögsW
((
≠r_wch¨_t
*)
ªgkey
, 
∑th
,

125 (
∑th
) / 2);

126 i‡((
rv
 = 
	`unicode_to_utf8_∑th
(
ªtdú
, ‘ëdú), 
∑th
))

127 !
APR_SUCCESS
)

128  
rv
;

129 *
dú«me
 = 
	`≠r_p°rdup
(
p
, 
ªtdú
);

132  
APR_ENOENT
;

135 #i‡
APR_HAS_ANSI_FS


136 
ELSE_WIN_OS_IS_ANSI


138 
keyÀn
 = (
ªgkey
);

139 
rv
 = 
	`RegQuîyVÆueEx
(
key
, "ProfûeImageP©h", 
NULL
, &
ty≥
,

140 (*)
ªgkey
, &
keyÀn
);

141 
	`RegClo£Key
(
key
);

142 i‡(
rv
 !
ERROR_SUCCESS
)

143  
	`APR_FROM_OS_ERROR
(
rv
);

144 i‡(
ty≥
 =
REG_SZ
) {

145 *
dú«me
 = 
	`≠r_p°rdup
(
p
, 
ªgkey
);

147 i‡(
ty≥
 =
REG_EXPAND_SZ
) {

148 
∑th
[
MAX_PATH
];

149 
	`Ex∑ndEnvú⁄mítSåögs
(
ªgkey
, 
∑th
, (path));

150 *
dú«me
 = 
	`≠r_p°rdup
(
p
, 
∑th
);

153  
APR_ENOENT
;

156 
fixch
 = *
dú«me
; *fixch; ++fixch)

157 i‡(*
fixch
 == '\\')

158 *
fixch
 = '/';

159  
APR_SUCCESS
;

161 
	}
}

163 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_cuºít
(
≠r_uid_t
 *
uid
,

164 
≠r_gid_t
 *
gid
,

165 
≠r_poﬁ_t
 *
p
)

167 #ifde‡
_WIN32_WCE


168  
APR_ENOTIMPL
;

170 
HANDLE
 
thªadtok
;

171 
DWORD
 
√eded
;

172 
TOKEN_USER
 *
u§
;

173 
TOKEN_PRIMARY_GROUP
 *
gΩ
;

175 if(!
	`O≥nPro˚ssTokí
(
	`GëCuºítPro˚ss
(), 
STANDARD_RIGHTS_READ
 | 
READ_CONTROL
 | 
TOKEN_QUERY
, &
thªadtok
)) {

176  
	`≠r_gë_os_îr‹
();

179 *
uid
 = 
NULL
;

180 i‡(!
	`GëTokíInf‹m©i⁄
(
thªadtok
, 
TokíU£r
, 
NULL
, 0, &
√eded
)

181 && (
	`GëLa°Eº‹
(Ë=
ERROR_INSUFFICIENT_BUFFER
)

182 && (
u§
 = 
	`≠r_∑Œoc
(
p
, 
√eded
))

183 && 
	`GëTokíInf‹m©i⁄
(
thªadtok
, 
TokíU£r
, 
u§
, 
√eded
, &needed))

184 *
uid
 = 
u§
->
U£r
.
Sid
;

186  
	`≠r_gë_os_îr‹
();

188 i‡(!
	`GëTokíInf‹m©i⁄
(
thªadtok
, 
TokíPrim¨yGroup
, 
NULL
, 0, &
√eded
)

189 && (
	`GëLa°Eº‹
(Ë=
ERROR_INSUFFICIENT_BUFFER
)

190 && (
gΩ
 = 
	`≠r_∑Œoc
(
p
, 
√eded
))

191 && 
	`GëTokíInf‹m©i⁄
(
thªadtok
, 
TokíPrim¨yGroup
, 
gΩ
, 
√eded
, &needed))

192 *
gid
 = 
gΩ
->
Prim¨yGroup
;

194  
	`≠r_gë_os_îr‹
();

196  
APR_SUCCESS
;

198 
	}
}

200 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_gë
(
≠r_uid_t
 *
uid
, 
≠r_gid_t
 *
gid
,

201 c⁄° *
u£∫ame
, 
≠r_poﬁ_t
 *
p
)

203 #ifde‡
_WIN32_WCE


204  
APR_ENOTIMPL
;

206 
SID_NAME_USE
 
sidty≥
;

207 
™ydomaö
[256];

208 *
domaö
;

209 
DWORD
 
sidÀn
 = 0;

210 
DWORD
 
domÀn
 = (
™ydomaö
);

211 
DWORD
 
rv
;

212 *
pos
;

214 i‡((
pos
 = 
	`°rchr
(
u£∫ame
, '/'))) {

215 
domaö
 = 
	`≠r_p°∫dup
(
p
, 
u£∫ame
, 
pos
 - username);

216 
u£∫ame
 = 
pos
 + 1;

218 i‡((
pos
 = 
	`°rchr
(
u£∫ame
, '\\'))) {

219 
domaö
 = 
	`≠r_p°∫dup
(
p
, 
u£∫ame
, 
pos
 - username);

220 
u£∫ame
 = 
pos
 + 1;

223 
domaö
 = 
NULL
;

227 
rv
 = 
	`LookupAccou¡Name
(
domaö
, 
u£∫ame
, domaö, &
sidÀn
,

228 
™ydomaö
, &
domÀn
, &
sidty≥
);

229 i‡(
sidÀn
) {

232 *
uid
 = 
	`≠r_∑Œoc
(
p
, 
sidÀn
);

233 
domÀn
 = (
™ydomaö
);

234 
rv
 = 
	`LookupAccou¡Name
(
domaö
, 
u£∫ame
, *
uid
, &
sidÀn
,

235 
™ydomaö
, &
domÀn
, &
sidty≥
);

237 i‡(!
sidÀn
 || !
rv
) {

238  
	`≠r_gë_os_îr‹
();

242 *
gid
 = 
NULL
;

243  
APR_SUCCESS
;

245 
	}
}

247 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_«me_gë
(**
u£∫ame
, 
≠r_uid_t
 
u£rid
,

248 
≠r_poﬁ_t
 *
p
)

250 #ifde‡
_WIN32_WCE


251 *
u£∫ame
 = 
	`≠r_p°rdup
(
p
, "Administrator");

252  
APR_SUCCESS
;

254 
SID_NAME_USE
 
ty≥
;

255 
«me
[
MAX_PATH
], 
domaö
[MAX_PATH];

256 
DWORD
 
cb«me
 = (
«me
), 
cbdomaö
 = (
domaö
);

257 i‡(!
u£rid
)

258  
APR_EINVAL
;

259 i‡(!
	`LookupAccou¡Sid
(
NULL
, 
u£rid
, 
«me
, &
cb«me
, 
domaö
, &
cbdomaö
, &
ty≥
))

260  
	`≠r_gë_os_îr‹
();

261 i‡(
ty≥
 !
SidTy≥U£r
 &&Åy≥ !
SidTy≥Alüs
 &&Åy≥ !
SidTy≥WñlKnownGroup
)

262  
APR_EINVAL
;

263 *
u£∫ame
 = 
	`≠r_p°rdup
(
p
, 
«me
);

264  
APR_SUCCESS
;

266 
	}
}

268 
	$APR_DECLARE
(
≠r_°©us_t
Ë
	$≠r_uid_com∑ª
(
≠r_uid_t
 
À·
,á¥_uid_à
right
)

270 i‡(!
À·
 || !
right
)

271  
APR_EINVAL
;

272 #i‚de‡
_WIN32_WCE


273 i‡(!
	`IsVÆidSid
(
À·
Ë|| !IsVÆidSid(
right
))

274  
APR_EINVAL
;

275 i‡(!
	`EquÆSid
(
À·
, 
right
))

276  
APR_EMISMATCH
;

278  
APR_SUCCESS
;

279 
	}
}

	@
1
.
0
368
8955
atomic/netware/apr_atomic.c
atomic/os390/atomic.c
atomic/unix/builtins.c
atomic/unix/ia32.c
atomic/unix/mutex.c
atomic/unix/ppc.c
atomic/unix/s390.c
atomic/unix/solaris.c
atomic/win32/apr_atomic.c
build/aplibtool.c
build/jlibtool.c
dso/aix/dso.c
dso/beos/dso.c
dso/netware/dso.c
dso/os2/dso.c
dso/os390/dso.c
dso/unix/dso.c
dso/win32/dso.c
encoding/apr_escape.c
file_io/netware/filepath.c
file_io/netware/filestat.c
file_io/netware/filesys.c
file_io/netware/flock.c
file_io/netware/mktemp.c
file_io/netware/pipe.c
file_io/os2/buffer.c
file_io/os2/copy.c
file_io/os2/dir.c
file_io/os2/dir_make_recurse.c
file_io/os2/fileacc.c
file_io/os2/filedup.c
file_io/os2/filepath.c
file_io/os2/filepath_util.c
file_io/os2/filestat.c
file_io/os2/filesys.c
file_io/os2/flock.c
file_io/os2/fullrw.c
file_io/os2/maperrorcode.c
file_io/os2/mktemp.c
file_io/os2/open.c
file_io/os2/pipe.c
file_io/os2/readwrite.c
file_io/os2/seek.c
file_io/os2/tempdir.c
file_io/unix/buffer.c
file_io/unix/copy.c
file_io/unix/dir.c
file_io/unix/fileacc.c
file_io/unix/filedup.c
file_io/unix/filepath.c
file_io/unix/filepath_util.c
file_io/unix/filestat.c
file_io/unix/flock.c
file_io/unix/fullrw.c
file_io/unix/mktemp.c
file_io/unix/open.c
file_io/unix/pipe.c
file_io/unix/readwrite.c
file_io/unix/seek.c
file_io/unix/tempdir.c
file_io/win32/buffer.c
file_io/win32/dir.c
file_io/win32/filedup.c
file_io/win32/filepath.c
file_io/win32/filestat.c
file_io/win32/filesys.c
file_io/win32/flock.c
file_io/win32/open.c
file_io/win32/pipe.c
file_io/win32/readwrite.c
file_io/win32/seek.c
include/apr_allocator.h
include/apr_atomic.h
include/apr_dso.h
include/apr_env.h
include/apr_errno.h
include/apr_escape.h
include/apr_file_info.h
include/apr_file_io.h
include/apr_fnmatch.h
include/apr_general.h
include/apr_getopt.h
include/apr_global_mutex.h
include/apr_hash.h
include/apr_inherit.h
include/apr_lib.h
include/apr_mmap.h
include/apr_network_io.h
include/apr_poll.h
include/apr_pools.h
include/apr_portable.h
include/apr_proc_mutex.h
include/apr_random.h
include/apr_ring.h
include/apr_shm.h
include/apr_signal.h
include/apr_skiplist.h
include/apr_strings.h
include/apr_support.h
include/apr_tables.h
include/apr_thread_cond.h
include/apr_thread_mutex.h
include/apr_thread_proc.h
include/apr_thread_rwlock.h
include/apr_time.h
include/apr_user.h
include/apr_version.h
include/apr_want.h
include/arch/aix/apr_arch_dso.h
include/arch/apr_private_common.h
include/arch/beos/apr_arch_dso.h
include/arch/beos/apr_arch_proc_mutex.h
include/arch/beos/apr_arch_thread_cond.h
include/arch/beos/apr_arch_thread_mutex.h
include/arch/beos/apr_arch_thread_rwlock.h
include/arch/beos/apr_arch_threadproc.h
include/arch/netware/apr_arch_dso.h
include/arch/netware/apr_arch_file_io.h
include/arch/netware/apr_arch_global_mutex.h
include/arch/netware/apr_arch_internal_time.h
include/arch/netware/apr_arch_networkio.h
include/arch/netware/apr_arch_pre_nw.h
include/arch/netware/apr_arch_proc_mutex.h
include/arch/netware/apr_arch_thread_cond.h
include/arch/netware/apr_arch_thread_mutex.h
include/arch/netware/apr_arch_thread_rwlock.h
include/arch/netware/apr_arch_threadproc.h
include/arch/netware/apr_private.h
include/arch/os2/apr_arch_dso.h
include/arch/os2/apr_arch_file_io.h
include/arch/os2/apr_arch_inherit.h
include/arch/os2/apr_arch_networkio.h
include/arch/os2/apr_arch_os2calls.h
include/arch/os2/apr_arch_proc_mutex.h
include/arch/os2/apr_arch_thread_cond.h
include/arch/os2/apr_arch_thread_mutex.h
include/arch/os2/apr_arch_thread_rwlock.h
include/arch/os2/apr_arch_threadproc.h
include/arch/os390/apr_arch_dso.h
include/arch/unix/apr_arch_atomic.h
include/arch/unix/apr_arch_dso.h
include/arch/unix/apr_arch_file_io.h
include/arch/unix/apr_arch_global_mutex.h
include/arch/unix/apr_arch_inherit.h
include/arch/unix/apr_arch_internal_time.h
include/arch/unix/apr_arch_misc.h
include/arch/unix/apr_arch_networkio.h
include/arch/unix/apr_arch_poll_private.h
include/arch/unix/apr_arch_proc_mutex.h
include/arch/unix/apr_arch_shm.h
include/arch/unix/apr_arch_thread_cond.h
include/arch/unix/apr_arch_thread_mutex.h
include/arch/unix/apr_arch_thread_rwlock.h
include/arch/unix/apr_arch_threadproc.h
include/arch/win32/apr_arch_atime.h
include/arch/win32/apr_arch_dso.h
include/arch/win32/apr_arch_file_io.h
include/arch/win32/apr_arch_inherit.h
include/arch/win32/apr_arch_misc.h
include/arch/win32/apr_arch_networkio.h
include/arch/win32/apr_arch_proc_mutex.h
include/arch/win32/apr_arch_thread_cond.h
include/arch/win32/apr_arch_thread_mutex.h
include/arch/win32/apr_arch_thread_rwlock.h
include/arch/win32/apr_arch_threadproc.h
include/arch/win32/apr_arch_utf8.h
include/arch/win32/apr_dbg_win32_handles.h
include/arch/win32/apr_private.h
locks/beos/proc_mutex.c
locks/beos/thread_cond.c
locks/beos/thread_mutex.c
locks/beos/thread_rwlock.c
locks/netware/proc_mutex.c
locks/netware/thread_cond.c
locks/netware/thread_mutex.c
locks/netware/thread_rwlock.c
locks/os2/proc_mutex.c
locks/os2/thread_cond.c
locks/os2/thread_mutex.c
locks/os2/thread_rwlock.c
locks/unix/global_mutex.c
locks/unix/proc_mutex.c
locks/unix/thread_cond.c
locks/unix/thread_mutex.c
locks/unix/thread_rwlock.c
locks/win32/proc_mutex.c
locks/win32/thread_cond.c
locks/win32/thread_mutex.c
locks/win32/thread_rwlock.c
memory/unix/apr_pools.c
misc/netware/charset.c
misc/netware/libprews.c
misc/netware/rand.c
misc/netware/start.c
misc/unix/charset.c
misc/unix/env.c
misc/unix/errorcodes.c
misc/unix/getopt.c
misc/unix/otherchild.c
misc/unix/rand.c
misc/unix/start.c
misc/unix/version.c
misc/win32/apr_app.c
misc/win32/charset.c
misc/win32/env.c
misc/win32/internal.c
misc/win32/misc.c
misc/win32/rand.c
misc/win32/start.c
misc/win32/utf8.c
mmap/unix/common.c
mmap/unix/mmap.c
mmap/win32/mmap.c
network_io/beos/sendrecv.c
network_io/beos/socketcommon.c
network_io/os2/inet_ntop.c
network_io/os2/inet_pton.c
network_io/os2/os2calls.c
network_io/os2/sendrecv.c
network_io/os2/sendrecv_udp.c
network_io/os2/sockaddr.c
network_io/os2/socket_util.c
network_io/os2/sockets.c
network_io/os2/sockopt.c
network_io/unix/inet_ntop.c
network_io/unix/inet_pton.c
network_io/unix/multicast.c
network_io/unix/sendrecv.c
network_io/unix/sockaddr.c
network_io/unix/socket_util.c
network_io/unix/sockets.c
network_io/unix/sockopt.c
network_io/win32/sendrecv.c
network_io/win32/sockets.c
network_io/win32/sockopt.c
passwd/apr_getpass.c
poll/os2/poll.c
poll/os2/pollset.c
poll/unix/epoll.c
poll/unix/kqueue.c
poll/unix/poll.c
poll/unix/pollcb.c
poll/unix/pollset.c
poll/unix/port.c
poll/unix/select.c
poll/unix/z_asio.c
random/unix/apr_random.c
random/unix/sha2.c
random/unix/sha2.h
random/unix/sha2_glue.c
shmem/beos/shm.c
shmem/os2/shm.c
shmem/unix/shm.c
shmem/win32/shm.c
strings/apr_cpystrn.c
strings/apr_fnmatch.c
strings/apr_snprintf.c
strings/apr_strings.c
strings/apr_strnatcmp.c
strings/apr_strtok.c
support/unix/waitio.c
tables/apr_hash.c
tables/apr_skiplist.c
tables/apr_tables.c
test/abts.c
test/abts.h
test/abts_tests.h
test/echod.c
test/globalmutexchild.c
test/internal/testregex.c
test/internal/testucs.c
test/mod_test.c
test/nw_misc.c
test/occhild.c
test/proc_child.c
test/readchild.c
test/sendfile.c
test/sockchild.c
test/sockperf.c
test/testapp.c
test/testargs.c
test/testatomic.c
test/testcond.c
test/testdir.c
test/testdso.c
test/testdup.c
test/testenv.c
test/testescape.c
test/testfile.c
test/testfilecopy.c
test/testfileinfo.c
test/testflock.c
test/testflock.h
test/testfmt.c
test/testfnmatch.c
test/testglobalmutex.c
test/testglobalmutex.h
test/testhash.c
test/testipsub.c
test/testlfs.c
test/testlock.c
test/testlockperf.c
test/testmmap.c
test/testmutexscope.c
test/testnames.c
test/testoc.c
test/testpath.c
test/testpipe.c
test/testpoll.c
test/testpools.c
test/testproc.c
test/testprocmutex.c
test/testrand.c
test/testshm.c
test/testshm.h
test/testshmconsumer.c
test/testshmproducer.c
test/testsleep.c
test/testsock.c
test/testsock.h
test/testsockets.c
test/testsockopt.c
test/teststr.c
test/teststrnatcmp.c
test/testtable.c
test/testtemp.c
test/testthread.c
test/testtime.c
test/testud.c
test/testuser.c
test/testutil.c
test/testutil.h
test/testvsn.c
test/tryread.c
threadproc/beos/apr_proc_stub.c
threadproc/beos/proc.c
threadproc/beos/thread.c
threadproc/beos/threadpriv.c
threadproc/beos/threadproc_common.c
threadproc/netware/proc.c
threadproc/netware/procsup.c
threadproc/netware/signals.c
threadproc/netware/thread.c
threadproc/netware/threadpriv.c
threadproc/os2/proc.c
threadproc/os2/signals.c
threadproc/os2/thread.c
threadproc/os2/threadpriv.c
threadproc/unix/proc.c
threadproc/unix/procsup.c
threadproc/unix/signals.c
threadproc/unix/thread.c
threadproc/unix/threadpriv.c
threadproc/win32/proc.c
threadproc/win32/signals.c
threadproc/win32/thread.c
threadproc/win32/threadpriv.c
time/unix/time.c
time/unix/timestr.c
time/win32/time.c
time/win32/timestr.c
tools/gen_test_char.c
user/netware/groupinfo.c
user/netware/userinfo.c
user/unix/groupinfo.c
user/unix/userinfo.c
user/win32/groupinfo.c
user/win32/userinfo.c
